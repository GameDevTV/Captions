WEBVTT
Kind: captions
Language: en

00:00:01.220 --> 00:00:07.710
Let's talk about level unlocks in Unity. So,
in this video you will dig-up your old PlayerPrefsManager,

00:00:07.710 --> 00:00:13.570
add code to handle level unlocks, and create
a simple proof of concept. So firstly, we've

00:00:13.570 --> 00:00:18.359
done Player Prefs Management before, so here's
all the project folders for the course, I've

00:00:18.359 --> 00:00:24.269
got them all organized here. Now, remember
you can get hold of all of this stuff on GitHub,

00:00:24.269 --> 00:00:27.810
so I'm not actually going to give the PlayerPrefsManager,
this time. I'm going to say if you want to

00:00:27.810 --> 00:00:33.860
get it, then to to GitHub/BenTristem, click
through down here to the Complete Unity Developer.

00:00:33.860 --> 00:00:38.430
Go find the project in question, which I don't
know what that is yet, let's have a look.

00:00:38.430 --> 00:00:46.740
playerprefsmanager.cs. Ah ha! Here we go,
I've only got one across all the projects,

00:00:46.740 --> 00:00:51.010
and that was in Glitch Garden. So, that will
be the latest version. And if you've done

00:00:51.010 --> 00:00:53.980
lots of different games and lots of projects,
which I hope you're going to do, I hope you're

00:00:53.980 --> 00:00:57.750
going to make lots and lots of games; then,
this is quite a common way of doing things.

00:00:57.750 --> 00:01:00.470
Say well, what's the latest, what's the best
version of this thing I've got? Well, for

00:01:00.470 --> 00:01:04.869
me it's this one, it's here in Glitch Garden.
The way that you can get to it is, go to www.github/CompleteUnityDeveloper,

00:01:04.869 --> 00:01:12.330
got to Glitch Garden, which is there, then,
what you can do is you can simply browse into

00:01:12.330 --> 00:01:18.920
Assets, and then, you can go through to Scripts
and you'll find PlayerPrefsManager in there.

00:01:18.920 --> 00:01:22.470
I hope! There it is! OK, so that's one way
of getting to it. The other way is you can

00:01:22.470 --> 00:01:26.479
go download the whole Glitch Garden project
here, Download Zip, on the bottom-right. or

00:01:26.479 --> 00:01:31.390
of course you could just go and get yours,
go and get your version of it. OK fantastic!

00:01:31.390 --> 00:01:35.920
So, let's get the PlayerPrefsManager over
here into our Assets. So, that's a simple

00:01:35.920 --> 00:01:40.210
job. If I click on the right thing, it's a
simple job. Here we go, PlayerPrefsManager

00:01:40.210 --> 00:01:45.210
is imported. Now, a bit of a mess in here
now. I don't really like that, so I'm going

00:01:45.210 --> 00:01:48.140
to create a new folder. Now, not scripts,
as I discussed earlier, I'm just going to

00:01:48.140 --> 00:01:54.950
do folders a different way this time. I'm
just going to call it Managers or Structure

00:01:54.950 --> 00:01:59.070
or Game. Ah, just call it Game, who cares.
I just want to show you that there's a load

00:01:59.070 --> 00:02:02.330
of different ways of naming folders, right,
and I'm going to pout all of these things

00:02:02.330 --> 00:02:06.540
in the Game Folder. So, I've got the beams.
I'm doing it by object really, the Beams,

00:02:06.540 --> 00:02:10.869
the Editor, I need an Editor Folder, because
it's the Editor Script, it's a reserved folder

00:02:10.869 --> 00:02:16.069
name you can't change that one. Game, I've
just created randomly, as you saw. Player

00:02:16.069 --> 00:02:20.630
is all the things about the Players, so scripts
and prefabs for the player, and then, Standard

00:02:20.630 --> 00:02:24.630
Assets again is a standard folder. OK cool!
Let's take a look at the PlayerPrefsManager.

00:02:24.630 --> 00:02:29.530
The idea is that we're going to orchestrate
level unlocks, so we've already kind of started

00:02:29.530 --> 00:02:35.950
this. We've added a constant, in here, string
called Level_Key, all in capitals, because

00:02:35.950 --> 00:02:41.530
it's a constant, and I just want to use a
different convention. And what we're saying

00:02:41.530 --> 00:02:48.730
here, is that we're going to pre-fix whatever
we write to the PlayerPrefsManager, with "level_unlocked_".

00:02:48.730 --> 00:02:53.470
And remember the reason we're doing this,
is because if we just throw things into PlayerPrefsManager,

00:02:53.470 --> 00:02:57.420
we don't really know what we've stored in
it, and going through this layer here, allows

00:02:57.420 --> 00:03:02.370
us to know what we've stored, so we have getter
and setter functions effectively, for all

00:03:02.370 --> 00:03:08.099
of this stuff. So, actually this work has
already been done. Look UnlockLevel (int level),

00:03:08.099 --> 00:03:14.459
and then it says that if the level is less
than the application level count, then set

00:03:14.459 --> 00:03:24.470
an integer. So, if you say UnlockLevel 2 and
there aren't at lest two levels... Actually,

00:03:24.470 --> 00:03:27.830
yeah that's right, if there aren't at least
two levels, remember that the Application.levelCount

00:03:27.830 --> 00:03:34.050
starts at 0. Let's take a look that. Unity,
File, Build Settings... You see it starts

00:03:34.050 --> 00:03:40.250
reading at 0. So, this check just said let's
make sure that there are already enough levels

00:03:40.250 --> 00:03:43.970
for you to say, let's unlock that level. If
it's not in the Build Order, you can't unlock

00:03:43.970 --> 00:03:50.989
it. So, that's what that's doing there, if
it does, it writes the integer, here into

00:03:50.989 --> 00:03:58.800
the Player prefs, as "level_unlocked_", which
is this bit here, plus the level number to

00:03:58.800 --> 00:04:05.489
a string. So, what it would be writing here,
of we said unlock level 2 would be "level_unlocked_2",

00:04:05.489 --> 00:04:10.629
and that's it really. And then, it sets that
integer to 1 for true. Pretty messy but that's

00:04:10.629 --> 00:04:14.709
the whole point of having this interface.
And then, we can ask the question, is this

00:04:14.709 --> 00:04:19.209
level unlocked? We ask it the question, and
it goes ahead and does a little bit of stuff

00:04:19.209 --> 00:04:26.120
to either return that the level is unlocked
or not, or it can complain that the level

00:04:26.120 --> 00:04:30.169
you're trying to unlock is not in the build
order. So, let's go ahead and make this work.

00:04:30.169 --> 00:04:34.630
In fact, why don't you go ahead and make this
work. So, I want you to demonstrate level

00:04:34.630 --> 00:04:38.530
unlocks to yourself. I want you to convince
yourself the system works, by adding just

00:04:38.530 --> 00:04:43.380
some very simple test level and making sure
that you can see how level unlocks work.&nbsp;I'm

00:04:43.380 --> 00:04:47.180
not going to build all the user interface
for it, of course that's relatively simple

00:04:47.180 --> 00:04:51.940
once you know that the underlying code works,
you could easily make user interface to represent

00:04:51.940 --> 00:04:57.040
level unlocks. Remember games like Rayman,
by the way, have a look at Rayman Legends,

00:04:57.040 --> 00:05:02.500
for example. It's a fantastic example of how
level unlocks can be made fun. You run around

00:05:02.500 --> 00:05:06.960
in the game space, and you actually physically
see that a level is locked and that works

00:05:06.960 --> 00:05:11.040
really well. Welcome back! So, I'm going to
cover this pretty quick, because it is basically

00:05:11.040 --> 00:05:15.479
revision. So, taking a look at our PlayerPrefsManager,
remember we chose to make all these methods

00:05:15.479 --> 00:05:20.600
static? That's because it makes sense here,
there is only one set of levels to work on

00:05:20.600 --> 00:05:24.910
it. It's pretty safe to use these things as
statics, these are global pieces of information

00:05:24.910 --> 00:05:30.280
to the entire game. So, back in Unity, what
I've done is created two new scenes and just

00:05:30.280 --> 00:05:34.860
saved them as Test and Test 2. And then, what
you need to do is for any scenes that you

00:05:34.860 --> 00:05:37.660
want, you need to make sure that they are
in the build order, of course. So, there they

00:05:37.660 --> 00:05:42.440
are, with indexes 0, 1, and 2. So, with these
static methods, we can now just call them

00:05:42.440 --> 00:05:47.860
from anywhere, so I'm going to go to the Game
Manager, for example, and in void Stat I'm

00:05:47.860 --> 00:05:51.350
just going to try a couple of things and just
convince myself very quickly that the Player

00:05:51.350 --> 00:05:55.440
Prefs management works. And then, it's up
to you in your game to go ahead and really

00:05:55.440 --> 00:06:00.490
make this work with level unlocks and a nice
user interface, etc. Again, I'm weaning you

00:06:00.490 --> 00:06:04.320
off me showing you how to do everything. So,
it's just to remind you how to do this, this

00:06:04.320 --> 00:06:13.070
has been a commonly requested thing. PlayerPrefsManager.UnlockLevel
and we could unlock level number (2); for

00:06:13.070 --> 00:06:22.240
example, and that's fine. And then, we could
print player prefs manager, and by the way

00:06:22.240 --> 00:06:26.509
I've named this PlayerPrefsManager like this,
so when you start typing PlayerPrefs and you're

00:06:26.509 --> 00:06:31.810
tempted to use it, you can immediately underneath
see that actually we've written our own PlayerPrefsManager.

00:06:31.810 --> 00:06:36.039
That's one of the reasons I start with the
same root word, to remind us to use our own.

00:06:36.039 --> 00:06:42.410
Is level unlocked 0 or 1? Let's say is level
1 unlocked? Let's print that out, and then,

00:06:42.410 --> 00:06:48.240
let's also print out is level 2 unlocked?
And you can see that with these simple Boolean

00:06:48.240 --> 00:06:52.449
statements, we could use that to do lots of
cool things. Let's just run the game and see

00:06:52.449 --> 00:06:58.080
what happens. Now, I'm going to suppress these
writing of frames, so one way of doing that

00:06:58.080 --> 00:07:02.580
is to stop or pause the game. Double click
and it will show you the very line of code,

00:07:02.580 --> 00:07:06.199
that is writing it out. So, I'm either going
to comment or in this case, I think I'll just

00:07:06.199 --> 00:07:09.389
delete. Let's go back again. So, that's the
way of getting rid of login entries quickly.

00:07:09.389 --> 00:07:13.759
You double click, it takes you right the line
that's creating them. And this is saying that

00:07:13.759 --> 00:07:19.020
the first print statement is false and the
second print statement is true. So, when we

00:07:19.020 --> 00:07:24.479
ask the question in the Game Manager, is level
1 unlocked, it says false. Level 2 is unlocked,

00:07:24.479 --> 00:07:30.729
because we've said we want it unlocked. So,
the levels are defaulting to locked or not

00:07:30.729 --> 00:07:35.759
unlocked by default, which is why level 1
is false, and then, we can unlock them. So,

00:07:35.759 --> 00:07:40.240
it's really simple to be honest, but it's
pretty handy and it's being written to persistent

00:07:40.240 --> 00:07:43.889
storage remember. That's the point of using
this PlayerPrefsManager, it's being written

00:07:43.889 --> 00:07:48.229
onto the Player's device, and this is a reasonable
thing to use level unlocks for. Now, one quick

00:07:48.229 --> 00:07:53.340
word of warning, is that player prefs are
completely un-incripted on a target device,

00:07:53.340 --> 00:07:57.630
so if it matters if you've got some sort of
community who are highly competitive, then

00:07:57.630 --> 00:08:01.509
be careful, because it's very easy for them
to go into the player prefs, find this key,

00:08:01.509 --> 00:08:05.199
and just unlock levels themselves, but that's
only for advanced kind of people who could

00:08:05.199 --> 00:08:10.190
hack the game. Probably mainly for PC, Mac,
Linux and upper platforms. OK fantastic! So,

00:08:10.190 --> 00:08:11.159
I will see you soon.



1
00:00:03,000 --> 00:00:06,000
Hi welcome back! So, in this video

2
00:00:06,000 --> 00:00:09,000
we're going to place our enemy spawners.

3
00:00:09,000 --> 00:00:12,000
Decide how spawning of enemies is going to be controlled.

4
00:00:12,000 --> 00:00:15,000
A bit of a word about the Flow Channel, that'll all come clear.

5
00:00:15,000 --> 00:00:18,000
And write scripts to control the spawning.

6
00:00:18,000 --> 00:00:21,000
So, what are our options, firstly, for controlling how

7
00:00:21,000 --> 00:00:24,000
the spawning works. And what do I mean by spawning? Well,

8
00:00:24,000 --> 00:00:27,000
what I mean by spawning, of course, is these enemies that appear

9
00:00:27,000 --> 00:00:30,000
from the right hand side. They need to start appearing

10
00:00:30,000 --> 00:00:33,000
automatically. We obviously cannot place... Well, we

11
00:00:33,000 --> 00:00:36,000
could place them all at design time, that is one of the options.

12
00:00:36,000 --> 00:00:39,000
But it would also seem there are other options,

13
00:00:39,000 --> 00:00:42,000
for getting these enemies to come in from the right hand side.

14
00:00:42,000 --> 00:00:45,000
So, one option actually would be to simply,

15
00:00:45,000 --> 00:00:48,000
at design time, zoom out here for example,

16
00:00:48,000 --> 00:00:51,000
and to go to our Attacker Prefabs

17
00:00:51,000 --> 00:00:54,000
and to predesign the

18
00:00:54,000 --> 00:00:57,000
layout of these enemies, by literally laying

19
00:00:57,000 --> 00:01:00,000
them out, all to the right hand side of the screen. This is a valid

20
00:01:00,000 --> 00:01:03,000
way of doing it, and you could store that information in the scene,

21
00:01:03,000 --> 00:01:06,000
and then, what would happen is, when you hit play,

22
00:01:06,000 --> 00:01:09,000
if you zoom out you'll see what's happening. The enemies will be coming

23
00:01:09,000 --> 00:01:12,000
in from the right hand side, in a way that is hidden to the players. They don't know what's

24
00:01:12,000 --> 00:01:15,000
coming next, but it's completely pre-organized. That

25
00:01:15,000 --> 00:01:18,000
is a perfectly valid way of doing things. And if we look at our

26
00:01:18,000 --> 00:01:21,000
slideshow, that is option one Manually Planned.

27
00:01:21,000 --> 00:01:24,000
It gives you the most control, but it

28
00:01:24,000 --> 00:01:27,000
can be very time consuming to do, and you may miss some interesting

29
00:01:27,000 --> 00:01:30,000
ideas, some interesting patterns that

30
00:01:30,000 --> 00:01:33,000
may come from more random or more procedurally generated

31
00:01:33,000 --> 00:01:36,000
spawning. So, another option is

32
00:01:36,000 --> 00:01:39,000
row two, Random Stroke Procedural At design-time.

33
00:01:39,000 --> 00:01:42,000
So, what we could do is, we could write some scripts to

34
00:01:42,000 --> 00:01:45,000
maybe even layout these guys on the right hand

35
00:01:45,000 --> 00:01:48,000
side here, and then, to play test and see how

36
00:01:48,000 --> 00:01:51,000
it's going. And then, maybe delete some and say well, actually that fox there comes

37
00:01:51,000 --> 00:01:54,000
at an annoying time, so we'll delete that

38
00:01:54,000 --> 00:01:57,000
one and, you know what, add a couple more in. So, this is a

39
00:01:57,000 --> 00:02:00,000
semi-manual process, whereby you use a computer to help

40
00:02:00,000 --> 00:02:03,000
you create, either random or semi-randomly, generated

41
00:02:03,000 --> 00:02:06,000
patterns and then, you modify them. So, the

42
00:02:06,000 --> 00:02:09,000
con of that is, it takes more time to do than runtime,

43
00:02:09,000 --> 00:02:12,000
Or you could do Random Stroke Procedural at runtime. By the way, if you're

44
00:02:12,000 --> 00:02:15,000
wondering what the difference between random and procedural is,

45
00:02:15,000 --> 00:02:18,000
in simple terms random is not repeatable. You don't know

46
00:02:18,000 --> 00:02:21,000
what you're going to get next time, whereas procedural is potentially

47
00:02:21,000 --> 00:02:24,000
repeatable and can lead to much more intricate patterns.

48
00:02:24,000 --> 00:02:27,000
If you want to find out more about procedural, look at Brice's Procedural

49
00:02:27,000 --> 00:02:30,000
Generation course. Anyway, of you do it at runtime, it's very quick

50
00:02:30,000 --> 00:02:33,000
and easy to setup, and it can help replay-ability because

51
00:02:33,000 --> 00:02:36,000
the player never knows what they're going to get. Even the designer doesn't know what they're going to get.

52
00:02:36,000 --> 00:02:39,000
Disadvantage, well it can lead to impossible play. You could

53
00:02:39,000 --> 00:02:42,000
get a series of enemies that's not possible to defend against. It's much harder

54
00:02:42,000 --> 00:02:45,000
to play tune, much harder to tweak the parameters

55
00:02:45,000 --> 00:02:48,000
so that the game is just right, in the sweet spot, which we'll talk

56
00:02:48,000 --> 00:02:51,000
about in a minute. And it can also be seen as less consistent

57
00:02:51,000 --> 00:02:54,000
or unfair, if you've got a high score maybe you just got an easy run of enemies.

58
00:02:54,000 --> 00:02:57,000
So, there's another option. That's, I think, the option we're going to

59
00:02:57,000 --> 00:03:00,000
choose here, though, because it's the easiest to setup. And

60
00:03:00,000 --> 00:03:03,000
then Adaptive, that would keep the player in the flow. Much harder to

61
00:03:03,000 --> 00:03:06,000
implement, of course, but it would keep him in the flow. Briefly, what do I

62
00:03:06,000 --> 00:03:09,000
mean by flow? So, let's just go back to the slide with this link.

63
00:03:09,000 --> 00:03:12,000
If by the way, when you go to this link this Indie Dev

64
00:03:12,000 --> 00:03:15,000
Stories blog article, it's not there for any reason, then

65
00:03:15,000 --> 00:03:18,000
it's attached to this lecture under resources as a .pdf

66
00:03:18,000 --> 00:03:21,000
for you. So, in this

67
00:03:21,000 --> 00:03:24,000
blog it talks in detail, or they talk in detail about the flow channel.

68
00:03:24,000 --> 00:03:27,000
Basically, it's matching the player's skill to their challenges, so as

69
00:03:27,000 --> 00:03:30,000
they get better at the game, you need to challenge them more. And there are lots of ways of

70
00:03:30,000 --> 00:03:33,000
doing that. One is introducing more difficult things to

71
00:03:33,000 --> 00:03:36,000
do, more enemy types, more

72
00:03:36,000 --> 00:03:39,000
defender types, etc., but there's also the idea that you could

73
00:03:39,000 --> 00:03:42,000
actually up the ante according to how they're playing at the moment

74
00:03:42,000 --> 00:03:45,000
adaptively. You could say well if they're playing really well, let's

75
00:03:45,000 --> 00:03:48,000
spawn faster. If they're playing badly, let's spawn less faster. Anyway

76
00:03:48,000 --> 00:03:51,000
lots of ideas there for you, and the basic point is here,

77
00:03:51,000 --> 00:03:54,000
that there's not just one way to do it. There are several ways, possibly more than

78
00:03:54,000 --> 00:03:57,000
there are on this table. We'd like you to try all sorts of

79
00:03:57,000 --> 00:04:00,000
different ways for yourself. So, for simplicity, we

80
00:04:00,000 --> 00:04:03,000
are going to just randomly spawn. So, I'm going to take away my Lizards

81
00:04:03,000 --> 00:04:06,000
and my Foxes. All of them actually, in this case. I'm going to keep

82
00:04:06,000 --> 00:04:09,000
the Attackers placeholder.

83
00:04:09,000 --> 00:04:12,000
In fact, I'm even going to delete the Attackers placeholder, because

84
00:04:12,000 --> 00:04:15,000
we're going to produce that Attackers placeholder,

85
00:04:15,000 --> 00:04:18,000
in exactly the same way as we did in the defenders, just

86
00:04:18,000 --> 00:04:21,000
by looking for it. OK, so let's just get this done quite quickly. What I want you

87
00:04:21,000 --> 00:04:24,000
to do is create an empty GameObject called Spawner

88
00:04:24,000 --> 00:04:27,000
or Spawners, because there's going to be

89
00:04:27,000 --> 00:04:30,000
more than one of them. Transform at the origin, just like the buttons have a

90
00:04:30,000 --> 00:04:33,000
transform at the origin. The Button placeholder does, but the buttons themselves

91
00:04:33,000 --> 00:04:36,000
also are placed in the scene. That's fine! Now, we're going to create the

92
00:04:36,000 --> 00:04:39,000
first spawner, so that's going to be childed to Spawners.

93
00:04:39,000 --> 00:04:42,000
I'm going to number my Spawners by lane,

94
00:04:42,000 --> 00:04:45,000
and so I'm just going to call this guy Lane 1. We've only got 5 lanes,

95
00:04:45,000 --> 00:04:48,000
and Lane 1 is going to be at X equals

96
00:04:48,000 --> 00:04:51,000
12, just off to the side of the play-space. And Y equals

97
00:04:51,000 --> 00:04:54,000
1, and that's why it's Lane 1, because Y equals 1.

98
00:04:54,000 --> 00:04:57,000
So, that gives us a very basic Spawner

99
00:04:57,000 --> 00:05:00,000
Prefab. It's just a GameObject. We might as well

100
00:05:00,000 --> 00:05:03,000
prefab it already, so rather than calling it Lane 1,

101
00:05:03,000 --> 00:05:06,000
there the prefab, it's actually a Spawner.

102
00:05:06,000 --> 00:05:09,000
And the benefit of this, of course, is if I now start dropping

103
00:05:09,000 --> 00:05:12,000
the other four Spawners in, then any change we make to them,

104
00:05:12,000 --> 00:05:15,000
provided we make those changes to the prefab, or apply those

105
00:05:15,000 --> 00:05:18,000
changes to the prefabs we are all good. So, it's up to you

106
00:05:18,000 --> 00:05:21,000
if you name them Spawner 1, Spawner 2, Lane 1, Lane 2,

107
00:05:21,000 --> 00:05:24,000
or you just call them Spawner and maybe use the vertical position

108
00:05:24,000 --> 00:05:27,000
in the Hierarchy to distinguish them. That's a perfectly valid way of

109
00:05:27,000 --> 00:05:30,000
doing it, in which the bottom Spawner here would be

110
00:05:30,000 --> 00:05:33,000
Lane 1 Spawner, and then, the next one up we would move to Lane 2.

111
00:05:33,000 --> 00:05:36,000
That was lucky, on then Y coordinate! And then, the next

112
00:05:36,000 --> 00:05:39,000
one up we'll move to Lane 3.

113
00:05:39,000 --> 00:05:42,000
I'm going to need to use the Inspector for that one and so on. So, you get

114
00:05:42,000 --> 00:05:45,000
the idea! They're laid out in the Hierarchy exactly the same as they are in the scene.

115
00:05:45,000 --> 00:05:48,000
Nice and easy to see, there's another option for you, so

116
00:05:48,000 --> 00:05:51,000
either way it works. I'm going to do it this way, because it's quick and easy!

117
00:05:51,000 --> 00:05:54,000
Quick and dirty! And

118
00:05:54,000 --> 00:05:57,000
Lane number 5. OK! So, I have 5

119
00:05:57,000 --> 00:06:00,000
just points here, where I can spawn from.

120
00:06:00,000 --> 00:06:03,000
So, a word on controlling

121
00:06:03,000 --> 00:06:06,000
spawning. What is responsible for deciding

122
00:06:06,000 --> 00:06:09,000
how often, on average, the enemy

123
00:06:09,000 --> 00:06:12,000
is spawned? Is it going to be the enemy themselves, like the

124
00:06:12,000 --> 00:06:15,000
attacker, or is it going to be a private variable

125
00:06:15,000 --> 00:06:18,000
or public variable on the Spawner?

126
00:06:18,000 --> 00:06:21,000
Well, either works right! If you put it on the Spawner

127
00:06:21,000 --> 00:06:24,000
then each Spawner can have a different Spawn rate, but it's a bit more complicated

128
00:06:24,000 --> 00:06:27,000
to make different attackers spawn at different rates.

129
00:06:27,000 --> 00:06:30,000
I'm going to go for modifying the attacker, myself,

130
00:06:30,000 --> 00:06:33,000
and give it a method called

131
00:06:33,000 --> 00:06:36,000
seenEverySeconds. So, it's like how rare is

132
00:06:36,000 --> 00:06:39,000
this fox? It's seen every 10 seconds on average, type of thing.

133
00:06:39,000 --> 00:06:42,000
Alright, so that's actually per lane, or

134
00:06:42,000 --> 00:06:45,000
depending on how we code it in the other side. So, what I want to do is

135
00:06:45,000 --> 00:06:48,000
just simply go into the Attacker Script and

136
00:06:48,000 --> 00:06:51,000
give attackers another property, and

137
00:06:51,000 --> 00:06:54,000
it's going to be a float and I can put it alongside currentSpeed actually

138
00:06:54,000 --> 00:06:57,000
and it can be seenEvery

139
00:06:57,000 --> 00:07:00,000
Seconds, so it's quite clear what that is.

140
00:07:00,000 --> 00:07:03,000
And that's it really.

141
00:07:03,000 --> 00:07:06,000
If you want to tell the designer

142
00:07:06,000 --> 00:07:09,000
a bit more about what this means, then you could use a Tool Tip.

143
00:07:09,000 --> 00:07:12,000
To use a Tool Tip, you'd need to put that on another line,

144
00:07:12,000 --> 00:07:15,000
so you would go private

145
00:07:15,000 --> 00:07:18,000
float and then seenEverySeconds;

146
00:07:18,000 --> 00:07:21,000
And then, if you put this annotation above, (Tooltip)

147
00:07:21,000 --> 00:07:24,000
("Average number

148
00:07:24,000 --> 00:07:27,000
of seconds between

149
00:07:27,000 --> 00:07:30,000
appearances");

150
00:07:30,000 --> 00:07:33,000
And we can leave whether that's per lane or overall

151
00:07:33,000 --> 00:07:36,000
for the moment, until we decide how we do the Attacker Script. So, you

152
00:07:36,000 --> 00:07:39,000
close your square brackets. And that Tooltip, look what it does! Pretty handy!

153
00:07:39,000 --> 00:07:42,000
If we now go into the game, and we

154
00:07:42,000 --> 00:07:45,000
look at one of our Attacker Prefabs now. Of course, because we've modified

155
00:07:45,000 --> 00:07:48,000
the script we should, in a moment, get this.

156
00:07:51,000 --> 00:07:54,000
We need to, of course, make this public.

157
00:07:54,000 --> 00:07:57,000
There you go! We need to make the float every seconds

158
00:07:57,000 --> 00:08:00,000
public, so let's just let the script percolate through.

159
00:08:00,000 --> 00:08:03,000
Here it is, Seen EverySeconds! And if you hover your mouse over it,

160
00:08:03,000 --> 00:08:06,000
look average number of seconds between appearances. Fantastic!

161
00:08:06,000 --> 00:08:09,000
So, you could say that the Lizard is seen every 5 seconds,

162
00:08:09,000 --> 00:08:12,000
for example, and the Fox is a bit more rare and is only seen every

163
00:08:12,000 --> 00:08:15,000
10. And then, you can have each prefab

164
00:08:15,000 --> 00:08:18,000
can have it's own kind of rarity value. Cool! Well, let's use that! So,

165
00:08:18,000 --> 00:08:21,000
you've learned about Tooltips there, that's the format! Square brackets and

166
00:08:21,000 --> 00:08:24,000
round brackets inside, and it pops up when you hover in the Inspector.

167
00:08:24,000 --> 00:08:27,000
Fantastic! O.K. So, in a moment, we're going to need you

168
00:08:27,000 --> 00:08:30,000
to do something, and what I'm going to want you to

169
00:08:30,000 --> 00:08:33,000
do is to write a Spawn() method,

170
00:08:33,000 --> 00:08:36,000
with this signature:

171
00:08:36,000 --> 00:08:39,000
void Spawn (GameObject myGameObject).

172
00:08:39,000 --> 00:08:42,000
And it's going to parent whatever you spawn to

173
00:08:42,000 --> 00:08:45,000
the Spawner in question and test that it works. So, you've got your

174
00:08:45,000 --> 00:08:48,000
Spawners. You just need to make a method that spawns

175
00:08:48,000 --> 00:08:51,000
Game Objects at that point.

176
00:08:51,000 --> 00:08:54,000
Don't worry about spawning them according to their spawn

177
00:08:54,000 --> 00:08:57,000
rates yet, we're going to write a second method for that. So, just spawn

178
00:08:57,000 --> 00:09:00,000
them every frame,

179
00:09:00,000 --> 00:09:03,000
for example. Just get them spawning for now. Let's go ahead and do that!

180
00:09:06,000 --> 00:09:09,000
OK, so how do we even make them spawn at all, before

181
00:09:09,000 --> 00:09:12,000
we worry about getting the spawn rates exactly right.

182
00:09:12,000 --> 00:09:15,000
So, you've seen this quite a few times now, this is

183
00:09:15,000 --> 00:09:18,000
definitely not the first time you've seen spawning working, so

184
00:09:18,000 --> 00:09:21,000
let's just get on and get it done!

185
00:09:21,000 --> 00:09:24,000
Over in Unity, we take one of the Spawners, we add a new

186
00:09:24,000 --> 00:09:27,000
script to it, and I'm just going to call it

187
00:09:27,000 --> 00:09:30,000
Spawner. Deep hey! [Laughs]

188
00:09:30,000 --> 00:09:33,000
OK. Goes untidy. I'm going to put the blinking

189
00:09:33,000 --> 00:09:36,000
script in the blinking Script Folder. [Laughs] OK

190
00:09:36,000 --> 00:09:39,000
there it goes! So, let's take a look at

191
00:09:39,000 --> 00:09:42,000
this Spawner Script. What are we going to do with it? How

192
00:09:42,000 --> 00:09:45,000
is this going to work? Well, the way that I'm going to do it is, I'm going to

193
00:09:45,000 --> 00:09:48,000
take in an array of things that it can spawn, so I'm going to have

194
00:09:48,000 --> 00:09:51,000
a public GameObject[] array called

195
00:09:51,000 --> 00:09:54,000
attackerPrefab

196
00:09:54,000 --> 00:09:57,000
Array; like that. So, that is all

197
00:09:57,000 --> 00:10:00,000
the things that spawn point can spawn. So, if we look at this Spawner,

198
00:10:00,000 --> 00:10:03,000
apply it back to the prefab, so that all of the

199
00:10:03,000 --> 00:10:06,000
Spawners have this code on it.

200
00:10:06,000 --> 00:10:09,000
We have an Attacker Prefab Array. Now, if I make

201
00:10:09,000 --> 00:10:12,000
that of size 2, look what we get! We get

202
00:10:12,000 --> 00:10:15,000
tell me two things I can spawn. Well, this lane

203
00:10:15,000 --> 00:10:18,000
can spawn foxes and lizards. Now, the benefit of this

204
00:10:18,000 --> 00:10:21,000
approach, of course, is that each lane can spawn it's own subset of attackers,

205
00:10:21,000 --> 00:10:24,000
when you have more attackers. But I'm going to have this lane spawn

206
00:10:24,000 --> 00:10:27,000
foxes and lizards, and actually, if I apply that back to the prefab all of the

207
00:10:27,000 --> 00:10:30,000
lanes are going to spawn both foxes and lizards. Well, they

208
00:10:30,000 --> 00:10:33,000
will when we write the code right. So, that's good! So, I've got an Attacker

209
00:10:33,000 --> 00:10:36,000
Prefab Array! Now, the pattern I'm going to use is

210
00:10:36,000 --> 00:10:39,000
the following. We don't need the Start () method. I don't see any need

211
00:10:39,000 --> 00:10:42,000
for that right now. But every frame, what are we going to do? Well, I'm going to say

212
00:10:42,000 --> 00:10:45,000
foreach. I love the foreach method, it just reads nicely.

213
00:10:45,000 --> 00:10:48,000
foreach (GameObject myGameObject

214
00:10:51,000 --> 00:10:54,000
in attackerPrefabArray) So, for

215
00:10:54,000 --> 00:10:57,000
each of those attackers, in our case we've got two,

216
00:10:57,000 --> 00:11:00,000
if... And I'm going to write a wishful method, for the moment.

217
00:11:00,000 --> 00:11:03,000
if (isTimeToSpawn that reads nicely

218
00:11:03,000 --> 00:11:06,000
right. If it's time to spawn (myGameObject)

219
00:11:06,000 --> 00:11:09,000
this particular attacker...

220
00:11:09,000 --> 00:11:12,000
Actually that's a

221
00:11:12,000 --> 00:11:15,000
good name isn't it? thisAttacker, let's rename it!

222
00:11:15,000 --> 00:11:18,000
There you go! foreach (GameObject this Attacker

223
00:11:18,000 --> 00:11:21,000
in attackerPrefabArray), if it's time to spawn this attacker,

224
00:11:21,000 --> 00:11:24,000
then Spawn

225
00:11:27,000 --> 00:11:30,000
(thisAttacker);

226
00:11:30,000 --> 00:11:33,000
Cool! Alright, so

227
00:11:33,000 --> 00:11:36,000
we've got a couple of hopeful methods in there. Wishful methods,

228
00:11:36,000 --> 00:11:39,000
whatever you want to call it. Neither of them exists yet, so lets

229
00:11:39,000 --> 00:11:42,000
just write out my methods, firstly, the isTimeToSpawn().

230
00:11:42,000 --> 00:11:45,000
Well, I said we could spawn every frame for now, so this isTimeToSpawn

231
00:11:45,000 --> 00:11:48,000
is a bool, isTimeTo

232
00:11:48,000 --> 00:11:51,000
Spawn. Now, you matey not have structured your code like this, you may have done it all inside

233
00:11:51,000 --> 00:11:54,000
Update. That's fine! I'm just showing you a different way of

234
00:11:54,000 --> 00:11:57,000
approaching this. OK, and isTimeToSpawn

235
00:11:57,000 --> 00:12:00,000
will take in a (GameObject

236
00:12:00,000 --> 00:12:03,000
and it will be an attacker

237
00:12:03,000 --> 00:12:06,000
GameObject); It's important to keep track

238
00:12:06,000 --> 00:12:09,000
of the types of these things, it is a GameObject. I'm just going to return

239
00:12:09,000 --> 00:12:12,000
true; for now. We'll worry about getting that working properly later.

240
00:12:12,000 --> 00:12:15,000
So, every time this is going to evaluate to true, so every frame, every

241
00:12:15,000 --> 00:12:18,000
update it's just going to spawn. So, how is it going to spawn? That was your challenge

242
00:12:18,000 --> 00:12:21,000
right, was to make yourself a Spawner

243
00:12:21,000 --> 00:12:24,000
function. So, Spawn()

244
00:12:24,000 --> 00:12:27,000
(GameObject myGameObject) was the pattern I gave you. So, void returns

245
00:12:27,000 --> 00:12:30,000
nothing Spawn (GameObject

246
00:12:30,000 --> 00:12:33,000
myGameObject) So, pretty general

247
00:12:33,000 --> 00:12:36,000
spawning and parenting function. How is that going to work? Well,

248
00:12:36,000 --> 00:12:39,000
GameObject = myEnemy...

249
00:12:39,000 --> 00:12:42,000
Sorry, GameObject myEnemy or myAttacker

250
00:12:42,000 --> 00:12:45,000
or thisAttacker again,

251
00:12:45,000 --> 00:12:48,000
but we don't want to reuse the same thing. It's a bit confusing.

252
00:12:48,000 --> 00:12:51,000
Is Instantiate myGame

253
00:12:51,000 --> 00:12:54,000
Object, whatever I've passed in as a GameObject we have to cast it

254
00:12:54,000 --> 00:12:57,000
to a GameObject. So, whatever we pass into Spawn we instantiate,

255
00:12:57,000 --> 00:13:00,000
and then, we go myAttacker

256
00:13:00,000 --> 00:13:03,000
.transform.parent

257
00:13:03,000 --> 00:13:06,000
= what? What are we going to parent it to?

258
00:13:06,000 --> 00:13:09,000
Well, just ourselves actually, just our own transform, because we're

259
00:13:09,000 --> 00:13:12,000
going to parent ourselves to the Spawner. While we're parenting to the Spawner

260
00:13:12,000 --> 00:13:15,000
but not the Defenders' projectiles to the

261
00:13:15,000 --> 00:13:18,000
Defenders. It's because we destroy Defenders and

262
00:13:18,000 --> 00:13:21,000
we don't want all of their projectiles to get destroyed, when we destroy defenders.

263
00:13:21,000 --> 00:13:24,000
We're not going to be destroying

264
00:13:24,000 --> 00:13:27,000
Spawners, so we do want a transform parent to Spawners.

265
00:13:27,000 --> 00:13:30,000
Alright, so the other thing we need to do is just spawn at the

266
00:13:30,000 --> 00:13:33,000
position, so it's just a question of myAttacker

267
00:13:33,000 --> 00:13:36,000
.transform.position and then that just

268
00:13:36,000 --> 00:13:39,000
equals what? = transform.position;

269
00:13:39,000 --> 00:13:42,000
OK, so we say parent to the Spawner and parent

270
00:13:42,000 --> 00:13:45,000
spawn at the Spawner. Let's give that a crack! Pretty simple

271
00:13:45,000 --> 00:13:48,000
three line method, with a lot of wrapping around it!

272
00:13:48,000 --> 00:13:51,000
We should end up with a lot of

273
00:13:51,000 --> 00:13:54,000
guys coming now! Wow!

274
00:13:54,000 --> 00:13:57,000
What's happening?

275
00:14:03,000 --> 00:14:06,000
OK, I'll tell you what's happening! What's happening is they're being

276
00:14:06,000 --> 00:14:09,000
spawned, but they're being spawned inside the Shredder.

277
00:14:09,000 --> 00:14:12,000
OK, interesting hey! Interesting little bug that you can

278
00:14:12,000 --> 00:14:15,000
get there! So, I'm going to move my Shredder over to the right.

279
00:14:15,000 --> 00:14:18,000
And in fact, I'm going to be a little bit precise about where my

280
00:14:18,000 --> 00:14:21,000
Shredder is. Let's put it at 16 and make it 3 wide.

281
00:14:21,000 --> 00:14:24,000
So, if

282
00:14:24,000 --> 00:14:27,000
the center of the Shredder is at position 16 and

283
00:14:27,000 --> 00:14:30,000
it's 3 units wide, then 13

284
00:14:30,000 --> 00:14:33,000
must be the left hand edge of the Shredder. So then,

285
00:14:33,000 --> 00:14:36,000
are the Spawners clear of that? They are! So, let's try spawning

286
00:14:36,000 --> 00:14:39,000
again. We'll get a very different result. That's better!

287
00:14:39,000 --> 00:14:42,000
Now, we're getting an absolute ton, but at least they're being

288
00:14:42,000 --> 00:14:45,000
chilled to the appropriate Spawners and you could

289
00:14:45,000 --> 00:14:48,000
collapse down your whole Spawner Hierarchy and just get a crazy number

290
00:14:48,000 --> 00:14:51,000
of enemies. Fantastic! So, congratulations on getting that far!

291
00:14:51,000 --> 00:14:54,000
Now, what we need to do is tame the spawn rate, and guess

292
00:14:54,000 --> 00:14:57,000
what? That is your job. We've already written the outline for the method.

293
00:14:57,000 --> 00:15:00,000
I want you to complete the isTimeToSpawn method.

294
00:15:00,000 --> 00:15:03,000
Return true, if it's time to spawn this frame,

295
00:15:03,000 --> 00:15:06,000
return false if not, and as a bonus, log

296
00:15:06,000 --> 00:15:09,000
a warning, based on "frame-rate cap". You'll find, when you write

297
00:15:09,000 --> 00:15:12,000
this method, if you write it anything like Brice did in Laser Defender or

298
00:15:12,000 --> 00:15:15,000
or in any kind of sensible way, you'll realize the the fastest

299
00:15:15,000 --> 00:15:18,000
you can spawn in a simple method is the current

300
00:15:18,000 --> 00:15:21,000
frame-rate. Now, generally that's not going to be a problem, but it's nice to catch the error.

301
00:15:21,000 --> 00:15:24,000
That's a bonus but if nothing else, get it spawning

302
00:15:24,000 --> 00:15:27,000
as often as your enemies

303
00:15:27,000 --> 00:15:30,000
are set to spawn, so my fox, every five seconds

304
00:15:30,000 --> 00:15:33,000
of... whatever it was. And

305
00:15:33,000 --> 00:15:36,000
the way I tested this, when I set this up

306
00:15:36,000 --> 00:15:39,000
in the first place, was to take out a stop watch. That's my Android phone

307
00:15:39,000 --> 00:15:42,000
on the right. And I left it running for what? That's over half

308
00:15:42,000 --> 00:15:45,000
an hour, and at the end, I looked at the log. So,

309
00:15:45,000 --> 00:15:48,000
you may want to log out every time you spawn a lizard or fox,

310
00:15:48,000 --> 00:15:51,000
and I could calculate that the spawn rates were as a set them.

311
00:15:51,000 --> 00:15:54,000
So, in that instance, I set spawn rates

312
00:15:54,000 --> 00:15:57,000
1 every 1 second and every 5 seconds on an average. That

313
00:15:57,000 --> 00:16:00,000
agreed to within two significant figures or within 1%. So, you

314
00:16:00,000 --> 00:16:03,000
may want to get a stop watch, leave it half an hour, and make sure it works. So,

315
00:16:03,000 --> 00:16:06,000
there's your challenge! Get the different types of enemies

316
00:16:06,000 --> 00:16:09,000
spawning at different rates and test it.

317
00:16:09,000 --> 00:16:12,000
Awesome! So, let's get this finished off

318
00:16:12,000 --> 00:16:15,000
then! Not too tricky! This isTimeToSpawn method, you just

319
00:16:15,000 --> 00:16:18,000
gotta get your head around it. In fact, it's not too tricky at all!

320
00:16:18,000 --> 00:16:21,000
So, obviously we don't want to just return true, that's kind of

321
00:16:21,000 --> 00:16:24,000
rubbish. What we want to do is something along these

322
00:16:24,000 --> 00:16:27,000
lines. Firstly, we need the

323
00:16:27,000 --> 00:16:30,000
Attacker off the GameObject we pass in, so

324
00:16:30,000 --> 00:16:33,000
Attacker attacker =

325
00:16:33,000 --> 00:16:36,000
whatever we passed in, attackerGameObject

326
00:16:36,000 --> 00:16:39,000
.GetComponent

327
00:16:39,000 --> 00:16:42,000
&lt;Attacker&gt;(); And remember GetComponent

328
00:16:42,000 --> 00:16:45,000
is a method. Cool! So, we've got the Attacker off it! Now what?

329
00:16:45,000 --> 00:16:48,000
So, float meanSpawnDelay

330
00:16:48,000 --> 00:16:51,000
I'm going to call this, is

331
00:16:51,000 --> 00:16:54,000
attacker. and then what did we call it?

332
00:16:54,000 --> 00:16:57,000
seenEverySeconds; So, we spawn this

333
00:16:57,000 --> 00:17:00,000
guy in this lane, every second,

334
00:17:00,000 --> 00:17:03,000
as often as this thing is seen. So, it's just playing

335
00:17:03,000 --> 00:17:06,000
around with variable names

336
00:17:06,000 --> 00:17:09,000
right. I'm just trying to make the math clear. So,

337
00:17:09,000 --> 00:17:12,000
float spawnsPerSecond

338
00:17:15,000 --> 00:17:18,000
= 1 divided by the meanSpawnDelay.

339
00:17:18,000 --> 00:17:21,000
So, if the meanSpawnDelay is half a second,

340
00:17:21,000 --> 00:17:24,000
then the spawnsPerSecond is what? 1 divided by a half,

341
00:17:24,000 --> 00:17:27,000
which is 2. If the meanSpawnDelay is 2 seconds,

342
00:17:27,000 --> 00:17:30,000
and the spawnsPerSecond is a half. Does that make sense?

343
00:17:30,000 --> 00:17:33,000
OK, so if (Time.deltaTime, i.e.

344
00:17:33,000 --> 00:17:36,000
how long this frame took, is

345
00:17:36,000 --> 00:17:39,000
greater than the meanSpawnDelay)...

346
00:17:39,000 --> 00:17:42,000
Yeah, so if this frame, which is typically going to be in tiny fractions of a second,

347
00:17:42,000 --> 00:17:45,000
if it's greater than the SpawnDelay, so you've got a frame

348
00:17:45,000 --> 00:17:48,000
of I don't know 1 second, because the game is frozen

349
00:17:48,000 --> 00:17:51,000
to a whole but you're trying to spawn every half a second, but we've got a problem.

350
00:17:51,000 --> 00:17:54,000
So, let's Debug.LogWarning. Just a warning,

351
00:17:54,000 --> 00:17:57,000
it's not the end of the world, but I'm going to say something like ("Spawn

352
00:17:57,000 --> 00:18:00,000
rate capped by frame rate");

353
00:18:00,000 --> 00:18:03,000
You may want to pause the video and think about why that's the case.

354
00:18:03,000 --> 00:18:06,000
Basically, you can't spawn any faster than the frame

355
00:18:06,000 --> 00:18:09,000
rate, if you're spawning from inside the Update function. You can

356
00:18:09,000 --> 00:18:12,000
but this current pattern won't do it. OK, otherwise

357
00:18:12,000 --> 00:18:15,000
just go ahead without worrying about what could go wrong.

358
00:18:15,000 --> 00:18:18,000
Actually, sorry...

359
00:18:18,000 --> 00:18:21,000
It is else but for simplicity, rather than putting

360
00:18:21,000 --> 00:18:24,000
else and then a big indented block, I'm just going to come outside this if

361
00:18:24,000 --> 00:18:27,000
and start another piece of code, if that makes sense. We don't want to

362
00:18:27,000 --> 00:18:30,000
work in indentation. So, let's create a new float called

363
00:18:30,000 --> 00:18:33,000
threshold. And it's the spawnsPer

364
00:18:33,000 --> 00:18:36,000
Second times

365
00:18:36,000 --> 00:18:39,000
Time.deltaTime;

366
00:18:39,000 --> 00:18:42,000
So, this is

367
00:18:42,000 --> 00:18:45,000
just normalizing. It's just a threshold that says

368
00:18:45,000 --> 00:18:48,000
if this value is above 1, then we spawn.

369
00:18:48,000 --> 00:18:51,000
If it's below 1, we don't spawn. It's just a 1 threshold,

370
00:18:51,000 --> 00:18:54,000
because then we can use if (Random.value,

371
00:18:54,000 --> 00:18:57,000
which just produces a random number between 0 and 1.

372
00:18:57,000 --> 00:19:00,000
Is less than threshold)

373
00:19:03,000 --> 00:19:06,000
Then, you

374
00:19:06,000 --> 00:19:09,000
return true;

375
00:19:09,000 --> 00:19:12,000
else you return false; Now, there's a more compact

376
00:19:12,000 --> 00:19:15,000
way of writing that, actually. You could just say

377
00:19:15,000 --> 00:19:18,000
return (Random.value less than threshold), but I don't think that's

378
00:19:18,000 --> 00:19:21,000
very clear to read, so I'm going to write it this way.

379
00:19:21,000 --> 00:19:24,000
OK.

380
00:19:24,000 --> 00:19:27,000
So, have a think about that! There are other ways to do it. You could certainly

381
00:19:27,000 --> 00:19:30,000
write it in a lot lot less lines, but it may not be as clear to read.

382
00:19:30,000 --> 00:19:33,000
Hopefully to you, it's clear to read what's going on and how

383
00:19:33,000 --> 00:19:36,000
the math works. So, let's just test it works now!

384
00:19:36,000 --> 00:19:39,000
Now, I haven't put a Debug.Log

385
00:19:39,000 --> 00:19:42,000
item in here, but let's see

386
00:19:42,000 --> 00:19:45,000
if this is working. What did we set on our Fox?

387
00:19:45,000 --> 00:19:48,000
We said there should be a fox seen every 10 seconds.

388
00:19:48,000 --> 00:19:51,000
Is that about right, on average? Per lane,

389
00:19:51,000 --> 00:19:54,000
yes! What that means, of course, because there's five lanes

390
00:19:54,000 --> 00:19:57,000
we're seeing about a fox every 2 seconds. That's right!

391
00:19:57,000 --> 00:20:00,000
And then, the lizard, we are seeing every

392
00:20:00,000 --> 00:20:03,000
5 seconds. seenEverySeconds... It really should be seenEvery

393
00:20:03,000 --> 00:20:06,000
Seconds per lane, or to keep

394
00:20:06,000 --> 00:20:09,000
everything else simple and keep it very simple, we just come in here,

395
00:20:09,000 --> 00:20:12,000
and say well,

396
00:20:12,000 --> 00:20:15,000
let's divide this threshold by 5

397
00:20:15,000 --> 00:20:18,000
because we have 5 lanes. So, that's another reason

398
00:20:18,000 --> 00:20:21,000
to have like a threshold intermediate variable. And now,

399
00:20:21,000 --> 00:20:24,000
when you play, we're seeing lizards

400
00:20:24,000 --> 00:20:27,000
about every 5 seconds

401
00:20:27,000 --> 00:20:30,000
and foxes about every 10 seconds.

402
00:20:30,000 --> 00:20:33,000
Now, of course, you'd need to run for a long time and count your lizards

403
00:20:33,000 --> 00:20:36,000
and foxes, in the Console, or just

404
00:20:36,000 --> 00:20:39,000
leave them in the scene. They'll all end up on the left hand side, and that

405
00:20:39,000 --> 00:20:42,000
would prove it works. But that's it! The spawning is working how

406
00:20:42,000 --> 00:20:45,000
we planned it! So, a final look at the code, make sure it's clear there.

407
00:20:45,000 --> 00:20:48,000
The details of isTimeToSpawn and

408
00:20:48,000 --> 00:20:51,000
Spawn don't necessarily matter, once you trust

409
00:20:51,000 --> 00:20:54,000
them. This is the crux isn't it? void Update () foreach (GameObject

410
00:20:54,000 --> 00:20:57,000
if it's time to spawn it, spawn it. Simple right!

411
00:20:57,000 --> 00:21:00,000
It reads nice! isTimeToSpawn is quite long,

412
00:21:00,000 --> 00:21:03,000
but still should be clear.

413
00:21:03,000 --> 00:21:06,000
OK congratulations! We are spawning nicely!

414
00:21:06,000 --> 00:21:08,333
See you soon!


<<<<<<< HEAD:Unity/Section7/GG16 Texture Size & Compression.srt
WEBVTT
Kind: captions
Language: en

00:00:00.010 --> 00:00:09.590
I never thought I'd say it but I have a
fuzzy lizard problem. See. I don't know if you caught

00:00:09.590 --> 00:00:15.590
that. let me just replay from the
beginning. This dude is fine when he's

00:00:15.590 --> 00:00:20.789
walking but look what happens when he starts
talking. Fuzzy as hell. Now if you

00:00:20.789 --> 00:00:25.220
think that looks a bit like a dodgy
YouTube video on low bandwidth then

00:00:25.220 --> 00:00:28.740
you'd actually be pretty right. it is to
do with compression. Let's talk about

00:00:28.740 --> 00:00:32.729
what's going on. So we're gonna talk
about why my lizard animation looks

00:00:32.729 --> 00:00:36.510
fuzzy. what we're gonna do about it. we're
going to talk about maximum texture

00:00:36.510 --> 00:00:42.239
sizes and then briefly while we're there
we'll talk about mip-mapping. just for fun.

00:00:42.239 --> 00:00:47.799
OK. so what you need to get is that this
attacking sprite sheet is actually

00:00:47.799 --> 00:00:52.510
treated as a texture. It's still a
texture. So what that's a texture and what's a

00:00:52.510 --> 00:00:55.799
sprite? Well a texture is just a bunch
of pixels that are going to be applied

00:00:55.799 --> 00:01:00.999
to a 2D surface; a sprite is just a
rectangular version of one of them.

00:01:00.999 --> 00:01:07.810
It's pretty simple... so this is treated as a
texture. it's actually telling us

00:01:07.810 --> 00:01:12.430
something here that it's a not power of
two texture - an NPOT texture and that's

00:01:12.430 --> 00:01:18.010
because of the size of it. in fact if I
expand out my inspector its 1024 by 304 is

00:01:18.010 --> 00:01:24.260
how it representing it but the problem
is that it's been down sampled to 1024 by

00:01:24.260 --> 00:01:29.120
304. have a look at the original image.
member when we looked at it before. it is

00:01:29.120 --> 00:01:31.450
much bigger than that. Just

00:01:31.450 --> 00:01:38.260
bring my inspector across. It is 3700
pixels wide. whereas unity has scaled it

00:01:38.260 --> 00:01:43.490
down to 1024 wide and that's why he looks
so fuzzy. So what we have here - come out ot play

00:01:43.490 --> 00:01:49.140
mode. otherwise the settings won't stay.
What we have here is a... well actually I'm

00:01:49.140 --> 00:01:52.710
gonna leave in play mode. so you can
immediately see the effect. I'll come out of play mode

00:01:52.710 --> 00:01:54.830
again later.

00:01:54.830 --> 00:01:59.470
There you go. just pause... I'll just leave him running.
I need to make him loop so let me make him loop

00:01:59.470 --> 00:02:05.440
attacking set it to loop. Fantastic. ok so
let's get him in his dodgy attack loop

00:02:05.440 --> 00:02:08.890
on the screen nice zoomed in scene view.

00:02:08.890 --> 00:02:14.330
wobbling like a good 'un. OK. so take a look
at the underlying texture. Just quickly

00:02:14.330 --> 00:02:18.390
work down the texture settings. It's a 2D
sprite. fine but it's still a texture.

00:02:18.390 --> 00:02:22.550
It's just... you know... it's being treated as a
square sprite. It's a multiple

00:02:22.550 --> 00:02:25.620
sprite sprite sheet. that's all fine.
Packing tags. nothing to do with unity

00:02:25.620 --> 00:02:30.250
free that's for the pro version. Pixels per
unit is how it scales. Generate MIP maps we'll talk

00:02:30.250 --> 00:02:33.990
about in a minute we'll skip over filtering
altogether for this video but this is

00:02:33.990 --> 00:02:37.320
the bit you have a default maximum
texture size and then you have an

00:02:37.320 --> 00:02:41.900
override for each platform. so different
platform has different allowable

00:02:41.900 --> 00:02:46.480
texture sizes and what happened is Unity's
default is 1024. so it has downscaled this

00:02:46.480 --> 00:02:52.230
image by about threefold. If we set it up
to 4096 and click Apply.

00:02:52.230 --> 00:02:59.000
watch the lizard - fixed completely
fixed and if we set it to 2048 then it'd

00:02:59.000 --> 00:03:04.550
be somewhere between still fuzzy because
it's being downscaled. So again. the source

00:03:04.550 --> 00:03:08.610
image was three thousand and something
pixels so we're gonna need 4096 now

00:03:08.610 --> 00:03:11.019
there's a word of warning here. a couple of
things happen when you make it this much

00:03:11.019 --> 00:03:14.760
bigger. Firstly look at the size of the
texture. it's quite small and subtle that's

00:03:14.760 --> 00:03:24.450
better. It's 10.7 megabit texture right
now whereas previously it was only point eight

00:03:24.450 --> 00:03:28.850
of a megabit so it'd be much faster to
load and take up much less video memory

00:03:28.850 --> 00:03:34.970
in your device so it's fine to set it to
4096 on most devices but what we need to

00:03:34.970 --> 00:03:40.180
look at is what are the maximum
texture sizes for the various devices?

00:03:40.180 --> 00:03:45.570
They're only just starting. here in 2015. to
support that type of texture size. So if we

00:03:45.570 --> 00:03:51.370
look here the old iPhones only do 1024.
even the iPhone 4 and iPad support only

00:03:51.370 --> 00:03:58.290
2048 and then the iphone4s onwards and the
iPad 2 onwards will support 4096. There's

00:03:58.290 --> 00:04:03.630
the same list here for Android. Right so
generally 2048 is what we want to target

00:04:03.630 --> 00:04:07.500
if we're designing this for mobile. I've left
this on another slide at the end of

00:04:07.500 --> 00:04:12.490
this slideshow called useful resources
so don't worry about this URL.

00:04:12.490 --> 00:04:17.440
So yes you can set 4096 but
understand that some older devices will moan

00:04:17.440 --> 00:04:18.760
and not like it

00:04:18.760 --> 00:04:21.170
The other thing you can do is decide
whether it's a compressed texture which

00:04:21.170 --> 00:04:25.800
is 10.7 meg; whether it's 16 bit
which is going to look rubbish cause

00:04:25.800 --> 00:04:28.790
the cut... well it depends on the
sprite but this... already you are

00:04:28.790 --> 00:04:32.190
starting to see some color artefacting.
you see this weird banding here on his hat

00:04:32.190 --> 00:04:37.510
or you could set it true color. which is
uncompressed. but now your sprite size has

00:04:37.510 --> 00:04:42.490
doubled. it's gone up to 21 megabits or
your texture size has doubled so leaving

00:04:42.490 --> 00:04:45.670
compressed is normally the way. you get
slightly better image quality if it's

00:04:45.670 --> 00:04:49.580
true color but it's unnecessary. An
example of this in the real world by the

00:04:49.580 --> 00:04:53.450
way not that you can really see it is
that when they ported Rayman legends

00:04:53.450 --> 00:05:00.170
from xbox 360 and ps3 over to ps4 and
Xbox one they made the textures

00:05:00.170 --> 00:05:03.770
uncompressed or true colour because
there was enough texture memory on the

00:05:03.770 --> 00:05:08.040
new generation consoles. the video memory to
do that. It didn't make a lot of

00:05:08.040 --> 00:05:11.520
difference actually as you're seeing
here it's not actually that dramatic the

00:05:11.520 --> 00:05:17.050
quality difference. it's really not worth
uncompressing it. So there is another

00:05:17.050 --> 00:05:21.820
solution to this which is to pack your
sprite sheet a lot more densely. The

00:05:21.820 --> 00:05:25.650
current sprite sheet is terribly loosely
packed. let's look at it. The massive

00:05:25.650 --> 00:05:29.040
amount of space between all these guys
that is not a tightly packed sprite

00:05:29.040 --> 00:05:32.310
sheet they could be right but up next to
each other and then they would actually

00:05:32.310 --> 00:05:38.360
fit in 2048 by 2048 comfortably. I'm
not going to show you that in this video

00:05:38.360 --> 00:05:41.540
because it's a little bit fiddly and it's
beyond the scope of what we're doing it's

00:05:41.540 --> 00:05:45.970
really a performance optimization but
just wanted to give you those warnings.

00:05:45.970 --> 00:05:49.310
Alright. if you do want to be changing the
texture sizes or packing these

00:05:49.310 --> 00:05:54.310
textures you're gonna need two things -
shoebox and texture Packer. It's gonna take

00:05:54.310 --> 00:05:58.030
quite a lot of fiddling around but you'll
do something like extract all of the

00:05:58.030 --> 00:06:02.860
images. all the sprites into individual
images using shoebox and then repack

00:06:02.860 --> 00:06:06.250
them using texture packer and then you
need to make them all line up and the

00:06:06.250 --> 00:06:11.340
padding will work... it's a bit of a pain but
it's possible to do and repack it at the

00:06:11.340 --> 00:06:15.050
end of the day you have a smaller
texture that you have to load into video

00:06:15.050 --> 00:06:18.930
memory. Hopefully that makes sense. the
final thing I wanted to talk about whilst

00:06:18.930 --> 00:06:22.979
we're here is mip mapping. there's the option here
and you'll be wondering what it is. It's a

00:06:22.979 --> 00:06:25.120
technique where an original high
resolution texture map

00:06:25.120 --> 00:06:29.139
is scaled and filtered into multiple
resolutions within the texture file. I should

00:06:29.139 --> 00:06:33.360
also tell you take up 33% much more
space to store but it's much much much

00:06:33.360 --> 00:06:37.620
faster to render and it's not needed if
we're looking at a fixed distance and

00:06:37.620 --> 00:06:41.690
actually here we are looking at a fixed
distance so here's my lizard

00:06:41.690 --> 00:06:45.940
let me go to a different sprite sheet. the
walking one it's a bit clearer... here and then

00:06:45.940 --> 00:06:49.930
this slider here shows you the mip mapped
version. so the first version here is

00:06:49.930 --> 00:06:55.540
uncompressed and then you start to just
cut out information and the way it does

00:06:55.540 --> 00:06:59.169
it has to do with just chopping bits off
in the binary storage of it and this is

00:06:59.169 --> 00:07:04.000
why they sometimes make a distinction
between powers of two. PO two. and NPO two. They

00:07:04.000 --> 00:07:08.990
like to be at a power of two in at least one
dimension 1024. vertically is a power of two

00:07:08.990 --> 00:07:13.699
It makes it much quicker for the machine
to change how this thing looks at

00:07:13.699 --> 00:07:18.479
greater distances so because we have mip
maps. what happens is when you go out to

00:07:18.479 --> 00:07:22.660
a big distance from the character it's
actually not showing the full resolution

00:07:22.660 --> 00:07:27.130
character but you can see it. I can on my
screen. really fuzzy right now and it's

00:07:27.130 --> 00:07:31.130
fuzzy because it's using a approximated
version. it massively speeds up the

00:07:31.130 --> 00:07:34.729
rendering at small storage costs; but we
actually don't need it here because we

00:07:34.729 --> 00:07:39.020
never change the view distance. so you
can actually turn mip maps off if you

00:07:39.020 --> 00:07:42.889
wish for all of your sprites; now I need to
come out of play mode of course

00:07:42.889 --> 00:07:47.080
otherwise none of these changes will
take effect - you can turn off Mip Maps. and we can

00:07:47.080 --> 00:07:54.910
set the maximum texture size to 4096
maximum default texture size... alright and

00:07:54.910 --> 00:07:59.979
then that should all just run fine now
so as a summary here's how to prevent

00:07:59.979 --> 00:08:04.930
fuzzy lizards. or more generally make
sure that your textures your sprite

00:08:04.930 --> 00:08:09.169
sheets. which get turned into textures
actually result in nice. clean.

00:08:09.169 --> 00:08:13.940
clear animations without compression. So
you check your sprite sheet size in

00:08:13.940 --> 00:08:18.650
pixels. might be 2.000 by 3.000.
You look at the maximum X or Y directions

00:08:18.650 --> 00:08:23.660
so in that example its 3.000 pixels. You
then need to ensure that your texture max

00:08:23.660 --> 00:08:28.669
size is larger than that biggest
dimension and if you don't want to turn

00:08:28.669 --> 00:08:33.469
your texture max size up you could compact
your sprite sheet down more if it's

00:08:33.469 --> 00:08:37.120
possible. so the glitch garden
sprite sheets have massive spaces between

00:08:37.120 --> 00:08:38.329
the sprites. it's

00:08:38.329 --> 00:08:42.679
ok but it's actually pushing the
sprite sheets to the size that the

00:08:42.679 --> 00:08:47.529
textures are too big to fit in the video
memory of older iPhones iPads Android

00:08:47.529 --> 00:08:54.239
phones etc. So you could compact them
down and you can leave the compression

00:08:54.239 --> 00:08:57.439
on so you can have a high res sprite
sheet but you're safe to leave the

00:08:57.439 --> 00:09:00.929
compression on it really doesn't degrade
the image quality much unless you've got

00:09:00.929 --> 00:09:06.049
absolute heaps of video RAM to play with.
Oome useful resources for you. you can

00:09:06.049 --> 00:09:08.339
have a look at that unity answers

00:09:08.339 --> 00:09:12.309
link at the top there which will give
you the maximum texture sheet sizes for

00:09:12.309 --> 00:09:17.179
different platforms. you can have a look
at a couple of different utilities that

00:09:17.179 --> 00:09:21.899
will help you unpack and pack textures so
you've got texture packer there and

00:09:21.899 --> 00:09:25.709
you've got shoebox. So for example you
could you shoebox to rip out all of the

00:09:25.709 --> 00:09:29.610
sprites from a sprite sheet into
individual PNGs and then you

00:09:29.610 --> 00:09:35.009
could use texture packer to repack then in
a much more compact fashion. Don't spend too

00:09:35.009 --> 00:09:37.879
much time going crazy on it but they are
useful facilities there.

00:09:37.879 --> 00:09:41.779
a bit of a hassle to use but once you've got
them. really really powerful and remember

00:09:41.779 --> 00:09:45.350
that you can get stuff that works just
fine especially for newer phones etc from

00:09:45.350 --> 00:09:51.259
glitchthegame.com as per that link remember these slides
are available as a PDF at the beginning

00:09:51.259 --> 00:09:54.360
of the section and please consider not
printing them out. let's save the trees.

00:09:54.360 --> 00:09:57.779
another bonus if you don't print them out is
that you can go to the PDF and click

00:09:57.779 --> 00:10:01.989
these links. and save your fingers as
well as the trees. So congratulations on

00:10:01.989 --> 00:10:06.809
getting this far. I'm about to show you
how to animate all of the characters and

00:10:06.809 --> 00:10:10.559
how to get animation and scaling working
properly we have a subtlety to discuss

00:10:10.559 --> 00:10:11.379
so I'll see you soon.

=======
Kind: captions
Language: en

00:00:00,010 --> 00:00:09,590
I never thought I'd say it but I have a
fuzzy lizard problem. See, I don't know if you caught

00:00:09,590 --> 00:00:15,590
that, let me just replay from the
beginning. This dude is fine when he's

00:00:15,590 --> 00:00:20,789
walking but look what happens when he starts
talking. Fuzzy as hell. Now if you

00:00:20,789 --> 00:00:25,220
think that looks a bit like a dodgy
YouTube video on low bandwidth then

00:00:25,220 --> 00:00:28,740
you'd actually be pretty right, it is to
do with compression. Let's talk about

00:00:28,740 --> 00:00:32,729
what's going on. So we're gonna talk
about why my lizard animation looks

00:00:32,729 --> 00:00:36,510
fuzzy, what we're gonna do about it, we're
going to talk about maximum texture

00:00:36,510 --> 00:00:42,239
sizes and then briefly while we're there
we'll talk about mip-mapping, just for fun.

00:00:42,239 --> 00:00:47,799
OK, so what you need to get is that this
attacking sprite sheet is actually

00:00:47,799 --> 00:00:52,510
treated as a texture. It's still a
texture. So what that's a texture and what's a

00:00:52,510 --> 00:00:55,799
sprite? Well a texture is just a bunch
of pixels that are going to be applied

00:00:55,799 --> 00:01:00,999
to a 2D surface; a sprite is just a
rectangular version of one of them.

00:01:00,999 --> 00:01:07,810
It's pretty simple... so this is treated as a
texture, it's actually telling us

00:01:07,810 --> 00:01:12,430
something here that it's a not power of
two texture - an NPOT texture and that's

00:01:12,430 --> 00:01:18,010
because of the size of it, in fact if I
expand out my inspector its 1024 by 304 is

00:01:18,010 --> 00:01:24,260
how it representing it but the problem
is that it's been down sampled to 1024 by

00:01:24,260 --> 00:01:29,120
304, have a look at the original image,
member when we looked at it before, it is

00:01:29,120 --> 00:01:31,450
much bigger than that. Just

00:01:31,450 --> 00:01:38,260
bring my inspector across. It is 3700
pixels wide, whereas unity has scaled it

00:01:38,260 --> 00:01:43,490
down to 1024 wide and that's why he looks
so fuzzy. So what we have here - come out ot play

00:01:43,490 --> 00:01:49,140
mode, otherwise the settings won't stay.
What we have here is a... well actually I'm

00:01:49,140 --> 00:01:52,710
gonna leave in play mode, so you can
immediately see the effect. I'll come out of play mode

00:01:52,710 --> 00:01:54,830
again later.

00:01:54,830 --> 00:01:59,470
There you go, just pause... I'll just leave him running.
I need to make him loop so let me make him loop

00:01:59,470 --> 00:02:05,440
attacking set it to loop. Fantastic, ok so
let's get him in his dodgy attack loop

00:02:05,440 --> 00:02:08,890
on the screen nice zoomed in scene view,

00:02:08,890 --> 00:02:14,330
wobbling like a good 'un. OK, so take a look
at the underlying texture. Just quickly

00:02:14,330 --> 00:02:18,390
work down the texture settings. It's a 2D
sprite, fine but it's still a texture.

00:02:18,390 --> 00:02:22,550
It's just... you know... it's being treated as a
square sprite. It's a multiple

00:02:22,550 --> 00:02:25,620
sprite sprite sheet, that's all fine.
Packing tags, nothing to do with unity

00:02:25,620 --> 00:02:30,250
free that's for the pro version. Pixels per
unit is how it scales. Generate MIP maps we'll talk

00:02:30,250 --> 00:02:33,990
about in a minute we'll skip over filtering
altogether for this video but this is

00:02:33,990 --> 00:02:37,320
the bit you have a default maximum
texture size and then you have an

00:02:37,320 --> 00:02:41,900
override for each platform, so different
platform has different allowable

00:02:41,900 --> 00:02:46,480
texture sizes and what happened is Unity's
default is 1024, so it has downscaled this

00:02:46,480 --> 00:02:52,230
image by about threefold. If we set it up
to 4096 and click Apply,

00:02:52,230 --> 00:02:59,000
watch the lizard - fixed completely
fixed and if we set it to 2048 then it'd

00:02:59,000 --> 00:03:04,550
be somewhere between still fuzzy because
it's being downscaled. So again, the source

00:03:04,550 --> 00:03:08,610
image was three thousand and something
pixels so we're gonna need 4096 now

00:03:08,610 --> 00:03:11,019
there's a word of warning here, a couple of
things happen when you make it this much

00:03:11,019 --> 00:03:14,760
bigger. Firstly look at the size of the
texture, it's quite small and subtle that's

00:03:14,760 --> 00:03:24,450
better. It's 10.7 megabit texture right
now whereas previously it was only point eight

00:03:24,450 --> 00:03:28,850
of a megabit so it'd be much faster to
load and take up much less video memory

00:03:28,850 --> 00:03:34,970
in your device so it's fine to set it to
4096 on most devices but what we need to

00:03:34,970 --> 00:03:40,180
look at is what are the maximum
texture sizes for the various devices?

00:03:40,180 --> 00:03:45,570
They're only just starting, here in 2015, to
support that type of texture size. So if we

00:03:45,570 --> 00:03:51,370
look here the old iPhones only do 1024,
even the iPhone 4 and iPad support only

00:03:51,370 --> 00:03:58,290
2048 and then the iphone4s onwards and the
iPad 2 onwards will support 4096. There's

00:03:58,290 --> 00:04:03,630
the same list here for Android. Right so
generally 2048 is what we want to target

00:04:03,630 --> 00:04:07,500
if we're designing this for mobile. I've left
this on another slide at the end of

00:04:07,500 --> 00:04:12,490
this slideshow called useful resources
so don't worry about this URL.

00:04:12,490 --> 00:04:17,440
So yes you can set 4096 but
understand that some older devices will moan

00:04:17,440 --> 00:04:18,760
and not like it

00:04:18,760 --> 00:04:21,170
The other thing you can do is decide
whether it's a compressed texture which

00:04:21,170 --> 00:04:25,800
is 10.7 meg; whether it's 16 bit
which is going to look rubbish cause

00:04:25,800 --> 00:04:28,790
the cut... well it depends on the
sprite but this... already you are

00:04:28,790 --> 00:04:32,190
starting to see some color artefacting,
you see this weird banding here on his hat

00:04:32,190 --> 00:04:37,510
or you could set it true color, which is
uncompressed, but now your sprite size has

00:04:37,510 --> 00:04:42,490
doubled, it's gone up to 21 megabits or
your texture size has doubled so leaving

00:04:42,490 --> 00:04:45,670
compressed is normally the way, you get
slightly better image quality if it's

00:04:45,670 --> 00:04:49,580
true color but it's unnecessary. An
example of this in the real world by the

00:04:49,580 --> 00:04:53,450
way not that you can really see it is
that when they ported Rayman legends

00:04:53,450 --> 00:05:00,170
from xbox 360 and ps3 over to ps4 and
Xbox one they made the textures

00:05:00,170 --> 00:05:03,770
uncompressed or true colour because
there was enough texture memory on the

00:05:03,770 --> 00:05:08,040
new generation consoles, the video memory to
do that. It didn't make a lot of

00:05:08,040 --> 00:05:11,520
difference actually as you're seeing
here it's not actually that dramatic the

00:05:11,520 --> 00:05:17,050
quality difference, it's really not worth
uncompressing it. So there is another

00:05:17,050 --> 00:05:21,820
solution to this which is to pack your
sprite sheet a lot more densely. The

00:05:21,820 --> 00:05:25,650
current sprite sheet is terribly loosely
packed, let's look at it. The massive

00:05:25,650 --> 00:05:29,040
amount of space between all these guys
that is not a tightly packed sprite

00:05:29,040 --> 00:05:32,310
sheet they could be right but up next to
each other and then they would actually

00:05:32,310 --> 00:05:38,360
fit in 2048 by 2048 comfortably. I'm
not going to show you that in this video

00:05:38,360 --> 00:05:41,540
because it's a little bit fiddly and it's
beyond the scope of what we're doing it's

00:05:41,540 --> 00:05:45,970
really a performance optimization but
just wanted to give you those warnings.

00:05:45,970 --> 00:05:49,310
Alright, if you do want to be changing the
texture sizes or packing these

00:05:49,310 --> 00:05:54,310
textures you're gonna need two things -
shoebox and texture Packer. It's gonna take

00:05:54,310 --> 00:05:58,030
quite a lot of fiddling around but you'll
do something like extract all of the

00:05:58,030 --> 00:06:02,860
images, all the sprites into individual
images using shoebox and then repack

00:06:02,860 --> 00:06:06,250
them using texture packer and then you
need to make them all line up and the

00:06:06,250 --> 00:06:11,340
padding will work... it's a bit of a pain but
it's possible to do and repack it at the

00:06:11,340 --> 00:06:15,050
end of the day you have a smaller
texture that you have to load into video

00:06:15,050 --> 00:06:18,930
memory. Hopefully that makes sense, the
final thing I wanted to talk about whilst

00:06:18,930 --> 00:06:22,979
we're here is mip mapping, there's the option here
and you'll be wondering what it is. It's a

00:06:22,979 --> 00:06:25,120
technique where an original high
resolution texture map

00:06:25,120 --> 00:06:29,139
is scaled and filtered into multiple
resolutions within the texture file. I should

00:06:29,139 --> 00:06:33,360
also tell you take up 33% much more
space to store but it's much much much

00:06:33,360 --> 00:06:37,620
faster to render and it's not needed if
we're looking at a fixed distance and

00:06:37,620 --> 00:06:41,690
actually here we are looking at a fixed
distance so here's my lizard

00:06:41,690 --> 00:06:45,940
let me go to a different sprite sheet, the
walking one it's a bit clearer... here and then

00:06:45,940 --> 00:06:49,930
this slider here shows you the mip mapped
version, so the first version here is

00:06:49,930 --> 00:06:55,540
uncompressed and then you start to just
cut out information and the way it does

00:06:55,540 --> 00:06:59,169
it has to do with just chopping bits off
in the binary storage of it and this is

00:06:59,169 --> 00:07:04,000
why they sometimes make a distinction
between powers of two, PO two, and NPO two. They

00:07:04,000 --> 00:07:08,990
like to be at a power of two in at least one
dimension 1024, vertically is a power of two

00:07:08,990 --> 00:07:13,699
It makes it much quicker for the machine
to change how this thing looks at

00:07:13,699 --> 00:07:18,479
greater distances so because we have mip
maps, what happens is when you go out to

00:07:18,479 --> 00:07:22,660
a big distance from the character it's
actually not showing the full resolution

00:07:22,660 --> 00:07:27,130
character but you can see it. I can on my
screen, really fuzzy right now and it's

00:07:27,130 --> 00:07:31,130
fuzzy because it's using a approximated
version, it massively speeds up the

00:07:31,130 --> 00:07:34,729
rendering at small storage costs; but we
actually don't need it here because we

00:07:34,729 --> 00:07:39,020
never change the view distance, so you
can actually turn mip maps off if you

00:07:39,020 --> 00:07:42,889
wish for all of your sprites; now I need to
come out of play mode of course

00:07:42,889 --> 00:07:47,080
otherwise none of these changes will
take effect - you can turn off Mip Maps, and we can

00:07:47,080 --> 00:07:54,910
set the maximum texture size to 4096
maximum default texture size... alright and

00:07:54,910 --> 00:07:59,979
then that should all just run fine now
so as a summary here's how to prevent

00:07:59,979 --> 00:08:04,930
fuzzy lizards, or more generally make
sure that your textures your sprite

00:08:04,930 --> 00:08:09,169
sheets, which get turned into textures
actually result in nice, clean,

00:08:09,169 --> 00:08:13,940
clear animations without compression. So
you check your sprite sheet size in

00:08:13,940 --> 00:08:18,650
pixels, might be 2,000 by 3,000.
You look at the maximum X or Y directions

00:08:18,650 --> 00:08:23,660
so in that example its 3,000 pixels. You
then need to ensure that your texture max

00:08:23,660 --> 00:08:28,669
size is larger than that biggest
dimension and if you don't want to turn

00:08:28,669 --> 00:08:33,469
your texture max size up you could compact
your sprite sheet down more if it's

00:08:33,469 --> 00:08:37,120
possible, so the glitch garden
sprite sheets have massive spaces between

00:08:37,120 --> 00:08:38,329
the sprites, it's

00:08:38,329 --> 00:08:42,679
ok but it's actually pushing the
sprite sheets to the size that the

00:08:42,679 --> 00:08:47,529
textures are too big to fit in the video
memory of older iPhones iPads Android

00:08:47,529 --> 00:08:54,239
phones etc. So you could compact them
down and you can leave the compression

00:08:54,239 --> 00:08:57,439
on so you can have a high res sprite
sheet but you're safe to leave the

00:08:57,439 --> 00:09:00,929
compression on it really doesn't degrade
the image quality much unless you've got

00:09:00,929 --> 00:09:06,049
absolute heaps of video RAM to play with.
Oome useful resources for you, you can

00:09:06,049 --> 00:09:08,339
have a look at that unity answers

00:09:08,339 --> 00:09:12,309
link at the top there which will give
you the maximum texture sheet sizes for

00:09:12,309 --> 00:09:17,179
different platforms, you can have a look
at a couple of different utilities that

00:09:17,179 --> 00:09:21,899
will help you unpack and pack textures so
you've got texture packer there and

00:09:21,899 --> 00:09:25,709
you've got shoebox. So for example you
could you shoebox to rip out all of the

00:09:25,709 --> 00:09:29,610
sprites from a sprite sheet into
individual PNGs and then you

00:09:29,610 --> 00:09:35,009
could use texture packer to repack then in
a much more compact fashion. Don't spend too

00:09:35,009 --> 00:09:37,879
much time going crazy on it but they are
useful facilities there,

00:09:37,879 --> 00:09:41,779
a bit of a hassle to use but once you've got
them, really really powerful and remember

00:09:41,779 --> 00:09:45,350
that you can get stuff that works just
fine especially for newer phones etc from

00:09:45,350 --> 00:09:51,259
glitchthegame.com as per that link remember these slides
are available as a PDF at the beginning

00:09:51,259 --> 00:09:54,360
of the section and please consider not
printing them out, let's save the trees,

00:09:54,360 --> 00:09:57,779
another bonus if you don't print them out is
that you can go to the PDF and click

00:09:57,779 --> 00:10:01,989
these links, and save your fingers as
well as the trees. So congratulations on

00:10:01,989 --> 00:10:06,809
getting this far, I'm about to show you
how to animate all of the characters and

00:10:06,809 --> 00:10:10,559
how to get animation and scaling working
properly we have a subtlety to discuss

00:10:10,559 --> 00:10:11,379
so I'll see you soon.

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unity/Section7/GG16 Texture Size & Compression.srt

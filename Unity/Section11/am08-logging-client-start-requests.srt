1
00:00:00,000 --> 00:00:03,000


2
00:00:03,000 --> 00:00:06,000
Hey welcome back! So, in this video we're going to briefly

3
00:00:06,000 --> 00:00:09,000
talk about Local Host and IPv4 addresses.

4
00:00:09,000 --> 00:00:12,000
Basically, 127

5
00:00:12,000 --> 00:00:15,000
.0.0.1 is your Local Host

6
00:00:15,000 --> 00:00:18,000
address. You can find out more about Local Host at Wikipedia

7
00:00:18,000 --> 00:00:21,000
on the link at the bottom of this slide, if you want to.

8
00:00:21,000 --> 00:00:24,000
I'm going to show you how to find your own machine's IP Address.

9
00:00:24,000 --> 00:00:27,000
You are going to temporarily use the HUD again, the built

10
00:00:27,000 --> 00:00:30,000
in Networking Hub to connect the Client

11
00:00:30,000 --> 00:00:31,000
to the server,

12
00:00:31,000 --> 00:00:33,000
and then, we will

13
00:00:33,000 --> 00:00:36,000
also connect a Local Build by a Local Host.

14
00:00:36,000 --> 00:00:39,000
So, by the end of this, what you'll be able to do is

15
00:00:39,000 --> 00:00:42,000
come in here and click, for example, Start Host

16
00:00:42,000 --> 00:00:45,000
and you will get information about this client start having been

17
00:00:45,000 --> 00:00:48,000
rquestied. We've moved the time stamps to the front. You'll get dots

18
00:00:48,000 --> 00:00:51,000
up here, until it's connected, and then, you'll be told when it's connected.

19
00:00:51,000 --> 00:00:54,000
And that will also work over on the

20
00:00:54,000 --> 00:00:57,000
Client Machine. You can see my Client Machine is actually connecting. So, I'm going to

21
00:00:57,000 --> 00:01:00,000
show you how to do that right now.

22
00:01:00,000 --> 00:01:03,000
I want to log out some information about what the Client

23
00:01:03,000 --> 00:01:06,000
is doing, so I'm going to go into my

24
00:01:06,000 --> 00:01:09,000
NetworkManager Script, and I'm going to

25
00:01:09,000 --> 00:01:12,000
look at another method. There's another method called OnClient

26
00:01:12,000 --> 00:01:15,000
Start, and we have to do exactly the same thing: public override

27
00:01:15,000 --> 00:01:18,000
void, because that's it's method signature,

28
00:01:18,000 --> 00:01:21,000
OnStartClient.

29
00:01:21,000 --> 00:01:24,000
Now, if I just certainly in

30
00:01:24,000 --> 00:01:27,000
Mono go to the end of that line and go Command or

31
00:01:27,000 --> 00:01:30,000
Control on a PC and Apostrophe, that will do a search

32
00:01:30,000 --> 00:01:33,000
to the Google docs, which is very helpful. And it's Network

33
00:01:33,000 --> 00:01:36,000
Manager.OnStartClient. How do I know that?

34
00:01:36,000 --> 00:01:39,000
Well, I'm working inside a NetworkManager, at the moment,

35
00:01:39,000 --> 00:01:42,000
that is the whole class we're working in. And you'll see that when that

36
00:01:42,000 --> 00:01:45,000
message is called, you also get passed

37
00:01:45,000 --> 00:01:48,000
in a NetworkClient.client. So, let's just copy that

38
00:01:48,000 --> 00:01:51,000
and come back over into our script

39
00:01:51,000 --> 00:01:54,000
and paste that in, but we don't need

40
00:01:54,000 --> 00:01:57,000
Networking dot, because we've already imported the Networking name space, so

41
00:01:57,000 --> 00:02:00,000
let's get rid of that. And also, Client sounds like a

42
00:02:00,000 --> 00:02:03,000
reserved word to me, so I'm going to use myClient.

43
00:02:03,000 --> 00:02:06,000
OK!

44
00:02:06,000 --> 00:02:09,000
So, what happens is this method is called,

45
00:02:09,000 --> 00:02:12,000
when the Client start is requested. In fact, let's just look at

46
00:02:12,000 --> 00:02:15,000
the docs and see what the docs say.

47
00:02:15,000 --> 00:02:18,000
This hook is invoked when the Client is started OK.

48
00:02:18,000 --> 00:02:21,000
So, it's actually really called when the Client

49
00:02:21,000 --> 00:02:24,000
start is requested, so let's log that.

50
00:02:24,000 --> 00:02:27,000
Let's put a log entry that says, Client's

51
00:02:27,000 --> 00:02:30,000
start requested. In fact, why don't you just do this! I want you to do

52
00:02:30,000 --> 00:02:33,000
two things. I want you to just log Client start requested, but also

53
00:02:33,000 --> 00:02:36,000
switch these time labels to the front of all these lines

54
00:02:36,000 --> 00:02:39,000
for me, so that they appear in the log a little bit better. So,

55
00:02:39,000 --> 00:02:42,000
go ahead, micro challenge! Pause the video and just say time,

56
00:02:42,000 --> 00:02:45,000
client log, and say client start requested.

57
00:02:45,000 --> 00:02:48,000
Welcome back! So, I'm just going to

58
00:02:48,000 --> 00:02:51,000
take these timeSinceLevelLoads and start putting them at

59
00:02:51,000 --> 00:02:54,000
the start of the lines. You'll see why when you see the

60
00:02:54,000 --> 00:02:57,000
log. A bit of a space, " Client

61
00:02:57,000 --> 00:03:00,000
start requested."

62
00:03:00,000 --> 00:03:03,000
And I'm just going to take the rest of these and put them at the beginning

63
00:03:03,000 --> 00:03:06,000
of the lines.

64
00:03:06,000 --> 00:03:09,000
And I can copy all that. Finally, I could do

65
00:03:09,000 --> 00:03:12,000
a find and replace, arguably here, but

66
00:03:12,000 --> 00:03:15,000
it would take longer with three instances than just doing it.

67
00:03:15,000 --> 00:03:18,000
Starting Host.

68
00:03:18,000 --> 00:03:21,000
Starting Host. Now, we don't need these app bits we just,

69
00:03:21,000 --> 00:03:24,000
you know, say Starting Host, host started,

70
00:03:24,000 --> 00:03:27,000
" client start requested". Let's try that!

71
00:03:27,000 --> 00:03:30,000
Now, how are we going to try it? How do we request a client? Well, one of the

72
00:03:30,000 --> 00:03:33,000
easiest ways is to go back to the NetworkManager and add a HUD back in.

73
00:03:33,000 --> 00:03:36,000
You can add this HUD and then replicate its functionality and take

74
00:03:36,000 --> 00:03:39,000
it away again and add it again, that's all fine. So here

75
00:03:39,000 --> 00:03:42,000
we go, we've started! Now, if I click Start

76
00:03:42,000 --> 00:03:45,000
Host, let's see what happens! We get a

77
00:03:45,000 --> 00:03:48,000
3.53, etc. seconds, since the game started, "Starting Host".

78
00:03:48,000 --> 00:03:51,000
"Host started", at the same time, because it's local, and then,

79
00:03:51,000 --> 00:03:54,000
"Client start ruquested." Great! So, it's the Host that's

80
00:03:54,000 --> 00:03:57,000
created both a Server and

81
00:03:57,000 --> 00:04:00,000
a Client.

82
00:04:00,000 --> 00:04:03,000
OK, we don't know if the client was actually created, we'll find out in a minute.

83
00:04:03,000 --> 00:04:06,000
Let's see if it works the other way. Try play and just

84
00:04:06,000 --> 00:04:09,000
go LAN Client Local Host. "Client start requested." Great!

85
00:04:09,000 --> 00:04:12,000
So, we have logging information

86
00:04:12,000 --> 00:04:15,000
about the fact that the Client start has been requested. Now,

87
00:04:15,000 --> 00:04:18,000
what we need to do is know what happens when the

88
00:04:18,000 --> 00:04:21,000
start actually happens. So,

89
00:04:21,000 --> 00:04:24,000
we've got another method, which is public override. You're going to get

90
00:04:24,000 --> 00:04:27,000
used to writing public overried void. On

91
00:04:27,000 --> 00:04:30,000
ClientConnect. Now, again, we can go to the docs for that.

92
00:04:30,000 --> 00:04:33,000
It's called on the Client,

93
00:04:33,000 --> 00:04:36,000
when connected to a server, and it passes on

94
00:04:36,000 --> 00:04:39,000
a Networking Connection conn OK.

95
00:04:39,000 --> 00:04:42,000
So, let's go and take that parameter

96
00:04:42,000 --> 00:04:45,000
with its in

97
00:04:45,000 --> 00:04:48,000
and take a look. So, now I'm just going to log out.

98
00:04:48,000 --> 00:04:51,000
I'm going to put a time stamp in to

99
00:04:51,000 --> 00:04:54,000
start with, so that we can see the delay, and there'll be no delay on the local machine but you'll see

100
00:04:54,000 --> 00:04:57,000
the delay on the remote machine, in a moment.

101
00:04:57,000 --> 00:05:00,000
So, we want to say that the Client is

102
00:05:00,000 --> 00:05:03,000
now connected to, and I'd like to

103
00:05:03,000 --> 00:05:06,000
to know the IP Address its connected to. Now, where did you get the

104
00:05:06,000 --> 00:05:09,000
IP Address from? Well, now that there actually is a

105
00:05:09,000 --> 00:05:12,000
connection, we can query this conn

106
00:05:12,000 --> 00:05:15,000
variable here. So, we go conn.address.

107
00:05:15,000 --> 00:05:18,000
Let's see how that works, locally.

108
00:05:18,000 --> 00:05:21,000
Play.

109
00:05:21,000 --> 00:05:24,000
If you start a Local Client,

110
00:05:24,000 --> 00:05:27,000
"Client start requested." And

111
00:05:27,000 --> 00:05:30,000
the Client is not connected to anything, because

112
00:05:30,000 --> 00:05:33,000
there is no Server. OK, let's try the other

113
00:05:33,000 --> 00:05:36,000
thing, let's try starting a Host. Now, the Host is

114
00:05:36,000 --> 00:05:39,000
requested to be started, immediately it starts,

115
00:05:39,000 --> 00:05:42,000
the Client start request happens, and then, the Client is connected to IP Local

116
00:05:42,000 --> 00:05:45,000
Server. Great! I think we have all of the logging

117
00:05:45,000 --> 00:05:48,000
that we need now, to be sure that

118
00:05:48,000 --> 00:05:51,000
we'll know when we are connected. So, let's

119
00:05:51,000 --> 00:05:54,000
go ahead and get this working on the other machine. So,

120
00:05:54,000 --> 00:05:57,000
this code once saved and once the Unity project is saved,

121
00:05:57,000 --> 00:06:00,000
I can safely go over to my Slave Machine,

122
00:06:00,000 --> 00:06:03,000
you know the machine I'm distributing the software to,

123
00:06:03,000 --> 00:06:06,000
make it refresh. In my case, I just have to look at the

124
00:06:06,000 --> 00:06:09,000
drop box folder and come back in here, let Unity refresh,

125
00:06:09,000 --> 00:06:12,000
reloading everything. OK, so

126
00:06:12,000 --> 00:06:15,000
on the Host Machine, let's play and start

127
00:06:15,000 --> 00:06:18,000
the Host. Now, who remembers what my IP was? I think it was 0.39?

128
00:06:18,000 --> 00:06:21,000
Let's go find out! over on your

129
00:06:21,000 --> 00:06:24,000
Client Machine, we play. Now,

130
00:06:24,000 --> 00:06:27,000
we've got this GUI here now.

131
00:06:27,000 --> 00:06:30,000
We replace Local Host, unless you're doing a Local Build. If you're doing

132
00:06:30,000 --> 00:06:33,000
this out to a Local Build, leave it as Local Host. It won't be as satisfying as

133
00:06:33,000 --> 00:06:36,000
this, because this is actually going to do something over the network in a moment.

134
00:06:36,000 --> 00:06:39,000
192.168.0.39. "Client

135
00:06:39,000 --> 00:06:42,000
start requested." And then, there was a gap, which is a good sign.

136
00:06:42,000 --> 00:06:45,000
There's a gap of what, 0.4 of a second or

137
00:06:45,000 --> 00:06:48,000
something like that, 0.04 of a second, 40 milliseconds.

138
00:06:48,000 --> 00:06:51,000
And it's actually connected to 192.168.0.39

139
00:06:51,000 --> 00:06:54,000
Remember what you're seeing here is a different computer, sitting on

140
00:06:54,000 --> 00:06:57,000
the end of a LAN cable. I'm just using

141
00:06:57,000 --> 00:07:00,000
team viewer to view it. So that's it, they are actually connected!

142
00:07:00,000 --> 00:07:03,000
You've just got to believe that for now. [Laughs] So, in the next video, we're

143
00:07:03,000 --> 00:07:06,000
going to actually get some movement of

144
00:07:06,000 --> 00:07:09,000
GameObjects, over this connection that's working.

145
00:07:09,000 --> 00:07:12,000
If it isn't connecting for you, for example,

146
00:07:12,000 --> 00:07:15,000
you put the wrong IP Address in. Let's just put some

147
00:07:15,000 --> 00:07:18,000
bogus IP Address in. I don't know,

148
00:07:18,000 --> 00:07:21,000
maybe .23? I hope that's not my other IP Address by mistake.

149
00:07:21,000 --> 00:07:24,000
And if I click LAN Client now, it'll just say "Client

150
00:07:24,000 --> 00:07:27,000
start requested" and it'll just sit there, saying "Client

151
00:07:27,000 --> 00:07:30,000
start requested." Now, how do you know it's doing anything?

152
00:07:30,000 --> 00:07:33,000
Well, that sounds like a good exercise for the reader.

153
00:07:33,000 --> 00:07:36,000
So, what I want you to do is invoke dots! I want you to print a

154
00:07:36,000 --> 00:07:39,000
dot on the Console until it's connected. So, between the

155
00:07:39,000 --> 00:07:42,000
Client's start request

156
00:07:42,000 --> 00:07:45,000
and the actual Client connect, I want you to just print a dot!

157
00:07:45,000 --> 00:07:48,000
Hint, just the InvokeRepeating() method. So, go ahead and

158
00:07:48,000 --> 00:07:51,000
see if you can get that working now!

159
00:07:51,000 --> 00:07:54,000


160
00:07:54,000 --> 00:07:57,000
OK, so welcome back! Let's have a look at a simple

161
00:07:57,000 --> 00:08:00,000
piece of code, just to give ourselves some feedback that this

162
00:08:00,000 --> 00:08:03,000
connection is trying to happen. Remember when you use Invoke,

163
00:08:03,000 --> 00:08:06,000
you have to write your own method, so void print Dots ().

164
00:08:06,000 --> 00:08:09,000
It doesn't need to take anything in, for the moment,

165
00:08:09,000 --> 00:08:12,000
and it's simply going to Debug.Log

166
00:08:12,000 --> 00:08:15,000
a dot.

167
00:08:15,000 --> 00:08:18,000
Simple. Now, when OnClient

168
00:08:18,000 --> 00:08:21,000
Start, when we request the start,

169
00:08:21,000 --> 00:08:24,000
we want to, after we have

170
00:08:24,000 --> 00:08:27,000
printed the Client's start is requested, we want to InvokeRepeating.

171
00:08:27,000 --> 00:08:30,000
The name of the method

172
00:08:30,000 --> 00:08:33,000
is ("PrintDots"). It's a bit clunky, this isn't it passing in a method

173
00:08:33,000 --> 00:08:36,000
name as a string? Ah! Anyway, 0f is the

174
00:08:36,000 --> 00:08:39,000
pause. We want to start, sort of one second, as a

175
00:08:39,000 --> 00:08:42,000
float, is the delay, and then, what you do once you are connected is,

176
00:08:42,000 --> 00:08:45,000
you simply cancel Invoke. So,

177
00:08:45,000 --> 00:08:48,000
CancelInvoke (); it doesn't need any parameters,

178
00:08:48,000 --> 00:08:51,000
it cancels Invoke the entire

179
00:08:51,000 --> 00:08:54,000
scope that we're in at the moment. OK, so let's

180
00:08:54,000 --> 00:08:57,000
have a go!

181
00:08:57,000 --> 00:09:00,000
I've got to play on the machine here, start a

182
00:09:00,000 --> 00:09:03,000
Host, you get a single dot there. If I go over to the

183
00:09:03,000 --> 00:09:06,000
other machine, make sure that the file is updated by

184
00:09:06,000 --> 00:09:09,000
looking at this folder. I'm not sure why DropBox needs me to do that, but it does

185
00:09:09,000 --> 00:09:12,000
bless it. Let's purposefully put the wrong address

186
00:09:12,000 --> 00:09:15,000
in... something like 19

187
00:09:15,000 --> 00:09:18,000
2.168.0.24,

188
00:09:18,000 --> 00:09:21,000
start the Client, and it's saying

189
00:09:21,000 --> 00:09:24,000
dot dot dot. And if we choose the right

190
00:09:24,000 --> 00:09:27,000
address, which is 0.39,

191
00:09:27,000 --> 00:09:30,000
then it should work

192
00:09:30,000 --> 00:09:33,000
and we are done! And you just

193
00:09:33,000 --> 00:09:36,000
get one dot and it connects. Perfect! Alright, so we have some sort of

194
00:09:36,000 --> 00:09:39,000
wait state now, showing us what's going on. So that great! I'll

195
00:09:39,000 --> 00:09:42,000
see you in the next video, where the cube will actually move over the Ethernet!

196
00:09:42,000 --> 00:09:45,000
[Laughs] See you soon!


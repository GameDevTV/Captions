WEBVTT

1
00:00:03.000 --> 00:00:06.000
Hey guys! The purpose of this is to get Networked Player

2
00:00:06.000 --> 00:00:09.000
Movement working, so by the end of the video you will

3
00:00:09.000 --> 00:00:12.000
understand a bit more about how players work and we'll end up with

4
00:00:12.000 --> 00:00:15.000
three copies like this and we'll almost have

5
00:00:15.000 --> 00:00:18.000
Networked Movement working between them, where moving

6
00:00:18.000 --> 00:00:21.000
from one screen will result in only

7
00:00:21.000 --> 00:00:24.000
movement of one of the players, only

8
00:00:24.000 --> 00:00:27.000
the local player, but we'll run into some trouble as well

9
00:00:27.000 --> 00:00:30.000
when we try and introduce a third player and a build. And then, we will

10
00:00:30.000 --> 00:00:33.000
see how to fix that in the following lecture. But for now, we're going to get as

11
00:00:33.000 --> 00:00:36.000
far as having your input filtered, between a Client

12
00:00:36.000 --> 00:00:39.000
and a Host, so that if you

13
00:00:39.000 --> 00:00:42.000
spin up yourself a Host on your machine

14
00:00:42.000 --> 00:00:45.000
here and get the Client on the Host as

15
00:00:45.000 --> 00:00:48.000
well. And then, if we spin up over there,

16
00:00:48.000 --> 00:00:51.000
and make ourself a LAN Client, you'll see that

17
00:00:51.000 --> 00:00:54.000
if I reach over to the PC that I'm moving the left hand of those two

18
00:00:54.000 --> 00:00:57.000
cylinders, and over here on the host, I'm

19
00:00:57.000 --> 00:01:00.000
moving the right hand of the two cylinders.

20
00:01:00.000 --> 00:01:03.000
What we're not getting yet is that the translation is not being

21
00:01:03.000 --> 00:01:06.000
moved across, from one to the other, but we're doing

22
00:01:06.000 --> 00:01:09.000
the input filtering in this lecture, and then, we're going to layer

23
00:01:09.000 --> 00:01:12.000
on the transmission of the translation, in the

24
00:01:12.000 --> 00:01:15.000
next lecture.

25
00:01:15.000 --> 00:01:18.000
OK, so players are

26
00:01:18.000 --> 00:01:21.000
interesting things in multiplayer games, because of course, when we distribute

27
00:01:21.000 --> 00:01:24.000
our code, then we have to do something

28
00:01:24.000 --> 00:01:27.000
to make sure we can distinguish one player from

29
00:01:27.000 --> 00:01:30.000
another. So, you'll see that problem and then we'll solve it, but firstly,

30
00:01:30.000 --> 00:01:33.000
let's just get the player moving.

31
00:01:33.000 --> 00:01:36.000
So, I want you to do that actually. I just want you to use Cross-

32
00:01:36.000 --> 00:01:39.000
Platform Input to get the player moving.

33
00:01:39.000 --> 00:01:42.000
Test the player moves on the Host and see what happens,

34
00:01:42.000 --> 00:01:45.000
if you try controlling the player on a

35
00:01:45.000 --> 00:01:48.000
separate Client, preferably on a different computer or a mobile device.

36
00:01:48.000 --> 00:01:51.000
So, you've done this before, used a Cross-Platform Input Manager

37
00:01:51.000 --> 00:01:54.000
and I'll see you in just a moment!

38
00:01:54.000 --> 00:01:57.000
So welcome back! So,

39
00:01:57.000 --> 00:02:00.000
let's make this nice and simple. I'm going to create myself a folder actually, and I'm going to call

40
00:02:00.000 --> 00:02:03.000
it Players, ambitiously, because I believe I'm going to be

41
00:02:03.000 --> 00:02:06.000
having more than one Player Prefab. I'm going to plop my,

42
00:02:06.000 --> 00:02:09.000
pop even my Player in there, make a material. I'm just

43
00:02:09.000 --> 00:02:12.000
going to call it Player1, from the moment, or just Player,

44
00:02:12.000 --> 00:02:15.000
and applying the material to the prefab. It looks like it hasn't worked

45
00:02:15.000 --> 00:02:18.000
but it actually has. You can see it in the Materials List here.

46
00:02:18.000 --> 00:02:21.000
Fantastic! So, a new script. Let's have a C# script

47
00:02:21.000 --> 00:02:24.000
called just Player, for the moment. It's probably only going

48
00:02:24.000 --> 00:02:27.000
to be responsible for movement, but for now I'm just going to call it

49
00:02:27.000 --> 00:02:30.000
Player. And I'm going to go into the script, and of course, I'm

50
00:02:30.000 --> 00:02:33.000
going to import a new name space, using UnityEngine.

51
00:02:33.000 --> 00:02:36.000
Oh no, it's not Unity Engine, is it? Using

52
00:02:36.000 --> 00:02:39.000
UnityStandardAssets. Now, that doesn't

53
00:02:39.000 --> 00:02:42.000
exist. Why doesn't it exist? Simply because it's not

54
00:02:42.000 --> 00:02:45.000
imported. So, I'm going to get the Cross-Platform

55
00:02:45.000 --> 00:02:48.000
Input Package and take the whole lot. Why am

56
00:02:48.000 --> 00:02:51.000
I using Cross-Platform Input? Simply because I want my gamepad to work

57
00:02:51.000 --> 00:02:54.000
and if I switch to mobile and I've got

58
00:02:54.000 --> 00:02:57.000
a mobile UI, I want that to come on and I want keys to work. I want

59
00:02:57.000 --> 00:03:00.000
the whole lot. I want my cake and eat it. So, in order to do that,

60
00:03:00.000 --> 00:03:03.000
I'm going to use the UnityStandardAssets.

61
00:03:03.000 --> 00:03:06.000
CrossPlatform

62
00:03:06.000 --> 00:03:09.000
Input; name space. Fantastic!

63
00:03:09.000 --> 00:03:12.000
Alright, so now it's simply a question of doing

64
00:03:12.000 --> 00:03:15.000
a fairly standard thing, with inputs. We've done this

65
00:03:15.000 --> 00:03:18.000
a lot of times, I'm going to go through it real quick. We're going to go through a private

66
00:03:18.000 --> 00:03:21.000
Vector3 input value.

67
00:03:21.000 --> 00:03:24.000
You could use a Vector2 I guess, but I'm going to

68
00:03:24.000 --> 00:03:27.000
use a Vector3. Nothing needs to be done on Start.

69
00:03:27.000 --> 00:03:30.000
And then, I'm just going to iterate through, inputValue.x

70
00:03:33.000 --> 00:03:36.000
So take the X component... is the

71
00:03:36.000 --> 00:03:39.000
CrossPlatformInputManager.GetAxis

72
00:03:39.000 --> 00:03:42.000
and then, let's take the Horizontal Axis for X,

73
00:03:42.000 --> 00:03:45.000
as defined in the Input

74
00:03:45.000 --> 00:03:48.000
setup. And then, let's

75
00:03:48.000 --> 00:03:51.000
explicitly set the

76
00:03:51.000 --> 00:03:54.000
Y value, I think.

77
00:03:54.000 --> 00:03:57.000
Dot y =

78
00:03:57.000 --> 00:04:00.000
0 float. Now, you can do that. It'll cast...

79
00:04:00.000 --> 00:04:03.000
Well, actually .y is a float, so 0

80
00:04:03.000 --> 00:04:06.000
float is the right type. InputValue.y is a float.

81
00:04:06.000 --> 00:04:09.000
So, I was thinking it looks strange when it's a vector on one

82
00:04:09.000 --> 00:04:12.000
side but actually it's not, its float is on both.

83
00:04:12.000 --> 00:04:15.000
OK, so finally inputValue

84
00:04:15.000 --> 00:04:18.000
.z =, and it's very similar

85
00:04:18.000 --> 00:04:21.000
to this other CrossPlatformInputManager.

86
00:04:21.000 --> 00:04:24.000
And we have ("Vertical"); OK.

87
00:04:24.000 --> 00:04:27.000
So, we've taken our X, Y, and Z every frame, and then,

88
00:04:27.000 --> 00:04:30.000
we simply go transform.Translate

89
00:04:30.000 --> 00:04:33.000
and by the (inputValue);

90
00:04:33.000 --> 00:04:36.000
I'm going to leave it unscaled, for the moment, and see what happens.

91
00:04:36.000 --> 00:04:39.000
OK, I need to close Unity, because

92
00:04:39.000 --> 00:04:42.000
my controller, my PS4 Controller, is not currently

93
00:04:42.000 --> 00:04:45.000
connected to the machine. So, you turn it on, you find your Blue Tooth

94
00:04:45.000 --> 00:04:48.000
Settings, you connect it...

95
00:04:48.000 --> 00:04:51.000
Let's just give it a second.

96
00:04:51.000 --> 00:04:54.000
It may connect on its own, without... Yeah!

97
00:04:54.000 --> 00:04:57.000
Wirelss Controller and then reopen Unity.

98
00:04:57.000 --> 00:05:00.000
See if Unity doesnt see the input

99
00:05:00.000 --> 00:05:03.000
controller, the PS4 Controller when it starts, it just simply

100
00:05:03.000 --> 00:05:06.000
won't work. Alright, so for local control we're going to try Start Host

101
00:05:06.000 --> 00:05:09.000
and then Client Ready. And there we go! Look I can move forward, backwards,

102
00:05:09.000 --> 00:05:12.000
left, and right. It's kind of a boring gray color, but I'm moving it with my

103
00:05:12.000 --> 00:05:15.000
analog control. Sure I could put a speed scaling in here.

104
00:05:15.000 --> 00:05:18.000
I can also use the Cursor Keys. This is me using the Cursor Keys

105
00:05:18.000 --> 00:05:21.000
or W, S, A, D, or anything else that's bound to the horizontal

106
00:05:21.000 --> 00:05:24.000
and vertical axis respectively. Fantastic! OK

107
00:05:24.000 --> 00:05:27.000
so now, what happens when we try

108
00:05:27.000 --> 00:05:30.000
and deploy that same code over to

109
00:05:30.000 --> 00:05:33.000
our other machine? So, let's firstly make sure that the code here is saved,

110
00:05:33.000 --> 00:05:36.000
which it is. Then, go in

111
00:05:36.000 --> 00:05:39.000
and open it on the PC,

112
00:05:39.000 --> 00:05:42.000
on the Client Machine, in this case.

113
00:05:42.000 --> 00:05:45.000
And let's see what happens, if we just try and do

114
00:05:45.000 --> 00:05:48.000
this. Now, let's make sure we're doing the same thing. Yeah, we've got the players. It looks

115
00:05:48.000 --> 00:05:51.000
like it's all synced across, so I'm going to

116
00:05:51.000 --> 00:05:54.000
go over here to the Host. I'm going to start a Host.

117
00:05:54.000 --> 00:05:57.000
I didn't click pause for any particular reason there.

118
00:05:57.000 --> 00:06:00.000
And make the Client ready and make sure I can move it, and then I'm going to

119
00:06:00.000 --> 00:06:03.000
go over to the Client, I'm going to connect to the same IP Address as I'm

120
00:06:03.000 --> 00:06:06.000
used to doing, check that it's connect, which it is,

121
00:06:06.000 --> 00:06:09.000
and then, make the Client ready. Now, let's try the keys!

122
00:06:09.000 --> 00:06:12.000
You see my keys here, on

123
00:06:12.000 --> 00:06:15.000
this device, I'm actually just reaching over and touching the physical

124
00:06:15.000 --> 00:06:18.000
computer, move both players. Why do they move

125
00:06:18.000 --> 00:06:21.000
both players? I'm back on the Host, we find exactly the same thing that our

126
00:06:21.000 --> 00:06:24.000
controls are moving both of the players.

127
00:06:24.000 --> 00:06:27.000
OK, so what are we going to do about that? Well,

128
00:06:27.000 --> 00:06:30.000
let's go and take a look! What we need to do is just leave this Update

129
00:06:30.000 --> 00:06:33.000
loop, in the instance that we are

130
00:06:33.000 --> 00:06:36.000
the Local Player, or we're not the Local Player rather. So, if we are

131
00:06:36.000 --> 00:06:39.000
not the Local Player, then we don't want to try and translate

132
00:06:39.000 --> 00:06:42.000
the player object. So, only then

133
00:06:42.000 --> 00:06:45.000
one of the player objects would be effected. So,

134
00:06:45.000 --> 00:06:48.000
how are we going to do that? Well, there is a method that's quite

135
00:06:48.000 --> 00:06:51.000
handy and it is scoped under

136
00:06:51.000 --> 00:06:54.000
network behavior, so let's

137
00:06:54.000 --> 00:06:57.000
just take a look at the documentation, and you'll find that we

138
00:06:57.000 --> 00:07:00.000
have here a

139
00:07:00.000 --> 00:07:03.000
class

140
00:07:03.000 --> 00:07:06.000
called NetworkBehavior. There it is! And then, under

141
00:07:06.000 --> 00:07:09.000
that we have, if we search for local, we say isLocal

142
00:07:09.000 --> 00:07:12.000
Player. Now, NetworkBehavior inherits from MonoBehavior,

143
00:07:12.000 --> 00:07:15.000
and then, we have isLocalPlayer. Alright, and then here

144
00:07:15.000 --> 00:07:18.000
are some examples of how you may use it. So, why don't you go

145
00:07:18.000 --> 00:07:21.000
ahead and incorporate isLocalPlayer or the

146
00:07:21.000 --> 00:07:24.000
check for isNotLocalPlayer, into your scripts right now,

147
00:07:24.000 --> 00:07:27.000
and then come back and see what the effect

148
00:07:27.000 --> 00:07:30.000
is.

149
00:07:30.000 --> 00:07:33.000
[Temporary Silence]

150
00:07:33.000 --> 00:07:36.000
OK, welcome back guys! So, let's just

151
00:07:36.000 --> 00:07:39.000
take this piece of code, actually, straight from what they've got, and remembering

152
00:07:39.000 --> 00:07:42.000
that their script inherits from NetworkBehavior. So,

153
00:07:42.000 --> 00:07:45.000
we may as well do the same thing, that makes a lot of sense. So,

154
00:07:45.000 --> 00:07:48.000
there is no longer a MonoBehavior but a Network

155
00:07:48.000 --> 00:07:51.000
Behavior. It's got more

156
00:07:51.000 --> 00:07:54.000
richness to it. Now, what is it about NetworkBehavior

157
00:07:54.000 --> 00:07:57.000
that's not working? Are we missing a name space?

158
00:07:57.000 --> 00:08:00.000
Well,

159
00:08:00.000 --> 00:08:03.000
we're probably going to need to be using UnityEngine

160
00:08:03.000 --> 00:08:06.000
.Networking;

161
00:08:06.000 --> 00:08:09.000
And then, Network Behavior comes into scope and makes sense.

162
00:08:09.000 --> 00:08:12.000
Alright, then we put this check in. If

163
00:08:12.000 --> 00:08:15.000
not (!isLocalPlayer). So, if it's not a LocalPlayer,

164
00:08:15.000 --> 00:08:18.000
then just leave, otherwise,

165
00:08:18.000 --> 00:08:21.000
we carry on. Let's try and see what effect this has on

166
00:08:21.000 --> 00:08:24.000
what we're doing. Alright, I'm just going to pop over

167
00:08:24.000 --> 00:08:27.000
to the Client and make sure that that gets

168
00:08:27.000 --> 00:08:30.000
refreshed. Look at the drop box, come back here.

169
00:08:30.000 --> 00:08:33.000
Alright, so I'm going to play,

170
00:08:33.000 --> 00:08:36.000
start the host, make the Client ready, check

171
00:08:36.000 --> 00:08:39.000
the control, go oave here, just check my Player

172
00:08:39.000 --> 00:08:42.000
Script. Yeah, my lines have come in. Great!

173
00:08:42.000 --> 00:08:45.000
Start a Client and make the Client ready.

174
00:08:45.000 --> 00:08:48.000
OK, I'm trying now on the Client Machine's keyboard.

175
00:08:48.000 --> 00:08:51.000
Ah, it's just controling the Client. That's good! Let's go over

176
00:08:51.000 --> 00:08:54.000
to the Host, and that's just controlling the Host.

177
00:08:54.000 --> 00:08:57.000
Great! So, let's just pop into the script and see what we've done.

178
00:08:57.000 --> 00:09:00.000
We've basically used a NetworkBehavior

179
00:09:00.000 --> 00:09:03.000
.isLocalPlayer, but we're not having

180
00:09:03.000 --> 00:09:06.000
to say dot, because we're inheriting from Network

181
00:09:06.000 --> 00:09:09.000
Behavior. So, it just makes me wonder whether Player

182
00:09:09.000 --> 00:09:12.000
is the right name for this now,

183
00:09:12.000 --> 00:09:15.000
but I think I don't have a better name, right now. I just need to be a little

184
00:09:15.000 --> 00:09:18.000
bit careful. I've changed what it's inheriting from, and it's a little bit more

185
00:09:18.000 --> 00:09:21.000
specialist, so I'm tempted to

186
00:09:21.000 --> 00:09:24.000
call it PlayerNetworkBehavior or something but it's too long, so we're going to leave

187
00:09:24.000 --> 00:09:27.000
it with the Player. Just be aware that when you change the inheritance you

188
00:09:27.000 --> 00:09:30.000
want to think about your naming, otherwise, this is looking good. I don't think we

189
00:09:30.000 --> 00:09:33.000
need to Start, we'll put start back in if we need it, and we have a nice simple

190
00:09:33.000 --> 00:09:36.000
script. Of course, you might want to put speed scaling in here, but for

191
00:09:36.000 --> 00:09:39.000
now, we've achieved our goal of having

192
00:09:39.000 --> 00:09:42.000
the player move on multiple devices. Now, I what would like

193
00:09:42.000 --> 00:09:45.000
to do is just create a build and just have a

194
00:09:45.000 --> 00:09:48.000
three way test here. OK, so we're going to Build and Run.

195
00:09:48.000 --> 00:09:51.000
Oh hang on, I better make sure I'm on the right platform.

196
00:09:51.000 --> 00:09:54.000
Yeah that's right, Mac, PC, Linux! So, let's Build and Run

197
00:09:54.000 --> 00:09:57.000
that. Ahoy Matey Mac. That's cool! Replace

198
00:09:57.000 --> 00:10:00.000
so let it compile, and then we're just going to

199
00:10:00.000 --> 00:10:03.000
do a quick three way test,

200
00:10:03.000 --> 00:10:06.000
in a window. So,

201
00:10:06.000 --> 00:10:09.000
it's going to be tricky but tricky's fine. Let's

202
00:10:09.000 --> 00:10:12.000
Maximize here in Unity. So, this is the Unity

203
00:10:12.000 --> 00:10:15.000
Editor, in the Main Host Version.

204
00:10:15.000 --> 00:10:18.000
OK, so let's get that spooled up and running. Start the Host,

205
00:10:18.000 --> 00:10:21.000
get the Client ready, and there's the controls. Great! Now,

206
00:10:21.000 --> 00:10:24.000
here is the

207
00:10:24.000 --> 00:10:27.000
Mac Build. Now, this has got a fixed resolution, so I

208
00:10:27.000 --> 00:10:30.000
can't resize that. And what I'm going to do is start

209
00:10:30.000 --> 00:10:33.000
a Client, but we need to go to Local Host,

210
00:10:33.000 --> 00:10:36.000
alright. We're looking for the Server at Local Host and

211
00:10:36.000 --> 00:10:39.000
make the Client ready. Now, let's see what happens. That

212
00:10:39.000 --> 00:10:42.000
moves that. That moves the right hand

213
00:10:42.000 --> 00:10:45.000
one and this moves the left hand one

214
00:10:45.000 --> 00:10:48.000
and that's great! And we're not actually getting this input

215
00:10:48.000 --> 00:10:51.000
filtering problem now, because this window

216
00:10:51.000 --> 00:10:54.000
has focus, and this is the only

217
00:10:54.000 --> 00:10:57.000
thing being considered as the Local Player. And then, over here

218
00:10:57.000 --> 00:11:00.000
it's only that. So that's great! I can switch between them, and even on one computer

219
00:11:00.000 --> 00:11:03.000
I can quite happily control one or the other.

220
00:11:03.000 --> 00:11:06.000
So, what we finally want to do is just go over to the PC on the network,

221
00:11:06.000 --> 00:11:09.000
and try and connect into the Client there.

222
00:11:09.000 --> 00:11:12.000
Client Ready! I'm just going to Maximize this

223
00:11:12.000 --> 00:11:15.000
window, and then confusingly Minimize

224
00:11:15.000 --> 00:11:18.000
or UnMaximize the Team Viewer Window,

225
00:11:18.000 --> 00:11:21.000
so that what we have now is

226
00:11:21.000 --> 00:11:24.000
my main Mac Editor top left and then

227
00:11:24.000 --> 00:11:27.000
PC here in the bottom. And let's see

228
00:11:27.000 --> 00:11:30.000
what we've got. I just stopped to

229
00:11:30.000 --> 00:11:33.000
make my window a little tiny bit smaller here, on the Local

230
00:11:33.000 --> 00:11:36.000
Build. But things are not quite working properly, so

231
00:11:36.000 --> 00:11:39.000
the Local Build moving is not

232
00:11:39.000 --> 00:11:42.000
reflecting over on the PC version,

233
00:11:42.000 --> 00:11:45.000
on the PC Client, and then, the PC moving

234
00:11:45.000 --> 00:11:48.000
does not appear to be effected over there either.

235
00:11:48.000 --> 00:11:51.000
So, it's not all quite working right and there's a good reason for that, and we'll see

236
00:11:51.000 --> 00:11:54.000
why in the next video. But we have got as far

237
00:11:54.000 --> 00:11:57.000
as the two editors talking to each other, but they're doing something

238
00:11:57.000 --> 00:12:00.000
slightly special with sinking the transforms, and when we introduce a build

239
00:12:00.000 --> 00:12:03.000
it's not working and we'll see how to fix that in the next video.


WEBVTT

1
00:00:03.000 --> 00:00:06.000
Hey hey hey! So. we

2
00:00:06.000 --> 00:00:09.000
have our bouncing ball and our paddle. Now. we need to be able to

3
00:00:09.000 --> 00:00:12.000
move the paddle. and we're going to do that with the mouse.

4
00:00:12.000 --> 00:00:15.000
So. in this video. just as an overview.

5
00:00:15.000 --> 00:00:18.000
we're going to learn about Input.MousePosition.

6
00:00:18.000 --> 00:00:21.000
We're going to learn how to query the current screen width;

7
00:00:21.000 --> 00:00:24.000
well. in our case that's fixed to 800 pixels.

8
00:00:24.000 --> 00:00:27.000
We're going to move the paddle with this.

9
00:00:27.000 --> 00:00:30.000
transform.position. We're then going to stop the

10
00:00:30.000 --> 00:00:33.000
paddle flying outside of the game space. using Mathf.

11
00:00:33.000 --> 00:00:36.000
Clamp. not colliders. and

12
00:00:36.000 --> 00:00:39.000
we're then going to make a minor tweak to the paddle's

13
00:00:39.000 --> 00:00:42.000
Pixels to World Units.

14
00:00:42.000 --> 00:00:45.000
Cool! So. how are we going to do this? We need to just move this

15
00:00:45.000 --> 00:00:48.000
paddle around. Well. let's start by

16
00:00:48.000 --> 00:00:51.000
just fixing something I've noticed. which is that this paddle is

17
00:00:51.000 --> 00:00:54.000
not quite the right size. How do I know that? Well. if I

18
00:00:54.000 --> 00:00:57.000
list the left hand side of the Game Space. if the paddle

19
00:00:57.000 --> 00:01:00.000
is exactly 1 World Unit wide then here.

20
00:01:00.000 --> 00:01:03.000
when it touches the left hand side. I would expect it to be at point

21
00:01:03.000 --> 00:01:06.000
5. not 0.65. And the reason

22
00:01:06.000 --> 00:01:09.000
for that is we simply need to go to the

23
00:01:09.000 --> 00:01:12.000
sprite. In fact. while you're at it. do that left and right brick.

24
00:01:12.000 --> 00:01:15.000
and set their Pixels Per World Unit as 128.

25
00:01:15.000 --> 00:01:18.000
which is what we calculated before.

26
00:01:18.000 --> 00:01:21.000
Now. if you were to turn your grid gizmo back on.

27
00:01:21.000 --> 00:01:24.000
you'll find that the paddle is precisely 1 World Unit wide.

28
00:01:24.000 --> 00:01:27.000
And you see the paddle itself is 1 World Unit. 1 grid

29
00:01:27.000 --> 00:01:30.000
square. Just as a mini super mini simple exercise.

30
00:01:30.000 --> 00:01:33.000
I want you to fix that collider now. Bring it down

31
00:01:33.000 --> 00:01:36.000
to precisely the size of the brick. Go ahead and

32
00:01:36.000 --> 00:01:39.000
do that. The way I'm going to do it is

33
00:01:39.000 --> 00:01:42.000
just by resetting it there. Reset.

34
00:01:42.000 --> 00:01:45.000
Inspector. Box Collider 2D. Reset.

35
00:01:45.000 --> 00:01:48.000
Cool! So now. we have the paddle the correct size. and now. if I

36
00:01:48.000 --> 00:01:51.000
set it to the left hand side of the Play Space. my transform is precisely

37
00:01:51.000 --> 00:01:54.000
0.5. And on the right hand side

38
00:01:54.000 --> 00:01:57.000
of the Play Space. the transform will be 15.5

39
00:01:57.000 --> 00:02:00.000
precisely. Let's just prove that.

40
00:02:00.000 --> 00:02:03.000
There it is. Fantastic! OK!

41
00:02:03.000 --> 00:02:06.000
So. varying between 0.5 and 15.5

42
00:02:06.000 --> 00:02:09.000
is what we want to achieve. so

43
00:02:09.000 --> 00:02:12.000
how are we going to do it? Well. we're defining paddle behavior

44
00:02:12.000 --> 00:02:15.000
here. so we need to add a

45
00:02:15.000 --> 00:02:18.000
script to the paddle. our own custom component

46
00:02:18.000 --> 00:02:21.000
and we'll just simply call it Paddle.

47
00:02:21.000 --> 00:02:24.000
I'm just going to pop that script in

48
00:02:24.000 --> 00:02:27.000
the Scripts Folder. to be tidy and

49
00:02:27.000 --> 00:02:30.000
I'm going to dive into it.

50
00:02:30.000 --> 00:02:33.000
I want to know what this Input.Mouse

51
00:02:33.000 --> 00:02:36.000
Position thing is. So. one of the first things I always do with a new method is just

52
00:02:36.000 --> 00:02:39.000
print it; print (Input.

53
00:02:39.000 --> 00:02:42.000
mousePosition); and see what we get. Let's take

54
00:02:42.000 --> 00:02:45.000
a look. Printing every frame in the Update () method.

55
00:02:48.000 --> 00:02:51.000
Well. as I move the mouse around. look at the very bottom left of my

56
00:02:51.000 --> 00:02:54.000
screen. you see the coordinates. So. if I start at the bottom

57
00:02:54.000 --> 00:02:57.000
left. I have a position of roughly 00.

58
00:02:57.000 --> 00:03:00.000
If I go to the bottom right. in this case. it's 400

59
00:03:00.000 --> 00:03:03.000
pixelse wide. my current game screen. And as I go to the top

60
00:03:03.000 --> 00:03:06.000
right. it goes up to 400 by

61
00:03:06.000 --> 00:03:09.000
300. If I was to take my Game Tab out

62
00:03:09.000 --> 00:03:12.000
to detach it. and then to make it full

63
00:03:12.000 --> 00:03:15.000
size. then you'll see the coordiates go from 00

64
00:03:15.000 --> 00:03:18.000
to...

65
00:03:18.000 --> 00:03:21.000
...800. 0. to 800

66
00:03:21.000 --> 00:03:24.000
600. So. it's the X coordinate and then the Y coordinate

67
00:03:24.000 --> 00:03:27.000
and then the Z coordinate. That's how that's working.

68
00:03:27.000 --> 00:03:30.000
I'm just going to reattach my Game Window. because it's more convenient.

69
00:03:30.000 --> 00:03:33.000
Great! So. that's what

70
00:03:33.000 --> 00:03:36.000
Input.MousePosition gives us. which is just fine.

71
00:03:36.000 --> 00:03:39.000
Now. I want to look at the X value of

72
00:03:39.000 --> 00:03:42.000
that Input.MousePosition. so I do a .x and it takes the

73
00:03:42.000 --> 00:03:45.000
X F for Field off.

74
00:03:45.000 --> 00:03:48.000
And you can see from the tool tip. that that's a float.

75
00:03:48.000 --> 00:03:51.000
so if I was to just do that and run it. you'll just see

76
00:03:51.000 --> 00:03:54.000
now that I only have the X position being logged.

77
00:03:54.000 --> 00:03:57.000
in the very bottom left of the screen. Great! So. that's

78
00:03:57.000 --> 00:04:00.000
how far or long the screen the mouse is in pixels.

79
00:04:00.000 --> 00:04:03.000
The...

80
00:04:03.000 --> 00:04:06.000
current screen width is given by Screen.

81
00:04:06.000 --> 00:04:09.000
width); like that. So. if I was to divide the current

82
00:04:09.000 --> 00:04:12.000
X position in pixels by the screen width in pixels.

83
00:04:12.000 --> 00:04:15.000
we'll get a number varying between 0 and 1. Let's take a look.

84
00:04:15.000 --> 00:04:18.000
However big my Game Screen is.

85
00:04:18.000 --> 00:04:21.000
when I'm on the left hand side of it. I log out 0.

86
00:04:21.000 --> 00:04:24.000
In the middle 0.5 and on the right.

87
00:04:24.000 --> 00:04:27.000
1. Now. we're only looking at the X position here. the X

88
00:04:27.000 --> 00:04:30.000
axis. That's great! Now. if the window was to change

89
00:04:30.000 --> 00:04:33.000
size like this. the same thing will happen.

90
00:04:33.000 --> 00:04:36.000
0.51. So. this is our relative

91
00:04:36.000 --> 00:04:39.000
mouse X position.

92
00:04:39.000 --> 00:04:42.000
If you like. it's the relative mouse position in X.

93
00:04:42.000 --> 00:04:45.000
to the entire screen width. Now. if we

94
00:04:45.000 --> 00:04:48.000
multiply that by 16. it's going to tell us how many

95
00:04:48.000 --> 00:04:51.000
Game Units we have. because the Game Space is

96
00:04:51.000 --> 00:04:54.000
16 World Units wide. Let's try that.

97
00:04:54.000 --> 00:04:57.000
Now. 0 on the left. of course. but 8 in the middle and

98
00:04:57.000 --> 00:05:00.000
16 on the right. So now. we have the mouse position

99
00:05:00.000 --> 00:05:03.000
in Game Units or in

100
00:05:03.000 --> 00:05:06.000
blocks. you know whole or half numbers of blocks.

101
00:05:06.000 --> 00:05:09.000
So. why don't we call it that. So. your first mini

102
00:05:09.000 --> 00:05:12.000
challenge is to just. I want you to print out instead of this. I want

103
00:05:12.000 --> 00:05:15.000
you to print a variable. and that variable is called

104
00:05:15.000 --> 00:05:18.000
mouse pause in blocks.

105
00:05:18.000 --> 00:05:21.000
OK. like that! Setup a variable of the appropriate type.

106
00:05:21.000 --> 00:05:24.000
set the expression we just created to it. and print the

107
00:05:24.000 --> 00:05:27.000
variable. not the expression. so you get the same behavior as

108
00:05:27.000 --> 00:05:30.000
we just had. with the numbers in the console varying from 0

109
00:05:30.000 --> 00:05:33.000
to 16 but you're using a variable instead. Try that now.

110
00:05:33.000 --> 00:05:36.000
[Temporary Silence]

111
00:05:36.000 --> 00:05:39.000
OK welcome

112
00:05:39.000 --> 00:05:42.000
back! It's a pretty simple job. You cut that out. you

113
00:05:42.000 --> 00:05:45.000
realize that it's a float from the documentation or from looking

114
00:05:45.000 --> 00:05:48.000
around. you give it it's name. which

115
00:05:48.000 --> 00:05:51.000
is mousePosInBlocks.

116
00:05:51.000 --> 00:05:54.000
Nice long descriptive

117
00:05:54.000 --> 00:05:57.000
name. with a small letter. Put a semicolon on the end.

118
00:05:57.000 --> 00:06:00.000
and then. simply print mousePosInBlocks.

119
00:06:00.000 --> 00:06:03.000
So. you're going to get exactly the same behavior as you had before.

120
00:06:03.000 --> 00:06:06.000
OK. 0 to 16.

121
00:06:06.000 --> 00:06:09.000
Fantastic! OK. so how are

122
00:06:09.000 --> 00:06:12.000
you now going to actually

123
00:06:12.000 --> 00:06:15.000
move this thing round. Well. let's get rid of the print statement. we don't need it.

124
00:06:15.000 --> 00:06:18.000
Well. what is this thing? Well. actually it happens

125
00:06:18.000 --> 00:06:21.000
that the keyword this refers to the current object.

126
00:06:21.000 --> 00:06:24.000
so that's fantastic! That is the paddle. that's the context

127
00:06:24.000 --> 00:06:27.000
we're in. Now. it's the transform we want to move.

128
00:06:27.000 --> 00:06:30.000
and it's the position of the transform we want to move. OK.

129
00:06:30.000 --> 00:06:33.000
And you may think you can just say .x the

130
00:06:33.000 --> 00:06:36.000
field. and you may think you can just go

131
00:06:36.000 --> 00:06:39.000
OK. set that to mousePosIn

132
00:06:39.000 --> 00:06:42.000
Blocks. Well. it's a reasonable expectation. but it doesn't

133
00:06:42.000 --> 00:06:45.000
work in C# in Unity. Let's see what error we get.

134
00:06:45.000 --> 00:06:48.000
because you'll probably see this error in the future. "Cannot

135
00:06:48.000 --> 00:06:51.000
modify a value type.

136
00:06:51.000 --> 00:06:54.000
return value of Unity Engine transform.position"

137
00:06:54.000 --> 00:06:57.000
"Consider storing the value in a temporary variable." It's telling

138
00:06:57.000 --> 00:07:00.000
you the solution. and the problem is that this

139
00:07:00.000 --> 00:07:03.000
transform here does not want you to set

140
00:07:03.000 --> 00:07:06.000
its individual components. It wants you to set transform.

141
00:07:06.000 --> 00:07:09.000
Position as a

142
00:07:09.000 --> 00:07:12.000
Vector3. So. if we were to look at the docs for

143
00:07:12.000 --> 00:07:15.000
transform.Position.

144
00:07:15.000 --> 00:07:18.000
here it is a Vector3. So.

145
00:07:18.000 --> 00:07:21.000
Vector3 I think is something you haven't seen before. so if you click

146
00:07:21.000 --> 00:07:24.000
on the word Vector3. it'll take you to the manual page for

147
00:07:24.000 --> 00:07:27.000
Vector 3. Note. the URL is now forward slash

148
00:07:27.000 --> 00:07:30.000
Vector3. And Vector3 is something called a

149
00:07:30.000 --> 00:07:33.000
structure. As it says. it's used throughout

150
00:07:33.000 --> 00:07:36.000
Unity to pass 3D positions and directions around.

151
00:07:36.000 --> 00:07:39.000
It also contains functions for doing common

152
00:07:39.000 --> 00:07:42.000
vector operations. so basically. it's

153
00:07:42.000 --> 00:07:45.000
three floats. We met float a minute ago. it's a floating point number.

154
00:07:45.000 --> 00:07:48.000
It's a decimal number. and a Vector3

155
00:07:48.000 --> 00:07:51.000
contains three floats. Even though these guys don't look like

156
00:07:51.000 --> 00:07:54.000
floats here. because these are precise up. down. left. right

157
00:07:54.000 --> 00:07:57.000
shortcuts. it is three

158
00:07:57.000 --> 00:08:00.000
floats. And there's lots of stuff you can do with it but for now you just need to know

159
00:08:00.000 --> 00:08:03.000
that a Vector3 is a way of compactly storing floats

160
00:08:03.000 --> 00:08:06.000
in one place. that represent the X.

161
00:08:06.000 --> 00:08:09.000
Y. and Z coordinates.

162
00:08:09.000 --> 00:08:12.000
OK. And you we trying to

163
00:08:12.000 --> 00:08:15.000
set a component of it. directly. Well. it wants you to build up

164
00:08:15.000 --> 00:08:18.000
the Vector3 first. so let's do that. And if you

165
00:08:18.000 --> 00:08:21.000
see that type of problem what you do is you come along and create yourself a local variable.

166
00:08:21.000 --> 00:08:24.000
a Vector3. of type Vector3.

167
00:08:24.000 --> 00:08:27.000
Now. what is a Vector3? It's just three numbers basically. it's a

168
00:08:27.000 --> 00:08:30.000
struct of three numbers. and we're going to call

169
00:08:30.000 --> 00:08:33.000
it paddlePos. It's going to be the full three dimensional

170
00:08:33.000 --> 00:08:36.000
paddle position. and we're going to construct it with a new keyword.

171
00:08:36.000 --> 00:08:39.000
There's a new Vector3. it's a very typical pattern you'll

172
00:08:39.000 --> 00:08:42.000
use. and it's going to have three values. Well. the

173
00:08:42.000 --> 00:08:45.000
first float. the X value initially will make 0.

174
00:08:45.000 --> 00:08:48.000
Actually. let's make it 0.5. make it on the left hand side of the Play

175
00:08:48.000 --> 00:08:51.000
Space. We need an f to signify float.

176
00:08:51.000 --> 00:08:54.000
If we don't put the f. the system will try and store it as a double

177
00:08:54.000 --> 00:08:57.000
and it won't fit. What do we want as the

178
00:08:57.000 --> 00:09:00.000
initial Y position. Well. let's try 0 to start with.

179
00:09:00.000 --> 00:09:03.000
and then. let's try 0 float for the Z. The

180
00:09:03.000 --> 00:09:06.000
Z will always stay at 0. We

181
00:09:06.000 --> 00:09:09.000
won't use this mouse position in blocks quite yet. but now try

182
00:09:09.000 --> 00:09:12.000
this.transform.position =

183
00:09:12.000 --> 00:09:15.000
paddlePos. which is what we're going to use as a variable for the transform position.

184
00:09:15.000 --> 00:09:18.000
So. we've used this for the

185
00:09:18.000 --> 00:09:21.000
first time. I just want to take a moment to explain exactly what this

186
00:09:21.000 --> 00:09:24.000
is. This is the instance of the current

187
00:09:24.000 --> 00:09:27.000
script. so it is the paddle script. the component

188
00:09:27.000 --> 00:09:30.000
itself. So if you. for instance. were to destroy

189
00:09:30.000 --> 00:09:33.000
this then what you would be destroying is the paddle

190
00:09:33.000 --> 00:09:36.000
script. against the paddle object. So. that's what

191
00:09:36.000 --> 00:09:39.000
this is. as per the diagram. I used

192
00:09:39.000 --> 00:09:42.000
this dot throughout the section. but it's very much optional.

193
00:09:42.000 --> 00:09:45.000
The command. transform.position =

194
00:09:45.000 --> 00:09:48.000
paddlePos. without this dot would work just fine.

195
00:09:48.000 --> 00:09:51.000
too. Let's try

196
00:09:51.000 --> 00:09:54.000
it. it should end up a 0.5 on the left hand side. 0

197
00:09:54.000 --> 00:09:57.000
Y and 0 Z. Let's see what happens.

198
00:09:57.000 --> 00:10:00.000
So. there's your paddle here. let's just move it away from 0

199
00:10:00.000 --> 00:10:03.000
Y. click play. and it moves

200
00:10:03.000 --> 00:10:06.000
to the bottom left. I hope you saw that. If it's too quick for you. click

201
00:10:06.000 --> 00:10:09.000
pause first and then play. Now. look at the paddle's position.

202
00:10:09.000 --> 00:10:12.000
It is where we asked it to be 0.5 X and

203
00:10:12.000 --> 00:10:15.000
0 Y. We actually don't want the Y to change. if I

204
00:10:15.000 --> 00:10:18.000
set the paddle's position here. let's say when

205
00:10:18.000 --> 00:10:21.000
I start in the Scene Editor. I don't

206
00:10:21.000 --> 00:10:24.000
want it to change when the game runs. So. when we

207
00:10:24.000 --> 00:10:27.000
construct this paddle position. instead of saying

208
00:10:27.000 --> 00:10:30.000
0 in the beginning. why don't we just say

209
00:10:30.000 --> 00:10:33.000
this.transform.position

210
00:10:33.000 --> 00:10:36.000
.y. We're just saying

211
00:10:36.000 --> 00:10:39.000
keep the current Y coordinate that you started with. Now.

212
00:10:39.000 --> 00:10:42.000
when we run it. see how it

213
00:10:42.000 --> 00:10:45.000
stays where it is in the Y. let's just do it in Pause Mode.

214
00:10:45.000 --> 00:10:48.000
but moves over to the left. Great! So. we've

215
00:10:48.000 --> 00:10:51.000
laid the foundation now to move this thing. left

216
00:10:51.000 --> 00:10:54.000
and right. All we need to do now

217
00:10:54.000 --> 00:10:57.000
is. we have a paddle position. it's of

218
00:10:57.000 --> 00:11:00.000
three numbers it's an X. Y. Z. Vector3.

219
00:11:00.000 --> 00:11:03.000
We just need to modify it's X value. so let's just go ahead and do

220
00:11:03.000 --> 00:11:06.000
that: paddlePos.x

221
00:11:06.000 --> 00:11:09.000
and we're allowed to do that here... = mouse

222
00:11:09.000 --> 00:11:12.000
PosInBlocks. Now. if you were to just do that. let's try it.

223
00:11:12.000 --> 00:11:15.000
and a surprisingly good result.

224
00:11:15.000 --> 00:11:18.000
which is that the paddle moves around. But of course.

225
00:11:18.000 --> 00:11:21.000
the paddle can go right outside the Play Space on either side.

226
00:11:21.000 --> 00:11:24.000
so the final thing we need to sort out is that. I'm going to

227
00:11:24.000 --> 00:11:27.000
reset my default paddle position to 8.

228
00:11:27.000 --> 00:11:30.000
not 89... 0.5. so it's kind of below

229
00:11:30.000 --> 00:11:33.000
the ball and there in the Game Space. right in the middle.

230
00:11:33.000 --> 00:11:36.000
So. here's a challenge for you! I want you to

231
00:11:36.000 --> 00:11:39.000
constrain the paddle to the Game Space. Use the Mathf.Clamp

232
00:11:39.000 --> 00:11:42.000
method. The documentation for it is here.

233
00:11:42.000 --> 00:11:45.000
This just gets you used to looking up documentation.

234
00:11:45.000 --> 00:11:48.000
There are some examples here.

235
00:11:48.000 --> 00:11:51.000
and what I want you to do is set the minimum to 0.5

236
00:11:51.000 --> 00:11:54.000
and the maximum to 15.5.

237
00:11:54.000 --> 00:11:57.000
OK. have a go at doing that! And when you're finished. what should happen

238
00:11:57.000 --> 00:12:00.000
is you drag the paddle around. but it won't be allowed to leave the

239
00:12:00.000 --> 00:12:03.000
left or right of the Game Space. Have a go at that now. and I'll see

240
00:12:03.000 --> 00:12:06.000
you in a moment.

241
00:12:06.000 --> 00:12:09.000
OK welcome back!

242
00:12:09.000 --> 00:12:12.000
So. let's take a look at how we do that. So. using the pattern of

243
00:12:12.000 --> 00:12:15.000
Mathf.Clamp. where you have

244
00:12:15.000 --> 00:12:18.000
the value that you want to

245
00:12:18.000 --> 00:12:21.000
clamp. it's minimum. and it's maximum. That's the pattern. so

246
00:12:21.000 --> 00:12:24.000
let's take a look.

247
00:12:24.000 --> 00:12:27.000
What we do is we say the

248
00:12:27.000 --> 00:12:30.000
paddle position in X doesn't just = the paddle position in X.

249
00:12:30.000 --> 00:12:33.000
as it was. but it's Mathf.Clamp.

250
00:12:33.000 --> 00:12:36.000
the mouse position.

251
00:12:36.000 --> 00:12:39.000
but comma 0.5 float is the

252
00:12:39.000 --> 00:12:42.000
minimum. and 15.5 float

253
00:12:42.000 --> 00:12:45.000
is the maximum. Let's try that!

254
00:12:48.000 --> 00:12:51.000
I need to bounce the ball between each thing. but look. it won't leave the right

255
00:12:51.000 --> 00:12:54.000
and won't leave the left. Congratulations!

256
00:12:54.000 --> 00:12:57.000
We have the working of a player ball

257
00:12:57.000 --> 00:13:00.000
Block Breaker game. So. I shall see you shortly. where

258
00:13:00.000 --> 00:13:03.000
we'll continue to build on what we've learned. As a recap.

259
00:13:03.000 --> 00:13:06.000
here is what we covered in this lecture.


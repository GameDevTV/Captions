WEBVTT

1
00:00:03.000 --> 00:00:06.000
Hi, welcome back! So

2
00:00:06.000 --> 00:00:09.000
thankfully, we have a minor bug with our sound system. I said

3
00:00:09.000 --> 00:00:12.000
thankfully, because it gives us a opportunity to really explore something

4
00:00:12.000 --> 00:00:15.000
quite important. So, if you're in the Start Menu here in

5
00:00:15.000 --> 00:00:18.000
Block Breaker and you click Start, listen to the music.

6
00:00:18.000 --> 00:00:21.000
[Music Playing] Now, on

7
00:00:21.000 --> 00:00:24.000
my machine, it's incredibly quick and subtle, but a lot

8
00:00:24.000 --> 00:00:27.000
of users are reporting that there's a significant glitch in the

9
00:00:27.000 --> 00:00:30.000
sound, when they click Start. And it's because a second

10
00:00:30.000 --> 00:00:33.000
music player is running, very very

11
00:00:33.000 --> 00:00:36.000
briefly, but the question is why? So, let's start the

12
00:00:36.000 --> 00:00:39.000
story from the beginning. We're going to introduce

13
00:00:39.000 --> 00:00:42.000
Script Execution Order, explain exactly

14
00:00:42.000 --> 00:00:45.000
when scripts get called, then debug

15
00:00:45.000 --> 00:00:48.000
and you're going to explain the problem and then, we'll fix it.

16
00:00:48.000 --> 00:00:51.000
Cool! So, let's look at Unity's manual entry

17
00:00:51.000 --> 00:00:54.000
for the execution order. So, you've seen, in your script

18
00:00:54.000 --> 00:00:57.000
so far, things like Start and

19
00:00:57.000 --> 00:01:00.000
Awake, that's fine.

20
00:01:00.000 --> 00:01:03.000
The question is, when do they get called exactly?

21
00:01:03.000 --> 00:01:06.000
What other methods do we they have, and how does this relate

22
00:01:06.000 --> 00:01:09.000
between different scripts. So, let's focus

23
00:01:09.000 --> 00:01:12.000
on the basics for the moment. We have an Awake method,

24
00:01:12.000 --> 00:01:15.000
which we haven't used yet, which gets called the

25
00:01:15.000 --> 00:01:18.000
moment the scene loads. Then, after

26
00:01:18.000 --> 00:01:21.000
that and only once for every script, you get the Start Method

27
00:01:21.000 --> 00:01:24.000
called, and then, we go through some fixed update loops for the

28
00:01:24.000 --> 00:01:27.000
physics and then the Update loop gets called.

29
00:01:27.000 --> 00:01:30.000
And then, as you can see from this black circle, we keep coming around again

30
00:01:30.000 --> 00:01:33.000
and again, running the physics updates and the

31
00:01:33.000 --> 00:01:36.000
game logic updates. OK.

32
00:01:36.000 --> 00:01:39.000
So, the important thing to remember now is it goes Awake, Start, and then Update,

33
00:01:39.000 --> 00:01:42.000
Update, Update. OK, how does this work

34
00:01:42.000 --> 00:01:45.000
between scripts? Say we've got many scripts running, well then,

35
00:01:45.000 --> 00:01:48.000
what order do things get called in? Very good question,

36
00:01:48.000 --> 00:01:51.000
so we've made you this diagram. Now, remember where this diagram

37
00:01:51.000 --> 00:01:54.000
is in the course, because this is going to be really handy

38
00:01:54.000 --> 00:01:57.000
for you. So, in our game

39
00:01:57.000 --> 00:02:00.000
when we get to the second level, i.e. at what

40
00:02:00.000 --> 00:02:03.000
Level 1, once we click Start we're in this situation.

41
00:02:03.000 --> 00:02:06.000
We have three script instances, very very briefly, at the

42
00:02:06.000 --> 00:02:09.000
Start. We have the MusicPlayer, that came from the Start Scene,

43
00:02:09.000 --> 00:02:12.000
we have the new MusicPlayer

44
00:02:12.000 --> 00:02:15.000
in the next scene, that's about to self destruct but hasn't done yet,

45
00:02:15.000 --> 00:02:18.000
and then, we have a LevelManager instance as well.

46
00:02:18.000 --> 00:02:21.000
So, what actually happens is it cycles through

47
00:02:21.000 --> 00:02:24.000
like this. The awake method gets called for one of the things, let's say

48
00:02:24.000 --> 00:02:27.000
one of the music players then the next, then the next script instance.

49
00:02:27.000 --> 00:02:30.000
Then, all the starts get called, in order, and then all

50
00:02:30.000 --> 00:02:33.000
the updates get called; time is

51
00:02:33.000 --> 00:02:36.000
going down the page. Now, this is really

52
00:02:36.000 --> 00:02:39.000
important to understand. The other thing that's really important to understand is

53
00:02:39.000 --> 00:02:42.000
that we don't know which instances of these scripts

54
00:02:42.000 --> 00:02:45.000
are going to get called, in which order. There is something

55
00:02:45.000 --> 00:02:48.000
in Unity called the Script Execution Order.

56
00:02:48.000 --> 00:02:51.000
You can control it under Project Settings, Script

57
00:02:51.000 --> 00:02:54.000
Execution Order, but we can only control things

58
00:02:54.000 --> 00:02:57.000
by their class name. So

59
00:02:57.000 --> 00:03:00.000
even if we try to use Script Execution Order, it would be the wrong

60
00:03:00.000 --> 00:03:03.000
solution here, because whereas we could tell it to

61
00:03:03.000 --> 00:03:06.000
execute all of the LevelManager instances

62
00:03:06.000 --> 00:03:09.000
before the MusicPlayer instances, for example,

63
00:03:09.000 --> 00:03:12.000
or the other way around. We could not say to it the

64
00:03:12.000 --> 00:03:15.000
order in which it needs to execute the MusicPlayer

65
00:03:15.000 --> 00:03:18.000
instances; this would be the wrong approach to try and solve this

66
00:03:18.000 --> 00:03:21.000
problem. So, this is how the methods are getting

67
00:03:21.000 --> 00:03:24.000
called, so what I want you to do is

68
00:03:24.000 --> 00:03:27.000
to, let's put some debug statements into

69
00:03:27.000 --> 00:03:30.000
our code to try and work out what's going on. Go back

70
00:03:30.000 --> 00:03:33.000
to MusicPlayer.cs, and you can either

71
00:03:33.000 --> 00:03:36.000
say print, or I'm going to use Debug.Log,

72
00:03:36.000 --> 00:03:39.000
in this instance, because we are debugging.

73
00:03:39.000 --> 00:03:42.000
The Debug.Log is very very similar in its nature to print.

74
00:03:42.000 --> 00:03:45.000
So, what are we going to log? Well, I want to say

75
00:03:45.000 --> 00:03:48.000
that ("Music player

76
00:03:48.000 --> 00:03:51.000
awake,

77
00:03:51.000 --> 00:03:54.000
ID

78
00:03:54.000 --> 00:03:57.000
code... I'm actually going to do Awake, with a capital.

79
00:03:57.000 --> 00:04:00.000
OK and then,

80
00:04:00.000 --> 00:04:03.000
I'm going to pout a space and then, I'm going to say

81
00:04:06.000 --> 00:04:09.000
get instance

82
00:04:09.000 --> 00:04:12.000
ID.  Alright and then, it's a method,

83
00:04:12.000 --> 00:04:15.000
and you'll see why in a moment, but what I want to do is we're basically going to log

84
00:04:15.000 --> 00:04:18.000
to say, hey, I've woken up and I'm going to give you a unique ID do say

85
00:04:18.000 --> 00:04:21.000
who I am. Let's put another debug

86
00:04:21.000 --> 00:04:24.000
statement, in the Start here

87
00:04:24.000 --> 00:04:27.000
as well. Right at the start void Start.

88
00:04:27.000 --> 00:04:30.000
"Music player Start"

89
00:04:30.000 --> 00:04:33.000
So now, what's going to happen is, when you run

90
00:04:33.000 --> 00:04:36.000
the game your different instances of the MusicPlayer

91
00:04:36.000 --> 00:04:39.000
and namely the one on the Start Scene,

92
00:04:39.000 --> 00:04:42.000
in here, that we have told to persist and not be

93
00:04:42.000 --> 00:04:45.000
destroyed on load. And then, the one that we've

94
00:04:45.000 --> 00:04:48.000
left on Level 1, really just to be awkward,

95
00:04:48.000 --> 00:04:51.000
you will have two different instances of the MusicPlayer, in this scene,

96
00:04:51.000 --> 00:04:54.000
when you get to it. So, I've got a challenge for you. What I want you to

97
00:04:54.000 --> 00:04:57.000
do is, I want you to run the game with that code in

98
00:04:57.000 --> 00:05:00.000
place, look at the Console logs,

99
00:05:00.000 --> 00:05:03.000
and digest the information from the previous slide.

100
00:05:03.000 --> 00:05:06.000
This one, showing you the Order of Execution, and

101
00:05:06.000 --> 00:05:09.000
then, write a brief explanation of the bug. Just jot it

102
00:05:09.000 --> 00:05:12.000
down on a bit of paper, and it needs to be a sentence, but by

103
00:05:12.000 --> 00:05:15.000
writing it, you can be sure that you are thinking about it carefully.

104
00:05:15.000 --> 00:05:18.000
And also, when I explain what the cause

105
00:05:18.000 --> 00:05:21.000
of the bug is, then you can compare notes, literally

106
00:05:21.000 --> 00:05:24.000
from what I say against what you wrote and see if you agree with me.

107
00:05:24.000 --> 00:05:27.000
So go ahead! Pause the video, work out what is causing this

108
00:05:27.000 --> 00:05:30.000
minor music glitch, write it down, and I'll see you soon.

109
00:05:30.000 --> 00:05:33.000
Fantastic!

110
00:05:33.000 --> 00:05:36.000
Welcome back! So, let's take a look at this running now. Go over to Unity,

111
00:05:36.000 --> 00:05:39.000
go to the Start Scene, Start Menu

112
00:05:39.000 --> 00:05:42.000
Scene, Click Play. OK!

113
00:05:42.000 --> 00:05:45.000
Fantastic! I'm going to look at the Console, and we have a

114
00:05:45.000 --> 00:05:48.000
MusicPlayer Awake and then a MusicPlayer Start, and then, the

115
00:05:48.000 --> 00:05:51.000
ID of the MusicPlayer. That's fine! So that's that single MusicPlayer

116
00:05:51.000 --> 00:05:54.000
on the Start Scene, that's been told not to persist. Great!

117
00:05:54.000 --> 00:05:57.000
So, that's a good starting point. Now, I'm going to

118
00:05:57.000 --> 00:06:00.000
clear the console before I carry on, because it's a bit

119
00:06:00.000 --> 00:06:03.000
clearer to see what's happening. So, let's click Start.

120
00:06:03.000 --> 00:06:06.000
OK, here we go! We're into the

121
00:06:06.000 --> 00:06:09.000
level now. The level gets loaded.

122
00:06:09.000 --> 00:06:12.000
The MusicPlayer 9832

123
00:06:12.000 --> 00:06:15.000
becomes Awake. Then, there's going to be a

124
00:06:15.000 --> 00:06:18.000
pause while any other script's Awake methods

125
00:06:18.000 --> 00:06:21.000
get called. Remember, from the slide that all the

126
00:06:21.000 --> 00:06:24.000
awakes get called first. So, the Awake on

127
00:06:24.000 --> 00:06:27.000
the LevelManager will be being called, and

128
00:06:27.000 --> 00:06:30.000
also depending on the order that your current game

129
00:06:30.000 --> 00:06:33.000
decides to run the two instances

130
00:06:33.000 --> 00:06:36.000
of the MusicPlayer, and the other MusicPlayer's Awake may be being

131
00:06:36.000 --> 00:06:39.000
called as well. It's not in this case. So then,

132
00:06:39.000 --> 00:06:42.000
after all those awakes have happened, then the Start occurs,

133
00:06:42.000 --> 00:06:45.000
on this MusicPlayer instance and then, it self destructs.

134
00:06:45.000 --> 00:06:48.000
So, it's in this gap, between lines 2 and 3,

135
00:06:48.000 --> 00:06:51.000
here between these two where you're getting the music playing

136
00:06:51.000 --> 00:06:54.000
twice, before the self destruct, so that's what's causing

137
00:06:54.000 --> 00:06:57.000
the problem. That's what's causing that

138
00:06:57.000 --> 00:07:00.000
annoying little tiny glitch that you're hearing. OK

139
00:07:00.000 --> 00:07:03.000
cool! So, well done, if you spotted that and you worked out how it works. Let's

140
00:07:03.000 --> 00:07:06.000
take a look at a very simple solution. The very simple

141
00:07:06.000 --> 00:07:09.000
solution is to take all the code in the if block and

142
00:07:09.000 --> 00:07:12.000
just put it into the Awake, so that we actually make the decision whether

143
00:07:12.000 --> 00:07:15.000
we're going to self destruct, on Awake rather than on

144
00:07:15.000 --> 00:07:18.000
Start, so earlier. OK!

145
00:07:18.000 --> 00:07:21.000
I've saved that code. Let's run again.

146
00:07:21.000 --> 00:07:24.000
Starting on the Start Scene.

147
00:07:24.000 --> 00:07:27.000
Here we go! Get the same sort of thing here. Clear!

148
00:07:27.000 --> 00:07:30.000
Now when we play, we get Awake

149
00:07:30.000 --> 00:07:33.000
and then, immediately before the Start even runs,

150
00:07:33.000 --> 00:07:36.000
we get the duplicate MusicPlayer. It's self destructing, we

151
00:07:36.000 --> 00:07:39.000
don't even get the message that the Start method has run, because the

152
00:07:39.000 --> 00:07:42.000
object has been destroyed. OK!

153
00:07:42.000 --> 00:07:45.000
So, that's it it's gone, and we're just left with one

154
00:07:45.000 --> 00:07:48.000
MusicPlayer in the scene, that's happily playing the music.

155
00:07:48.000 --> 00:07:51.000
So well done! Hopefully you've understood that. As a

156
00:07:51.000 --> 00:07:54.000
recap, the Script Execution Order goes like something

157
00:07:54.000 --> 00:07:57.000
like this. All

158
00:07:57.000 --> 00:08:00.000
the instances of MusicPlayer, may occur

159
00:08:00.000 --> 00:08:03.000
before a LevelManager or the instance,

160
00:08:03.000 --> 00:08:06.000
or instances of LevelManager may occur before MusicPlayer. That

161
00:08:06.000 --> 00:08:09.000
script order is not determined, unless you tell Unity explicitly.

162
00:08:09.000 --> 00:08:12.000
The Awake methods all get called first, so it cycles

163
00:08:12.000 --> 00:08:15.000
through the awakes, and then, it cycles through the starts.

164
00:08:15.000 --> 00:08:18.000
And the problem we had, was that we were initializing

165
00:08:18.000 --> 00:08:21.000
on Start, not Awake, so there was a gap between the music playing

166
00:08:21.000 --> 00:08:24.000
in the duplicate on Awake, and then, you had to wait

167
00:08:24.000 --> 00:08:27.000
until the Start method occurred, before it actually self destructed.

168
00:08:27.000 --> 00:08:30.000
And the solution was simply moving this

169
00:08:30.000 --> 00:08:33.000
code to Awake.

170
00:08:33.000 --> 00:08:36.000
Fantastic! You can remove your Debug lines, if you want.

171
00:08:36.000 --> 00:08:39.000
I don't think they need to be there any longer.

172
00:08:39.000 --> 00:08:42.000
In fact, you can move the whole Start method. There you go,

173
00:08:42.000 --> 00:08:45.000
nice and clear. The if statement is inside Awake,

174
00:08:45.000 --> 00:08:48.000
and your MusicPlayer glitch should be gone forever.

175
00:08:48.000 --> 00:08:51.000
By the way, if you want some further reading, this whole

176
00:08:51.000 --> 00:08:54.000
usage of statics and instances like this, and then,

177
00:08:54.000 --> 00:08:57.000
saying does an instance of this thing already exist,

178
00:08:57.000 --> 00:09:00.000
is called a Singleton Pattern.

179
00:09:00.000 --> 00:09:03.000
Let me show you a couple of good resources. Firstly,

180
00:09:03.000 --> 00:09:06.000
UnityPatterns.com about Singletons, is a

181
00:09:06.000 --> 00:09:09.000
good place to go, and it will show you three different types.

182
00:09:09.000 --> 00:09:12.000
We're basically using the Persistent Singleton, which is

183
00:09:12.000 --> 00:09:15.000
slightly different logic. So, that's one way to look up, one

184
00:09:15.000 --> 00:09:18.000
place to look up Singletons. The other good resource here,

185
00:09:18.000 --> 00:09:21.000
is there's a book called GameProgrammingPatterns.com,

186
00:09:21.000 --> 00:09:24.000
which is a great book. I've got it in hardback or

187
00:09:24.000 --> 00:09:27.000
soft-back, but if you scroll down to the web, you can read now.

188
00:09:27.000 --> 00:09:30.000
And then, there's a section on Singletons here.

189
00:09:30.000 --> 00:09:33.000
Alright, this will again tell you about the Singleton Pattern.

190
00:09:33.000 --> 00:09:36.000
So, C# in Unity doesn't explicitly

191
00:09:36.000 --> 00:09:39.000
support Singletons, but we create a Singleton Pattern

192
00:09:39.000 --> 00:09:42.000
by the way that we use our code. So congratulations!

193
00:09:42.000 --> 00:09:45.000
And hopefully that's all clearer for you, and I'll see you soon!


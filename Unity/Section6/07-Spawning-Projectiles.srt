Kind: captions
Language: en

00:00:00,000 --> 00:00:08,809
Hello and welcome back! In this video we're going to be looking at how to spawn

00:00:08,809 --> 00:00:14,540
projectiles. We're going to be creating
projectiles from our player, so that

00:00:14,540 --> 00:00:19,650
whenever the player, the the user, presses
space then there is a projectile

00:00:19,650 --> 00:00:24,019
laser that's fired from our players ship.
And we're going to use instantiate to

00:00:24,019 --> 00:00:28,160
create a new projectile every time, and
then give the projectile some velocity. So

00:00:28,160 --> 00:00:32,660
your job is to create a laser prefab
from the bundled assets, and then use

00:00:32,660 --> 00:00:36,309
that laser prefab, so that whenever
the player presses space you create a

00:00:36,309 --> 00:00:41,750
new instance of the laser prefab. So you'll use instantiate as we've

00:00:41,750 --> 00:00:46,890
done before, so that whenever the player
presses space,  you'll select space in

00:00:46,890 --> 00:00:54,030
the update function and you'll
instantiated in new laser prefab. Ok so

00:00:54,030 --> 00:00:58,309
let's get started. Right now we have a
player and we have a bunch of enemies,

00:00:58,309 --> 00:01:00,870
but we don't care about the enemy's
right now. We just care about the player.

00:01:00,870 --> 00:01:07,430
So the first thing I want to do is create a new instance a new

00:01:07,430 --> 00:01:12,110
prefab for my laser. So how am I going to do that? Well I'm going to go to Import New Asset,

00:01:12,110 --> 00:01:17,770
and then I'm going to go to my Laser
Defender asset bundle. So you

00:01:17,770 --> 00:01:24,020
navigate to wherever is right for you.
I've got it in my Unity, Laser Defender.

00:01:24,020 --> 00:01:31,380
There should be a bundle. Here we go.
SpaceShooterRedux. Open that up. I want the

00:01:31,380 --> 00:01:39,180
PNG's. I want the lasers. And I'm going to go for laser blue 03. Now I've got a laser blue 03.

00:01:39,180 --> 00:01:45,980
I've selected it and created it in my players
entities. I can dump it into my

00:01:45,990 --> 00:01:52,509
scene. Bring it back into my editor, my
project pane rather, to create a prefab.

00:01:52,509 --> 00:01:55,930
You can see that there's a black box
under prefab, that's just a sprite, and

00:01:55,930 --> 00:02:00,360
you'll also see the actual item in the
hierarchy turns the color blue to show

00:02:00,360 --> 00:02:05,040
you it's been turned into a prefab. I no
longer need an instance of it, so I can

00:02:05,040 --> 00:02:11,130
delete that. Remove it from my place space. And now I've got my laser prefab, so awesome

00:02:11,130 --> 00:02:14,940
that's great! We don't need anything else
for now. So now I need to be able to

00:02:14,940 --> 00:02:19,390
spawn my laser prefab from my players
ship, and that's going to occur in my

00:02:19,390 --> 00:02:25,750
player controller. So I've got the player, remember, prefab here, and I want to create in

00:02:25,750 --> 00:02:30,990
my player controller a way of taking a
spacebar key press and turning

00:02:30,990 --> 00:02:35,120
that into an instantiation. So the first
thing I'm going to do is... What do we instantiate?

00:02:35,120 --> 00:02:38,680
I'm in my play controller. I'm going to need
some way of finding out what we

00:02:38,680 --> 00:02:43,440
instantiate. I'm going to use a public
GameObject to do that. So I'm going to go

00:02:43,440 --> 00:02:52,780
public GameObject beam or projectile. Let's make it much more generic. So I've

00:02:52,780 --> 00:02:57,160
got a public projectile, and then I can
jump back into my game and drag the

00:02:57,160 --> 00:03:04,170
prefab into the projectile slot created
into my player. Now, note here I'm adding it to

00:03:04,170 --> 00:03:08,180
the player and it's gone bald, that's because I haven't applied the effect of the

00:03:08,180 --> 00:03:11,489
prefab. So if I click on my player prefab you'll see that there's still in empty slot

00:03:11,489 --> 00:03:17,260
where as my player itself has a
filled in slot. So I'm going to click Apply,

00:03:17,260 --> 00:03:23,940
and now my player prefab also has the
blue laser set up. Now, I'm also gonna

00:03:23,940 --> 00:03:33,130
rename this guy to call it player laser,
and hopefully this will not break

00:03:33,130 --> 00:03:37,870
everything else. The projectile slot on
the player controller has actually been

00:03:37,870 --> 00:03:43,739
renamed. Nothing's broken which is good.
So awesome! So now I've got my laser,

00:03:43,739 --> 00:03:48,470
actually created as a prefab. We've got
the prefab linked to a projectile in the

00:03:48,470 --> 00:03:52,870
player controller. The next step is to
launch it when you press space. So let's

00:03:52,870 --> 00:03:58,250
create an if statement here to check for
space key presses. So I'm  going to go if,

00:03:58,250 --> 00:04:07,420
and that's going to be same as before. (Input.GetKey(KeyCode.Space)) {}

00:04:07,420 --> 00:04:13,680
Let me get that right. Here we go, KeyCode.Space. Then, we want to fire a projectile. So what do we

00:04:13,680 --> 00:04:17,150
need to do to fire a projectile? Well we
need to call the instantiate method.

00:04:17,150 --> 00:04:22,560
Instantiate takes in a game object to
start off with, so we're going to throw in

00:04:22,560 --> 00:04:28,330
the projectile. And it also takes in a
position, and in which case we want to start

00:04:28,330 --> 00:04:31,160
the projectile at the same position as
our ship. So that's going to be

00:04:31,160 --> 00:04:36,640
transform.position, so that's the position of the ship.

00:04:36,650 --> 00:04:46,740
Remember the player controller is
attached to the actual ship. So transform.position

00:04:46,740 --> 00:04:51,620
That's a lowercase T not a capital
case T. And finally we want no rotational

00:04:51,639 --> 00:04:56,570
whatsoever. We want it to be exactly the
same rotation we set in our sprite. I can

00:04:56,570 --> 00:05:01,240
do Quaternion.identity, which
means I will not get any rotations. So

00:05:01,240 --> 00:05:06,000
cool! So now we should be able to see
that whenever we press space we instantiate a

00:05:06,000 --> 00:05:10,210
projectile. So you can see my
projectiles here, they're all over the

00:05:10,210 --> 00:05:16,050
place. It's not very useful to see the
projectiles just standing there, but we're

00:05:16,050 --> 00:05:19,880
going to change that very soon. What I want to do now actually is good to my camera and

00:05:19,880 --> 00:05:25,229
change the background. I want a black
background, so that I can see my projectiles

00:05:25,229 --> 00:05:32,620
much better. So let's take a look at that
now. If I press play, space rather, you can

00:05:32,620 --> 00:05:36,849
see that my projectiles do come up, and
they are more visible against the dark

00:05:36,849 --> 00:05:43,200
background. So cool! So now we've got
launching projectiles. What do we need to do next?

00:05:43,210 --> 00:05:47,000
Well next we are going to want to have them go forward. Right? It's not sufficient to

00:05:47,000 --> 00:05:51,510
just have projectiles spawned in empty air
and not move. So let's change that and

00:05:51,510 --> 00:05:56,310
add the some velocity to our projectiles. So once we've created them we need to give them

00:05:56,310 --> 00:06:01,520
some velocity. To give them some
velocity we'll need to actually get hold

00:06:01,520 --> 00:06:05,050
of them, get a handle on our projectiles to
start off with. So we're going to want a

00:06:05,050 --> 00:06:12,430
GameObject, and let's call it beam. The laser beam, is what we've just instantiated.

00:06:12,430 --> 00:06:15,380
And I'll need put as GameObject

00:06:15,390 --> 00:06:20,410
which is a bit ugly and a bit long, but
the reason for that is the instantiate

00:06:20,410 --> 00:06:25,070
function returns an object. And we're
actually wanting a Game Object. So we're

00:06:25,070 --> 00:06:28,350
saying we know what we're doing here. We
want whatever is returned by the

00:06:28,350 --> 00:06:32,040
Instantiate function as a GameObject. So
that's the point.

00:06:32,040 --> 00:06:39,060
So now we've got this beam. We want it to
move forward. So we can do beam.rigidbody2D

00:06:39,060 --> 00:06:43,560
And then we'll need to
change the rigidbody2D to add a

00:06:43,560 --> 00:06:50,650
velocity. So we don't want to add a force.
We want to change the velocity directly.

00:06:50,650 --> 00:06:56,420
And we're going to do beam.rigidbody2D.velocity is a new

00:06:56,420 --> 00:07:04,130
Vector3, not Vector4 but Vector3, and this Vector3 will be pointing up, so it will have 0 in the X direction,

00:07:04,130 --> 00:07:11,270
and it will have the fire... the
projectile speed in the Y direction. So

00:07:11,270 --> 00:07:16,440
projectileSpeed. Now note, I haven't
created projectile speed, so I'm going to

00:07:16,440 --> 00:07:23,270
create another new public variable here.
That's going to be a float, so public float

00:07:23,270 --> 00:07:28,650
projectileSpeed, and I'm going to set it to
nothing for now and we'll change that in

00:07:28,650 --> 00:07:33,850
the Inspector. So I'm not initializing it;
I'm just going to be using it. And then here, back

00:07:33,850 --> 00:07:39,140
in my update function, I can use the
projectile speed now. I don't want it to move

00:07:39,140 --> 00:07:43,320
in the Z direction. We don't want it to
move into the screen. And that will

00:07:43,320 --> 00:07:51,290
give some initial velocity to our beam. Now, of course we will need to change the player's

00:07:51,290 --> 00:07:57,780
initial velocity. I'm just going to call it 5, and then we can press play and have a look at what that does.

00:07:57,780 --> 00:08:03,390
So if I press space and we've got the
projectiles not moving, and the reason

00:08:03,390 --> 00:08:07,560
for that is we have not attached a
rigidbody2D to the projectile. So let's

00:08:07,560 --> 00:08:11,930
do that now. We grab the laser projectiles.
We'll add a component, and remember I'm

00:08:11,930 --> 00:08:19,730
grabbing the prefab, and I want a rigidbody2D. Save everything. I'm going to say it is

00:08:19,730 --> 00:08:24,300
not affected by gravity, so 0 for the gravity.
We don't want gravity messing around with

00:08:24,300 --> 00:08:30,400
our movements. And save it and then try and play again. And now we can see that the projectile

00:08:30,400 --> 00:08:36,500
actually goes forward. If I keep my spacebar pressed, you're getting a

00:08:36,500 --> 00:08:40,539
lot of projectiles here! Thousands and thousands and thousands of projectiles

00:08:40,539 --> 00:08:45,380
going out. So we want to change that. We
want to change it so it's only when we

00:08:45,380 --> 00:08:49,440
press the spacebar. Not when it is
pressed, and to do that we use the

00:08:49,440 --> 00:08:54,240
GetKeyDown instead. Now, there's a
difference between GetKey and GetKeyDown.

00:08:54,240 --> 00:09:02,860
GetKey will fire if the key is pressed in. So if I press the key in it'll

00:09:02,860 --> 00:09:07,500
start firing, and it will keep firing every update the key is pressed in. GetKeyDown will only

00:09:07,500 --> 00:09:12,430
fire on the first update, when the key is
pressed down, and similarly GetKeyUp

00:09:12,440 --> 00:09:16,200
will only fire when the key is released. So GetKeyDown is when it's pressed, GetKey

00:09:16,200 --> 00:09:20,880
is when it is being pressed, and GetKeyUp is when it is released. So that's

00:09:20,880 --> 00:09:24,579
the difference between the two. And if I jump back into my game, I can press play,

00:09:24,579 --> 00:09:28,300
and now we should see that if I press
once then keep my finger on the

00:09:28,300 --> 00:09:34,310
trigger it only fires one projectile. So I'm pressing the spacebar. I've got my spacebar pressed, but it's

00:09:34,310 --> 00:09:40,839
only firing a single projectile. So and
that is it!  Now, we have a firing

00:09:40,839 --> 00:09:47,209
spaceship that fires projectiles into
our enemy formation. Now, we want to do

00:09:47,209 --> 00:09:51,370
more than that, because I don't like the
behavior of pressing once and only

00:09:51,370 --> 00:09:55,270
getting one. I want to have a constant
rate the fire if I press the spacebar,

00:09:55,270 --> 00:09:57,860
but I want it to be restricted. I want it to be limited.

00:09:57,860 --> 00:10:02,920
I don't want to fire a new projectile every update, that's far too much. So let's change that

00:10:02,920 --> 00:10:07,420
to a constant rate of fire whenever
the key is pressed. So let's jump back into our

00:10:07,420 --> 00:10:11,250
code. And now we're going to first
create a fire method, which immediately

00:10:11,250 --> 00:10:18,120
fires a projectile. So let's create a
void Fire(){} method, and this fire method is

00:10:18,120 --> 00:10:21,500
really what we're going to use to fire our projectiles. Take all this out;

00:10:21,500 --> 00:10:26,740
put it back in the Fire method. And now
of course, we could just replace what's happening,

00:10:26,740 --> 00:10:31,899
on GetKeyDown, with the Fire method, but
however we're going to do something else.

00:10:31,899 --> 00:10:34,730
Let's take a look at what we're going to be doing.

00:10:34,730 --> 00:10:38,830
So We've done that. We're going to... We've done all this... What we're going to do is use the

00:10:38,830 --> 00:10:44,699
InvokeRepeating() and CancelInvoke() to make sure that we are repeatedly firing the

00:10:44,699 --> 00:10:52,389
projectile. Now, InvokeRepeating calls another method every interval, so we can

00:10:52,389 --> 00:10:57,089
define an interval let's say every second and InvokeRepeating... will call that

00:10:57,089 --> 00:10:59,810
method every second.

00:10:59,810 --> 00:11:03,060
CancelInvoke() stops that process. So
we're going to use both of those

00:11:03,060 --> 00:11:08,029
methods using GetKeyDown and GetKeyUp to whenever we press the spacebar we

00:11:08,029 --> 00:11:13,709
start firing immediately and then keep
firing every X seconds, and then when we

00:11:13,709 --> 00:11:17,860
released the spacebar it will cancel the
invocation it will stop repeatedly firing.

00:11:17,860 --> 00:11:23,000
And there's a little trick I'll show you
to avoid a bug that often occurs when

00:11:23,000 --> 00:11:27,160
you're delay is less than 0. So I'll
show you that straight away.

00:11:27,160 --> 00:11:33,180
So, let's jump into our code. Now, we've got this (Input.GetKeyDown(KeyCode.Space)){} The thing

00:11:33,190 --> 00:11:40,430
we want to do here is InvokeRepeating, and we want to invoke the Fire method. Now,

00:11:40,430 --> 00:11:45,480
note this is a string, so I've got it in
quotes. It's a bit weird to call a string method,

00:11:45,480 --> 00:11:51,160
but that's just how invoke repeating works. Now, the first time is

00:11:51,160 --> 00:11:54,949
the time before the first invocation, and
we want it to be essentially 0. That's

00:11:54,949 --> 00:12:00,949
our aim, however, because there's a slight
bug if you put 0 in this as an

00:12:00,949 --> 00:12:05,399
argument what's going to happen is you
might get multiple invocations to start

00:12:05,399 --> 00:12:09,899
with. We don't want that. So what we're
going to do is we're going to put a 0001,

00:12:09,900 --> 00:12:12,319
a very small time increment,

00:12:12,319 --> 00:12:18,060
making sure it's a float, and then that will avoid some of
the bugs that sometimes occur when you have a

00:12:18,060 --> 00:12:23,610
0 time for invoke repeating. Then, we
have the repeat rate. Now, I don't have a

00:12:23,610 --> 00:12:28,470
repeat rate, so I'm just going to imagine
that I have something called firingRate

00:12:28,470 --> 00:12:36,000
and use that. And then I'm going to expose my firing rate as a public float in the Inspector.

00:12:36,000 --> 00:12:45,960
That way we can tune the firing rate later
on when we need to. For now I'm just going to put 0.2

00:12:45,960 --> 00:12:51,860
Cool! So now I've got the firingRate InvokeRepeating. Now, I do want to make sure

00:12:51,870 --> 00:12:59,400
that if release the spacebar I stop the invocation of my fire method.

00:12:59,400 --> 00:13:19,500
So I'm going to go if (Input.GetKeyUp(KeyCode.Space))
So if I release my spacebar

00:13:19,500 --> 00:13:30,480
I want to cancel the invocation of fire, and we can do that by CancelInvoke("Fire") and now what I should see is...

00:13:30,490 --> 00:13:38,520
If I jump into my game and press play. So if I jump into my game, press play, compiler errors...

00:13:38,520 --> 00:13:44,580
Why is it a compile error? I've forgotten a f
somewhere, indeed, so I'm adding the little f.

00:13:44,580 --> 00:13:52,320
Note I'm adding the little f here to my firing rate. Now, if I press play, what do I get? I've got the

00:13:52,330 --> 00:13:56,570
spacebar pressed right now and I'm
getting a steady stream of beams of

00:13:56,570 --> 00:14:00,640
lasers, but they are not going crazy, I'm not getting one every update. I'm only

00:14:00,640 --> 00:14:05,600
getting one every X second, which I can
tune in the Inspector when I select my

00:14:05,600 --> 00:14:11,210
player. So if I grab my player in the
Inspector, you'll see that I can tune the

00:14:11,210 --> 00:14:14,810
firing rate here by increasing or
decreasing this number.

00:14:14,810 --> 00:14:20,230
So cool! That is how you get a repeat
firing rate for your projectiles. That's

00:14:20,230 --> 00:14:23,220
exactly the behavior wanted. That looks
good.

00:14:23,220 --> 00:14:27,040
One final thing we want to do is, if we
take a look at our game now I'm gonna

00:14:27,040 --> 00:14:32,440
press space and you can see the player
lasers are accumulating in our scene. There's

00:14:32,440 --> 00:14:35,840
far too many of them, and they're not
dying off. They're not disappearing. So you want to

00:14:35,840 --> 00:14:38,790
make sure that we don't get an infinite
supply of player lasers. There's far too

00:14:38,790 --> 00:14:42,760
much. We don't need that. So what we're going to do is we're going to create a shredder

00:14:42,760 --> 00:14:49,950
object. So we zoom out a little bit, and we
can move the scene slightly, create a new

00:14:49,950 --> 00:14:57,890
empty GameObject, we rename it to
Shredder, and the purpose of the shredder

00:14:57,890 --> 00:15:02,310
is to destroy everything that collides
with it, so it will need a trigger

00:15:02,310 --> 00:15:14,500
collider. Let's find a Box Collider, so Box Collider 2D, and we will move that to a

00:15:14,500 --> 00:15:18,600
trigger. So we've got a Box Collider 2D,
which is a trigger. We can select the

00:15:18,600 --> 00:15:24,530
GameObject. We want to move it up.
Actually we want it to be well up above the

00:15:24,530 --> 00:15:32,460
scene, or above the enemies at least. You can also change the scale to make it much

00:15:32,460 --> 00:15:37,440
wider. You want it to cover the entire play space. I'm just going to select

00:15:37,440 --> 00:15:46,650
a scale of 20. That should be sufficient
for now. My position... I'm just going to center my

00:15:46,650 --> 00:15:56,860
position in the X direction... make it
quite big. So 10... 12 something like that,

00:15:56,860 --> 00:16:05,470
and 2. I'm going to make it a little bit thicker for fast projectiles in the Y direction. So

00:16:05,470 --> 00:16:12,650
remember position scale. I want it to be
maybe 3, maybe thick like this, to

00:16:12,650 --> 00:16:18,120
make sure that the fast projectiles... make
sure they hit the trigger. Let's change the

00:16:18,130 --> 00:16:25,840
name. I must have forgotten to press return. Here we go, now we've got the shredder up here. And the

00:16:25,840 --> 00:16:31,670
final thing we need to add to our shredder is a script, and we're going to call it Shredder,

00:16:31,670 --> 00:16:36,860
as well. That's not the cartoon character
from the Teenage Mutant Ninja Turtles,

00:16:36,860 --> 00:16:49,200
thats just a mechanical machine. And then
in the Shredder, we're going to go void OnTriggerEnter2D

00:16:49,200 --> 00:16:52,580
Now note the capitalization is
really important here, we need a capital

00:16:52,580 --> 00:16:55,800
D and a capital O, or otherwise it's not
going to work.

00:16:55,800 --> 00:17:02,920
And we are going to get a Collider2D,
and in this case what we're going to do

00:17:02,920 --> 00:17:07,939
is destroy it. And how do we destroy
objects? Well, we use the destroy function. So I'm

00:17:07,939 --> 00:17:11,280
destroying the object, but I don't want
to destroy the collider of what I'm colliding

00:17:11,280 --> 00:17:15,320
with. I want to destroy the entire GameObject. So I'm going to grab the GameObject

00:17:15,320 --> 00:17:19,920
from the collider itself, and here
we are, now we're grabbing the collider

00:17:19,929 --> 00:17:25,360
from the game itself. We're grabbing the game object from the collider itself. Let's get this

00:17:25,360 --> 00:17:27,660
the right way round.

00:17:27,660 --> 00:17:35,030
Let's jump back into our game, and try it
out. So if I press play and I keep firing

00:17:35,030 --> 00:17:38,790
bullets and let go of my spacebar, we should see them slowly disappear when

00:17:38,790 --> 00:17:43,830
they hit the collider, or not, depending on
what we're doing. Why are they not disappearing?

00:17:43,830 --> 00:17:47,900
Well, they don't have a collider
themselves do they? So let's take a look at our

00:17:47,900 --> 00:17:54,080
projectile prefab, our player laser and add a collider to it. We're going to add a box

00:17:54,080 --> 00:17:57,030
collider. Now, I want to double check my
box collider. So

00:17:57,030 --> 00:18:00,350
let's instantiate in your prefab, and you can see that I was right to double check, because the

00:18:00,350 --> 00:18:06,740
box collider is far too big. So once
we've got this player laser we want to

00:18:06,740 --> 00:18:10,760
restrict the box collider to make sure
it's not too big for the laser. And we

00:18:10,760 --> 00:18:18,510
can go down there and change the size.
Something like this seems pretty

00:18:18,510 --> 00:18:22,230
reasonable. So I'm just tuning my collider to make sure it actually represents the

00:18:22,230 --> 00:18:29,370
object and its not too big. And then I'm
going to make sure I apply these changes to my

00:18:29,370 --> 00:18:35,130
prefab. And now we can see that the changes are no longer in

00:18:35,130 --> 00:18:39,429
bold, because they've been applied to the
prefab. So if I

00:18:39,429 --> 00:18:45,780
click on my prefab, we can see they scaled down in the prefab as well. So now I can delete my

00:18:45,780 --> 00:18:48,070
player laser. I don't need that instance
anymore.

00:18:48,070 --> 00:18:53,720
Start pressing play for the game, and now we should see that when I let go they get destroyed,

00:18:53,720 --> 00:18:57,230
when they hit the shredder. And they do
indeed get destroyed when they hit the

00:18:57,230 --> 00:19:01,360
shredder. And that is it for this video.

00:19:01,360 --> 00:19:07,200
We've now destroyed the laser shots, when
they hit a collider, the shredder, and we

00:19:07,200 --> 00:19:13,640
are done with spawning projectiles. We now can press space to spawn projectiles. We can in fact repeatedly

00:19:13,650 --> 00:19:20,200
send projectiles by keeping the spacebar
pressed. And we've gone

00:19:20,200 --> 00:19:25,419
on to use instantiate and given the
projectile some velocity and shredded

00:19:25,419 --> 00:19:29,950
them, so that they don't clutter up our game space. And we're done! Thank you

00:19:29,950 --> 00:19:33,850
very much for watching! Hope you found it
interesting and you can use this in your

00:19:33,850 --> 00:19:37,000
own game,  and I will see you in another
video. Bye for now.


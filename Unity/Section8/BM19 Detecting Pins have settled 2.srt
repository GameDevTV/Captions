<<<<<<< HEAD:Unity/Section8/BM19 Detecting Pins have settled 2.srt
ï»¿WEBVTT

00:00:03.530 --> 00:00:08.730 align:middle line:90%
Hey so welcome to the second part of this
video. Let's take a little look at our game

00:00:08.730 --> 00:00:13.790 align:middle line:90%
and see where we are. So we're in a pretty
cool situation where the standing counter

00:00:13.790 --> 00:00:18.990 align:middle line:90%
doesn't even start to update until the ball
is in this virtual bounding box down the end

00:00:18.990 --> 00:00:24.100 align:middle line:90%
here. this pinsetter box. When that happens.
as soon as it enters this green box we get

00:00:24.100 --> 00:00:28.119 align:middle line:90%
a count. and actually all of the pins are
knocked down there. Also we've arranged for

00:00:28.119 --> 00:00:32.610 align:middle line:90%
the pins to destroy themselves as soon as
they go outside of this box. The ball doesn't

00:00:32.610 --> 00:00:35.550 align:middle line:90%
but that's OK because we can just move the
ball back to the start. but we don't want

00:00:35.550 --> 00:00:38.390 align:middle line:90%
pins drifting around our scene and indeed
they're not.

00:00:38.390 --> 00:00:42.040 align:middle line:90%
In fact I think that we could even go into
Scene view here and do a sneaky movement of

00:00:42.040 --> 00:00:47.090 align:middle line:90%
a pin and I think. you see? The moment that
it gets outside the bounding box that method

00:00:47.090 --> 00:00:52.030 align:middle line:90%
gets called and off it goes. Pretty cool.
hey? So you could just let the pin fall off

00:00:52.030 --> 00:00:55.829 align:middle line:90%
the edge and the moment it falls out the box
it gets destroyed. Fantastic. so that's all

00:00:55.829 --> 00:01:00.850 align:middle line:90%
working. What isn't working yet is we cannot
detect when the pins have settled yet. What

00:01:00.850 --> 00:01:05.409 align:middle line:90%
do I mean by settled? Well there are some
instances in which it's going to be tricky

00:01:05.409 --> 00:01:09.950 align:middle line:90%
for me to get the game into this state but
there are some instances in which the pins

00:01:09.950 --> 00:01:11.080 align:middle line:84%
wobble around for a while.

00:01:11.080 --> 00:01:16.310 align:middle line:90%
Let's see if I can make one of these happen.
Otherwise I think that you get the idea. that

00:01:16.310 --> 00:01:20.030 align:middle line:90%
we hit the pins and they don't decisively
stand up or fall down but they wobble for

00:01:20.030 --> 00:01:25.110 align:middle line:90%
a while. let's see if there're some wobblers
now. Erm... not really. but you can imagine

00:01:25.110 --> 00:01:28.310 align:middle line:90%
that this guy on the left could have ended
up wobbling around and we need at some point

00:01:28.310 --> 00:01:32.560 align:middle line:90%
to just draw a line and say well it's either
standing or it's not so we can progress the

00:01:32.560 --> 00:01:39.180 align:middle line:90%
game play. So what we're going to do in this
second half of the video is the bottom three

00:01:39.180 --> 00:01:42.409 align:middle line:84%
items of this checklist that we saw before.

00:01:42.409 --> 00:01:46.390 align:middle line:90%
We're going to detect when the pins have stopped
wobbling. we're going to use three seconds

00:01:46.390 --> 00:01:51.460 align:middle line:90%
as the time-out. We'll update the pin count
display to green when that happens to say

00:01:51.460 --> 00:01:55.320 align:middle line:90%
yeah I'm confident about the number and then
inside our method we're going to update our

00:01:55.320 --> 00:01:59.540 align:middle line:90%
last standing count to -1 when they've settled
and that's a little bit nasty but we'll talk

00:01:59.540 --> 00:02:05.329 align:middle line:90%
about the pros and cons as I've said before
of doing that. OK cool. so let's get on with

00:02:05.329 --> 00:02:12.330 align:middle line:90%
the coding now. So we're going to be inside
our pin setter script and what we're going

00:02:12.330 --> 00:02:16.480 align:middle line:90%
to be wanting to do is write a few more methods
inside this PinSetter script.

00:02:16.480 --> 00:02:20.980 align:middle line:90%
Alright? So before we get going let me help
you off the ground. We're going to want a

00:02:20.980 --> 00:02:25.849 align:middle line:90%
public - I think - int so that other things
from the outside can say well how many. what's

00:02:25.849 --> 00:02:31.900 align:middle line:90%
the state of the pins. and it's called a last
standing count. Or I'm going to call it that.

00:02:31.900 --> 00:02:36.870 align:middle line:90%
and I'm going to initialise it to minus 1
which indicates that actually nothing's fallen

00:02:36.870 --> 00:02:42.569 align:middle line:90%
over yet. the pins are in a default state
that - they are as they were before. So it's

00:02:42.569 --> 00:02:48.940 align:middle line:90%
not a definite number of pins standing and
-1 well. OK it's nasty because we are encoding

00:02:48.940 --> 00:02:53.739 align:middle line:90%
non-numeric information in a specialised number.
but it does make our code short and any other

00:02:53.739 --> 00:02:57.459 align:middle line:90%
solution that I've come up with. or Brice
has come up with with me. does actually make

00:02:57.459 --> 00:03:01.629 align:middle line:90%
things a little bit more complicated so you
always want to go for the shortest code possible

00:03:01.629 --> 00:03:04.670 align:middle line:90%
and I like this solution in this particular
case.

00:03:04.670 --> 00:03:08.390 align:middle line:90%
Alright? So we're going to need that. The
other thing that you're going to need in here

00:03:08.390 --> 00:03:16.540 align:middle line:90%
is you're going to need a private float to
keep track of the last change time. OK so

00:03:16.540 --> 00:03:22.510 align:middle line:90%
private float lastChangeTime which is going
to keep track of when the count number actually

00:03:22.510 --> 00:03:27.590 align:middle line:90%
last updated; and the final thing that I'll
be alluding to we've already got here we have

00:03:27.590 --> 00:03:33.879 align:middle line:90%
a private bool ballEnteredBox - bool ballEnteredBox.
you see bool ball? Fantastic so I'm going

00:03:33.879 --> 00:03:36.870 align:middle line:90%
to group my public and private variables together
I like doing that. with a little bit of a

00:03:36.870 --> 00:03:41.349 align:middle line:90%
space so I can at a glance look and say here
are my public. here are my private.

00:03:41.349 --> 00:03:47.620 align:middle line:90%
Fantastic. so that's the outline. we're also
going to be writing at least another couple

00:03:47.620 --> 00:03:52.689 align:middle line:90%
of methods. One's going to be a check standing
method so I'll write the outline of it now

00:03:52.689 --> 00:03:57.189 align:middle line:90%
of course you're going to be writing the actual
code but we have a void CheckStanding method

00:03:57.189 --> 00:04:05.849 align:middle line:90%
here and what is this going to do? It's basically
going to update the standing count. or more

00:04:05.849 --> 00:04:13.780 align:middle line:90%
specifically the last standing count. and
what else is the CheckStanding method going

00:04:13.780 --> 00:04:27.300 align:middle line:90%
to need to do? It's also going to call a new
method called PinsHaveSettled when they have.

00:04:27.300 --> 00:04:29.560 align:middle line:90%
So there's a little bit of written pseudo-code
for you.

00:04:29.560 --> 00:04:36.009 align:middle line:90%
So. another method then we're going to be
writing in the challenge which is void PinsHaveSettled.

00:04:36.009 --> 00:04:39.370 align:middle line:90%
So this is a new approach to programming we're
just kind of going from the outside in. we're

00:04:39.370 --> 00:04:43.479 align:middle line:90%
writing the methods first; and then in here
we're going to do various things we'll talk

00:04:43.479 --> 00:04:47.770 align:middle line:90%
about in the challenge. The final thing to
say is when are we calling these methods?

00:04:47.770 --> 00:04:50.919 align:middle line:90%
Well from update. so I'm actually going to
move them up the function a little bit. right

00:04:50.919 --> 00:04:56.790 align:middle line:90%
under the update like so; because what I like
to be able to do is if I'm calling something

00:04:56.790 --> 00:05:00.680 align:middle line:90%
in Update I like to be able to see it on the
same screen and what I'm going to be calling

00:05:00.680 --> 00:05:07.380 align:middle line:90%
is I'm going to be calling CountStanding on
every single update if the ball has entered

00:05:07.380 --> 00:05:07.930 align:middle line:84%
the box.

00:05:07.930 --> 00:05:15.030 align:middle line:90%
So I'll leave you to do that. so we're going
to check if ball has entered box. in fact

00:05:15.030 --> 00:05:19.600 align:middle line:90%
you know what? I'm going to do that for you.
I'm going to give you a leg up. This bit is

00:05:19.600 --> 00:05:25.360 align:middle line:90%
so much just writing it as you say it that
I'm going to do it for you. So. if this flag.

00:05:25.360 --> 00:05:30.340 align:middle line:90%
this ballEnteredBox flag is set to true. so
if the ball has entered the box. then I want

00:05:30.340 --> 00:05:33.940 align:middle line:90%
to every single frame. because we're in the
Update loop. I want to check the standing

00:05:33.940 --> 00:05:38.169 align:middle line:90%
count. OK? And if you don't like the name
of Check Standing then rename it. Check Standing

00:05:38.169 --> 00:05:41.070 align:middle line:90%
Count. I'm going to leave it as CheckStanding
for now.

00:05:41.070 --> 00:05:45.550 align:middle line:90%
So after the ball has entered the box we run
this method which updates the standing count

00:05:45.550 --> 00:05:49.900 align:middle line:90%
and eventually calls pins have settled if
they've settled. So that gives you the structure

00:05:49.900 --> 00:05:54.520 align:middle line:90%
that you need in order for it to do the challenge.
and then remember the private and public variables

00:05:54.520 --> 00:05:58.800 align:middle line:90%
I've created are here if you want to pause
the video and take a look you're welcome.

00:05:58.800 --> 00:06:02.110 align:middle line:90%
So let's put you into the challenge now and
see if you can fill out the bodies of those

00:06:02.110 --> 00:06:05.220 align:middle line:84%
methods. So here's the challenge in question.

00:06:05.220 --> 00:06:09.630 align:middle line:90%
Number one if ballEnteredBox then call CheckStanding().
I've done that for you! Aren't I nice. aren't

00:06:09.630 --> 00:06:14.639 align:middle line:90%
I kind. but you're not off the hook yet. you
now need to wait for the standing count to

00:06:14.639 --> 00:06:18.600 align:middle line:90%
stop changing for three seconds. I've given
you all the tools that you need to do that.

00:06:18.600 --> 00:06:25.699 align:middle line:90%
all the variables. but I want you to write
that code. When pins settle call PinsHaveSettled()

00:06:25.699 --> 00:06:30.210 align:middle line:90%
and then all we're going to do on PinsHaveSettled
for now is just update the display to green.

00:06:30.210 --> 00:06:34.400 align:middle line:90%
So go ahead. pause the video. have a good
look at the code and see if you can fill it

00:06:34.400 --> 00:06:44.210 align:middle line:90%
in and do that challenge right now please.
OK so welcome back. let's get that code written

00:06:44.210 --> 00:06:49.539 align:middle line:90%
shall we? It's all about the code. so why
don't we dive in and write it? Starting with

00:06:49.539 --> 00:06:54.590 align:middle line:90%
let's say the CheckStanding method. well let's
make a variable inside this method called

00:06:54.590 --> 00:07:00.660 align:middle line:90%
current standing which is just an integer
and it is the count standing so at the beginning

00:07:00.660 --> 00:07:06.120 align:middle line:90%
the first time we come into this check standing
to see how many are standing we just call

00:07:06.120 --> 00:07:09.419 align:middle line:90%
that CountStanding method and get the latest
count. and store it in a variable.

00:07:09.419 --> 00:07:17.410 align:middle line:90%
Fine. then what? Well. just write some English.
If current standing is not equal to - and

00:07:17.410 --> 00:07:25.120 align:middle line:90%
notice the not - lastStandingCount. Now on
the first iteration it will not be equal to

00:07:25.120 --> 00:07:29.440 align:middle line:90%
the last standing count of course because
we initialised it to -1. so the first time

00:07:29.440 --> 00:07:35.310 align:middle line:90%
around current standing will not be equal
to -1. So if that's the case whenever the

00:07:35.310 --> 00:07:40.410 align:middle line:90%
current Standing count when we came in to
this method is not equal to the last one which

00:07:40.410 --> 00:07:49.289 align:middle line:90%
is an instance variable at a wider scope up
here. then we say lastChangeTime = Time.time.

00:07:49.289 --> 00:07:54.910 align:middle line:90%
You can look up Time.time but it's the time
since the game started.

00:07:54.910 --> 00:08:02.360 align:middle line:90%
So we log when the last change happened. we
update the last standing count. to whatever

00:08:02.360 --> 00:08:10.280 align:middle line:90%
it was when we came in to the method here.
and we return. we get out of here. we're done.

00:08:10.280 --> 00:08:15.919 align:middle line:90%
OK. If this wasn't to happen. i.e. if we have
the same count we had last time this frame

00:08:15.919 --> 00:08:19.960 align:middle line:90%
- remember this is all being called from update.
once the ball enters the box this gets called

00:08:19.960 --> 00:08:26.060 align:middle line:90%
every update. Every single frame it goes "has
the count changed?". if it has then it skips

00:08:26.060 --> 00:08:27.990 align:middle line:84%
this - look it's a not equals to.

00:08:27.990 --> 00:08:43.140 align:middle line:90%
So if it has changed then we come down here
and we say right. float. settleTime = 3 seconds.

00:08:43.140 --> 00:08:50.920 align:middle line:90%
How long to wait to consider pins settled.
Fine. now. if I'm going to put in a couple

00:08:50.920 --> 00:08:55.180 align:middle line:90%
of brackets for us. Time. and I'm going to
close the couple of brackets as well. it's

00:08:55.180 --> 00:09:04.690 align:middle line:90%
always good to close your brackets as soon
as you've opened them. so if Time.time - lastChangeTime

00:09:04.690 --> 00:09:11.610 align:middle line:90%
- so if it's been is another way of saying
that in English. if it's been more than this

00:09:11.610 --> 00:09:18.470 align:middle line:90%
settle threshold. or settle time. i.e. if
it's been more than 3 seconds yeah. in English.

00:09:18.470 --> 00:09:25.560 align:middle line:84%
if last change more than 3 seconds ago.

00:09:25.560 --> 00:09:31.209 align:middle line:90%
Now this comment will go out of sync if you
change this variable but OK. then we call

00:09:31.209 --> 00:09:36.399 align:middle line:90%
pins have settled. Do you get it? Can you
see how that works? We go into CheckStanding.

00:09:36.399 --> 00:09:43.580 align:middle line:90%
we jump out of it if there hasn't been a change
but if there has been a change then provided

00:09:43.580 --> 00:09:48.070 align:middle line:90%
that that change was more than 3 seconds ago
we call pins have settled and finally a call

00:09:48.070 --> 00:09:52.620 align:middle line:90%
to this method. Great. so all I said that
we needed to do within PinsHaveSettled was

00:09:52.620 --> 00:10:00.860 align:middle line:90%
set the standing display to its colour to
Color.green for now. Now is there anything

00:10:00.860 --> 00:10:05.269 align:middle line:90%
else that you want to do? Well yes. I think
that it would make sense to set the last standing

00:10:05.269 --> 00:10:13.570 align:middle line:90%
count back to this special reserve of -1 thing.
if basically indicates a new frame.

00:10:13.570 --> 00:10:18.829 align:middle line:90%
It means we're starting afresh. OK because
the pins have settled. so what it really indicates

00:10:18.829 --> 00:10:26.760 align:middle line:90%
is it indicates that pins have settled and
ball not back in box. so it basically means

00:10:26.760 --> 00:10:32.850 align:middle line:90%
a new frame. OK. later we'll be doing things
like Ball.reset which we don't have at the

00:10:32.850 --> 00:10:40.260 align:middle line:90%
moment and we also probably while we're here
want to be saying actually. the ball has not

00:10:40.260 --> 00:10:43.339 align:middle line:90%
entered the box any more. So where we have
this ballEnteredBox flag. that wants to go

00:10:43.339 --> 00:10:47.850 align:middle line:90%
to false. So when the pins have settled we
want to send the StandingCount back to its

00:10:47.850 --> 00:10:52.630 align:middle line:90%
default value of -1. we say that the ball
has no longer entered the box in this part

00:10:52.630 --> 00:10:54.820 align:middle line:84%
of the game and the colour goes green.

00:10:54.820 --> 00:10:59.970 align:middle line:90%
Cool. so that's going a little bit outside
the call of duty of the challenge so don't

00:10:59.970 --> 00:11:04.850 align:middle line:90%
worry at all if you needed a little bit of
help here. Let's see how this works. Indeed

00:11:04.850 --> 00:11:12.000 align:middle line:90%
if it works. So. oops. we have the black number
at the moment which means that it's not being

00:11:12.000 --> 00:11:18.040 align:middle line:90%
updated it's kind of idle. I'm having challenges
with even playing my own game... come on you

00:11:18.040 --> 00:11:22.170 align:middle line:90%
must get down the end! I'm going to have to
find a way to make this easier. I could just

00:11:22.170 --> 00:11:25.740 align:middle line:90%
get better at it. It's always a... a bit of
a break while you watch me fumble.

00:11:25.740 --> 00:11:30.370 align:middle line:90%
Here you go. so no updates at all until you
get inside the bounding box. boom it goes

00:11:30.370 --> 00:11:34.390 align:middle line:90%
red saying it's a tentative value. it waits
for the pins to settle. none of them are wobbling

00:11:34.390 --> 00:11:38.690 align:middle line:90%
so after three seconds it goes green. Great.
let's watch that once more; let's see if we

00:11:38.690 --> 00:11:44.690 align:middle line:90%
can get some wobbling pins so that we actually
get the desired effect. A sip of tea while

00:11:44.690 --> 00:11:56.630 align:middle line:90%
we wait. 10. 9. 7. 1. 0. you see that one
wobbling? 0. it's decided it's zero and actually

00:11:56.630 --> 00:12:01.490 align:middle line:90%
it's right. Now we won't optimise this time
until we've finished optimising the physics.

00:12:01.490 --> 00:12:04.320 align:middle line:90%
We're going to shortly be back to the point
where we're going to want to play with the

00:12:04.320 --> 00:12:09.070 align:middle line:90%
physics but I wanted to leave the physics
until now because you can tell that all of

00:12:09.070 --> 00:12:13.430 align:middle line:90%
this stuff will depend on the physics parameters.
and to some extent vice versa I wanted to

00:12:13.430 --> 00:12:19.160 align:middle line:90%
get all of this in place before we started
to work any harder on the physics. but we

00:12:19.160 --> 00:12:25.260 align:middle line:90%
basically have now all of the code that we
need to determine how many pins are actually

00:12:25.260 --> 00:12:29.149 align:middle line:90%
standing. The final thing that we're going
to need to do is to actually reset the ball

00:12:29.149 --> 00:12:31.130 align:middle line:84%
back to the beginning of the lane.

00:12:31.130 --> 00:12:36.670 align:middle line:90%
So moving into our PinSetter.cs let's lay
the foundations for the ability to reset the

00:12:36.670 --> 00:12:40.050 align:middle line:90%
ball. So firstly the PinSetter is going to
need to know about the ball. right? It'll

00:12:40.050 --> 00:12:45.029 align:middle line:90%
need to talk to it. So we're going to need
a private Ball ball. simple as that. With

00:12:45.029 --> 00:12:49.610 align:middle line:90%
a small b. a variable has a small letter;
and then where are we going to find that ball?

00:12:49.610 --> 00:12:56.089 align:middle line:90%
Well let's go find the ball. small b. it's
really wanting to give me a capital b here.

00:12:56.089 --> 00:13:00.410 align:middle line:90%
ah it's because I've misspelt private. OK
so a little lesson here. I've misspelt private

00:13:00.410 --> 00:13:05.420 align:middle line:90%
and then the auto-complete I'm fighting. so
if you're fighting the auto-complete in an

00:13:05.420 --> 00:13:09.639 align:middle line:90%
unexpected situation then it's probably because
of something like this.

00:13:09.639 --> 00:13:17.649 align:middle line:90%
If I spell private right here then it understands
that I want to find a variable and it allows

00:13:17.649 --> 00:13:25.660 align:middle line:90%
me to use a small letter because it's not
looking for a type any more. and then I can

00:13:25.660 --> 00:13:29.880 align:middle line:90%
say ball and everything is working. right?
GameObject.FindObjectOfType. there's only

00:13:29.880 --> 00:13:36.630 align:middle line:90%
one ball in the scene. We can actually move
this ball rather than reinstantiating it in

00:13:36.630 --> 00:13:43.380 align:middle line:90%
this case. There's two ways of dealing with
objects. you can either move them or reinstantiate

00:13:43.380 --> 00:13:49.279 align:middle line:90%
them. Generally it's more efficient to move
them than reinstantiate them but it depends

00:13:49.279 --> 00:13:49.730 align:middle line:84%
on the situation.

00:13:49.730 --> 00:13:49.740 align:middle line:90%
In this game we're doing both; we are destroying
and reinstantiating pins but we are moving

00:13:49.740 --> 00:13:49.750 align:middle line:90%
the ball. Performance is not an issue in this
game. the way it's running at the moment.

00:13:49.750 --> 00:13:50.389 align:middle line:90%
OK so we have found this ball and what I'm
going to want to do on when the pins have

00:13:50.389 --> 00:13:57.190 align:middle line:90%
settled is I'm going to want to reset this
ball immediately. So ball.Reset. now it doesn't

00:13:57.190 --> 00:14:02.480 align:middle line:90%
have a reset method yet. but let's pretend
if does. It's going to be red for now. let's

00:14:02.480 --> 00:14:07.220 align:middle line:90%
go into the ball script. and just at least
log out that that has happened so that we

00:14:07.220 --> 00:14:09.160 align:middle line:84%
know that we're getting to this.

00:14:09.160 --> 00:14:12.790 align:middle line:90%
So let's have a launch script. we've already
got a launch method rather in the ball script.

00:14:12.790 --> 00:14:19.910 align:middle line:90%
let's have now a public void. returns nothing.
reset. which resets the ball. And for now

00:14:19.910 --> 00:14:28.370 align:middle line:90%
we're just going to Debug.Log resetting ball
so that we know that we are getting to this

00:14:28.370 --> 00:14:34.329 align:middle line:90%
point in our code. OK now over in PinSetter
that code will go not red. i.e. black and

00:14:34.329 --> 00:14:37.550 align:middle line:90%
when the pins have settled then reset will
be called. Let's just check that works before

00:14:37.550 --> 00:14:42.970 align:middle line:90%
we finally make the reset happen. So we swipe
along. hope that we actually hit something.

00:14:42.970 --> 00:14:49.410 align:middle line:90%
keep an eye on our console. and what should
happen is that it goes red now. starts counting.

00:14:49.410 --> 00:14:53.769 align:middle line:90%
any wobbles are taken a count of. after three
seconds of no changes in this number it goes

00:14:53.769 --> 00:14:54.240 align:middle line:84%
green.

00:14:54.240 --> 00:15:00.149 align:middle line:90%
Pin left. we can delete that. log resetting
ball pin left. OK. I'm going to delete the

00:15:00.149 --> 00:15:05.440 align:middle line:90%
pin left log but we've got the resetting ball.
That's what we needed. So pin left log entry

00:15:05.440 --> 00:15:12.320 align:middle line:90%
from PinSetter.cs has gone around about line
67 on mine. Now the final thing to do is to

00:15:12.320 --> 00:15:19.570 align:middle line:90%
go back to our ball and to give it the ability
to be reset. So here's your challenge. Write

00:15:19.570 --> 00:15:26.120 align:middle line:90%
Reset() in Ball.cs. Create and manage a public
bool inPlay; so from the outside we can say

00:15:26.120 --> 00:15:31.709 align:middle line:90%
Ball.inPlay and it will tell us whether it's
in play or not. Capture the ball's start position

00:15:31.709 --> 00:15:33.570 align:middle line:84%
in the start function.

00:15:33.570 --> 00:15:38.230 align:middle line:90%
Reset the ball's position to the start when
we call the reset method - everything now

00:15:38.230 --> 00:15:43.190 align:middle line:90%
indented on this slide is what the reset method
does. It resets the position to the start

00:15:43.190 --> 00:15:47.980 align:middle line:90%
that we captured above; it sets the velocity
and angular velocity back to zero. and prevents

00:15:47.980 --> 00:15:52.769 align:middle line:90%
the ball from falling before a second launch.
You'll see what I mean when you get there.

00:15:52.769 --> 00:15:57.240 align:middle line:90%
So the basic objective is to be able to launch
the ball more than once in a row. to have

00:15:57.240 --> 00:16:02.579 align:middle line:90%
a second swipe at the pins. So pause the video
and have a go at doing that for yourself now.

00:16:02.579 --> 00:16:05.660 align:middle line:84%
Go on. please pause it. don't just be a passenger.

00:16:05.660 --> 00:16:10.199 align:middle line:90%
I'm sorry if you've done every single challenge
judiciously. you know that I'm going to keep

00:16:10.199 --> 00:16:15.360 align:middle line:90%
bugging people who haven't. OK. fantastic.
so let's get on and make that little bit work.

00:16:15.360 --> 00:16:18.899 align:middle line:90%
So we have a reset method here. resetting
ball. we can leave that log entry in - it's

00:16:18.899 --> 00:16:22.560 align:middle line:90%
the sort of log entry that's actually quite
helpful. I said that we wanted an in play.

00:16:22.560 --> 00:16:29.639 align:middle line:90%
Well we already have an in play flag here.
so let's set it at this point. inPlay = false

00:16:29.639 --> 00:16:34.139 align:middle line:90%
right? If you are resetting the ball then
it's no longer in play.

00:16:34.139 --> 00:16:39.920 align:middle line:90%
Now in the start we need to capture the position
of the ball. right? So how are we going to

00:16:39.920 --> 00:16:50.420 align:middle line:90%
do that? Well I'm going to create myself an
instance variable called ballStartPos so where's

00:16:50.420 --> 00:16:54.399 align:middle line:90%
that going to be? It's going to be up here.
it's going to be private. it's going to be

00:16:54.399 --> 00:17:02.690 align:middle line:90%
a Vector3 and it's going to be called ballStartPos.
there it is. On start I'm going to say ballStartPos

00:17:02.690 --> 00:17:07.770 align:middle line:90%
equals transform.position because we're in
the ball script here right. we're just capturing

00:17:07.770 --> 00:17:10.860 align:middle line:90%
the transform position of a ball at the start
so if your designer moves it it will just

00:17:10.860 --> 00:17:14.839 align:middle line:90%
store a new position in the variable. Fine
with me.

00:17:14.839 --> 00:17:21.709 align:middle line:90%
So how are we going to do the reset? So we
say that inPlay is not true any more. we make

00:17:21.709 --> 00:17:25.990 align:middle line:90%
the transform.position = ballStartPos. the
exact reverse of what we did in the start

00:17:25.990 --> 00:17:32.220 align:middle line:90%
method. we will say my RigidBody now - we
need access to the RigidBody of the ball now

00:17:32.220 --> 00:17:35.880 align:middle line:90%
in order to be able to play with this angular
momentum and its velocity. If we don't do

00:17:35.880 --> 00:17:40.240 align:middle line:90%
that then the ball is going to continue moving.
Let's try it and see what happens if we don't

00:17:40.240 --> 00:17:51.610 align:middle line:90%
do this. So we take one swipe at the pins.
there they go. and when it's determined that

00:17:51.610 --> 00:17:54.880 align:middle line:90%
they've settled the ball should reset back
to the beginning - boom.

00:17:54.880 --> 00:18:01.970 align:middle line:90%
Now what's happening? Resetting ball. where
is the ball? You see it's kind of just careering

00:18:01.970 --> 00:18:08.309 align:middle line:90%
off. and that's because it didn't have its
position and velocity stopped. So we're going

00:18:08.309 --> 00:18:14.320 align:middle line:90%
to need access to the RigidBody inside of
this Ball. So this is slightly new in Unity

00:18:14.320 --> 00:18:19.160 align:middle line:90%
5 because you need to explicitly go and get
the RigidBody now so. we have a private RigidBody

00:18:19.160 --> 00:18:26.140 align:middle line:90%
myRigidBody which is the ball's RigidBody
there. On the start we go and find that. so

00:18:26.140 --> 00:18:32.280 align:middle line:90%
that's simple enough. We just say myRigidBody
= GetComponent RigidBody. you're going to

00:18:32.280 --> 00:18:36.299 align:middle line:90%
have to do a lot of this in Unity 5. they've
decoupled things for us.

00:18:36.299 --> 00:18:39.690 align:middle line:90%
Which is generally good news but it does mean
you have to write a little bit more code.

00:18:39.690 --> 00:18:44.340 align:middle line:90%
So you've got the RigidBody now. and now that
you've got that you can simply come down here

00:18:44.340 --> 00:18:52.400 align:middle line:90%
and say myRigidBody.velocity = initialVelocity.
Ah. oops. well we don't have an initial velocity.

00:18:52.400 --> 00:19:01.340 align:middle line:90%
Well. what do we want the initial velocity
to be on the reset? Well. 0. So we don't need

00:19:01.340 --> 00:19:06.160 align:middle line:90%
an initial velocity. we need Vector3.zero.
Weâve reset the ball it wants no velocity.

00:19:06.160 --> 00:19:12.440 align:middle line:90%
and similarly with the angular velocity. What
do we want that to be? Well it's also a vector3.zero

00:19:12.440 --> 00:19:18.559 align:middle line:90%
if you looked at the docs then you'd find
that it takes a standard vector3;

00:19:18.559 --> 00:19:22.440 align:middle line:90%
and the final thing that we need to do well
if you look here we said RigidBody.useGravity;

00:19:22.440 --> 00:19:28.850 align:middle line:90%
ah. now look. RigidBody and myRigidBody. what's
that all about? Well look what I've done.

00:19:28.850 --> 00:19:33.350 align:middle line:90%
I've done this whole RigidBody thing twice.
so that's going to reinforce the difference

00:19:33.350 --> 00:19:39.220 align:middle line:90%
in Unity 5 isn't it? But it's completely un-necessary
so use the RigidBody you already had. you

00:19:39.220 --> 00:19:42.679 align:middle line:90%
see this line is identical to this line. you
may have been wondering why on earth's he

00:19:42.679 --> 00:19:47.640 align:middle line:90%
creating another RigidBody we already had
one. You're quite right; I'm just going to

00:19:47.640 --> 00:19:50.200 align:middle line:84%
slightly change the code to reflect that.

00:19:50.200 --> 00:19:57.320 align:middle line:90%
OK. fantastic. so just updating the spelling
as I go to sort this mess out. there we go.

00:19:57.320 --> 00:20:03.150 align:middle line:90%
So because we on launch said we want to use
gravity. on reset we want to stop using gravity

00:20:03.150 --> 00:20:14.169 align:middle line:90%
and that should stop the ball falling down.
Let's take a look. So let's fire the ball.

00:20:14.169 --> 00:20:19.190 align:middle line:90%
please hit a pin. Actually it doesn't matter
whether it hits a pin for this test. It's

00:20:19.190 --> 00:20:24.169 align:middle line:90%
gone into the bounding box that's the important
thing. Fantastic. So. resetting ball. that's

00:20:24.169 --> 00:20:28.210 align:middle line:90%
happening. Now. what's happened? Camera hasn't
followed it back. The ball is back at the

00:20:28.210 --> 00:20:34.120 align:middle line:90%
start but the main camera. if you look either
in the game view or in the scene you can see

00:20:34.120 --> 00:20:35.780 align:middle line:84%
that the main camera hasn't followed it.

00:20:35.780 --> 00:20:40.600 align:middle line:90%
Why not. where's the main camera? Back down
at the end here. Hmm. strange. So. how's the

00:20:40.600 --> 00:20:45.760 align:middle line:90%
main camera controlled? With the camera control
script. What's the problem? See if you can

00:20:45.760 --> 00:20:53.580 align:middle line:90%
see the problem. it's right in here. I can
see it now. So let me put you out of your

00:20:53.580 --> 00:21:01.659 align:middle line:90%
misery. the camera control is stopping moving
the camera when the camera's transform is

00:21:01.659 --> 00:21:07.929 align:middle line:90%
less than or equal to 1829. As soon as the
camera goes past 1829. which it is now. then

00:21:07.929 --> 00:21:10.789 align:middle line:90%
where is it. Is it there now? Yeah I've stopped
the game. but you would have noticed the main

00:21:10.789 --> 00:21:16.419 align:middle line:90%
camera was past 1829 in the z then it's got
no chance of recovering. So how about if we

00:21:16.419 --> 00:21:18.280 align:middle line:84%
did it based on the ball?

00:21:18.280 --> 00:21:21.750 align:middle line:90%
ball.transform.position - all the time that
the ball is at the end of the play space then

00:21:21.750 --> 00:21:28.990 align:middle line:90%
we follow it. Let's try that. see if that's
any better; and that's a typical bug that

00:21:28.990 --> 00:21:32.220 align:middle line:90%
you may come across and the obvious place
to look was the camera controller because

00:21:32.220 --> 00:21:36.080 align:middle line:90%
it's a camera control problem. it shows that
we've named things right. When it's settled

00:21:36.080 --> 00:21:40.970 align:middle line:90%
we can get back to the beginning and look.
no gravity and we can bowl again. Woohoo!

00:21:40.970 --> 00:21:45.530 align:middle line:90%
We have the objective for this lesson. we
have multiple bowls. we have a pin count and

00:21:45.530 --> 00:21:47.470 align:middle line:84%
we're making wonderful progress.

00:21:47.470 --> 00:21:50.010 align:middle line:90%
Of course we're going to need to deal with
things like it rolling off the edge we can

00:21:50.010 --> 00:21:54.900 align:middle line:90%
do that by either putting invisible walls
or a variety of different ways of dealing

00:21:54.900 --> 00:21:58.000 align:middle line:90%
with that but not in this video. it's plenty
long enough. congratulations in getting this

00:21:58.000 --> 00:22:03.000 align:middle line:84%
=======

00:00:03,530 --> 00:00:08,730 align:middle line:90%
Hey so welcome to the second part of this
video. Let's take a little look at our game

00:00:08,730 --> 00:00:13,790 align:middle line:90%
and see where we are. So we're in a pretty
cool situation where the standing counter

00:00:13,790 --> 00:00:18,990 align:middle line:90%
doesn't even start to update until the ball
is in this virtual bounding box down the end

00:00:18,990 --> 00:00:24,100 align:middle line:90%
here, this pinsetter box. When that happens,
as soon as it enters this green box we get

00:00:24,100 --> 00:00:28,119 align:middle line:90%
a count, and actually all of the pins are
knocked down there. Also we've arranged for

00:00:28,119 --> 00:00:32,610 align:middle line:90%
the pins to destroy themselves as soon as
they go outside of this box. The ball doesn't

00:00:32,610 --> 00:00:35,550 align:middle line:90%
but that's OK because we can just move the
ball back to the start, but we don't want

00:00:35,550 --> 00:00:38,390 align:middle line:90%
pins drifting around our scene and indeed
they're not.

00:00:38,390 --> 00:00:42,040 align:middle line:90%
In fact I think that we could even go into
Scene view here and do a sneaky movement of

00:00:42,040 --> 00:00:47,090 align:middle line:90%
a pin and I think, you see? The moment that
it gets outside the bounding box that method

00:00:47,090 --> 00:00:52,030 align:middle line:90%
gets called and off it goes. Pretty cool,
hey? So you could just let the pin fall off

00:00:52,030 --> 00:00:55,829 align:middle line:90%
the edge and the moment it falls out the box
it gets destroyed. Fantastic, so that's all

00:00:55,829 --> 00:01:00,850 align:middle line:90%
working. What isn't working yet is we cannot
detect when the pins have settled yet. What

00:01:00,850 --> 00:01:05,409 align:middle line:90%
do I mean by settled? Well there are some
instances in which it's going to be tricky

00:01:05,409 --> 00:01:09,950 align:middle line:90%
for me to get the game into this state but
there are some instances in which the pins

00:01:09,950 --> 00:01:11,080 align:middle line:84%
wobble around for a while.

00:01:11,080 --> 00:01:16,310 align:middle line:90%
Let's see if I can make one of these happen.
Otherwise I think that you get the idea, that

00:01:16,310 --> 00:01:20,030 align:middle line:90%
we hit the pins and they don't decisively
stand up or fall down but they wobble for

00:01:20,030 --> 00:01:25,110 align:middle line:90%
a while, let's see if there're some wobblers
now. Erm... not really, but you can imagine

00:01:25,110 --> 00:01:28,310 align:middle line:90%
that this guy on the left could have ended
up wobbling around and we need at some point

00:01:28,310 --> 00:01:32,560 align:middle line:90%
to just draw a line and say well it's either
standing or it's not so we can progress the

00:01:32,560 --> 00:01:39,180 align:middle line:90%
game play. So what we're going to do in this
second half of the video is the bottom three

00:01:39,180 --> 00:01:42,409 align:middle line:84%
items of this checklist that we saw before.

00:01:42,409 --> 00:01:46,390 align:middle line:90%
We're going to detect when the pins have stopped
wobbling, we're going to use three seconds

00:01:46,390 --> 00:01:51,460 align:middle line:90%
as the time-out. We'll update the pin count
display to green when that happens to say

00:01:51,460 --> 00:01:55,320 align:middle line:90%
yeah I'm confident about the number and then
inside our method we're going to update our

00:01:55,320 --> 00:01:59,540 align:middle line:90%
last standing count to -1 when they've settled
and that's a little bit nasty but we'll talk

00:01:59,540 --> 00:02:05,329 align:middle line:90%
about the pros and cons as I've said before
of doing that. OK cool, so let's get on with

00:02:05,329 --> 00:02:12,330 align:middle line:90%
the coding now. So we're going to be inside
our pin setter script and what we're going

00:02:12,330 --> 00:02:16,480 align:middle line:90%
to be wanting to do is write a few more methods
inside this PinSetter script.

00:02:16,480 --> 00:02:20,980 align:middle line:90%
Alright? So before we get going let me help
you off the ground. We're going to want a

00:02:20,980 --> 00:02:25,849 align:middle line:90%
public - I think - int so that other things
from the outside can say well how many, what's

00:02:25,849 --> 00:02:31,900 align:middle line:90%
the state of the pins, and it's called a last
standing count. Or I'm going to call it that,

00:02:31,900 --> 00:02:36,870 align:middle line:90%
and I'm going to initialise it to minus 1
which indicates that actually nothing's fallen

00:02:36,870 --> 00:02:42,569 align:middle line:90%
over yet, the pins are in a default state
that - they are as they were before. So it's

00:02:42,569 --> 00:02:48,940 align:middle line:90%
not a definite number of pins standing and
-1 well, OK it's nasty because we are encoding

00:02:48,940 --> 00:02:53,739 align:middle line:90%
non-numeric information in a specialised number,
but it does make our code short and any other

00:02:53,739 --> 00:02:57,459 align:middle line:90%
solution that I've come up with, or Brice
has come up with with me, does actually make

00:02:57,459 --> 00:03:01,629 align:middle line:90%
things a little bit more complicated so you
always want to go for the shortest code possible

00:03:01,629 --> 00:03:04,670 align:middle line:90%
and I like this solution in this particular
case.

00:03:04,670 --> 00:03:08,390 align:middle line:90%
Alright? So we're going to need that. The
other thing that you're going to need in here

00:03:08,390 --> 00:03:16,540 align:middle line:90%
is you're going to need a private float to
keep track of the last change time. OK so

00:03:16,540 --> 00:03:22,510 align:middle line:90%
private float lastChangeTime which is going
to keep track of when the count number actually

00:03:22,510 --> 00:03:27,590 align:middle line:90%
last updated; and the final thing that I'll
be alluding to we've already got here we have

00:03:27,590 --> 00:03:33,879 align:middle line:90%
a private bool ballEnteredBox - bool ballEnteredBox,
you see bool ball? Fantastic so I'm going

00:03:33,879 --> 00:03:36,870 align:middle line:90%
to group my public and private variables together
I like doing that, with a little bit of a

00:03:36,870 --> 00:03:41,349 align:middle line:90%
space so I can at a glance look and say here
are my public, here are my private.

00:03:41,349 --> 00:03:47,620 align:middle line:90%
Fantastic, so that's the outline, we're also
going to be writing at least another couple

00:03:47,620 --> 00:03:52,689 align:middle line:90%
of methods. One's going to be a check standing
method so I'll write the outline of it now

00:03:52,689 --> 00:03:57,189 align:middle line:90%
of course you're going to be writing the actual
code but we have a void CheckStanding method

00:03:57,189 --> 00:04:05,849 align:middle line:90%
here and what is this going to do? It's basically
going to update the standing count, or more

00:04:05,849 --> 00:04:13,780 align:middle line:90%
specifically the last standing count, and
what else is the CheckStanding method going

00:04:13,780 --> 00:04:27,300 align:middle line:90%
to need to do? It's also going to call a new
method called PinsHaveSettled when they have.

00:04:27,300 --> 00:04:29,560 align:middle line:90%
So there's a little bit of written pseudo-code
for you.

00:04:29,560 --> 00:04:36,009 align:middle line:90%
So, another method then we're going to be
writing in the challenge which is void PinsHaveSettled.

00:04:36,009 --> 00:04:39,370 align:middle line:90%
So this is a new approach to programming we're
just kind of going from the outside in, we're

00:04:39,370 --> 00:04:43,479 align:middle line:90%
writing the methods first; and then in here
we're going to do various things we'll talk

00:04:43,479 --> 00:04:47,770 align:middle line:90%
about in the challenge. The final thing to
say is when are we calling these methods?

00:04:47,770 --> 00:04:50,919 align:middle line:90%
Well from update, so I'm actually going to
move them up the function a little bit, right

00:04:50,919 --> 00:04:56,790 align:middle line:90%
under the update like so; because what I like
to be able to do is if I'm calling something

00:04:56,790 --> 00:05:00,680 align:middle line:90%
in Update I like to be able to see it on the
same screen and what I'm going to be calling

00:05:00,680 --> 00:05:07,380 align:middle line:90%
is I'm going to be calling CountStanding on
every single update if the ball has entered

00:05:07,380 --> 00:05:07,930 align:middle line:84%
the box.

00:05:07,930 --> 00:05:15,030 align:middle line:90%
So I'll leave you to do that, so we're going
to check if ball has entered box, in fact

00:05:15,030 --> 00:05:19,600 align:middle line:90%
you know what? I'm going to do that for you.
I'm going to give you a leg up. This bit is

00:05:19,600 --> 00:05:25,360 align:middle line:90%
so much just writing it as you say it that
I'm going to do it for you. So, if this flag,

00:05:25,360 --> 00:05:30,340 align:middle line:90%
this ballEnteredBox flag is set to true, so
if the ball has entered the box, then I want

00:05:30,340 --> 00:05:33,940 align:middle line:90%
to every single frame, because we're in the
Update loop, I want to check the standing

00:05:33,940 --> 00:05:38,169 align:middle line:90%
count. OK? And if you don't like the name
of Check Standing then rename it, Check Standing

00:05:38,169 --> 00:05:41,070 align:middle line:90%
Count, I'm going to leave it as CheckStanding
for now.

00:05:41,070 --> 00:05:45,550 align:middle line:90%
So after the ball has entered the box we run
this method which updates the standing count

00:05:45,550 --> 00:05:49,900 align:middle line:90%
and eventually calls pins have settled if
they've settled. So that gives you the structure

00:05:49,900 --> 00:05:54,520 align:middle line:90%
that you need in order for it to do the challenge,
and then remember the private and public variables

00:05:54,520 --> 00:05:58,800 align:middle line:90%
I've created are here if you want to pause
the video and take a look you're welcome.

00:05:58,800 --> 00:06:02,110 align:middle line:90%
So let's put you into the challenge now and
see if you can fill out the bodies of those

00:06:02,110 --> 00:06:05,220 align:middle line:84%
methods. So here's the challenge in question.

00:06:05,220 --> 00:06:09,630 align:middle line:90%
Number one if ballEnteredBox then call CheckStanding(),
I've done that for you! Aren't I nice, aren't

00:06:09,630 --> 00:06:14,639 align:middle line:90%
I kind, but you're not off the hook yet, you
now need to wait for the standing count to

00:06:14,639 --> 00:06:18,600 align:middle line:90%
stop changing for three seconds. I've given
you all the tools that you need to do that,

00:06:18,600 --> 00:06:25,699 align:middle line:90%
all the variables, but I want you to write
that code. When pins settle call PinsHaveSettled()

00:06:25,699 --> 00:06:30,210 align:middle line:90%
and then all we're going to do on PinsHaveSettled
for now is just update the display to green.

00:06:30,210 --> 00:06:34,400 align:middle line:90%
So go ahead, pause the video, have a good
look at the code and see if you can fill it

00:06:34,400 --> 00:06:44,210 align:middle line:90%
in and do that challenge right now please.
OK so welcome back, let's get that code written

00:06:44,210 --> 00:06:49,539 align:middle line:90%
shall we? It's all about the code, so why
don't we dive in and write it? Starting with

00:06:49,539 --> 00:06:54,590 align:middle line:90%
let's say the CheckStanding method, well let's
make a variable inside this method called

00:06:54,590 --> 00:07:00,660 align:middle line:90%
current standing which is just an integer
and it is the count standing so at the beginning

00:07:00,660 --> 00:07:06,120 align:middle line:90%
the first time we come into this check standing
to see how many are standing we just call

00:07:06,120 --> 00:07:09,419 align:middle line:90%
that CountStanding method and get the latest
count, and store it in a variable.

00:07:09,419 --> 00:07:17,410 align:middle line:90%
Fine, then what? Well, just write some English.
If current standing is not equal to - and

00:07:17,410 --> 00:07:25,120 align:middle line:90%
notice the not - lastStandingCount. Now on
the first iteration it will not be equal to

00:07:25,120 --> 00:07:29,440 align:middle line:90%
the last standing count of course because
we initialised it to -1, so the first time

00:07:29,440 --> 00:07:35,310 align:middle line:90%
around current standing will not be equal
to -1. So if that's the case whenever the

00:07:35,310 --> 00:07:40,410 align:middle line:90%
current Standing count when we came in to
this method is not equal to the last one which

00:07:40,410 --> 00:07:49,289 align:middle line:90%
is an instance variable at a wider scope up
here, then we say lastChangeTime = Time.time.

00:07:49,289 --> 00:07:54,910 align:middle line:90%
You can look up Time.time but it's the time
since the game started.

00:07:54,910 --> 00:08:02,360 align:middle line:90%
So we log when the last change happened, we
update the last standing count, to whatever

00:08:02,360 --> 00:08:10,280 align:middle line:90%
it was when we came in to the method here,
and we return, we get out of here, we're done,

00:08:10,280 --> 00:08:15,919 align:middle line:90%
OK. If this wasn't to happen, i.e. if we have
the same count we had last time this frame

00:08:15,919 --> 00:08:19,960 align:middle line:90%
- remember this is all being called from update,
once the ball enters the box this gets called

00:08:19,960 --> 00:08:26,060 align:middle line:90%
every update. Every single frame it goes "has
the count changed?", if it has then it skips

00:08:26,060 --> 00:08:27,990 align:middle line:84%
this - look it's a not equals to.

00:08:27,990 --> 00:08:43,140 align:middle line:90%
So if it has changed then we come down here
and we say right, float, settleTime = 3 seconds.

00:08:43,140 --> 00:08:50,920 align:middle line:90%
How long to wait to consider pins settled.
Fine, now, if I'm going to put in a couple

00:08:50,920 --> 00:08:55,180 align:middle line:90%
of brackets for us, Time, and I'm going to
close the couple of brackets as well, it's

00:08:55,180 --> 00:09:04,690 align:middle line:90%
always good to close your brackets as soon
as you've opened them, so if Time.time - lastChangeTime

00:09:04,690 --> 00:09:11,610 align:middle line:90%
- so if it's been is another way of saying
that in English, if it's been more than this

00:09:11,610 --> 00:09:18,470 align:middle line:90%
settle threshold, or settle time, i.e. if
it's been more than 3 seconds yeah, in English,

00:09:18,470 --> 00:09:25,560 align:middle line:84%
if last change more than 3 seconds ago.

00:09:25,560 --> 00:09:31,209 align:middle line:90%
Now this comment will go out of sync if you
change this variable but OK, then we call

00:09:31,209 --> 00:09:36,399 align:middle line:90%
pins have settled. Do you get it? Can you
see how that works? We go into CheckStanding,

00:09:36,399 --> 00:09:43,580 align:middle line:90%
we jump out of it if there hasn't been a change
but if there has been a change then provided

00:09:43,580 --> 00:09:48,070 align:middle line:90%
that that change was more than 3 seconds ago
we call pins have settled and finally a call

00:09:48,070 --> 00:09:52,620 align:middle line:90%
to this method. Great, so all I said that
we needed to do within PinsHaveSettled was

00:09:52,620 --> 00:10:00,860 align:middle line:90%
set the standing display to its colour to
Color.green for now. Now is there anything

00:10:00,860 --> 00:10:05,269 align:middle line:90%
else that you want to do? Well yes, I think
that it would make sense to set the last standing

00:10:05,269 --> 00:10:13,570 align:middle line:90%
count back to this special reserve of -1 thing,
if basically indicates a new frame.

00:10:13,570 --> 00:10:18,829 align:middle line:90%
It means we're starting afresh, OK because
the pins have settled, so what it really indicates

00:10:18,829 --> 00:10:26,760 align:middle line:90%
is it indicates that pins have settled and
ball not back in box, so it basically means

00:10:26,760 --> 00:10:32,850 align:middle line:90%
a new frame. OK, later we'll be doing things
like Ball.reset which we don't have at the

00:10:32,850 --> 00:10:40,260 align:middle line:90%
moment and we also probably while we're here
want to be saying actually, the ball has not

00:10:40,260 --> 00:10:43,339 align:middle line:90%
entered the box any more. So where we have
this ballEnteredBox flag, that wants to go

00:10:43,339 --> 00:10:47,850 align:middle line:90%
to false. So when the pins have settled we
want to send the StandingCount back to its

00:10:47,850 --> 00:10:52,630 align:middle line:90%
default value of -1, we say that the ball
has no longer entered the box in this part

00:10:52,630 --> 00:10:54,820 align:middle line:84%
of the game and the colour goes green.

00:10:54,820 --> 00:10:59,970 align:middle line:90%
Cool, so that's going a little bit outside
the call of duty of the challenge so don't

00:10:59,970 --> 00:11:04,850 align:middle line:90%
worry at all if you needed a little bit of
help here. Let's see how this works. Indeed

00:11:04,850 --> 00:11:12,000 align:middle line:90%
if it works. So, oops, we have the black number
at the moment which means that it's not being

00:11:12,000 --> 00:11:18,040 align:middle line:90%
updated it's kind of idle. I'm having challenges
with even playing my own game... come on you

00:11:18,040 --> 00:11:22,170 align:middle line:90%
must get down the end! I'm going to have to
find a way to make this easier. I could just

00:11:22,170 --> 00:11:25,740 align:middle line:90%
get better at it. It's always a... a bit of
a break while you watch me fumble.

00:11:25,740 --> 00:11:30,370 align:middle line:90%
Here you go, so no updates at all until you
get inside the bounding box, boom it goes

00:11:30,370 --> 00:11:34,390 align:middle line:90%
red saying it's a tentative value, it waits
for the pins to settle, none of them are wobbling

00:11:34,390 --> 00:11:38,690 align:middle line:90%
so after three seconds it goes green. Great,
let's watch that once more; let's see if we

00:11:38,690 --> 00:11:44,690 align:middle line:90%
can get some wobbling pins so that we actually
get the desired effect. A sip of tea while

00:11:44,690 --> 00:11:56,630 align:middle line:90%
we wait. 10, 9, 7, 1, 0, you see that one
wobbling? 0, it's decided it's zero and actually

00:11:56,630 --> 00:12:01,490 align:middle line:90%
it's right. Now we won't optimise this time
until we've finished optimising the physics.

00:12:01,490 --> 00:12:04,320 align:middle line:90%
We're going to shortly be back to the point
where we're going to want to play with the

00:12:04,320 --> 00:12:09,070 align:middle line:90%
physics but I wanted to leave the physics
until now because you can tell that all of

00:12:09,070 --> 00:12:13,430 align:middle line:90%
this stuff will depend on the physics parameters,
and to some extent vice versa I wanted to

00:12:13,430 --> 00:12:19,160 align:middle line:90%
get all of this in place before we started
to work any harder on the physics, but we

00:12:19,160 --> 00:12:25,260 align:middle line:90%
basically have now all of the code that we
need to determine how many pins are actually

00:12:25,260 --> 00:12:29,149 align:middle line:90%
standing. The final thing that we're going
to need to do is to actually reset the ball

00:12:29,149 --> 00:12:31,130 align:middle line:84%
back to the beginning of the lane.

00:12:31,130 --> 00:12:36,670 align:middle line:90%
So moving into our PinSetter.cs let's lay
the foundations for the ability to reset the

00:12:36,670 --> 00:12:40,050 align:middle line:90%
ball. So firstly the PinSetter is going to
need to know about the ball, right? It'll

00:12:40,050 --> 00:12:45,029 align:middle line:90%
need to talk to it. So we're going to need
a private Ball ball, simple as that. With

00:12:45,029 --> 00:12:49,610 align:middle line:90%
a small b, a variable has a small letter;
and then where are we going to find that ball?

00:12:49,610 --> 00:12:56,089 align:middle line:90%
Well let's go find the ball, small b, it's
really wanting to give me a capital b here,

00:12:56,089 --> 00:13:00,410 align:middle line:90%
ah it's because I've misspelt private, OK
so a little lesson here, I've misspelt private

00:13:00,410 --> 00:13:05,420 align:middle line:90%
and then the auto-complete I'm fighting, so
if you're fighting the auto-complete in an

00:13:05,420 --> 00:13:09,639 align:middle line:90%
unexpected situation then it's probably because
of something like this.

00:13:09,639 --> 00:13:17,649 align:middle line:90%
If I spell private right here then it understands
that I want to find a variable and it allows

00:13:17,649 --> 00:13:25,660 align:middle line:90%
me to use a small letter because it's not
looking for a type any more, and then I can

00:13:25,660 --> 00:13:29,880 align:middle line:90%
say ball and everything is working, right?
GameObject.FindObjectOfType, there's only

00:13:29,880 --> 00:13:36,630 align:middle line:90%
one ball in the scene. We can actually move
this ball rather than reinstantiating it in

00:13:36,630 --> 00:13:43,380 align:middle line:90%
this case. There's two ways of dealing with
objects, you can either move them or reinstantiate

00:13:43,380 --> 00:13:49,279 align:middle line:90%
them. Generally it's more efficient to move
them than reinstantiate them but it depends

00:13:49,279 --> 00:13:49,730 align:middle line:84%
on the situation.

00:13:49,730 --> 00:13:49,740 align:middle line:90%
In this game we're doing both; we are destroying
and reinstantiating pins but we are moving

00:13:49,740 --> 00:13:49,750 align:middle line:90%
the ball. Performance is not an issue in this
game, the way it's running at the moment.

00:13:49,750 --> 00:13:50,389 align:middle line:90%
OK so we have found this ball and what I'm
going to want to do on when the pins have

00:13:50,389 --> 00:13:57,190 align:middle line:90%
settled is I'm going to want to reset this
ball immediately. So ball.Reset, now it doesn't

00:13:57,190 --> 00:14:02,480 align:middle line:90%
have a reset method yet, but let's pretend
if does. It's going to be red for now, let's

00:14:02,480 --> 00:14:07,220 align:middle line:90%
go into the ball script, and just at least
log out that that has happened so that we

00:14:07,220 --> 00:14:09,160 align:middle line:84%
know that we're getting to this.

00:14:09,160 --> 00:14:12,790 align:middle line:90%
So let's have a launch script, we've already
got a launch method rather in the ball script,

00:14:12,790 --> 00:14:19,910 align:middle line:90%
let's have now a public void, returns nothing,
reset, which resets the ball. And for now

00:14:19,910 --> 00:14:28,370 align:middle line:90%
we're just going to Debug.Log resetting ball
so that we know that we are getting to this

00:14:28,370 --> 00:14:34,329 align:middle line:90%
point in our code. OK now over in PinSetter
that code will go not red, i.e. black and

00:14:34,329 --> 00:14:37,550 align:middle line:90%
when the pins have settled then reset will
be called. Let's just check that works before

00:14:37,550 --> 00:14:42,970 align:middle line:90%
we finally make the reset happen. So we swipe
along, hope that we actually hit something,

00:14:42,970 --> 00:14:49,410 align:middle line:90%
keep an eye on our console, and what should
happen is that it goes red now, starts counting,

00:14:49,410 --> 00:14:53,769 align:middle line:90%
any wobbles are taken a count of, after three
seconds of no changes in this number it goes

00:14:53,769 --> 00:14:54,240 align:middle line:84%
green.

00:14:54,240 --> 00:15:00,149 align:middle line:90%
Pin left, we can delete that, log resetting
ball pin left. OK. I'm going to delete the

00:15:00,149 --> 00:15:05,440 align:middle line:90%
pin left log but we've got the resetting ball.
That's what we needed. So pin left log entry

00:15:05,440 --> 00:15:12,320 align:middle line:90%
from PinSetter.cs has gone around about line
67 on mine. Now the final thing to do is to

00:15:12,320 --> 00:15:19,570 align:middle line:90%
go back to our ball and to give it the ability
to be reset. So here's your challenge. Write

00:15:19,570 --> 00:15:26,120 align:middle line:90%
Reset() in Ball.cs. Create and manage a public
bool inPlay; so from the outside we can say

00:15:26,120 --> 00:15:31,709 align:middle line:90%
Ball.inPlay and it will tell us whether it's
in play or not. Capture the ball's start position

00:15:31,709 --> 00:15:33,570 align:middle line:84%
in the start function.

00:15:33,570 --> 00:15:38,230 align:middle line:90%
Reset the ball's position to the start when
we call the reset method - everything now

00:15:38,230 --> 00:15:43,190 align:middle line:90%
indented on this slide is what the reset method
does. It resets the position to the start

00:15:43,190 --> 00:15:47,980 align:middle line:90%
that we captured above; it sets the velocity
and angular velocity back to zero, and prevents

00:15:47,980 --> 00:15:52,769 align:middle line:90%
the ball from falling before a second launch.
You'll see what I mean when you get there.

00:15:52,769 --> 00:15:57,240 align:middle line:90%
So the basic objective is to be able to launch
the ball more than once in a row, to have

00:15:57,240 --> 00:16:02,579 align:middle line:90%
a second swipe at the pins. So pause the video
and have a go at doing that for yourself now.

00:16:02,579 --> 00:16:05,660 align:middle line:84%
Go on, please pause it, don't just be a passenger.

00:16:05,660 --> 00:16:10,199 align:middle line:90%
I'm sorry if you've done every single challenge
judiciously, you know that I'm going to keep

00:16:10,199 --> 00:16:15,360 align:middle line:90%
bugging people who haven't. OK, fantastic,
so let's get on and make that little bit work.

00:16:15,360 --> 00:16:18,899 align:middle line:90%
So we have a reset method here, resetting
ball, we can leave that log entry in - it's

00:16:18,899 --> 00:16:22,560 align:middle line:90%
the sort of log entry that's actually quite
helpful. I said that we wanted an in play.

00:16:22,560 --> 00:16:29,639 align:middle line:90%
Well we already have an in play flag here,
so let's set it at this point. inPlay = false

00:16:29,639 --> 00:16:34,139 align:middle line:90%
right? If you are resetting the ball then
it's no longer in play.

00:16:34,139 --> 00:16:39,920 align:middle line:90%
Now in the start we need to capture the position
of the ball, right? So how are we going to

00:16:39,920 --> 00:16:50,420 align:middle line:90%
do that? Well I'm going to create myself an
instance variable called ballStartPos so where's

00:16:50,420 --> 00:16:54,399 align:middle line:90%
that going to be? It's going to be up here,
it's going to be private, it's going to be

00:16:54,399 --> 00:17:02,690 align:middle line:90%
a Vector3 and it's going to be called ballStartPos,
there it is. On start I'm going to say ballStartPos

00:17:02,690 --> 00:17:07,770 align:middle line:90%
equals transform.position because we're in
the ball script here right, we're just capturing

00:17:07,770 --> 00:17:10,860 align:middle line:90%
the transform position of a ball at the start
so if your designer moves it it will just

00:17:10,860 --> 00:17:14,839 align:middle line:90%
store a new position in the variable. Fine
with me.

00:17:14,839 --> 00:17:21,709 align:middle line:90%
So how are we going to do the reset? So we
say that inPlay is not true any more, we make

00:17:21,709 --> 00:17:25,990 align:middle line:90%
the transform.position = ballStartPos, the
exact reverse of what we did in the start

00:17:25,990 --> 00:17:32,220 align:middle line:90%
method, we will say my RigidBody now - we
need access to the RigidBody of the ball now

00:17:32,220 --> 00:17:35,880 align:middle line:90%
in order to be able to play with this angular
momentum and its velocity. If we don't do

00:17:35,880 --> 00:17:40,240 align:middle line:90%
that then the ball is going to continue moving.
Let's try it and see what happens if we don't

00:17:40,240 --> 00:17:51,610 align:middle line:90%
do this. So we take one swipe at the pins,
there they go, and when it's determined that

00:17:51,610 --> 00:17:54,880 align:middle line:90%
they've settled the ball should reset back
to the beginning - boom.

00:17:54,880 --> 00:18:01,970 align:middle line:90%
Now what's happening? Resetting ball, where
is the ball? You see it's kind of just careering

00:18:01,970 --> 00:18:08,309 align:middle line:90%
off, and that's because it didn't have its
position and velocity stopped. So we're going

00:18:08,309 --> 00:18:14,320 align:middle line:90%
to need access to the RigidBody inside of
this Ball. So this is slightly new in Unity

00:18:14,320 --> 00:18:19,160 align:middle line:90%
5 because you need to explicitly go and get
the RigidBody now so, we have a private RigidBody

00:18:19,160 --> 00:18:26,140 align:middle line:90%
myRigidBody which is the ball's RigidBody
there. On the start we go and find that, so

00:18:26,140 --> 00:18:32,280 align:middle line:90%
that's simple enough. We just say myRigidBody
= GetComponent RigidBody, you're going to

00:18:32,280 --> 00:18:36,299 align:middle line:90%
have to do a lot of this in Unity 5, they've
decoupled things for us.

00:18:36,299 --> 00:18:39,690 align:middle line:90%
Which is generally good news but it does mean
you have to write a little bit more code.

00:18:39,690 --> 00:18:44,340 align:middle line:90%
So you've got the RigidBody now, and now that
you've got that you can simply come down here

00:18:44,340 --> 00:18:52,400 align:middle line:90%
and say myRigidBody.velocity = initialVelocity.
Ah, oops, well we don't have an initial velocity.

00:18:52,400 --> 00:19:01,340 align:middle line:90%
Well, what do we want the initial velocity
to be on the reset? Well, 0. So we don't need

00:19:01,340 --> 00:19:06,160 align:middle line:90%
an initial velocity, we need Vector3.zero.
Weve reset the ball it wants no velocity,

00:19:06,160 --> 00:19:12,440 align:middle line:90%
and similarly with the angular velocity. What
do we want that to be? Well it's also a vector3.zero

00:19:12,440 --> 00:19:18,559 align:middle line:90%
if you looked at the docs then you'd find
that it takes a standard vector3;

00:19:18,559 --> 00:19:22,440 align:middle line:90%
and the final thing that we need to do well
if you look here we said RigidBody.useGravity;

00:19:22,440 --> 00:19:28,850 align:middle line:90%
ah, now look, RigidBody and myRigidBody, what's
that all about? Well look what I've done,

00:19:28,850 --> 00:19:33,350 align:middle line:90%
I've done this whole RigidBody thing twice,
so that's going to reinforce the difference

00:19:33,350 --> 00:19:39,220 align:middle line:90%
in Unity 5 isn't it? But it's completely un-necessary
so use the RigidBody you already had, you

00:19:39,220 --> 00:19:42,679 align:middle line:90%
see this line is identical to this line, you
may have been wondering why on earth's he

00:19:42,679 --> 00:19:47,640 align:middle line:90%
creating another RigidBody we already had
one. You're quite right; I'm just going to

00:19:47,640 --> 00:19:50,200 align:middle line:84%
slightly change the code to reflect that.

00:19:50,200 --> 00:19:57,320 align:middle line:90%
OK, fantastic, so just updating the spelling
as I go to sort this mess out, there we go.

00:19:57,320 --> 00:20:03,150 align:middle line:90%
So because we on launch said we want to use
gravity, on reset we want to stop using gravity

00:20:03,150 --> 00:20:14,169 align:middle line:90%
and that should stop the ball falling down.
Let's take a look. So let's fire the ball,

00:20:14,169 --> 00:20:19,190 align:middle line:90%
please hit a pin. Actually it doesn't matter
whether it hits a pin for this test. It's

00:20:19,190 --> 00:20:24,169 align:middle line:90%
gone into the bounding box that's the important
thing. Fantastic. So, resetting ball, that's

00:20:24,169 --> 00:20:28,210 align:middle line:90%
happening. Now, what's happened? Camera hasn't
followed it back. The ball is back at the

00:20:28,210 --> 00:20:34,120 align:middle line:90%
start but the main camera, if you look either
in the game view or in the scene you can see

00:20:34,120 --> 00:20:35,780 align:middle line:84%
that the main camera hasn't followed it.

00:20:35,780 --> 00:20:40,600 align:middle line:90%
Why not, where's the main camera? Back down
at the end here. Hmm, strange. So, how's the

00:20:40,600 --> 00:20:45,760 align:middle line:90%
main camera controlled? With the camera control
script. What's the problem? See if you can

00:20:45,760 --> 00:20:53,580 align:middle line:90%
see the problem, it's right in here. I can
see it now. So let me put you out of your

00:20:53,580 --> 00:21:01,659 align:middle line:90%
misery, the camera control is stopping moving
the camera when the camera's transform is

00:21:01,659 --> 00:21:07,929 align:middle line:90%
less than or equal to 1829. As soon as the
camera goes past 1829, which it is now, then

00:21:07,929 --> 00:21:10,789 align:middle line:90%
where is it. Is it there now? Yeah I've stopped
the game, but you would have noticed the main

00:21:10,789 --> 00:21:16,419 align:middle line:90%
camera was past 1829 in the z then it's got
no chance of recovering. So how about if we

00:21:16,419 --> 00:21:18,280 align:middle line:84%
did it based on the ball?

00:21:18,280 --> 00:21:21,750 align:middle line:90%
ball.transform.position - all the time that
the ball is at the end of the play space then

00:21:21,750 --> 00:21:28,990 align:middle line:90%
we follow it. Let's try that, see if that's
any better; and that's a typical bug that

00:21:28,990 --> 00:21:32,220 align:middle line:90%
you may come across and the obvious place
to look was the camera controller because

00:21:32,220 --> 00:21:36,080 align:middle line:90%
it's a camera control problem, it shows that
we've named things right. When it's settled

00:21:36,080 --> 00:21:40,970 align:middle line:90%
we can get back to the beginning and look,
no gravity and we can bowl again. Woohoo!

00:21:40,970 --> 00:21:45,530 align:middle line:90%
We have the objective for this lesson, we
have multiple bowls, we have a pin count and

00:21:45,530 --> 00:21:47,470 align:middle line:84%
we're making wonderful progress.

00:21:47,470 --> 00:21:50,010 align:middle line:90%
Of course we're going to need to deal with
things like it rolling off the edge we can

00:21:50,010 --> 00:21:54,900 align:middle line:90%
do that by either putting invisible walls
or a variety of different ways of dealing

00:21:54,900 --> 00:21:58,000 align:middle line:90%
with that but not in this video, it's plenty
long enough, congratulations in getting this

00:21:58,000 --> 00:22:03,000 align:middle line:84%
>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unity/Section8/BM19 Detecting Pins have settled 2.srt
far and I'll see you in the next adventure.
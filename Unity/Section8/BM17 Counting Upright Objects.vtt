WEBVTT

00:00:04.400 --> 00:00:09.030 align:middle line:90%
Hey welcome back, so in this video we're going
to be talking about setting up game object

00:00:09.030 --> 00:00:17.210 align:middle line:90%
communication a little more. We're going to
set up a simple UI text display for pin count,

00:00:17.210 --> 00:00:21.390 align:middle line:90%
we will then set up a pin setter box and a
PinSetter.cs script, I'll explain that in

00:00:21.390 --> 00:00:27.430 align:middle line:90%
a minute, we'll continuously count the standing
pins and then we'll make a modification that

00:00:27.430 --> 00:00:32.480 align:middle line:90%
means that we'll only start counting the pins
after the ball enters some virtual box towards

00:00:32.480 --> 00:00:36.969 align:middle line:90%
the end of the play space. So just to talk
you through that more visually, what I want

00:00:36.969 --> 00:00:41.489 align:middle line:90%
to do under this overhead camera view here
using the new free Unity 5 render texture

00:00:41.489 --> 00:00:46.829 align:middle line:90%
feature is I want to add in a simple piece
of UI text in fact I'm going to go ahead and

00:00:46.829 --> 00:00:51.129 align:middle line:90%
do that now but before I do let's just look
at the overall layout that we have at the

00:00:51.129 --> 00:00:51.390 align:middle line:84%
moment.

00:00:51.390 --> 00:00:57.039 align:middle line:90%
We have a top camera, main camera and directional
light, we have a lane and we have pins etc.

00:00:57.039 --> 00:01:00.340 align:middle line:90%
I'm going to start playing with this hierarchy
for example I think that the directional light

00:01:00.340 --> 00:01:04.869 align:middle line:90%
could be argued it's part of the lane so I'm
going to pop that into the lane because it's

00:01:04.869 --> 00:01:09.570 align:middle line:90%
part of the lane itself; the pins are fine,
the ball is fine, and it's the UI canvas that

00:01:09.570 --> 00:01:18.400 align:middle line:90%
I'm going to be adding to. So let's add ourselves
a UI text element like that to our UI canvas.

00:01:18.400 --> 00:01:21.020 align:middle line:90%
In fact you want to make sure that it's inside
the left panel.

00:01:21.020 --> 00:01:25.189 align:middle line:90%
So if you want to do that directly then you
click left over here and then go ahead and

00:01:25.189 --> 00:01:30.509 align:middle line:90%
add a UI text element. Perfect. So there it
is, it actually hasn't childed itself quite

00:01:30.509 --> 00:01:34.360 align:middle line:90%
properly to the left panel so go ahead and
do that now, and then make sure that you have

00:01:34.360 --> 00:01:41.049 align:middle line:90%
a text element inside the left panel. There
it is. Now using the 't' key or the UI box,

00:01:41.049 --> 00:01:46.079 align:middle line:90%
the UI element modifier, you can make this
a reasonably sized text box, line it up in

00:01:46.079 --> 00:01:52.460 align:middle line:90%
the middle, centralise your text and give
it a number. I'm going to put 10 because we

00:01:52.460 --> 00:01:53.890 align:middle line:84%
intend to have ten standing pins

00:01:53.890 --> 00:01:58.390 align:middle line:90%
Now remember, always make your font plenty
big enough so that it renders with good resolution,

00:01:58.390 --> 00:02:03.649 align:middle line:90%
yeah you don't want to be scaling these fonts
up, now you'll want plenty of font size so

00:02:03.649 --> 00:02:07.049 align:middle line:90%
that they'll render nicely. There you go,
so to preview what's going to be happening

00:02:07.049 --> 00:02:11.080 align:middle line:90%
we're going to have a display under here that's
the number of pins, and we want that to update

00:02:11.080 --> 00:02:15.989 align:middle line:90%
continuously and then eventually it's going
to update only when the ball is at the end

00:02:15.989 --> 00:02:21.349 align:middle line:90%
of the play space and it will also change
colour from green to red for example in order

00:02:21.349 --> 00:02:23.620 align:middle line:84%
to show when the pins have settled;

00:02:23.620 --> 00:02:28.370 align:middle line:90%
but for now we just want to get it to update.
So, looking at the objectives for the lesson,

00:02:28.370 --> 00:02:33.849 align:middle line:90%
we are going to have to have some way of this
piece of text communicating with everything

00:02:33.849 --> 00:02:37.760 align:middle line:90%
else, so we need to think about what is going
to talk to the text and where the script is

00:02:37.760 --> 00:02:43.220 align:middle line:90%
going to be. We have already set up our UI
text display and we need to create a Pin Setter.

00:02:43.220 --> 00:02:46.230 align:middle line:90%
So let's talk about the pin setter arrangement
first. So I'm going to double click on the

00:02:46.230 --> 00:02:50.550 align:middle line:90%
pins arrangement and it takes me down to the
end of the play space. Now there are a few

00:02:50.550 --> 00:02:54.940 align:middle line:90%
things together here, there's a pin arrangement,
there will be a collider at the back later

00:02:54.940 --> 00:02:59.810 align:middle line:90%
on to detect the presence of the ball, we
already have this guy that's animated nicely.

00:02:59.810 --> 00:03:06.120 align:middle line:90%
We can hopefully see that in the scene view
- where is it? I would need to trigger the

00:03:06.120 --> 00:03:11.140 align:middle line:90%
animation - you remember this animation? We
don't have a trigger for it available right

00:03:11.140 --> 00:03:15.330 align:middle line:90%
now, but this guy comes down, animates and
swipes the pins out of the way. If you remember

00:03:15.330 --> 00:03:20.810 align:middle line:90%
we got stuck because we wouldn't remember
to set the pins properly without knowing which

00:03:20.810 --> 00:03:23.959 align:middle line:90%
ones had fallen over and which ones hadn't
so that's why we're writing code to be dealing

00:03:23.959 --> 00:03:25.879 align:middle line:90%
with that. So that's the point that we're
at.

00:03:25.879 --> 00:03:30.000 align:middle line:90%
What I want to do at the end here is make
a play box. This play box is going to serve

00:03:30.000 --> 00:03:34.580 align:middle line:90%
a few functions, but let me make it first
to help you visualise it. So inside the lane

00:03:34.580 --> 00:03:40.349 align:middle line:90%
create yourself a 3D cube so select the lane
in the hierarchy and then a 3D cube. Now it

00:03:40.349 --> 00:03:43.209 align:middle line:90%
probably won't listen to the fact that you've
selected the lane so you'll need to drag it

00:03:43.209 --> 00:03:52.689 align:middle line:90%
in. Play box or pin setter? Let's settle on
the word Pin Setter, so it's a pin setter

00:03:52.689 --> 00:03:57.459 align:middle line:90%
arrangement. Now where is it? Well it's here,
it's absolutely tiny. So we need to be scaling

00:03:57.459 --> 00:04:03.310 align:middle line:90%
this thing up, how large? Well the play space
is 105 cm wide, so how about we make it 120cm

00:04:03.310 --> 00:04:06.560 align:middle line:84%
wide for now, centred at 0 in the x.

00:04:06.560 --> 00:04:11.360 align:middle line:90%
It may not look like it from here but it is
centred over the middle of the play space.

00:04:11.360 --> 00:04:15.860 align:middle line:90%
Then how tall? I don't know, let's just try
a hundred and twenty as well; hmm kind of

00:04:15.860 --> 00:04:20.560 align:middle line:90%
looks reasonable to me; and then why not make
it a cube? Make a cube a cube right? Here

00:04:20.560 --> 00:04:27.070 align:middle line:90%
we go, now we have a box but it's not big
enough so let's try a 2m long box OK, now

00:04:27.070 --> 00:04:31.870 align:middle line:90%
remember you can use your translate tool to
just put this box down towards the end of

00:04:31.870 --> 00:04:40.500 align:middle line:90%
the play space, I want it to fully encompass
the pins, the swiper bar and well that's it

00:04:40.500 --> 00:04:41.380 align:middle line:84%
really.

00:04:41.380 --> 00:04:45.759 align:middle line:90%
So let's move it across using the blue arrow,
it's still not big enough so let's make it

00:04:45.759 --> 00:04:52.690 align:middle line:90%
2.5m or 2.4 so it's something like that, and
the other thing that I want to do with it

00:04:52.690 --> 00:04:57.790 align:middle line:90%
is turn - actually I want to completely remove
its renderer. There you go, so we have a virtual

00:04:57.790 --> 00:05:03.850 align:middle line:90%
box now, which just about encompasses the
pinsetter, sorry the swiper here, the pin

00:05:03.850 --> 00:05:08.930 align:middle line:90%
array, and goes pretty much to the back of
the play space. We can make fine adjustments

00:05:08.930 --> 00:05:11.820 align:middle line:90%
to the size of this later. Now this is going
to do a few things, it's going to detect the

00:05:11.820 --> 00:05:15.910 align:middle line:90%
presence of the ball when it comes in but
it's also going to hold the script that, as

00:05:15.910 --> 00:05:19.630 align:middle line:90%
if there was a camera in top of it - in fact
there is a camera in the top of it, it's called

00:05:19.630 --> 00:05:20.580 align:middle line:84%
top camera.

00:05:20.580 --> 00:05:27.080 align:middle line:90%
You see the camera there? Why not put the
top camera inside the pin setter? Just for

00:05:27.080 --> 00:05:32.289 align:middle line:90%
arrangement purposes. So the pin setter is
this box and it has now a camera associated

00:05:32.289 --> 00:05:36.810 align:middle line:90%
with it. OK, kind of makes sense, it'd be
the pin setter that has the camera in it.

00:05:36.810 --> 00:05:40.020 align:middle line:90%
So the other thing that the pin setter does
is that it gives the ability to put some behaviour

00:05:40.020 --> 00:05:47.870 align:middle line:90%
on it, so let's make a new script called pin
setter. New c# script, there it goes, OK now

00:05:47.870 --> 00:05:57.130 align:middle line:90%
being tidy I want to put that in my assets
folder. There you go, perfect, now we have

00:05:57.130 --> 00:05:58.020 align:middle line:84%
this pin setter to do.

00:05:58.020 --> 00:06:05.479 align:middle line:90%
Now let's go back to the objectives for this
lesson. There it is, so the first objective

00:06:05.479 --> 00:06:10.780 align:middle line:90%
is to continually count the standing pins
alright? So that is what I'm going to want

00:06:10.780 --> 00:06:15.710 align:middle line:90%
you to be doing here. We have a pinsetter
script that can do it, we have pins that are

00:06:15.710 --> 00:06:20.759 align:middle line:90%
already aware of whether they are upright
or not so let's sort out this unreachable

00:06:20.759 --> 00:06:24.940 align:middle line:90%
code error and then I'm going to put you into
a challenge. So let's look at line 30, it's

00:06:24.940 --> 00:06:29.080 align:middle line:90%
saying that we have unreachable code return
true. Let's just remove it, that's legacy

00:06:29.080 --> 00:06:35.229 align:middle line:90%
code. So remove your bottom return true from
your Pin.cs IsStanding method, we don't need

00:06:35.229 --> 00:06:35.810 align:middle line:84%
that any more.

00:06:35.810 --> 00:06:47.509 align:middle line:90%
Perfect, so back in Unity, what I want you
to do now is write a method on PinSetter.cs

00:06:47.509 --> 00:06:53.340 align:middle line:90%
called int CountStanding() so write int CountStanding()
method. I want that to loop through all of

00:06:53.340 --> 00:06:59.210 align:middle line:90%
the pins in the scene, I want it to keep track
of the number of standing pins and then just

00:06:59.210 --> 00:07:05.250 align:middle line:90%
return the current number of standing pins;
just that. OK so that's it; and if you really

00:07:05.250 --> 00:07:08.830 align:middle line:90%
want bonus points then make it update that
text box but for now I just need it to do

00:07:08.830 --> 00:07:14.889 align:middle line:90%
those things. So go ahead, pause the video,
and go and do that challenge now please.

00:07:14.889 --> 00:07:18.720 align:middle line:90%
You are pausing the video right? You are doing
the challenges? All of the learning comes

00:07:18.720 --> 00:07:25.500 align:middle line:90%
from the challenges. So enough nagging, welcome
back, let's get this challenge done. So let's

00:07:25.500 --> 00:07:29.539 align:middle line:90%
firstly go to this PinSetter script and think
about what properties this pin setter thing

00:07:29.539 --> 00:07:34.630 align:middle line:90%
is going to have. Well it's going to need
some way, some public or private way of keeping

00:07:34.630 --> 00:07:40.380 align:middle line:90%
track of the number of standing pins but it
doesn't necessarily have to do that at the

00:07:40.380 --> 00:07:45.300 align:middle line:90%
class level, we could just start writing our
CountStanding method first, so let's do that.

00:07:45.300 --> 00:07:53.970 align:middle line:90%
int, because this is a method that returns
an int, CountStanding so remember always put

00:07:53.970 --> 00:07:57.740 align:middle line:90%
your variables at the finest level of scope
that you can, if they don't need to be at

00:07:57.740 --> 00:08:00.770 align:middle line:90%
the class level don't put them there, put
them inside the method. If you need to move

00:08:00.770 --> 00:08:06.199 align:middle line:90%
them out later fine. So here's your int standing
and initialise it to zero, it's good practice.

00:08:06.199 --> 00:08:10.360 align:middle line:90%
It doesn't need to be at the top, don't put
it at wider scope than you need it. So how

00:08:10.360 --> 00:08:11.970 align:middle line:84%
are we going to do this?

00:08:11.970 --> 00:08:19.180 align:middle line:90%
Well, good question. We're going to need some
idea of what the pins in the game space are.

00:08:19.180 --> 00:08:22.919 align:middle line:90%
So how do we find the pins? We're going to
say something like this - for each and then

00:08:22.919 --> 00:08:27.729 align:middle line:90%
I like to do my brackets first including my
curly brackets OK, so it's going to be a foreach

00:08:27.729 --> 00:08:31.830 align:middle line:90%
loop. What is it going to do? Well it's going
to be foreach thing of type pin, let's call

00:08:31.830 --> 00:08:43.419 align:middle line:90%
the variable pin, in now what, GameObject.FindObjectsOfType
use the generic format pin and then it’s

00:08:43.419 --> 00:08:46.149 align:middle line:90%
a method so you need some squigglies right?
Fantastic.

00:08:46.149 --> 00:08:53.180 align:middle line:90%
So for each pin, in the result of this method
which is an array of pins, so for each pin

00:08:53.180 --> 00:09:01.580 align:middle line:90%
in the scene, if - now this is where our method
that we wrote before comes in handy - pin.IsStanding

00:09:01.580 --> 00:09:05.670 align:middle line:90%
if pin is standing, you see that reads like
English - a good sign that the code's reasonably

00:09:05.670 --> 00:09:13.390 align:middle line:90%
good - then what do we do with standing? Well,
we could just go += 1 or we could just say

00:09:13.390 --> 00:09:20.779 align:middle line:90%
++. Just a short cut, let's do that. Fantastic.
OK, what would happen at the end of this method?

00:09:20.779 --> 00:09:24.910 align:middle line:90%
You would just return - we must return something
remember because the method signature says

00:09:24.910 --> 00:09:31.339 align:middle line:90%
that we return an integer - return standing;
and we've kept it all local to the actual

00:09:31.339 --> 00:09:33.720 align:middle line:84%
method, which is absolutely fantastic.

00:09:33.720 --> 00:09:39.529 align:middle line:90%
So what we could do to test this is we could
just print, or Debug.Log CountStanding every

00:09:39.529 --> 00:09:44.360 align:middle line:90%
single frame. OK, and I'm going to Pin and
make sure that my other print statement is

00:09:44.360 --> 00:09:50.180 align:middle line:90%
taken out of my Pin.cs that's the pinsetter
script that I'm ending up with, simply that,

00:09:50.180 --> 00:09:57.480 align:middle line:90%
let's see if it works. Let's bowl the ball.
Oh, what happened there? Let's have another

00:09:57.480 --> 00:10:03.730 align:middle line:90%
look. Now the pins have all gone squiffy!
So what has happened? Why are they squiffy?

00:10:03.730 --> 00:10:07.160 align:middle line:90%
Why have they all gone flying? Have I got
two pin arrays or something?

00:10:07.160 --> 00:10:13.250 align:middle line:90%
Something's gone horribly wrong here, I have
a pin array on here, and I click - OK, we

00:10:13.250 --> 00:10:18.790 align:middle line:90%
know what's happening. What's happened is
that pinsetter has a collider on it but we

00:10:18.790 --> 00:10:23.130 align:middle line:90%
have not yet ticked is trigger, so we're having
collisions happening between the pins and

00:10:23.130 --> 00:10:28.800 align:middle line:90%
the collider. Set is trigger on your pin setter's
collider. It's only an informational collider,

00:10:28.800 --> 00:10:34.470 align:middle line:90%
we're not actually using it for physics, that'll
remove any physics from the pinsetter collider;

00:10:34.470 --> 00:10:40.640 align:middle line:90%
and now your pins are stable, perfect. So
let's bowl the ball, and see if I've passed

00:10:40.640 --> 00:10:46.459 align:middle line:90%
my own challenge. No, I may have missed! I
didn't miss, but it's not updating - but it

00:10:46.459 --> 00:10:50.529 align:middle line:90%
won't be updating because we never talk to
the UI text yet but look, if we look over

00:10:50.529 --> 00:10:54.630 align:middle line:90%
at the console, in fact if I just clear the
console you see it's logging 9,9,9,9,9 which

00:10:54.630 --> 00:10:56.300 align:middle line:84%
is the number of standing pins.

00:10:56.300 --> 00:11:00.589 align:middle line:90%
We knocked one down. Perfect, so the final
thing that we need to do here of course is

00:11:00.589 --> 00:11:04.490 align:middle line:90%
to somehow tie this to that UI element; you
know, the UI element that we created at the

00:11:04.490 --> 00:11:09.019 align:middle line:90%
beginning? Well, lots of ways of doing that,
how are we going to do it? Well the way that

00:11:09.019 --> 00:11:15.050 align:middle line:90%
I'm going to do it is I’m going to expose
myself; I mean not expose myself but I'm going

00:11:15.050 --> 00:11:20.760 align:middle line:90%
to expose a standing display. It's a public
piece of text; but you'll notice when you

00:11:20.760 --> 00:11:24.550 align:middle line:90%
type text as before that nothing comes up
in the autocomplete. Why? We don't have the

00:11:24.550 --> 00:11:26.160 align:middle line:84%
name space.

00:11:26.160 --> 00:11:31.560 align:middle line:90%
We need the UnityEngine.UI name space in order
to use the text keyword, fantastic. Now text

00:11:31.560 --> 00:11:36.180 align:middle line:90%
will be recognised as a valid type. It is
that textbox and I'm going to give it a descriptive

00:11:36.180 --> 00:11:46.870 align:middle line:90%
name. OK, public text standingDisplay. Fantastic,
right, now what are we going to do on every

00:11:46.870 --> 00:11:52.360 align:middle line:90%
update? Rather than just logging that to the
console I'm going to say standingDisplay.text

00:11:52.360 --> 00:11:58.790 align:middle line:90%
equals countStanding, which is fine but it
returns an integer and this text box is bound

00:11:58.790 --> 00:12:04.220 align:middle line:90%
to want a string so we'll use the handy ToString
method. You see how that works?

00:12:04.220 --> 00:12:09.750 align:middle line:90%
We take the result of the CountStanding method
and run the ToString method on it. Let's see

00:12:09.750 --> 00:12:13.100 align:middle line:90%
if it works. It's all very well talking about
it, actually let me make sure that all my

00:12:13.100 --> 00:12:19.279 align:middle line:90%
log entries are out of the other scripts,
I think that they are, OK cool; let's run,

00:12:19.279 --> 00:12:24.019 align:middle line:90%
check my console null reference exception
now - that's because when I put a public text

00:12:24.019 --> 00:12:28.930 align:middle line:90%
standing display in I didn't follow my own
suggested reflex which is to immediately go

00:12:28.930 --> 00:12:32.610 align:middle line:90%
and find it in the scene, which is the pin
setter here, find where it's looking for the

00:12:32.610 --> 00:12:34.630 align:middle line:84%
standing text and drag it in.

00:12:34.630 --> 00:12:45.810 align:middle line:90%
It's in the left panel, text, fantastic OK,
let's try this. Good, we have ten showing

00:12:45.810 --> 00:12:54.209 align:middle line:90%
there, let's bowl the ball, boom look at that,
four pins remaining updating all the time.

00:12:54.209 --> 00:12:57.540 align:middle line:90%
It may glitch, but that's because some of
these pins that are flying through space are

00:12:57.540 --> 00:13:01.459 align:middle line:90%
passing through vertical and when they do
pass within three degrees of vertical you

00:13:01.459 --> 00:13:05.209 align:middle line:90%
are being reported - you see they are out
here in outer space - they are being reported

00:13:05.209 --> 00:13:08.380 align:middle line:90%
as upright but that's something that we can
sort out later.

00:13:08.380 --> 00:13:13.450 align:middle line:90%
So actually that's all that we can be doing
now in this video because the issue of working

00:13:13.450 --> 00:13:18.079 align:middle line:90%
out where the pins have settled and of detecting
whether the ball has entered this pinsetter

00:13:18.079 --> 00:13:22.139 align:middle line:90%
box can be left to the next video which will
fit nicely. So thank you for watching this

00:13:22.139 --> 00:13:26.889 align:middle line:90%
video, I hope that you've got as far as I
have, and that you have a pin count here which

00:13:26.889 --> 00:13:32.389 align:middle line:90%
is updating itself continuously, at all times,
including when the pins have gone flying off

00:13:32.389 --> 00:13:37.490 align:middle line:90%
into outer space and if you've got that far,
congratulations, we will refine this and improve

00:13:37.490 --> 00:13:42.490 align:middle line:84%
on it soon.
Kind: captions
Language: en

00:00:00,000 --> 00:00:07,140
So we've created the outline of our
score master class and before we move

00:00:07,140 --> 00:00:11,849
on I just wanna tidy some things up,
teaching you how to create the

00:00:11,849 --> 00:00:14,120
score master through test driven
development. It's going to be a fairly

00:00:14,120 --> 00:00:19,210
large chunk and we need to re-
architecture all of our project but before

00:00:19,210 --> 00:00:22,250
we worry about the code I just wanna
tidy up a load of other little things

00:00:22,250 --> 00:00:25,869
about the way the game plays so in this
video we're gonna be removing some

00:00:25,869 --> 00:00:30,029
unnecessary Unity testing folders to
make our project smaller, importing an

00:00:30,029 --> 00:00:34,460
animated gif texture of jupiter as it
happens in my case; talking briefly about

00:00:34,460 --> 00:00:35,360
quaternion.euler

00:00:35,360 --> 00:00:40,670
and quaternion identity to iron a couple
bugs using a boolean flag to prevent

00:00:40,670 --> 00:00:45,750
dragging of the ball once it's in play
and also briefly talking about using

00:00:45,750 --> 00:00:51,100
Untinious, there's a new word
continuous dynamic collision detection.

00:00:51,100 --> 00:00:58,359
So, let's dive in first I just want you
to change your ball's texture so at the

00:00:58,359 --> 00:01:01,609
moment the texture, well if you're not
happy with it. I'm not happy with my

00:01:01,609 --> 00:01:04,860
football so I'm gonna change it and what
I want you to do if you're not happy

00:01:04,860 --> 00:01:10,159
with your texture is go ahead and
change your ball's texture. That's it, you could even

00:01:10,159 --> 00:01:15,030
create your own texture in, well a texture is
a 2d thing of course but you could create

00:01:15,030 --> 00:01:18,549
your own material or even your own bowling ball in
blender if you wanna go mad and you know

00:01:18,549 --> 00:01:21,810
anything about Blender if you don't then
we've gotta course coming about it

00:01:21,810 --> 00:01:27,759
super soon, just click on my face. OK,
welcome back so here we go I'm just

00:01:27,759 --> 00:01:31,360
gonna quickly change that so am I gonna
do that? Well,

00:01:31,360 --> 00:01:36,890
let's just go for say Jupiter, I think it would
be fun to bowl Jupiter wouldn't it? and dive

00:01:36,890 --> 00:01:41,680
into images, I'll use the search tools to
look for something that I'm allowed to reuse, we've done all

00:01:41,680 --> 00:01:45,440
this before there's a quite a large
image there, I'm looking at the resolution

00:01:45,440 --> 00:01:50,890
as I hovered, there's a 1700 and odd by 
600 image on Wikipedia now this is

00:01:50,890 --> 00:01:55,790
an animated gif and only if we
import it as a standard texture it's only

00:01:55,790 --> 00:01:58,640
going to import the first frame of that
and that's fine. I'm putting it in

00:01:58,640 --> 00:02:02,370
straight into my textures folder in fact I'm
gonna put it somewhere slightly

00:02:02,370 --> 00:02:06,979
different I'm gonna put it in this case
in the start pack under images because

00:02:06,979 --> 00:02:10,310
it's an image and I want you to have it
available in case you want to use my Jupiter image

00:02:10,310 --> 00:02:15,230
even though it's super easy to find one
with Wikipedia. The good thing about

00:02:15,230 --> 00:02:19,420
stuff on Wikipedia you can be pretty
sure that its ok to use ok so over in Unity

00:02:19,420 --> 00:02:22,880
because I put it in the start pack
folder under textures

00:02:22,880 --> 00:02:28,220
images then it's there, and what I want to
do is to create a new material very

00:02:28,220 --> 00:02:34,570
quickly. So, create a material... it's here somewhere
There you go, called

00:02:34,570 --> 00:02:39,730
Jupiter and then the albedo which is
its base color and gonna set to jupiter

00:02:39,730 --> 00:02:43,190
this is all your stuff you're very
familiar with now that I've got this

00:02:43,190 --> 00:02:56,959
material I want to apply it to the ball
prefab so... Where's it's renderer? There, football. Instead of football we want Jupiter.

00:02:56,959 --> 00:03:00,430
long list of things you can search in
your list that comes up on the screen

00:03:00,430 --> 00:03:05,519
here for Jupiter - and it's done now we
have a Jupiter ball, now I may just want

00:03:05,519 --> 00:03:09,959
to tweak the material just a little bit, it's a bit
too shiny for Jupiter probably I dunno, that's OK

00:03:09,959 --> 00:03:13,970
smooth, that's too shiny, that's too dull
something like that little bit of

00:03:13,970 --> 00:03:19,190
shininess and that will do, of course you can
play with this map and this texture

00:03:19,190 --> 00:03:23,200
all day long but the point is I just
want a little bit better than it looked

00:03:23,200 --> 00:03:27,430
before. Fantastic. While we're here in the
spirit of tying up I have a top camera

00:03:27,430 --> 00:03:30,910
render texture here may as well go into
this texture folder just to tidy things up

00:03:30,910 --> 00:03:35,430
Cool, alright and that's the first element
of this tidy up done, now what's next - we

00:03:35,430 --> 00:03:40,270
were going to remove some unnecessary unity
testing folders, I've jumped the gun so that's

00:03:40,270 --> 00:03:41,180
a simple thing

00:03:41,180 --> 00:03:45,439
just if you look at the Unity test
folders structure here in your project

00:03:45,439 --> 00:03:50,189
you'll find that there's quite a lot of size in
the examples in the integration test

00:03:50,189 --> 00:03:55,370
framework folders. I'm just going to
delete examples and integration test

00:03:55,370 --> 00:04:00,150
framework ok, so these two here examples integration test framework just delete

00:04:00,150 --> 00:04:01,329
them

00:04:01,329 --> 00:04:04,859
your unit testing stuff will still work
just fine its just gonna be a smaller

00:04:04,859 --> 00:04:10,340
project now for that. Simples, ok so why are
we talking about quaternion dot euler

00:04:10,340 --> 00:04:15,599
and quaternion identity because I want you
to reset the rotation of both the ball

00:04:15,599 --> 00:04:20,299
and the pins so pins should be reset to
vertical when they're raised that's

00:04:20,299 --> 00:04:27,210
because imagine they're slightly off
vertical; so we hit some pins may be off on

00:04:27,210 --> 00:04:32,470
the side here they wobble around a bit,
now imagine that you get in a situation

00:04:32,470 --> 00:04:37,660
where your pin, say maybe this guy here
is just slightly off vertical maybe it's

00:04:37,660 --> 00:04:42,430
falling over but not quite got to our
threshold number of degrees and then the

00:04:42,430 --> 00:04:46,229
script lifts this pin up and then maybe
it puts it back down again and it finishes

00:04:46,229 --> 00:04:51,180
falling over which would look really silly
so we want the pins to reset to neutral

00:04:51,180 --> 00:04:53,240
not necessarily

00:04:53,240 --> 00:04:56,409
well vertical, they want to look vertical but
beware that

00:04:56,409 --> 00:05:01,080
neutral for the pins if you look at them
at the start is 270 degrees rotation

00:05:01,080 --> 00:05:07,340
in x 00 so for the pins you're gonna
need to reset their rotation to 270, 0, 0  the

00:05:07,340 --> 00:05:10,310
other thing I want you to reset in the
same challenge is this ball, because if I

00:05:10,310 --> 00:05:14,310
slide the ball off the side here it picks
up some rotation wherever it goes

00:05:14,310 --> 00:05:17,699
whether it's off the side or down the end of
it, look it's got rotation now cuz we just

00:05:17,699 --> 00:05:23,280
move it back here now when I use my left
and right buttons bug 'cause we're

00:05:23,280 --> 00:05:28,380
translating the ball relative to its own
transforms it doesn't work right now

00:05:28,380 --> 00:05:31,650
there's two solutions one is to
translate against global coordinates

00:05:31,650 --> 00:05:36,169
global rather than local coordinates but
then it still looks funny but the ball

00:05:36,169 --> 00:05:39,360
sitting it starting at this rotation so
what I'd rather be doing is just

00:05:39,360 --> 00:05:46,740
resetting the Bulls rotation to 0, 0, 0 so it's
back like that every time you reset it

00:05:46,740 --> 00:05:51,360
so that's your challenge, I want you to
reset both the pins to vertical and the ball

00:05:51,360 --> 00:05:57,289
to neutral you're going to want to use probably quaternion identity for the pins and quaternion, sorry

00:05:57,289 --> 00:06:03,250
quaternion.euler for the pins so you
can specify 270, 0, 0 and quaternion dot

00:06:03,250 --> 00:06:09,389
identity for the ball which is the same
as quaternion.euler(0,0,0), just another way of saying the

00:06:09,389 --> 00:06:17,960
same thing really ok go ahead and do
that challenge now please.

00:06:17,960 --> 00:06:19,099
Cool so let's do it really.

00:06:19,099 --> 00:06:25,849
firstly where we gonna do the pins? 
Let's do the pins first so into scripts, into

00:06:25,849 --> 00:06:31,139
scripts okay and then with the PinSetter
I believe is what did it. Is it? Or is it the pin

00:06:31,139 --> 00:06:38,009
itself raise pins here we go, so when we raise pins
we want to go pin dot transform dot

00:06:38,009 --> 00:06:43,490
rotation equals; now transform dot
rotation wants a quaternion so given

00:06:43,490 --> 00:06:47,940
that this wants a quaternion, how we
gonna get a quaternion from euler angles?

00:06:47,940 --> 00:06:52,400
well, what you do is you go quaternion.eluer
and there's a static method on

00:06:52,400 --> 00:06:55,979
quaternion let me show you the
intellisense here

00:06:55,979 --> 00:07:02,180
public static quaternion, and it takes
in a Vector3 in our case 270, 0, 0

00:07:02,180 --> 00:07:06,680
and returns a quaternion that we don't
need to know how works for the moment. So

00:07:06,680 --> 00:07:11,400
quaternion.euler 270 float 0
comma 0 should make the pin stand

00:07:11,400 --> 00:07:18,539
upright shall we have a go? So
what I'm trying to do here's not bowl a

00:07:18,539 --> 00:07:23,909
strike but hit something so is my raw
bowling talent gonna fail me here?

00:07:23,909 --> 00:07:28,219
Yep, okay let's try again.

00:07:28,219 --> 00:07:32,669
You know what, you should always focus on what.
When you focus on what you don't want you tend to

00:07:32,669 --> 00:07:35,909
get it you know I don't want I don't
want all the pins to fall over what happens?

00:07:35,909 --> 00:07:39,400
They all fall over. I don't want to hit that
lamp post now careering off the road so

00:07:39,400 --> 00:07:43,409
focus on what you want I want some
pins left standing and they are and if

00:07:43,409 --> 00:07:47,219
we go ahead in the scene view and look
this pin is now vertical and its

00:07:47,219 --> 00:07:53,099
rotation when we inspect it will be
precisely what we want 270 it's picked up some

00:07:53,099 --> 00:07:55,710
y rotation when it landed but but
that's ok

00:07:55,710 --> 00:08:02,420
alright so they are resetting I believe
to 270, 0, 0 now, it wasn't very

00:08:02,420 --> 00:08:07,620
convincing was it that argument so let's just try that
again. What we need to do is to see a pin

00:08:07,620 --> 00:08:13,780
before the raise happens and then we need
to inspected it as the race happens.

00:08:13,780 --> 00:08:18,530
Nuts, I keep knocking them all over look
I'm sure it's working. If you

00:08:18,530 --> 00:08:22,400
find it isn't let me know but I doubt it
I doubt it isn't. OK cool so the other thing

00:08:22,400 --> 00:08:27,310
we want to do is when the ball gets
reset we want to transform it or rotate it

00:08:27,310 --> 00:08:31,240
so here we already transform dot
position it back to the start position

00:08:31,240 --> 00:08:37,970
that's fine now we want to do
transform dot rotation equals now we

00:08:37,970 --> 00:08:47,040
could go quaternion dot euler, 0, 0, 0 which is
fine and that's rotated it to 0 or we could

00:08:47,040 --> 00:08:53,350
go quaternion dot identity which is basically the same thing. I'm gonna us that just for variety. Now what should

00:08:53,350 --> 00:08:57,860
be happening is when I drag the ball
just slightly off to the side or

00:08:57,860 --> 00:09:00,320
anywhere to be honest that's rubbish
because it didn't pick up any rotation

00:09:00,320 --> 00:09:09,280
Let's try a different drag, down the lane spin spin
spin when it resets now rather than it

00:09:09,280 --> 00:09:12,890
resetting to whatever rotation it was at
the time out it resets here and these

00:09:12,890 --> 00:09:18,970
buttons work. That's cool.
Well actually I don't like my floor being

00:09:18,970 --> 00:09:24,240
this color it just doesn't work for me
so I think what I'm gonna do is go into

00:09:24,240 --> 00:09:31,470
my textures folder my floor and remove
the albedo map completely double click

00:09:31,470 --> 00:09:38,100
it and say none, and then I'm gonna pick a base
color that is.. try black and see how it

00:09:38,100 --> 00:09:42,990
looks in the game view... a slightly shiny
black should we try a slightly metallic

00:09:42,990 --> 00:09:53,280
black, let's try that. Kind of spacey isn't it?
Strange and spacey that's perfect great

00:09:53,280 --> 00:09:55,610
and there go the pins ok

00:09:55,610 --> 00:09:59,060
fine in fact now we can use this
opportunity for a briefly pause the game

00:09:59,060 --> 00:10:04,980
to inspect some of these pins so look they
have perfect rotation now that's good ok

00:10:04,980 --> 00:10:13,160
what was the final thing I asked you to
do, if we look back it was using a boolean

00:10:13,160 --> 00:10:18,959
flag to prevent that dragging oh and the
collision detection so fine, so what's this Boolean

00:10:18,959 --> 00:10:22,880
flag to prevent dragging lark all about
then? Well look, there's another bug, thanks to Dondi

00:10:22,880 --> 00:10:26,089
a friend of ours, one of our
students for noticing that if you drag

00:10:26,089 --> 00:10:31,279
the ball and then drag again you can
modify it mid part that's rubbish so

00:10:31,279 --> 00:10:37,089
challenge time what we want you to do is
prevent double dragging make sure that

00:10:37,089 --> 00:10:40,500
you can't drag the ball once it's
launched and there's already a similar

00:10:40,500 --> 00:10:46,050
solution in and I'm gonna leave you to
work out which script it's in. In one of the

00:10:46,050 --> 00:10:48,890
scripts is already a similar solution.
So work out which script you need to work

00:10:48,890 --> 00:10:54,600
on and then go ahead and make this
change you've already got the flag and

00:10:54,600 --> 00:11:02,079
everything you need in there. OK cool, see
in a moment

00:11:02,079 --> 00:11:07,820
OK, welcome back so which script are we
talking about first let's let's decide

00:11:07,820 --> 00:11:11,860
on that well the dragging remember works
because you go to the touch input layer

00:11:11,860 --> 00:11:17,529
of the UI canvas and it calls this ball
drag launch script remember that and

00:11:17,529 --> 00:11:22,410
here is the ball drag launch script and it
does a drag start and a drag end message

00:11:22,410 --> 00:11:25,440
that we can call from the UI but the
problem is we're not protecting with

00:11:25,440 --> 00:11:29,589
something like this yet we need a if not
ball in play and I'm just going to wrap

00:11:29,589 --> 00:11:39,740
that round both of the drag start and
the drag end OK so that's that bit and

00:11:39,740 --> 00:11:44,060
then I'm going to do exactly the same
for the drag end. Oo the whole of that code just

00:11:44,060 --> 00:11:50,620
gets completely ignored if the ball is
not in play

00:11:50,620 --> 00:11:55,279
Telling you off for thinking about negatives a minute ago and now we're using negatives... just be aware about the

00:11:55,279 --> 00:11:57,580
use of negatives both in life and in code.

00:11:57,580 --> 00:12:03,550
Quite easy to miss those exclamation marks
isn't it? So now I bowl it and I try to

00:12:03,550 --> 00:12:06,600
left and right and its staunchly ignores
me which is perfect

00:12:06,600 --> 00:12:10,570
ok final thing is to do with collision
detection we have noticed or been

00:12:10,570 --> 00:12:17,590
noticed... if you bowl straight and fast boom no
it didn't pass through the pins then but

00:12:17,590 --> 00:12:20,700
the ball can pass through the pins
now one way to attack that is to go to

00:12:20,700 --> 00:12:25,310
your prefabs, now you want to select all
your pins and you want to look down in

00:12:25,310 --> 00:12:30,670
the collision detection part of
the rigid body and if you set that to

00:12:30,670 --> 00:12:34,020
continuous dynamic then you can read in
the manual with the little blue button

00:12:34,020 --> 00:12:37,380
about these different types of collision
detection it's a stronger type of

00:12:37,380 --> 00:12:40,700
collision detection and if you
do that on the pins it will reduce the

00:12:40,700 --> 00:12:43,600
chance that the ball passes through and if you do
it on the ball as well it will

00:12:43,600 --> 00:12:47,260
significantly reduce the chance that the
ball passes through at the expense of

00:12:47,260 --> 00:12:51,490
some performance as long as it's still
running OK for you then go ahead and set

00:12:51,490 --> 00:12:55,370
continuous dynamic collision detection
on both the ball and the pins and it

00:12:55,370 --> 00:13:01,390
should then not pass through. We're done,
we're tidied. Now we can enter a zone of code

00:13:01,390 --> 00:13:06,210
where we're gonna be thinking about firstly
factoring everything and then we are

00:13:06,210 --> 00:13:11,010
going to be focusing in on the
score master dot cs and how that is

00:13:11,010 --> 00:13:12,410
going to work. So I'll see you in the next video.


WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:11.519
Welcome back so in this video we're gonna
be designing our own tests and doing

00:00:11.519 --> 00:00:16.330
test driven development in unity... again!
So  the context for this is we

00:00:16.330 --> 00:00:21.710
have this bowling game here and we can
roll the ball and it counts the pins and

00:00:21.710 --> 00:00:25.109
does the physics and stuff and what we
want it to do is fill out our scores as

00:00:25.109 --> 00:00:31.550
we go and what we've done is we've made
ourselves a score display script and

00:00:31.550 --> 00:00:35.380
because it's a mono behavior talking to
our UI text we've created an

00:00:35.380 --> 00:00:39.700
auxiliary method called format roles
which basically takes in a list of rolls

00:00:39.700 --> 00:00:43.660
somewhere between 13 and 21 rolls
depending on how the game pans out and

00:00:43.660 --> 00:00:49.309
makes a string of ultimately 21 rolls
that fills out the boxes and we need to

00:00:49.309 --> 00:00:53.460
put our code in there so we set up some
tests we've got the Unity test tools

00:00:53.460 --> 00:00:58.109
infrastructure in we've got the right
name spaces in here we've told you it's a test

00:00:58.109 --> 00:01:01.550
fixture we've made our first failing
test which is that if we roll a one.

00:01:01.550 --> 00:01:06.840
and we pass it into format rolls as a string
we should just get a string of one back

00:01:06.840 --> 00:01:09.340
and of course we get a failing test
which is exactly the right place to

00:01:09.340 --> 00:01:10.630
start with

00:01:10.630 --> 00:01:16.430
test driven development so I want you to
write format rolls. There's the signature.

00:01:16.430 --> 00:01:20.180
we've already got it. write your own tests
as you go. you gotta design your own

00:01:20.180 --> 00:01:23.220
tests now as you go. stick to the red-green
refactor loop.

00:01:23.220 --> 00:01:26.939
remember to only test one thing at a time aim for
twenty lines or less of beautiful code

00:01:26.939 --> 00:01:31.520
enjoy the process. and when you've finished
share in the discussions. but with a

00:01:31.520 --> 00:01:34.939
spoiler in square brackets like that at the start
so we don't mess up the experience for

00:01:34.939 --> 00:01:38.530
anybody else. So go ahead and enjoy doing
this and you should be able to make beautiful

00:01:38.530 --> 00:01:42.899
code possibly even prettier than our
scoremaster code so pause the video. spend plenty

00:01:42.899 --> 00:01:46.850
of time on this and really use it as
your final test driven development

00:01:46.850 --> 00:01:52.240
exercise of this course.

00:01:52.240 --> 00:01:55.860
Welcome back so let's get on with it. I
like when I'm doing test driven

00:01:55.860 --> 00:02:03.009
development to have both my test script
and my actual script open just those

00:02:03.009 --> 00:02:07.659
scripts so we'll have score display
test in the left

00:02:07.659 --> 00:02:11.540
calling in to score display and I'd like
to be able to see the results of my test ok

00:02:11.540 --> 00:02:15.670
fantastic so we want to make this test
pass. how are we gonna do it? Well we could

00:02:15.670 --> 00:02:24.660
simply return 1. Why not do that in the first place?
Return one... we've got some unreachable

00:02:24.660 --> 00:02:31.140
code but that's okay. we just want to make
this test pass and what we get? We get a

00:02:31.140 --> 00:02:31.940
failure

00:02:31.940 --> 00:02:37.049
let's see if we can make it pass there you go.
return one works fine ok so now it's... we've

00:02:37.049 --> 00:02:41.340
gone red. we've gone green. it's time to refactor.
Clearly returning one sucks because

00:02:41.340 --> 00:02:44.480
that's never going to work for future
cases. How can we be more general? Well we can

00:02:44.480 --> 00:02:47.420
write the for loop that we're clearly gonna
need. we obviously have to iterate

00:02:47.420 --> 00:02:58.579
through rolls so for i. int i equals zero.
going up to i is less than rolls dot

00:02:58.579 --> 00:03:10.970
count. we're gonna iterate i and we're simply going to
say that output + equals rolls i dot to

00:03:10.970 --> 00:03:11.970
string.

00:03:11.970 --> 00:03:17.690
Alright so we're just gonna add to the
string whatever happens in this case not

00:03:17.690 --> 00:03:20.410
enough code to pass all the tests of
course. but for this test that should do

00:03:20.410 --> 00:03:23.319
it and we're only gonna have a single element
so it should just do exactly the same thing

00:03:23.319 --> 00:03:27.750
but much much more general; let's test
the code. run selected. Wait 'til the

00:03:27.750 --> 00:03:34.530
whirligig finishes. run the selected tests
and bowl... passes fantastic so on to the

00:03:34.530 --> 00:03:39.940
second test what's a good second test
now well let's have a look what do we wanna

00:03:39.940 --> 00:03:43.519
test next? Well I want to test that a
strike works - I wanna make it deal with

00:03:43.519 --> 00:03:53.750
strikes so public void test 02 X
just as in a strike. nice and simple so

00:03:53.750 --> 00:03:59.760
let's get the code laid out you can just copy and paste the text; in fact you may as well copy paste the entire

00:03:59.760 --> 00:04:04.729
test if you bowl a 10 you want to get
an X so. red green refactor.

00:04:04.729 --> 00:04:05.400
This should fail...

00:04:05.400 --> 00:04:15.349
and it's failing there. ok. so we're getting
a 10 and that's not surprising because

00:04:15.349 --> 00:04:19.579
our code says just return the string so
how we gonna deal with the special case

00:04:19.579 --> 00:04:33.610
of a strike well we could just say if
rolls i equals 10 then we're going to

00:04:33.610 --> 00:04:42.960
output + equals now what should it be? X or X and
a space actually our test is wrong it

00:04:42.960 --> 00:04:50.520
should be X and a space. yeah. remember the
space because we skip a space. at least

00:04:50.520 --> 00:05:03.349
until the last frame so X and space and else we output... what are we going to output? Just a number so

00:05:03.349 --> 00:05:05.520
we're catching a special case here

00:05:05.520 --> 00:05:13.280
of strike strike basically for now
that's it. we're just catching the strike. OK.

00:05:13.280 --> 00:05:17.820
let's go ahead and run the tests; wait
for the whirligig to finish.

00:05:17.820 --> 00:05:21.949
runs selected and the first one

00:05:21.949 --> 00:05:26.330
OK we have array out of range indices.
and that's because I put a 1 instead

00:05:26.330 --> 00:05:32.520
of an i in here. let's try again... run the
selected tests fantastic. so we get an

00:05:32.520 --> 00:05:36.970
X. Passing. OK. great. so  let's move on to
another test. I'm going to duplicate the test

00:05:36.970 --> 00:05:41.500
because it's by far the quickest way of getting the next test in; I'm going to iterate the test number

00:05:41.500 --> 00:05:44.479
to test three. I like them to go in the
order that I wrote them. and I would like

00:05:44.479 --> 00:05:48.409
to think that if I bowled a 1 then a 9 that I
get a strike. that's going to force me to

00:05:48.409 --> 00:05:54.479
write new code. you wanna keep writing
stuff that forces you to write new

00:05:54.479 --> 00:05:59.580
code I'm just going to change the name
of these. bowl X bowl 1. 9. OK. bowl 1. bowl 9 and what I

00:05:59.580 --> 00:06:04.270
should be getting here now is a one dash
like that; let's save and run the test

00:06:04.270 --> 00:06:09.659
run failed test is 1... rerun failed by the
way is one way of running tests that

00:06:09.659 --> 00:06:12.590
failed before and that have not yet been
run so

00:06:12.590 --> 00:06:17.000
it's expecting one slash. it gets 1. 9
not surprising our code doesn't know

00:06:17.000 --> 00:06:21.240
anything about slashes; so how are we going
to deal with slashes. when are we gonna deal

00:06:21.240 --> 00:06:26.380
with slashes? Well we need to decide if
there's a spare is it more... do we

00:06:26.380 --> 00:06:31.380
decide that before or after we decide
about strikes? Well I'm gonna go for

00:06:31.380 --> 00:06:41.320
before so if rolls I minus one isn't it

00:06:41.320 --> 00:06:48.660
plus rolls i... now that's fine if
that equals 10 then you go ahead and

00:06:48.660 --> 00:06:55.800
output your spare thing. so it's that. and I'll
just comment over here just line them all up

00:06:55.800 --> 00:07:02.470
spare. that's kind of fine and then we can do an else if here. but my concern is that we won't have

00:07:02.470 --> 00:07:06.720
enough look ahead in the very beginning
if we try running this I think the test

00:07:06.720 --> 00:07:12.350
is gonna fail because we can't do rolls
i minus one when i equals zero; so let's

00:07:12.350 --> 00:07:15.890
see what happens I think we're gonna get
an argument array failure - yeah here we go.

00:07:15.890 --> 00:07:20.110
argument out of range exception. So what
I need to do is protect this spare check; in fact I want

00:07:20.110 --> 00:07:26.300
my comment up here I want to protect
this spare check with a modulus operator. I

00:07:26.300 --> 00:07:35.770
can say if the roll mod 2 equals 0.
and that - then we're on a spare so roll

00:07:35.770 --> 00:07:40.260
mod 2 equals zero means that we
have an even. or do I mean roll or do I

00:07:40.260 --> 00:07:44.900
mean i? Well that's a good question I
want to use the word roll. I want to talk

00:07:44.900 --> 00:07:49.300
about the roll starting at roll one
then roll two; then roll three then roll four and

00:07:49.300 --> 00:07:53.410
every time I get to an even roll like
this like roll two. roll four then I'm in

00:07:53.410 --> 00:07:58.360
the second bowl of the frame and then I
want to go on and say okay. is it a spare?

00:07:58.360 --> 00:08:07.530
So I need something that is a roll but I
want that to be the roll string or the

00:08:07.530 --> 00:08:09.640
output dot

00:08:09.640 --> 00:08:15.090
length plus one.

00:08:15.090 --> 00:08:20.060
OK so my roll number is however much
output I've already created +1 so in the

00:08:20.060 --> 00:08:24.490
beginning it'll start at 0. no string. So our
roll number one. it's a roll number

00:08:24.490 --> 00:08:31.100
starting from zero. OK? Roll number
counting from 0 or box number if you

00:08:31.100 --> 00:08:39.140
like; call it the box number. it's the score box
starting 1 to 21; the actual box you write it in.

00:08:39.140 --> 00:08:46.670
OK so if that mod 2 if the roll - let's call
roll box actually - if box mod 2 is zero

00:08:46.670 --> 00:08:53.050
then we must be on bowl roll number two
or roll number four or number six... an even

00:08:53.050 --> 00:09:05.810
roll then we've got a spare. so let's try
that. Passed. fantastic ok so let's move

00:09:05.810 --> 00:09:10.220
on and keep the plan going. let's take
another test... let's force in new

00:09:10.220 --> 00:09:15.230
development here. what new development
could we force? How about if we did a 1 then a 9. then a 1

00:09:15.230 --> 00:09:21.680
then we should get a 1. 9. 1... we should get a
1 / 1. that should drop out of the

00:09:21.680 --> 00:09:25.730
existing test. more of a verification
test here. let's try... out of the existing code

00:09:25.730 --> 00:09:32.040
should I say. Yep that works so that's not
actually driving any new developments so

00:09:32.040 --> 00:09:40.250
what could we do that would definitely
drive some new development here? Well if we

00:09:40.250 --> 00:09:43.470
look at our score display code and see
what it can currently handle. it can

00:09:43.470 --> 00:09:49.709
handle a spare. how about a spare in the last
frame? That's gotta break it hasn't it? A spare

00:09:49.709 --> 00:09:55.770
in frame 10? Let's see if we can get a
spare in frame 10 and see if that breaks

00:09:55.770 --> 00:10:08.390
it. So I'll remove this 1. 9. 1 test because it
didn't drive any new development. and I'm

00:10:08.390 --> 00:10:13.630
gonna go to spare in last frame and then
I'm going to have to put in a load of

00:10:13.630 --> 00:10:15.000
one's here

00:10:15.000 --> 00:10:23.600
carefully....

00:10:23.600 --> 00:10:28.720
I think that's four. so that's four frames and if I
put in another comma I can get another

00:10:28.720 --> 00:10:34.189
four frames so I'm on frame 8. frame 9 and then we
could go spare in the last frame

00:10:34.189 --> 00:10:41.759
something like that so as long as my commas are in
the right place I've got 1. 2. 3. 4. 5. 6. 7. 8. 9 frames and

00:10:41.759 --> 00:10:46.680
then a spare here and then a three. So
what should that be giving me in terms

00:10:46.680 --> 00:10:59.629
of my rolls. it should be giving me [a lot of ones!]
spare three. Now is this

00:10:59.629 --> 00:11:06.800
spare in the right... in the last frame gonna
work? I don't know let's find out.

00:11:06.800 --> 00:11:11.189
Spare in the last frame like that does
work which is fantastic

00:11:11.189 --> 00:11:22.939
OK. so maybe the pattern for spares is
always the same. I think that this is

00:11:22.939 --> 00:11:28.120
general that even in the last frame
that's the case for a spare. How about if we had

00:11:28.120 --> 00:11:33.899
a strike in the last frame. a strike in
frame 10? Let's change our tests and try

00:11:33.899 --> 00:11:40.680
and break it with a strike in frame 10.
Strike in last frame so how about if I

00:11:40.680 --> 00:11:48.980
go X and then well we can't do nine after... we
could do nine after. an X; X. 9. 3. So 10. 9. 3

00:11:48.980 --> 00:11:54.850
that's fine then what we would expect to see is
an X but with no space. and then a nine

00:11:54.850 --> 00:12:01.100
and you can't have a 9 then a 3 so it's gonna
have to be a nine and... say a one but

00:12:01.100 --> 00:12:05.420
that's testing another concept so let's just
go 10. 1. 1. keep it simple X then we should

00:12:05.420 --> 00:12:09.399
get X. 1. 1 without the space. Let's see
what happens. I'm pretty sure that our

00:12:09.399 --> 00:12:12.709
code is going to put a space because
remember here we're putting X space. it

00:12:12.709 --> 00:12:16.639
doesn't know about putting X without
a space so this is bound to fail which

00:12:16.639 --> 00:12:21.639
will drive new development. Yep and is
doing exactly what we thought. it's giving

00:12:21.639 --> 00:12:25.589
us one extra character. 22 instead of 21
and is putting a space. So now we need to

00:12:25.589 --> 00:12:30.430
intercept the special case which is
where we are in the last frame

00:12:30.430 --> 00:12:46.950
and we have a strike so that is here... else it... roll.
or box. we're calling it. if box number is

00:12:46.950 --> 00:12:55.680
greater than or equal to nineteen so in
those last three 19. 20. 21 and rolls i is

00:12:55.680 --> 00:13:04.970
10 in that case we have a strike in
frame 10 what do we do? Well. very similar

00:13:04.970 --> 00:13:13.070
to before we just output an X but
without the space. OK? Make sense? And I

00:13:13.070 --> 00:13:18.190
just need to make sure that I've got my
brackets right now I'm just

00:13:18.190 --> 00:13:24.680
missing a open curlies there. Perfect now
let's go run the test wait 'til the

00:13:24.680 --> 00:13:30.080
whirligig finishes meaning this code is
compiled and loaded into unity and strike

00:13:30.080 --> 00:13:32.459
like in last frame is working.

00:13:32.459 --> 00:13:38.200
Fantastic. so what other what other
situations do we have? Well have zeros

00:13:38.200 --> 00:13:43.209
nothing here is putting in a zero right
so what happens if we just bowl 0 next

00:13:43.209 --> 00:13:51.070
just see that breaks it. Test bowl 0.
and let's go right back to basics and just

00:13:51.070 --> 00:13:56.000
bowl a zero; and what should we get when we bowl a zero? Well by the notation of bowling you want

00:13:56.000 --> 00:14:00.240
to get a dash now that can't work because
there's nothing in our score display

00:14:00.240 --> 00:14:07.380
that tells it to return a dash so we rerun a failed
and it gives you 0 rather than a dash... now

00:14:07.380 --> 00:14:11.220
I've been lazy and I've been forgetting
to increment my test numbers... it's not vital

00:14:11.220 --> 00:14:16.820
but I like to have them in order so I'm
just gonna do that now four and five and

00:14:16.820 --> 00:14:20.410
that's fine so now our code needs to
deal with zero so what is the deal with

00:14:20.410 --> 00:14:26.209
zeros well actually always you enter 0 for 0.
so why don't we just start with that. If rolls

00:14:26.209 --> 00:14:38.240
i equals 0 then what we do? We simply
add to the output string a dash

00:14:38.240 --> 00:14:44.560
and then we just need to turn this guy into
an else if. So either this happens. it's a

00:14:44.560 --> 00:14:57.440
zero. and we may as well just say that we just say always enter 0 as dash. OK. fantastic I might take

00:14:57.440 --> 00:15:01.070
out a few spaces in here and I'm trying
to get this spare to line up on the right

00:15:01.070 --> 00:15:05.339
hand side but I think I'm gonna be lucky.
it's gonna be a bit too much to expect

00:15:05.339 --> 00:15:09.980
that too so I may just have to accept a
little bit wider. It's only that

00:15:09.980 --> 00:15:13.200
I've got my test showing on the right if
I made my mono develop a bit more sensible it

00:15:13.200 --> 00:15:18.279
would be fine - there you go - so we got the 0
case. the the spare. the strike. the strike

00:15:18.279 --> 00:15:23.120
without the space. and otherwise we just
enter it normally so what is the deal on

00:15:23.120 --> 00:15:31.760
this last line. what's the comment? It's a
normal 1. 2. 9 bowl. something like that. So

00:15:31.760 --> 00:15:42.050
and this guy here is strike in frame 1-9
1 to 9. this is spare anywhere. always enter a 0 as a 0.

00:15:42.050 --> 00:15:49.620
and this is the score box. OK let's try it.
Let's see if that all works. Looking

00:15:49.620 --> 00:15:54.370
pretty elegant. now of course I cheated
again. I have done lots of work to

00:15:54.370 --> 00:15:58.579
prototype this code so that I can just
write it like this. Again I considered

00:15:58.579 --> 00:16:02.170
writing a meandering video that would
take absolutely ages but it would bore

00:16:02.170 --> 00:16:07.060
you stiff so what I actually did when I
created this code is I ended up making

00:16:07.060 --> 00:16:12.149
much much messier code building more
tests actually than this... than I built here

00:16:12.149 --> 00:16:16.740
and then constantly refactoring my code
back. alright. but I'm not gonna put you

00:16:16.740 --> 00:16:20.920
through that pain. So what I've got now
is some verification tests now I'm not

00:16:20.920 --> 00:16:24.690
gonna type of these out for you. I've got
six Golden copy verification tests

00:16:24.690 --> 00:16:30.190
they're available in the action master
sorry in the score display tests

00:16:30.190 --> 00:16:36.870
file that is available for you in
the start pack so you may have to rename

00:16:36.870 --> 00:16:41.700
the class because I've so that you can
use it but this is available for you

00:16:41.700 --> 00:16:47.850
score display test and also attach it to
this lecture. so here go the golden copy...

00:16:47.850 --> 00:16:50.240
I'm going to leave a space and paste it in

00:16:50.240 --> 00:16:55.730
so they're the same games as in the
previous test the same links I've just

00:16:55.730 --> 00:17:02.010
written them out now. oh I've got a
score cumulative left in there. I don't want

00:17:02.010 --> 00:17:07.689
that so I want golden copy 2. golden
copy 3 here you go. so I'll start the numbering at

00:17:07.689 --> 00:17:16.110
1. 2 and you can see what they're doing 3 and golden copy 4 and I think you're only going to end up with 5

00:17:16.110 --> 00:17:18.770
OK so you end up with 5 tests.

00:17:18.770 --> 00:17:22.829
They're all golden copy tests. the strings are carefully
written out. the format is X space when you

00:17:22.829 --> 00:17:27.339
get a strike and let's see if this
simple code passes all the golden copy

00:17:27.339 --> 00:17:33.090
verification tests or not... Wow. it does
so I'm pretty happy with that result I

00:17:33.090 --> 00:17:35.170
hope you are too and I'll see you in the
next video.


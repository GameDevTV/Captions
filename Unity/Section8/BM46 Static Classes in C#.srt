<<<<<<< HEAD
WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.259
So to prepare ourselves to write the
score display code we need to think a

00:00:07.259 --> 00:00:10.769
little more carefully about static classes;
what it means to define a whole

00:00:10.769 --> 00:00:14.610
class as static; the perils and
disadvantages and advantages of statics;

00:00:14.610 --> 00:00:17.170
Why we're using statics here;

00:00:17.170 --> 00:00:21.000
refactoring a class to be static and
then learning to accept other people's

00:00:21.000 --> 00:00:25.150
code I'll talk to you about that in a moment. So
our target architecture. you've seen this

00:00:25.150 --> 00:00:28.180
diagram quite often it's been changing
slowly but i wanna make another

00:00:28.180 --> 00:00:33.250
distinction. Score master is a base class
but it is also potentially a static

00:00:33.250 --> 00:00:37.719
class in fact go to score master now
and take a look at it and you'll find

00:00:37.719 --> 00:00:41.960
that you can write the words static go
ahead and do that after public static

00:00:41.960 --> 00:00:46.250
class. and if you do that you'll find it
doesn't complain and it builds just fine

00:00:46.250 --> 00:00:50.430
because there are no member variables; if
you try to define member variables up

00:00:50.430 --> 00:00:54.410
here - not gonna have it. it's going to
complain - and each of the methods are

00:00:54.410 --> 00:00:57.440
static so that's what a static class
means. it just means that all the methods

00:00:57.440 --> 00:01:02.660
are static and there are no member variables
so score master is already like that but

00:01:02.660 --> 00:01:07.060
action master isn't yet. Action master's
not a static class and we can't be

00:01:07.060 --> 00:01:10.470
completely confident that when we call
action master with a load of pin falls

00:01:10.470 --> 00:01:14.060
that it isn't remembering something.
Let's go look at action master. you'll

00:01:14.060 --> 00:01:18.979
see. There's action master. try and make that
static. Look what happens. It firstly

00:01:18.979 --> 00:01:23.009
complains that we have a member variables.
or instance members. and secondly it

00:01:23.009 --> 00:01:26.299
complains that this method here is not
static. So that's what it means to be a

00:01:26.299 --> 00:01:31.659
static class. We've also got another method
I think here. that's not static. So I wanna

00:01:31.659 --> 00:01:36.350
make action master static so that we can
be absolutely sure that it is stateless

00:01:36.350 --> 00:01:40.600
and then we will have a better frame for
understanding how we're going to be

00:01:40.600 --> 00:01:45.500
dealing with score display and how we're going to
be testing that as a monobehavior. So

00:01:45.500 --> 00:01:48.890
reading around a little bit more about
statics. there's a nice long blog post there by

00:01:48.890 --> 00:01:53.850
Tom Butler. It's from the PHP perspective
but it has some very useful points in it

00:01:53.850 --> 00:01:57.600
and the summary is as follows: static
variables always introduce global state

00:01:57.600 --> 00:02:01.320
which is bad. and static methods always
break encapsulation which is also bad

00:02:01.320 --> 00:02:05.340
Statics should be avoided at all costs ok
so let's justify why we're using statics.

00:02:05.340 --> 00:02:08.869
Firstly static variables always
introduce global state. I completely

00:02:08.869 --> 00:02:13.240
agree. it is not helpful for us to be
introducing static variables

00:02:13.240 --> 00:02:18.070
and global state so the whole point of
making sure that the list of pins was in

00:02:18.070 --> 00:02:21.560
game manager was that there was no state
in school master or action master and

00:02:21.560 --> 00:02:24.750
currently there could be state in action
master; it turns out the way that it runs

00:02:24.750 --> 00:02:29.190
that state's cleared every time but we we
want to make that static. So absolutely. we

00:02:29.190 --> 00:02:32.120
want to move away from that static...
globals are bad because we don't know

00:02:32.120 --> 00:02:35.860
who's addressing them that's the problem
with globals. and then the second thing

00:02:35.860 --> 00:02:40.920
that Tom Butler says here is that static
methods always break encapsulation which

00:02:40.920 --> 00:02:43.550
means that things are all in one place;
well the reason we are breaking

00:02:43.550 --> 00:02:47.300
encapsulation is cuz... it's to do with
the history here. we started off with

00:02:47.300 --> 00:02:50.930
action master and we built a load of tests
around it and we got it working which

00:02:50.930 --> 00:02:54.730
was a relief by breaking the the
concepts of the whole bowling system

00:02:54.730 --> 00:03:00.310
down. We then created a score master with
a separate set of tests and it does have

00:03:00.310 --> 00:03:05.110
a different looking behavior; action
master goes through in every single bowl

00:03:05.110 --> 00:03:08.580
at a time score master jumps through
in twos adding up the frame so they do

00:03:08.580 --> 00:03:12.030
behave differently; now they could arguably
be in the same class. and arguably they

00:03:12.030 --> 00:03:15.570
could even be part of game manager but
they're not because of the way that we've

00:03:15.570 --> 00:03:20.740
got here and i actually quite like the
fact we have short concise classes so

00:03:20.740 --> 00:03:24.350
all that remains here to be sure that
we're using static sensibly is to make

00:03:24.350 --> 00:03:28.610
sure that action master is a completely
static class. in that case we are both

00:03:28.610 --> 00:03:33.250
treating score master and action master
as just pure functions so what I want to

00:03:33.250 --> 00:03:38.100
do here is I want you to integrate the
action master I'm providing you in the

00:03:38.100 --> 00:03:42.380
start pack from the start pack. it's called
action master two you're gonna need to save

00:03:42.380 --> 00:03:45.090
your current action master to maybe
action master three or something like

00:03:45.090 --> 00:03:49.790
that and go into action master two and 
rename both the file and the class name; if you

00:03:49.790 --> 00:03:53.380
want to you're welcome to refactor
action master two until it's beautiful if

00:03:53.380 --> 00:03:57.320
you feel that you don't have ownership
over it I'm asking you to copy and paste

00:03:57.320 --> 00:04:00.530
code here for the first time in the
course I think and I'm doing it on

00:04:00.530 --> 00:04:04.650
purpose because sometimes you need to
let go of the idea that you fully follow

00:04:04.650 --> 00:04:09.440
all of the code and if your action
master's protected by tests I think it's

00:04:09.440 --> 00:04:13.690
fair to say let's bring in somebody
else's code ie ours for now. and just

00:04:13.690 --> 00:04:18.180
trust it and use the tests to keep
the certainty that you need in your

00:04:18.180 --> 00:04:22.850
mind so ensure the test pass and then if
you want to refactor it paste the results

00:04:22.850 --> 00:04:25.050
of your code in pastebin

00:04:25.050 --> 00:04:28.229
and he less lines the better. if it's still
readable. Personally I would leave

00:04:28.229 --> 00:04:31.699
refactoring action master until the very
end of the project if you refactor it

00:04:31.699 --> 00:04:35.259
at all so another lesson here is: Is it
worth refactoring it? Well if it works

00:04:35.259 --> 00:04:39.819
maybe not but maybe you're compelled
like I am to refactor it I haven't done

00:04:39.819 --> 00:04:43.550
so yet so the lesson here is accepting
somebody else's code so I just want you to

00:04:43.550 --> 00:04:47.909
bring in my code. convince yourself that
it passes to start with and then if you

00:04:47.909 --> 00:04:55.400
really can't stop yourself go ahead and
refactor it. otherwise leave it as it is and we'll move on.

00:04:55.400 --> 00:04:59.120
OK so doing that is relatively
simple. firstly back in the old action

00:04:59.120 --> 00:05:03.199
master you need to take the word static
off otherwise you'll be having errors. OK

00:05:03.199 --> 00:05:06.949
so you have a start pack and in the start
back you have scripts and one of those

00:05:06.949 --> 00:05:10.520
is called action master two so the way
I'm going to do this I'm gonna find my

00:05:10.520 --> 00:05:13.909
original action master. I'm going to go into
it. I'm going to rename it using

00:05:13.909 --> 00:05:19.639
command or control r. action master old
or something like that. and then I'm

00:05:19.639 --> 00:05:26.289
gonna go to the one in scripts. pop it
into... from start pact scripts into just

00:05:26.289 --> 00:05:35.940
scripts and then rename that one to...
from action master 2 to simply action  master

00:05:35.940 --> 00:05:40.750
and that should just slot into place now. so
if you then re-enable your action

00:05:40.750 --> 00:05:49.259
master tests by un-commenting them all
and then go back to Unity hopefully when

00:05:49.259 --> 00:05:52.889
we run firstly we're looking for no
errors. that's good we have no errors. and

00:05:52.889 --> 00:05:56.930
secondly we're looking to see that the
action master tests alll pass. They do. so

00:05:56.930 --> 00:06:00.069
let's look at this code that we've provided
what's different about it?

00:06:00.069 --> 00:06:04.080
well it's a lot shorter for a start. it's
only 40 lines instead of sixty odd so

00:06:04.080 --> 00:06:08.610
that's a good thing. and it is now static
and all the member variables are gone

00:06:08.610 --> 00:06:13.409
and it's a static method and it's a
relatively simple refactor. the

00:06:13.409 --> 00:06:16.789
bulk of this logic is exactly the same.
we have an off by one difference in

00:06:16.789 --> 00:06:20.620
these in these indexes and a few other
things are slightly different but what I'd

00:06:20.620 --> 00:06:24.580
like you to do is consider just
accepting this code as is and if you're

00:06:24.580 --> 00:06:28.069
nervous about any of its behavior why
not go to action master test and write a

00:06:28.069 --> 00:06:33.180
test to see if your hunch is correct or
not if you think it's not behaving but

00:06:33.180 --> 00:06:37.110
why don't you try and let go of the
implementation details of action master

00:06:37.110 --> 00:06:38.000
just this time.

00:06:38.000 --> 00:06:42.310
because sometimes it's very helpful
for you to be able to farm out the production

00:06:42.310 --> 00:06:45.800
of a method. especially when it's
protected by tests and say well if it

00:06:45.800 --> 00:06:50.330
works it works alright? and if you can't
stand to do that then go ahead and

00:06:50.330 --> 00:06:53.570
refactor it making sure the test pass I
would love to see a tidier version of

00:06:53.570 --> 00:06:57.480
action master I believe that we can get
action master a lot shorter than this I

00:06:57.480 --> 00:07:01.210
think we can get it in about 10 lines in
here somehow cause we've certainly done

00:07:01.210 --> 00:07:04.740
that with our score master and I've got a
feeling that score display will come out

00:07:04.740 --> 00:07:08.270
shorter than this as well. if you want to
reflect this and maybe even contribute

00:07:08.270 --> 00:07:11.440
to the course by pasting the result in
the discussions go ahead and when I

00:07:11.440 --> 00:07:16.250
refactor action master the end of the
section. if I do that. then I will include

00:07:16.250 --> 00:07:22.020
your code or credit you. So that's it. that's
a brief discussion of statics I want to

00:07:22.020 --> 00:07:26.810
go back to the top level briefly and
explain why that's important it's

00:07:26.810 --> 00:07:29.660
important because we want these action
masters and score masters to be

00:07:29.660 --> 00:07:33.440
stateless. we want to make sure we're not
dealing with more than one version of

00:07:33.440 --> 00:07:36.240
them and we want to make sure they have
no member variables so that's how we

00:07:36.240 --> 00:07:40.350
make sure they're stateless and it
frames the discussion about how we're going

00:07:40.350 --> 00:07:44.650
to test score display; we're going to
make a static method inside score

00:07:44.650 --> 00:07:50.669
display in order to make sure that we
can test it nicely. So there's a big risk we're

00:07:50.669 --> 00:07:54.760
overusing statics here but as long as we
understand what we doing. this is a really good

00:07:54.760 --> 00:07:58.050
exercise in getting to understand when
to use statics and when not to use

00:07:58.050 --> 00:08:02.530
statics. so that's the purpose of it OK
so have a little think. have a recap on

00:08:02.530 --> 00:08:03.200
this video

00:08:03.200 --> 00:08:06.229
make sure you understand what's going on
and what I'm gonna be doing in the next

00:08:06.229 --> 00:08:11.510
couple of videos is actually setting us
up for a situation like this where if

00:08:11.510 --> 00:08:15.660
you look at the top right of the diagram
we have a static format rolls. and then

00:08:15.660 --> 00:08:21.120
we'll be able to test the static format rolls.
it'll return a string and that can then the

00:08:21.120 --> 00:08:25.850
score display can simply read that and
we have a testable mono behavior

00:08:25.850 --> 00:08:28.940
effectively. we're not quite testing whether
it puts things in the boxes but that's

00:08:28.940 --> 00:08:32.530
going to be obvious from playtesting
So that's what we'll be doing next. see you soon.

=======
Kind: captions
Language: en

00:00:00,000 --> 00:00:07,259
So to prepare ourselves to write the
score display code we need to think a

00:00:07,259 --> 00:00:10,769
little more carefully about static classes;
what it means to define a whole

00:00:10,769 --> 00:00:14,610
class as static; the perils and
disadvantages and advantages of statics;

00:00:14,610 --> 00:00:17,170
Why we're using statics here;

00:00:17,170 --> 00:00:21,000
refactoring a class to be static and
then learning to accept other people's

00:00:21,000 --> 00:00:25,150
code I'll talk to you about that in a moment. So
our target architecture, you've seen this

00:00:25,150 --> 00:00:28,180
diagram quite often it's been changing
slowly but i wanna make another

00:00:28,180 --> 00:00:33,250
distinction. Score master is a base class
but it is also potentially a static

00:00:33,250 --> 00:00:37,719
class in fact go to score master now
and take a look at it and you'll find

00:00:37,719 --> 00:00:41,960
that you can write the words static go
ahead and do that after public static

00:00:41,960 --> 00:00:46,250
class, and if you do that you'll find it
doesn't complain and it builds just fine

00:00:46,250 --> 00:00:50,430
because there are no member variables; if
you try to define member variables up

00:00:50,430 --> 00:00:54,410
here - not gonna have it, it's going to
complain - and each of the methods are

00:00:54,410 --> 00:00:57,440
static so that's what a static class
means, it just means that all the methods

00:00:57,440 --> 00:01:02,660
are static and there are no member variables
so score master is already like that but

00:01:02,660 --> 00:01:07,060
action master isn't yet. Action master's
not a static class and we can't be

00:01:07,060 --> 00:01:10,470
completely confident that when we call
action master with a load of pin falls

00:01:10,470 --> 00:01:14,060
that it isn't remembering something.
Let's go look at action master, you'll

00:01:14,060 --> 00:01:18,979
see. There's action master, try and make that
static. Look what happens. It firstly

00:01:18,979 --> 00:01:23,009
complains that we have a member variables,
or instance members, and secondly it

00:01:23,009 --> 00:01:26,299
complains that this method here is not
static. So that's what it means to be a

00:01:26,299 --> 00:01:31,659
static class. We've also got another method
I think here, that's not static. So I wanna

00:01:31,659 --> 00:01:36,350
make action master static so that we can
be absolutely sure that it is stateless

00:01:36,350 --> 00:01:40,600
and then we will have a better frame for
understanding how we're going to be

00:01:40,600 --> 00:01:45,500
dealing with score display and how we're going to
be testing that as a monobehavior. So

00:01:45,500 --> 00:01:48,890
reading around a little bit more about
statics, there's a nice long blog post there by

00:01:48,890 --> 00:01:53,850
Tom Butler. It's from the PHP perspective
but it has some very useful points in it

00:01:53,850 --> 00:01:57,600
and the summary is as follows: static
variables always introduce global state

00:01:57,600 --> 00:02:01,320
which is bad, and static methods always
break encapsulation which is also bad

00:02:01,320 --> 00:02:05,340
Statics should be avoided at all costs ok
so let's justify why we're using statics.

00:02:05,340 --> 00:02:08,869
Firstly static variables always
introduce global state. I completely

00:02:08,869 --> 00:02:13,240
agree, it is not helpful for us to be
introducing static variables

00:02:13,240 --> 00:02:18,070
and global state so the whole point of
making sure that the list of pins was in

00:02:18,070 --> 00:02:21,560
game manager was that there was no state
in school master or action master and

00:02:21,560 --> 00:02:24,750
currently there could be state in action
master; it turns out the way that it runs

00:02:24,750 --> 00:02:29,190
that state's cleared every time but we we
want to make that static. So absolutely, we

00:02:29,190 --> 00:02:32,120
want to move away from that static...
globals are bad because we don't know

00:02:32,120 --> 00:02:35,860
who's addressing them that's the problem
with globals, and then the second thing

00:02:35,860 --> 00:02:40,920
that Tom Butler says here is that static
methods always break encapsulation which

00:02:40,920 --> 00:02:43,550
means that things are all in one place;
well the reason we are breaking

00:02:43,550 --> 00:02:47,300
encapsulation is cuz... it's to do with
the history here, we started off with

00:02:47,300 --> 00:02:50,930
action master and we built a load of tests
around it and we got it working which

00:02:50,930 --> 00:02:54,730
was a relief by breaking the the
concepts of the whole bowling system

00:02:54,730 --> 00:03:00,310
down. We then created a score master with
a separate set of tests and it does have

00:03:00,310 --> 00:03:05,110
a different looking behavior; action
master goes through in every single bowl

00:03:05,110 --> 00:03:08,580
at a time score master jumps through
in twos adding up the frame so they do

00:03:08,580 --> 00:03:12,030
behave differently; now they could arguably
be in the same class, and arguably they

00:03:12,030 --> 00:03:15,570
could even be part of game manager but
they're not because of the way that we've

00:03:15,570 --> 00:03:20,740
got here and i actually quite like the
fact we have short concise classes so

00:03:20,740 --> 00:03:24,350
all that remains here to be sure that
we're using static sensibly is to make

00:03:24,350 --> 00:03:28,610
sure that action master is a completely
static class, in that case we are both

00:03:28,610 --> 00:03:33,250
treating score master and action master
as just pure functions so what I want to

00:03:33,250 --> 00:03:38,100
do here is I want you to integrate the
action master I'm providing you in the

00:03:38,100 --> 00:03:42,380
start pack from the start pack, it's called
action master two you're gonna need to save

00:03:42,380 --> 00:03:45,090
your current action master to maybe
action master three or something like

00:03:45,090 --> 00:03:49,790
that and go into action master two and 
rename both the file and the class name; if you

00:03:49,790 --> 00:03:53,380
want to you're welcome to refactor
action master two until it's beautiful if

00:03:53,380 --> 00:03:57,320
you feel that you don't have ownership
over it I'm asking you to copy and paste

00:03:57,320 --> 00:04:00,530
code here for the first time in the
course I think and I'm doing it on

00:04:00,530 --> 00:04:04,650
purpose because sometimes you need to
let go of the idea that you fully follow

00:04:04,650 --> 00:04:09,440
all of the code and if your action
master's protected by tests I think it's

00:04:09,440 --> 00:04:13,690
fair to say let's bring in somebody
else's code ie ours for now, and just

00:04:13,690 --> 00:04:18,180
trust it and use the tests to keep
the certainty that you need in your

00:04:18,180 --> 00:04:22,850
mind so ensure the test pass and then if
you want to refactor it paste the results

00:04:22,850 --> 00:04:25,050
of your code in pastebin

00:04:25,050 --> 00:04:28,229
and he less lines the better, if it's still
readable. Personally I would leave

00:04:28,229 --> 00:04:31,699
refactoring action master until the very
end of the project if you refactor it

00:04:31,699 --> 00:04:35,259
at all so another lesson here is: Is it
worth refactoring it? Well if it works

00:04:35,259 --> 00:04:39,819
maybe not but maybe you're compelled
like I am to refactor it I haven't done

00:04:39,819 --> 00:04:43,550
so yet so the lesson here is accepting
somebody else's code so I just want you to

00:04:43,550 --> 00:04:47,909
bring in my code, convince yourself that
it passes to start with and then if you

00:04:47,909 --> 00:04:55,400
really can't stop yourself go ahead and
refactor it, otherwise leave it as it is and we'll move on.

00:04:55,400 --> 00:04:59,120
OK so doing that is relatively
simple, firstly back in the old action

00:04:59,120 --> 00:05:03,199
master you need to take the word static
off otherwise you'll be having errors. OK

00:05:03,199 --> 00:05:06,949
so you have a start pack and in the start
back you have scripts and one of those

00:05:06,949 --> 00:05:10,520
is called action master two so the way
I'm going to do this I'm gonna find my

00:05:10,520 --> 00:05:13,909
original action master, I'm going to go into
it, I'm going to rename it using

00:05:13,909 --> 00:05:19,639
command or control r, action master old
or something like that, and then I'm

00:05:19,639 --> 00:05:26,289
gonna go to the one in scripts, pop it
into... from start pact scripts into just

00:05:26,289 --> 00:05:35,940
scripts and then rename that one to...
from action master 2 to simply action  master

00:05:35,940 --> 00:05:40,750
and that should just slot into place now, so
if you then re-enable your action

00:05:40,750 --> 00:05:49,259
master tests by un-commenting them all
and then go back to Unity hopefully when

00:05:49,259 --> 00:05:52,889
we run firstly we're looking for no
errors, that's good we have no errors, and

00:05:52,889 --> 00:05:56,930
secondly we're looking to see that the
action master tests alll pass. They do, so

00:05:56,930 --> 00:06:00,069
let's look at this code that we've provided
what's different about it?

00:06:00,069 --> 00:06:04,080
well it's a lot shorter for a start, it's
only 40 lines instead of sixty odd so

00:06:04,080 --> 00:06:08,610
that's a good thing, and it is now static
and all the member variables are gone

00:06:08,610 --> 00:06:13,409
and it's a static method and it's a
relatively simple refactor, the

00:06:13,409 --> 00:06:16,789
bulk of this logic is exactly the same,
we have an off by one difference in

00:06:16,789 --> 00:06:20,620
these in these indexes and a few other
things are slightly different but what I'd

00:06:20,620 --> 00:06:24,580
like you to do is consider just
accepting this code as is and if you're

00:06:24,580 --> 00:06:28,069
nervous about any of its behavior why
not go to action master test and write a

00:06:28,069 --> 00:06:33,180
test to see if your hunch is correct or
not if you think it's not behaving but

00:06:33,180 --> 00:06:37,110
why don't you try and let go of the
implementation details of action master

00:06:37,110 --> 00:06:38,000
just this time.

00:06:38,000 --> 00:06:42,310
because sometimes it's very helpful
for you to be able to farm out the production

00:06:42,310 --> 00:06:45,800
of a method, especially when it's
protected by tests and say well if it

00:06:45,800 --> 00:06:50,330
works it works alright? and if you can't
stand to do that then go ahead and

00:06:50,330 --> 00:06:53,570
refactor it making sure the test pass I
would love to see a tidier version of

00:06:53,570 --> 00:06:57,480
action master I believe that we can get
action master a lot shorter than this I

00:06:57,480 --> 00:07:01,210
think we can get it in about 10 lines in
here somehow cause we've certainly done

00:07:01,210 --> 00:07:04,740
that with our score master and I've got a
feeling that score display will come out

00:07:04,740 --> 00:07:08,270
shorter than this as well, if you want to
reflect this and maybe even contribute

00:07:08,270 --> 00:07:11,440
to the course by pasting the result in
the discussions go ahead and when I

00:07:11,440 --> 00:07:16,250
refactor action master the end of the
section, if I do that, then I will include

00:07:16,250 --> 00:07:22,020
your code or credit you. So that's it, that's
a brief discussion of statics I want to

00:07:22,020 --> 00:07:26,810
go back to the top level briefly and
explain why that's important it's

00:07:26,810 --> 00:07:29,660
important because we want these action
masters and score masters to be

00:07:29,660 --> 00:07:33,440
stateless, we want to make sure we're not
dealing with more than one version of

00:07:33,440 --> 00:07:36,240
them and we want to make sure they have
no member variables so that's how we

00:07:36,240 --> 00:07:40,350
make sure they're stateless and it
frames the discussion about how we're going

00:07:40,350 --> 00:07:44,650
to test score display; we're going to
make a static method inside score

00:07:44,650 --> 00:07:50,669
display in order to make sure that we
can test it nicely. So there's a big risk we're

00:07:50,669 --> 00:07:54,760
overusing statics here but as long as we
understand what we doing, this is a really good

00:07:54,760 --> 00:07:58,050
exercise in getting to understand when
to use statics and when not to use

00:07:58,050 --> 00:08:02,530
statics, so that's the purpose of it OK
so have a little think, have a recap on

00:08:02,530 --> 00:08:03,200
this video

00:08:03,200 --> 00:08:06,229
make sure you understand what's going on
and what I'm gonna be doing in the next

00:08:06,229 --> 00:08:11,510
couple of videos is actually setting us
up for a situation like this where if

00:08:11,510 --> 00:08:15,660
you look at the top right of the diagram
we have a static format rolls, and then

00:08:15,660 --> 00:08:21,120
we'll be able to test the static format rolls,
it'll return a string and that can then the

00:08:21,120 --> 00:08:25,850
score display can simply read that and
we have a testable mono behavior

00:08:25,850 --> 00:08:28,940
effectively, we're not quite testing whether
it puts things in the boxes but that's

00:08:28,940 --> 00:08:32,530
going to be obvious from playtesting
So that's what we'll be doing next, see you soon.

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1

WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.420
So. welcome back. I'm really looking
forward to showing you the adventure I

00:00:05.420 --> 00:00:09.190
went on to get to the code that I
finally got to and then challenging you to

00:00:09.190 --> 00:00:14.240
make your code even prettier and more
concise than what we came up with so in

00:00:14.240 --> 00:00:15.040
this video

00:00:15.040 --> 00:00:19.810
how we solve the scoring problem; a
reminder that it's the destination that

00:00:19.810 --> 00:00:24.180
counts it really is here our code as I
said before went through some very

00:00:24.180 --> 00:00:29.429
very very horrible states. I'll probably
even show you our repository in a moment

00:00:29.429 --> 00:00:34.090
and you'll see how tests really
protect your refactoring. when we get to the

00:00:34.090 --> 00:00:38.600
refactoring. So the overall goal is what
Einstein says is to make things as

00:00:38.600 --> 00:00:45.190
simple as possible but not simpler - Good old Albert Einstein - so let me just show you something. I'm gonna

00:00:45.190 --> 00:00:52.989
show you how round the houses we went -
if I open my bowl master repo history here

00:00:52.989 --> 00:00:58.000
what this is every one of these
nodes here is a commit and you'll see

00:00:58.000 --> 00:01:02.149
that to get to the bowling solution I
branched off here from the blue branch

00:01:02.149 --> 00:01:06.290
which is our main production branch and
did a load and a load and a load and

00:01:06.290 --> 00:01:11.189
a load and a load and a load and a load of work
and more and more and more and more and

00:01:11.189 --> 00:01:16.780
more and more and nearly gave up at one
point and the code went from very little

00:01:16.780 --> 00:01:21.590
to a lot and back down to very little
again so now we are back here I'm gonna

00:01:21.590 --> 00:01:24.689
show you what that journey was for me
and I'm going to try and strike a

00:01:24.689 --> 00:01:30.520
balance between taking you all round the houses
and going straight to the solution going

00:01:30.520 --> 00:01:34.140
straight to the solution for you would
be pretty boring taking you down the

00:01:34.140 --> 00:01:38.520
full journey that I went would be
frustrating so I think I'm going to try

00:01:38.520 --> 00:01:41.170
and strike a balance that is appropriate
so let's get on with it

00:01:41.170 --> 00:01:46.799
here we go open up unity I would suggest
you have your unit test panel

00:01:46.799 --> 00:01:52.000
wider than usual cuz we're just doing
testing here and also make sure that your

00:01:52.000 --> 00:01:56.250
action master tests are all greyed out
and we should be starting in a position

00:01:56.250 --> 00:02:01.399
where this first test. 01. is
failing - perhaps you've already got all

00:02:01.399 --> 00:02:06.159
of your tests passing that'd be fantastic
if you have. this would just act as a

00:02:06.159 --> 00:02:10.619
recap for you but if you haven't and you need
some help then this is how we got there.

00:02:10.619 --> 00:02:16.390
So firstly let's start with that first
test. What is the test? The tests on the

00:02:16.390 --> 00:02:20.970
left and look at the test the test says
that if you roll two and three return a

00:02:20.970 --> 00:02:26.690
list of just five. Well. I could be pretty
obstinate here I could say I don't want to

00:02:26.690 --> 00:02:32.170
type frame list every time. frames just gonna
call frameless frames I could just say

00:02:32.170 --> 00:02:37.610
frames dot add five and that would
actually make the test pass wouldn't it

00:02:37.610 --> 00:02:41.590
and over in unity we can see the test
does pass so we've gone from red to

00:02:41.590 --> 00:02:46.050
green now it's time to refactor now
clearly our code here is never going to

00:02:46.050 --> 00:02:50.920
generalize right it's never gonna work
if all we do is return a single 5. For a start

00:02:50.920 --> 00:02:55.180
this whole thing needs to be taking in a
list of rolls and iterating through the

00:02:55.180 --> 00:02:58.890
list of rolls to produce a list of
frames. So let's try and do this

00:02:58.890 --> 00:03:05.040
iteration now see if we can still keep
our test passing so about a for loop? For

00:03:05.040 --> 00:03:12.400
int i. starting at 1 - we're gonna call bowl one
bowl one. provided that i is less than

00:03:12.400 --> 00:03:15.290
rolls . count - so we don't

00:03:15.290 --> 00:03:21.790
overrun the list that's coming in let's
step through in twos.. OK. we're gonna step

00:03:21.790 --> 00:03:26.959
through in twos. let's try that. OK and when we
step through in twos rather than just adding

00:03:26.959 --> 00:03:38.450
five we're going to add rolls i. minus one
plus rolls i. so what are we gonna be doing

00:03:38.450 --> 00:03:44.690
each time is starting this i. this pointer
is going to point at the second bowl of

00:03:44.690 --> 00:03:45.860
the frame all the time.

00:03:45.860 --> 00:03:51.360
OK. so it's going to start off as i equals
one and that is roll one which is

00:03:51.360 --> 00:03:55.989
because it's an array is the second roll
and then it'll go to i equals three

00:03:55.989 --> 00:04:01.030
which is roll three which is the fourth so
it's looking at the second roll in each

00:04:01.030 --> 00:04:05.670
frame every time. Let's see if that works
it's just adding together the two adjacent

00:04:05.670 --> 00:04:13.890
ones. The ones I is currently pointing
out and the bowl before.

00:04:13.890 --> 00:04:18.079
Cool. so we've had a refactor and this is
more likely to work now in a general

00:04:18.079 --> 00:04:22.190
case than that other code which clearly
was never going to work with just a

00:04:22.190 --> 00:04:28.730
five. OK. let's undo the next test and go
back into unity and see what happens

00:04:28.730 --> 00:04:33.940
Let it compile... boosh. Now 2. 3. 4 is actually
working as well we're still just getting

00:04:33.940 --> 00:04:38.770
a five which is fantastic so this idea
of jumping through in twos and adding

00:04:38.770 --> 00:04:42.460
together the bowl and the previous bowl
seems to be working. Now this test isn't

00:04:42.460 --> 00:04:46.640
driving any new development so strictly
it's a verification test but I'm gonna

00:04:46.640 --> 00:04:50.260
leave it here just to keep the journey
simple for you guys rather than changing

00:04:50.260 --> 00:04:54.840
the tests. I'm not gonna change anything about
these tests. I'm only gonna uncomment so

00:04:54.840 --> 00:05:00.760
let's build again and doing the 2. 3. 4. 5. now
will this still stand up to scrutiny? Yes

00:05:00.760 --> 00:05:05.990
it does actually so again this idea that
we iterate through in two is working

00:05:05.990 --> 00:05:09.320
really well now you may well have gone
down a completely different route here

00:05:09.320 --> 00:05:13.310
in fact you're even allowed to put if
statements in for every possible condition

00:05:13.310 --> 00:05:17.840
and that's absolutely fine and then
eventually you'll spot patents and you

00:05:17.840 --> 00:05:21.210
will start being able to generalise. In
fact that's how I got to this code. by

00:05:21.210 --> 00:05:26.840
putting in if you know if you bowl 2. 3
then return a five and if you bowl

00:05:26.840 --> 00:05:31.180
2.3.4.5 return 5. 9 - you can literally put every
special case in as long as at some

00:05:31.180 --> 00:05:35.340
point you start to generalize and this is
the generalisation I made for this type

00:05:35.340 --> 00:05:38.870
of frame so let's keep going and see
where this falls apart.

00:05:38.870 --> 00:05:48.660
Build again 2. 3. 4. 5. 6. see what happens. and
that works! Fantastic. good. so so far

00:05:48.660 --> 00:05:52.060
stepping through in twos. i's pointing
to here and then adds that these two

00:05:52.060 --> 00:05:57.990
together and then i points to here. and adds these
two together; and then i goes outside of

00:05:57.990 --> 00:06:03.229
the rolls list so it doesn't iterate a
third time so our loop just goes round

00:06:03.229 --> 00:06:08.300
twice adding two and three and five and
four which gives you your five and your

00:06:08.300 --> 00:06:14.210
nine. So that structure still works. awesome.
Again for you it may have driven you to

00:06:14.210 --> 00:06:17.310
create more and more code. that's
absolutely fine because you can refactor

00:06:17.310 --> 00:06:21.350
later. I just would take all day recording
this videos if we go that way. so let's go

00:06:21.350 --> 00:06:25.650
back to unity and see what happens when
we try and do this test

00:06:25.650 --> 00:06:29.479
It still passes. fantastic. and that's because
there's nothing that different about

00:06:29.479 --> 00:06:33.210
this frame it's still not a spare or a
strike so it just adds up

00:06:33.210 --> 00:06:39.940
Great ok. what's the next test? Should work as
well because there's nothing special

00:06:39.940 --> 00:06:45.729
about the last frame what happens? It
still works fantastic so pretty good

00:06:45.729 --> 00:06:50.600
general code I've stumbled across. The
reality is that that came out of days of work

00:06:50.600 --> 00:06:55.020
and you may well struggle to get there
as quickly. Not a problem. here we go now

00:06:55.020 --> 00:06:58.690
we're bowling a strike. Right now this really
shouldn't work because it doesn't know

00:06:58.690 --> 00:07:02.169
that it should be delaying the
production of a frame score. let's see what

00:07:02.169 --> 00:07:07.880
happens I suspected it'll fall over
horribly now. it must do - yes and what's

00:07:07.880 --> 00:07:12.050
happening is you're getting an 11 out. which
should never happen. we should be getting

00:07:12.050 --> 00:07:15.900
nothing out and the reason is it just
blindly starts with an index here. adds 10

00:07:15.900 --> 00:07:21.860
one to 10 and you end up with an 11 which we
don't want. Great. so now we have a test

00:07:21.860 --> 00:07:26.530
finally at test seven the way I'm doing things
we have a test that drives the need for

00:07:26.530 --> 00:07:31.099
some new development. So how do we
protect this? How do we say we're iterating

00:07:31.099 --> 00:07:34.479
through but we only want to do this
thing when what? Well when it's a

00:07:34.479 --> 00:07:41.229
standard open frame right? So one way of
saying that is if... and I'm going to do my

00:07:41.229 --> 00:07:47.250
braces. all of them now. I'm gonna put an if
statement in before I even write the

00:07:47.250 --> 00:07:52.729
if statement I'm gonna remind myself what if
statement I'm trying to write - this is a

00:07:52.729 --> 00:07:59.280
normal. what they call in bowling. open
frame meaning the sum of the two bowls

00:07:59.280 --> 00:08:02.669
with less than 10 so how do you say that

00:08:02.669 --> 00:08:12.199
well it's quite simple. you say rolls i minus
one. that's rolls i is less than 10 so a

00:08:12.199 --> 00:08:17.539
normal open frame is when they sum
to less than 10 do that but if they

00:08:17.539 --> 00:08:22.210
don't sum to less than 10 then we're
gonna get a different result. Let's see

00:08:22.210 --> 00:08:25.849
what we get here. clearly the loop just
won't execute at all and I think that'll

00:08:25.849 --> 00:08:31.789
make the test pass it does because now
it goes hang on the first two bowls are

00:08:31.789 --> 00:08:34.159
more than 10 therefore I'm

00:08:34.159 --> 00:08:38.130
just gonna do nothing. it just leaves the
loop. Great. so we passed. Do we need to

00:08:38.130 --> 00:08:38.690
refactor?

00:08:38.690 --> 00:08:42.760
Not yet. we don't have any tests forcing
us to refactor yet so we get another

00:08:42.760 --> 00:08:48.490
test you can write it. your friend can write
it whatever ok cool so here we bowl a

00:08:48.490 --> 00:08:56.440
1 and a 9. now they're equal to 10. what's going to happen? Let's see. Again it works because our

00:08:56.440 --> 00:09:00.590
code says if the two bowls are less
than 10 do this otherwise do nothing. Cool.

00:09:00.590 --> 00:09:06.640
let's carry on. See how this works? Again I
don't expect you to go straight to the

00:09:06.640 --> 00:09:11.430
code that I've got. OK? You may have gone
significantly round the houses. Now.

00:09:11.430 --> 00:09:15.130
what's going to happen here is it gonna
know to delay on the 5. 5? It should do

00:09:15.130 --> 00:09:18.720
cuz they add up to 10 right? We just told
if they add up to 10 that you need to

00:09:18.720 --> 00:09:20.620
skip and it does work.

00:09:20.620 --> 00:09:25.600
Fantastic. so I have coding super powers
here just because I've spent a lot of

00:09:25.600 --> 00:09:29.120
time in rehearsal. Most of the amazing
performances you see of course in real

00:09:29.120 --> 00:09:33.630
life are people rehearsing beforehand. so
just remember that when you see

00:09:33.630 --> 00:09:35.180
something that you think is great.

00:09:35.180 --> 00:09:39.780
OK so here we go let's try again let's
try this spare bonus that can't work I

00:09:39.780 --> 00:09:44.170
don't think. that we haven't told it
about speed bonuses - no ok it was

00:09:44.170 --> 00:09:48.470
expecting a 13 but it got a six.
let's look at the test condition. So

00:09:48.470 --> 00:09:52.600
where it was expecting a 13 it's
getting a 6. so how's it ending up getting

00:09:52.600 --> 00:09:54.280
the six here?

00:09:54.280 --> 00:09:57.480
Well what's happening is the code is
saying get these two. add them together make

00:09:57.480 --> 00:09:58.450
a three

00:09:58.450 --> 00:10:04.620
these two. add them together make an 8. these two. they equal 10 so let's just exit the loop so

00:10:04.620 --> 00:10:08.650
then the i pointer goes to here. to the
second three. it adds these together and adds

00:10:08.650 --> 00:10:12.100
it to the end of the list which is now
still just here. See what's happening? It's

00:10:12.100 --> 00:10:15.370
just skipping over these and ignoring it
which is exactly what the code says to do.

00:10:15.370 --> 00:10:18.960
it as only add something to the frames
if the total is less than 10 but it

00:10:18.960 --> 00:10:23.230
keeps skipping ahead in twos. which is fine.
So is this a good strategy? Well we don't know

00:10:23.230 --> 00:10:26.110
I mean I know it is because I know the
end code but if you don't know just

00:10:26.110 --> 00:10:29.950
press on just keep going and we're only by
the way gonna go through this until we

00:10:29.950 --> 00:10:33.510
get to verification tests then we'll stop
and take a break.

00:10:33.510 --> 00:10:37.380
So how do we make it work then? Why is it
not working? Well it's not

00:10:37.380 --> 00:10:42.350
working so we haven't told the code what
to do when the rolls do equal ten. so

00:10:42.350 --> 00:10:44.050
put in a separate if statement. in fact you may as well

00:10:44.050 --> 00:10:52.390
copy this one here if rolls equals 10 -
the sum of the two rolls equals 10 - then

00:10:52.390 --> 00:10:57.410
what do we do? Well we frames dot add; what
do you add in this case? Well you just

00:10:57.410 --> 00:11:08.520
add 10+  i+1 right? So you here at this
point. your i is here on this second

00:11:08.520 --> 00:11:16.310
five. what do we score this frame? 10+ i+1
this guy here. Cool. hey? Alright so let's do

00:11:16.310 --> 00:11:22.380
that and see if that works. By the way
I'm going to comment here and just say

00:11:22.380 --> 00:11:27.620
spare. just because I think it's a clear
place to put that. Now let's see if

00:11:27.620 --> 00:11:35.100
that's helped the code at all. it has but -
and this is a very common thing. it's broken

00:11:35.100 --> 00:11:40.540
the previous two tests. So what we do
here? What do you what to

00:11:40.540 --> 00:11:44.000
do to fix this so do we go back and try
to fix these tests? What state are we in?

00:11:44.000 --> 00:11:47.990
Red. green. refactor? Well we just made
this test pass but we've made these fail so

00:11:47.990 --> 00:11:54.040
here's the discipline. Go back. undo the
test you did - you just put in that caused

00:11:54.040 --> 00:11:58.770
that problem. Revert for the moment your code
changes - you can comment them if you're

00:11:58.770 --> 00:12:03.920
confident in them and then rebuild. let's
see where we are. You mustn't have multiple

00:12:03.920 --> 00:12:10.230
tests failing. OK. now that these tests
are still passing let's refactor so that

00:12:10.230 --> 00:12:14.350
they continue to pass even though we
have our new code in. so how about if we put

00:12:14.350 --> 00:12:20.520
this spare handling code in. what happens?

00:12:20.520 --> 00:12:24.480
These tests fail. 19 and this one. Now look carefully. the
reason is that there's an argument out

00:12:24.480 --> 00:12:28.930
of range. so why on test 8 do we get an
argument out of range. let's have a look

00:12:28.930 --> 00:12:35.570
what is test 8 provide. a 1 then a 9. so what
happens in the code it says do the sum

00:12:35.570 --> 00:12:40.630
of the two rolls equal less than 10? No.
do hey equal 10? Well yes they do but it's

00:12:40.630 --> 00:12:46.660
trying to add rolls i +1 when rolls
i +1 does not exist. at this stage it's

00:12:46.660 --> 00:12:51.390
here and is trying to look at i +1; well
there is no i +1 from this standpoint

00:12:51.390 --> 00:12:56.980
where we are now so we need to protect
against too much look ahead. So let's try

00:12:56.980 --> 00:13:03.690
this if rolls . counts minus i. so you
take the count how many there are on the

00:13:03.690 --> 00:13:08.090
list you take away where we are now in
the list and that needs to be at least

00:13:08.090 --> 00:13:15.040
one we need a look ahead of at least 1. So if
the look ahead is less than one and

00:13:15.040 --> 00:13:17.290
I'll put that in as a comment...

00:13:17.290 --> 00:13:23.470
insufficient look ahead. then what we do?
Well one neat thing to do here is just

00:13:23.470 --> 00:13:28.350
break out of the loop; just leave the loop
for this time round. We don't have enough

00:13:28.350 --> 00:13:36.210
look ahead. don't even try and calculate
the spare bonus yeah? Get it? OK let's have a

00:13:36.210 --> 00:13:41.570
look. see if it compiles. Well it compiles but
see if it works

00:13:41.570 --> 00:13:44.820
beautiful now we don't have any argument
errors. and we have nothing in our lists

00:13:44.820 --> 00:13:49.730
coming back because it dives out at this
point. Get it? Cool. so now we can undo the

00:13:49.730 --> 00:13:51.760
test that caused us the problem before

00:13:51.760 --> 00:13:58.710
rebuild and see what happen. Hopefully it'll just
pass... and it does it's calculating spare bonuses

00:13:58.710 --> 00:14:07.280
fantastic it's carry on next
test. Build. and the other spare bonus

00:14:07.280 --> 00:14:12.070
test where we've just got a few more bowls
that works ok let's keep going. Now strike

00:14:12.070 --> 00:14:14.690
bonus can't work right because we
haven't told it

00:14:14.690 --> 00:14:20.160
how to calculate strikes. great it
doesn't work. It's missing everything

00:14:20.160 --> 00:14:23.330
well. by the looks of it. it's yes it's missing
everything cuz it's just got completely

00:14:23.330 --> 00:14:24.730
flummoxed by this 10 here.

00:14:24.730 --> 00:14:28.720
So. what's the easiest way to calculate
that strike bonus well. let's go have a look at

00:14:28.720 --> 00:14:32.880
the code I think the code is quite easy
to reason about right now. So the first

00:14:32.880 --> 00:14:37.220
question is do we need to think about
strike bonus before or after we think

00:14:37.220 --> 00:14:42.350
about spare bonus? Well I think that we
need to think about it before the spare

00:14:42.350 --> 00:14:49.660
bonus because 10. 0 is the same as 0. 10 as
far as this statement goes right these

00:14:49.660 --> 00:14:54.380
things still sum up to ten whether or
not the sequence comes 10. 0 or 0. 10 but the

00:14:54.380 --> 00:15:04.089
strike is just 10. 0. So what we do is we
say rolls i minus 1. yeah? Because remember

00:15:04.089 --> 00:15:09.220
we are sitting here and the i pointer
will be sitting at the three right now

00:15:09.220 --> 00:15:14.510
so we're talking about i minus one because remember
it goes ahead in twos so if rolls i

00:15:14.510 --> 00:15:20.120
minus one equals 10 then we do something.

00:15:20.120 --> 00:15:26.930
OK and in this case we have a strike.
What do we do in the case of a strike? Well

00:15:26.930 --> 00:15:32.370
it's very very similar to this isn't it
with a strike you add ten plus the bowl

00:15:32.370 --> 00:15:41.800
ahead plus two bowls ahead that's how a strike
bonus works isn't it and I could

00:15:41.800 --> 00:15:47.839
simplify my code here by just saying
else if. OK. fantastic. so will that work

00:15:47.839 --> 00:15:55.970
or do we still have a problem? Let's have
a look. It doesn't work and we get an

00:15:55.970 --> 00:15:57.709
argument out of range why

00:15:57.709 --> 00:16:03.310
well because we're stepping through in twos
remember. and then our code goes ahead

00:16:03.310 --> 00:16:07.660
and tries to look at two a head when
a strike goes and messes things up

00:16:07.660 --> 00:16:12.139
doesn't it because a strike is recorded
is just a single bowl and then it skips

00:16:12.139 --> 00:16:15.980
it doesn't put a zero it just skips. so that's
irritating. how can we deal with that?

00:16:15.980 --> 00:16:19.790
Well there's a pretty simple way of
dealing with it. The moment we realise

00:16:19.790 --> 00:16:24.940
we're in a strike situation decrement i just
take it back one. the moment we identify

00:16:24.940 --> 00:16:31.420
that we're in a strike situation here bring i
back to here to the 10 ok. see if that

00:16:31.420 --> 00:16:34.279
works.

00:16:34.279 --> 00:16:40.749
It does. perfect. ok so let's record what
we're doing. this is really important to

00:16:40.749 --> 00:16:46.129
comment here because it's not it's not
obvious to somebody reading it so strike

00:16:46.129 --> 00:16:51.259
frame has just one bowl for example
would be a useful comment

00:16:51.259 --> 00:16:55.509
ok cool let's carry on. let's keep doing the
tests and see if we can break the code

00:16:55.509 --> 00:16:56.639
again

00:16:56.639 --> 00:17:03.069
strike bonus 3 so this is just a
different strike bonus and the code

00:17:03.069 --> 00:17:06.500
handles it great so it becomes a
verification test. We just leave it

00:17:06.500 --> 00:17:11.289
there cuz we're better to have more tests
than less. and the multi strikes works. nice.

00:17:11.289 --> 00:17:17.400
So how about a different multi strikes?
Now this wasn't my journey. I wrote every

00:17:17.400 --> 00:17:20.610
test for a reason to try and put
pressure on my code but now that I know

00:17:20.610 --> 00:17:22.589
a better solution

00:17:22.589 --> 00:17:27.270
this is working much more nicely so
gutter game. all zeros. it should get zero. does it?

00:17:27.270 --> 00:17:33.600
Yep great so this code that we've
written now with a lot of rehearsal and

00:17:33.600 --> 00:17:37.880
insight seems to be handling most of
what we're throwing at it. Good. let's test

00:17:37.880 --> 00:17:41.620
all strikes I suspect we're gonna run
into problems with the last frame

00:17:41.620 --> 00:17:42.429
shortly.

00:17:42.429 --> 00:17:53.419
It's not yet. OK test immediate strike
bonus. Passes. great. OK let's have a look

00:17:53.419 --> 00:17:57.580
at if it can handle a spare in the last
frame like this. 1. 9 in the last frame

00:17:57.580 --> 00:18:04.830
surprisingly it does OK. can it handle a
strike in the last frame? I seem to

00:18:04.830 --> 00:18:08.020
remember this. I definitely remember this
part. it won't handle it and it's a subtle

00:18:08.020 --> 00:18:13.169
reason why. OK it does not handle
a strike in the last frame. and it's you get

00:18:13.169 --> 00:18:16.720
an extra 38 on the end of the
list. why the hell does that happen? Let's

00:18:16.720 --> 00:18:26.549
look at the code. What happens here is we
get 38 at the end. What's 38? It's 33 + 2 + 3. Or 33

00:18:26.549 --> 00:18:31.470
plus 5 is 38 and what it's doing is
it's going round the loop once more adding

00:18:31.470 --> 00:18:36.929
the 2 and the 3 to the previous frame
score. Why is it doing that? It's doing

00:18:36.929 --> 00:18:41.799
that because the system has no way of
knowing that it's the last frame from

00:18:41.799 --> 00:18:43.950
the inside from its point of view

00:18:43.950 --> 00:18:47.880
it doesn't know; a game of bowling can
have as many as 13 bowls like this

00:18:47.880 --> 00:18:53.799
or as few - sorry as few as 13 bowls
like this in a perfect game. or as many

00:18:53.799 --> 00:18:59.010
as 21 bowls like this and the code
doesn't know whether we're in the last

00:18:59.010 --> 00:19:02.740
frame and at this point I nearly gave up
I tell you I thought I've nearly got the

00:19:02.740 --> 00:19:06.830
solution but now I'm stuffed now I've
gotta go back to the drawing board and

00:19:06.830 --> 00:19:11.220
make this whole thing calculate based on
frames not rolls. oh my god. but I had

00:19:11.220 --> 00:19:15.190
the wisdom to close my laptop and go and
have a bath. and in the bath I realised hang on.

00:19:15.190 --> 00:19:20.220
there is a simple way of telling that we
are in the last frame. we are leaving a

00:19:20.220 --> 00:19:24.149
breadcrumb and that bread crumb is the
frame list that we are creating behind

00:19:24.149 --> 00:19:34.240
us. so why don't we simply say if frames
dot count equals 10. just get out of the

00:19:34.240 --> 00:19:39.059
loop and it won't go around again
because by then the i will be too high.

00:19:39.059 --> 00:19:44.940
If frame count is ten. get out of the
loop and what this does is it prevents

00:19:44.940 --> 00:19:56.500
11th frame score. Without the apostrophe.
OK? Let's try it

00:19:56.500 --> 00:20:03.330
Wonderful. and that fixes it. and I believe that's the
end of our test driving test from here

00:20:03.330 --> 00:20:07.160
on i categorize it as verification and
we've got a lot of golden copies so I'm

00:20:07.160 --> 00:20:10.380
gonna stop the video and in the next
video I'll talk about what's going on

00:20:10.380 --> 00:20:12.770
there so well done following this so far
and I'll see you soon.


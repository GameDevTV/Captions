WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.990
So in this video we're going to talk about
test driven development TDD so we'll do

00:00:09.990 --> 00:00:11.900
an overview of what TDD is

00:00:11.900 --> 00:00:17.770
we'll talk about the memorable red green
refactor loop and we'll explain briefly

00:00:17.770 --> 00:00:22.810
why you never refactor with a failing
tests - it's not refactoring if you've got failing tests so

00:00:22.810 --> 00:00:26.539
the idea of test driven development is
firstly you can read more about it on

00:00:26.539 --> 00:00:30.750
Wikipedia over here click this link if
you've got the PDF slides in front of you or

00:00:30.750 --> 00:00:34.760
just type wiki test driven development
into Google but the basic idea is that

00:00:34.760 --> 00:00:39.690
rather than just coding stuff and
trying it and seeing if it works we

00:00:39.690 --> 00:00:44.309
build a series of tests so we start by
writing a test and that test actually is

00:00:44.309 --> 00:00:51.110
designed to fail and then you check that
the test fails if it succeeds it's no

00:00:51.110 --> 00:00:55.350
good actually you don't want your test
to succeed because it's not gonna drive

00:00:55.350 --> 00:00:59.730
development if your test succeed so you
might wanna in bowling score in the

00:00:59.730 --> 00:01:04.680
first test might want to check that if
you bowl of three that you get the

00:01:04.680 --> 00:01:10.619
system says tidy the pins and that the frame score
list is empty because we don't know what

00:01:10.619 --> 00:01:13.610
the score is yet for example that might
be your first test and it must fail because

00:01:13.610 --> 00:01:14.729
there's no code yet; there's no

00:01:14.729 --> 00:01:19.520
scoring code so it's got to fail so that's
good it's failed so then we write our

00:01:19.520 --> 00:01:25.460
production code and we keep running the
test and seeing if it fails or not and

00:01:25.460 --> 00:01:28.470
if it fails we keep fixing our code and
writing it and writing and eventually the

00:01:28.470 --> 00:01:32.470
test will pass and the code might may not
be very pretty but the test will

00:01:32.470 --> 00:01:38.640
eventually pass and then at that point
you clean up your code given that it's

00:01:38.640 --> 00:01:44.020
now passed you now refactor your code and rinse and
repeat - you could call the refactoring the

00:01:44.020 --> 00:01:48.130
rinsing so let's look at that a different way
that's quite a complex diagram let's

00:01:48.130 --> 00:01:52.759
look at it in a simpler way; you write a
failing tests, as I said it must be failing

00:01:52.759 --> 00:01:55.570
because it's a new feature try to make,
you're right

00:01:55.570 --> 00:02:00.280
then you write code to make the pet the
test pass you code a solution taking you

00:02:00.280 --> 00:02:08.929
to green; then you rinse or refactor the code going
back and forth between your code and

00:02:08.929 --> 00:02:13.620
running your test and you keep re-running
and keep re-testing making sure that your

00:02:13.620 --> 00:02:17.790
refactoring is not breaking what you've
already got and then when your code is

00:02:17.790 --> 00:02:22.200
how you like the look of it and you can
really clearly follow it then you go

00:02:22.200 --> 00:02:25.740
back and you write a new failing test
for a new condition in addition to your

00:02:25.740 --> 00:02:29.500
previous tests and the great thing about
test driven development is these tests

00:02:29.500 --> 00:02:35.180
stack up on top of each other so any
tests you've previously written stays in

00:02:35.180 --> 00:02:39.200
the system and always gets tested in the
future when you run your tests which is

00:02:39.200 --> 00:02:46.239
incredibly powerful. So I just want to go
back to the YouTube video I found and it

00:02:46.239 --> 00:02:49.940
just give you a slightly more tangible
example of how the first couple of tests

00:02:49.940 --> 00:02:57.230
may go so if you look at the first entry
into this scoresheet here, eight, then we

00:02:57.230 --> 00:03:03.140
can already writer test it says that
score 8 and receive tidy for example

00:03:03.140 --> 00:03:10.220
so looking back at our API if we were to
public action roll 8 pins to the

00:03:10.220 --> 00:03:14.040
ScoreMaster what we would want the
ScoreMaster to say back is tidy just

00:03:14.040 --> 00:03:20.820
tidy because we've knocked down 8 pins
and now we want to tidy what's left. If

00:03:20.820 --> 00:03:25.739
we were to say public well if we were to 
just call get frames on ScoreMaster

00:03:25.739 --> 00:03:31.220
we would want it to return an empty list
so our first couple of tests could

00:03:31.220 --> 00:03:37.120
simply be that we roll 8 and then
we assert that we received back an

00:03:37.120 --> 00:03:41.329
empty list of frames because there is no
completed frame score yet and we

00:03:41.329 --> 00:03:46.940
receive back a tidy command so that
would fail to start with because there is no scoring

00:03:46.940 --> 00:03:50.049
code and then we will write the code to
make it happen. Let's move on give you

00:03:50.049 --> 00:03:53.720
another example then I'll ask you to do
some reading around this subject then we'll

00:03:53.720 --> 00:03:58.090
get into actually doing it. So this is a
spare so you might write the next test

00:03:58.090 --> 00:03:59.310
that says

00:03:59.310 --> 00:04:06.620
spare scores tech... no spare doesn't
score anything spare triggers reset so

00:04:06.620 --> 00:04:11.459
this test would say okay this is the
second bowl of a frame and we should

00:04:11.459 --> 00:04:15.220
be telling the PinSetter to reset the game
now so we should be getting a reset

00:04:15.220 --> 00:04:19.560
back at this point and the other
test you could say is well they're also

00:04:19.560 --> 00:04:23.490
the frameless should still be empty
because we still don't know the result

00:04:23.490 --> 00:04:28.410
of this frame because we're waiting for
the next score to come in the first bowl

00:04:28.410 --> 00:04:33.300
of frame to to come in so you could
write two tests just for that scenario

00:04:33.300 --> 00:04:36.919
and that's how we're gonna proceed and we
just gonna write tests all the way

00:04:36.919 --> 00:04:41.570
through this card example until the
whole card succeeds so I hope that makes

00:04:41.570 --> 00:04:46.130
sense what I'd like you to do now is
just read a little bit more about test

00:04:46.130 --> 00:04:49.060
driven development so your challenge is to
have a look on youtube for test driven

00:04:49.060 --> 00:04:53.410
development I warn you may fall asleep
on some of the videos on there have a

00:04:53.410 --> 00:04:57.360
read of the Wikipedia article; do a
general Google search as well doesn't

00:04:57.360 --> 00:05:01.700
have to be YouTube or Wikipedia and if you
got any friends who are geeky enough to know about

00:05:01.700 --> 00:05:03.260
test-driven development talk to them about
it

00:05:03.260 --> 00:05:07.330
ask them what their experiences are so
enjoy doing a little bit of research

00:05:07.330 --> 00:05:12.070
about TDD, this is the end of this video
and in the next video we're going to set

00:05:12.070 --> 00:05:13.550
up the framework and get on with it


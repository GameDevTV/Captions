Kind: captions
Language: en

00:00:00,000 --> 00:00:08,980
Hey! Super useful video this one we're gonna
be finding out how to unit test mono

00:00:08,980 --> 00:00:13,840
behaviour we'll firstly see why mono behavior
classes are hard to test, then create a

00:00:13,840 --> 00:00:17,990
testable static helper method and then
create our testing structure preparing

00:00:17,990 --> 00:00:20,060
you for the challenge ahead.

00:00:20,060 --> 00:00:24,660
Cool, cool, so let's just dive in. This is what
we're aiming for,

00:00:24,660 --> 00:00:27,980
we are wanting to pass a list of
frames and a list of rolls to the score

00:00:27,980 --> 00:00:32,340
display and we want that score display
to be testable now it being a mono

00:00:32,340 --> 00:00:36,570
behavior it's not very testable, you'll
see why in a second, but as an overview

00:00:36,570 --> 00:00:39,520
what we're going to do is create a
static helper method called format rolls

00:00:39,520 --> 00:00:43,710
that takes in rolls as an integer
somewhere between 13 and 21 different

00:00:43,710 --> 00:00:48,280
rolls, depending on how the game pans out, and gives
you by the end of the game always 21

00:00:48,280 --> 00:00:52,680
characters in a string which score
display can then just very basically step

00:00:52,680 --> 00:00:57,590
through and stick in the right boxes.
Alright so let's firstly see why it's

00:00:57,590 --> 00:01:03,600
tricky to build a mono behaviour that's
testable. So if we make our action, and go

00:01:03,600 --> 00:01:10,689
ahead and do this, not action master but
score display test class and I would

00:01:10,689 --> 00:01:14,600
suggest that you copy the top of
another test class including its first

00:01:14,600 --> 00:01:22,259
test as a leg up and just use that as
the template, ok, and I'm just going to

00:01:22,259 --> 00:01:26,479
make sure that works actually apart from you
need to be careful to rename the actual class

00:01:26,479 --> 00:01:32,520
score display test and let's just see
over here; may as well run all on recompile

00:01:32,520 --> 00:01:37,450
or at least run selected; boom and there
we go

00:01:37,450 --> 00:01:42,880
wrong class... score display test passing test.
OK, so we have that now imagine that you

00:01:42,880 --> 00:01:48,159
just have your score display class here
and in there we have fill roll car. Now I know

00:01:48,159 --> 00:01:52,360
that fill roll card's not working properly but let's
just say that we want to call into this

00:01:52,360 --> 00:02:01,020
so how are we gonna do that?
Well regardless of how it works let's just

00:02:01,020 --> 00:02:06,330
put in a your code here. I'm actually gonna

00:02:06,330 --> 00:02:10,200
just call it fill rolls because it's a
little bit simpler a name - don't rename

00:02:10,200 --> 00:02:15,410
methods like that always rename methods
by clicking on them and holding down

00:02:15,410 --> 00:02:19,490
Ctrl command r and then using the
refactor tool, and then the name will change

00:02:19,490 --> 00:02:23,170
in other classes like over here in game
and it'll be very easy to forget that call

00:02:23,170 --> 00:02:29,050
so always use the refactor tool. We don't need the start
or the update methods, so imagine that we're

00:02:29,050 --> 00:02:32,080
wanting to just do build fill rolls
through test driven development; well we

00:02:32,080 --> 00:02:37,860
do want to build fill rolls through test driven development so here we are over in the test system and we want

00:02:37,860 --> 00:02:47,020
to make a test so test 01 is simply bowl one now what are we... how are we gonna do this? We need to

00:02:47,020 --> 00:02:50,590
call score display fill rolls but it's
not a static so we have to instantiate

00:02:50,590 --> 00:02:56,770
score display, so you may be tempted to
go score display sd for example equals

00:02:56,770 --> 00:03:01,959
a new score display and then put some
brackets and try and instantiate it like that

00:03:01,959 --> 00:03:05,470
the test will be ok, it'll complain that
it's never used but we could go score

00:03:05,470 --> 00:03:09,970
display dot fill rolls and we could
pass in some - I don't know - new list of integers

00:03:09,970 --> 00:03:11,959
like that some empty list

00:03:11,959 --> 00:03:18,390
ok and as long as we have a semicolon on
the end that all looks ok and checks out

00:03:18,390 --> 00:03:24,150
now we go over to unity and we try and
run it, and we even get the failing test

00:03:24,150 --> 00:03:28,950
or in this case we get a passing test
because we haven't made an assertation

00:03:28,950 --> 00:03:32,700
but regardless we get the following: you
were trying to create a mono behavior

00:03:32,700 --> 00:03:36,709
using the new keyword this is not
allowed, and if you go into the error you can read more

00:03:36,709 --> 00:03:40,440
mono behaviors can only be added using add
component alternatively your script can

00:03:40,440 --> 00:03:44,959
inherit from a scriptable object or no
base class at all. Right so we've done

00:03:44,959 --> 00:03:50,320
script inheriting from no base class at
all before but you'd be quite tempted

00:03:50,320 --> 00:03:54,519
here to go down the route of trying to add
components and stuff, you might try and create a

00:03:54,519 --> 00:03:58,090
GameObject instead of a score display
here and then you might try and build it up

00:03:58,090 --> 00:04:01,850
like you would in the inspector and then add a
score display component to it and you'll

00:04:01,850 --> 00:04:05,549
find your hierarchy starts filling up
with objects; no no no don't want to do it, you don't

00:04:05,549 --> 00:04:09,780
want to try and directly test mono
behaviors like this, that's the whole

00:04:09,780 --> 00:04:13,400
point of this lecture is to tell
you that that is a bit of a no-no

00:04:13,400 --> 00:04:17,430
So that is not what we want to do. So
what we're gonna do is write an auxiliary method called

00:04:17,430 --> 00:04:22,449
format rolls and that is gonna take in
the list of rolls and it is going to

00:04:22,449 --> 00:04:27,830
return you a string and then each
character of the string is going to be a

00:04:27,830 --> 00:04:32,320
one-to-one mapping with the boxes that
were gonna be entering the score into

00:04:32,320 --> 00:04:36,289
these 21 boxes in our UI down here,

00:04:36,289 --> 00:04:40,620
OK? So it's going to be a one-to-one
mapping between each of these bowl boxes

00:04:40,620 --> 00:04:46,470
and the string that comes back from the
static format roles so that's how we're

00:04:46,470 --> 00:04:50,669
gonna do things and then it's going to
be a hell of a lot easier to reason about

00:04:50,669 --> 00:04:55,340
and to test so we need to make this
static string format roll, so go ahead

00:04:55,340 --> 00:05:03,590
and do that now static, string is the
return type; format rolls

00:05:03,590 --> 00:05:07,530
taking in this list of integers rolls
like this

00:05:07,530 --> 00:05:15,380
okay and then how's format rolls going
to work? Well, that is the however many thousand

00:05:15,380 --> 00:05:18,820
dollar question, actually your code that
you're gonna be writing in the test is

00:05:18,820 --> 00:05:22,320
gonna go here so it's clearly going to
start with an empty string so we're gonna

00:05:22,320 --> 00:05:27,960
have string output or something like
that, roll string output will do equals

00:05:27,960 --> 00:05:32,380
some empty string and then we're
going to return the output at some point

00:05:32,380 --> 00:05:36,090
right, but you are going to have to write that code in
the next video; but for now we need to

00:05:36,090 --> 00:05:40,960
know had to call format rolls, so if
you're confident go ahead and make

00:05:40,960 --> 00:05:44,320
format rolls now, it's only three lines, if
you're not then I'm going to do one more

00:05:44,320 --> 00:05:48,210
thing for you to give you a very big leg
up which is I'm gonna write public void

00:05:48,210 --> 00:05:56,080
fill frames now, which is going to take
in a list of integers called frames and

00:05:56,080 --> 00:06:00,370
that's the method that's simply going to
go into the UI and pop into all of these frame

00:06:00,370 --> 00:06:06,539
score boxes here; all of these guys down
there, the frame score so that's going to

00:06:06,539 --> 00:06:14,370
be a pretty simple for loop; for int i equals 0 so in a for loop you define the iterator first

00:06:14,370 --> 00:06:19,419
so it's integer i and it starts at zero
then a semicolon and then you go I is less

00:06:19,419 --> 00:06:24,270
than what well its gonna be in this case
frames . count; however many

00:06:24,270 --> 00:06:28,240
frames we can count less than, not less
than or equal to, and what you do each time you

00:06:28,240 --> 00:06:34,720
iterate the i plus one and then what we do?
Well we go to frame texts. What are

00:06:34,720 --> 00:06:40,540
frame texts? These are these guys down
here these frame texts, these ten things

00:06:40,540 --> 00:06:42,000
So frame texts, which

00:06:42,000 --> 00:06:46,310
we have available here we we pulled it in
publicly dot text remember we need to go

00:06:46,310 --> 00:06:49,870
to the text element of that but it's not
gonna let us go to text until we say

00:06:49,870 --> 00:06:54,910
which member, which element it's the i-th
element. Now we can go to it's dot text and

00:06:54,910 --> 00:06:59,780
it's going to equal frames at the i-th
element, but frames at the i-th elements

00:06:59,780 --> 00:07:04,510
an integer so we need to make it a
string. OK, where would we call fill

00:07:04,510 --> 00:07:08,220
frames we'd call it from game manager
it will fill the rolls and it will also

00:07:08,220 --> 00:07:16,280
go score display dot fill frames and
it'll pass in what? Well, its gonna pass

00:07:16,280 --> 00:07:21,620
in the cumulative frame score isn't it? If you
remember look at a bowling card, bowling

00:07:21,620 --> 00:07:27,020
scoring and just look at any card and you'll
see that the scores here on the frames

00:07:27,020 --> 00:07:31,710
are cumulative, they're adding up. So we've got a
method for that that makes life very

00:07:31,710 --> 00:07:37,160
easy, we have a static method called
score master dot score cumulative and then

00:07:37,160 --> 00:07:41,830
all we need to pass into that is bowls. Now
I'm getting a bit fed up of bowls

00:07:41,830 --> 00:07:44,380
and rolls being different so I'm gonna go
to the top of this method and

00:07:44,380 --> 00:07:52,510
rename bowls to rolls, so we fill the
rolls which are these guys here the X, the 9,

00:07:52,510 --> 00:07:58,000
the dash and then we fill the frames; and
in the score display there's the fill

00:07:58,000 --> 00:08:03,110
frames film rolls isn't working yet so
let's get the fill rolls out line code

00:08:03,110 --> 00:08:07,370
working and that's your challenge; and this
will make you stop and think about the

00:08:07,370 --> 00:08:12,220
architecture I've just created so public void fill
rolls list of int, calls format roles

00:08:12,220 --> 00:08:15,770
and iterates the return string should be
just three lines of code very similar to

00:08:15,770 --> 00:08:19,910
what we've just written for fill frames. Have
a go, write that simple bit of code now

00:08:19,910 --> 00:08:22,610
to iterate through the string and
put it in the right boxes and also you on

00:08:22,610 --> 00:08:26,689
the other side.

00:08:26,689 --> 00:08:32,169
Cool, welcome back, so I'm actually it's so similar to
this code that I'm nearly gonna cut

00:08:32,169 --> 00:08:37,750
and paste it but we need to first start off
with a new output,so it's a string output

00:08:37,750 --> 00:08:49,060
equals go get it from format rolls with
rolls, ok so go get the answer from

00:08:49,060 --> 00:08:52,730
format rolls or we can just in line this
we might do that in a second so what's

00:08:52,730 --> 00:08:53,209
the loop?

00:08:53,209 --> 00:09:01,069
It's a very similar thing, for int i
equals zero, gonna be consistent with

00:09:01,069 --> 00:09:09,360
my spacing, semicolon, i is less than what
well its gonna be the output dot count

00:09:09,360 --> 00:09:17,370
the format rolls dot count, right? So output
. length, so cos we're going to be using

00:09:17,370 --> 00:09:29,310
this twice who won't re-inline it, and
then we i plus plus don't we. OK so that's that

00:09:29,310 --> 00:09:32,519
and then for each of these times we
access the roll text, remember what the

00:09:32,519 --> 00:09:37,709
roll texts are they're these guys here on the
right, all these elements and then at element i

00:09:37,709 --> 00:09:42,750
remember dot text equals what?

00:09:42,750 --> 00:09:48,170
Well it equals the output or I don't like
output in two places like this in case we

00:09:48,170 --> 00:09:55,939
get a scpe clash so I'm gonna rename it just
here to score string and then score

00:09:55,939 --> 00:10:01,620
string at element i and then element i as a
character so it's toString. OK, so we've

00:10:01,620 --> 00:10:05,139
pulled off the i-th character from the
score string that's come out, we've converted it

00:10:05,139 --> 00:10:10,279
into a string and popped it straight in
the box. So this should work now apart

00:10:10,279 --> 00:10:14,309
from the fact that obviously we won't
get any rolls, but we will get frames if

00:10:14,309 --> 00:10:16,850
it's coded right, so if you've done it
right now and you've passed this

00:10:16,850 --> 00:10:21,540
challenge then your frame scores will
update when we bowl but your roll

00:10:21,540 --> 00:10:25,470
score card won't get because that's gonna
be the subject of the next video it's a

00:10:25,470 --> 00:10:29,980
fairly major bit of TDD to make that
work unfortunately, because we have to translate

00:10:29,980 --> 00:10:34,660
13 to 21 bowls into precisely 21 bowls.

00:10:34,660 --> 00:10:39,839
So we bowl twice, we scored eight we
should get a frame score of 8, we do so it

00:10:39,839 --> 00:10:42,769
looks like the frame's working and the
subject to the next video we'll get the

00:10:42,769 --> 00:10:46,889
individual scores working so as a recap
for you cause there's quite a lot to think about

00:10:46,889 --> 00:10:51,620
in this video we've understood why mono behavior
classes are hard to test the editor

00:10:51,620 --> 00:10:55,220
tells you that you can't create them, you
can construct them with a new; if we do

00:10:55,220 --> 00:10:58,910
start constructing objects then it's going to
start filling up your hierarchy with

00:10:58,910 --> 00:11:02,560
editor time created rubbish, just don't
do it. We saw how to create a

00:11:02,560 --> 00:11:06,540
testable static helper method that
string based method and then we've made

00:11:06,540 --> 00:11:10,300
our testing structure... although have we,
let's have a look

00:11:10,300 --> 00:11:14,329
score display test not quite yet, so let
me just get you prepared for the next

00:11:14,329 --> 00:11:20,310
video's challenge by helping you with the
score display test. We're gonna do the same

00:11:20,310 --> 00:11:25,500
thing as we did before, we're gonna say
there's an integer array of rolls and maybe

00:11:25,500 --> 00:11:29,000
it just contains one in this case, and
then we're going to look at the string

00:11:29,000 --> 00:11:34,610
which is the rolls string, and say well
that that must equal one in this case and

00:11:34,610 --> 00:11:47,529
then we're going to go the assert are
equal rolls string comma what? Well, comma score display

00:11:47,529 --> 00:11:54,899
dot format rolls, now why can't I see score
display dot format rolls? Because it's

00:11:54,899 --> 00:11:56,949
not public

00:11:56,949 --> 00:12:06,029
OK, score display dot format rolls passing in what? Rolls . to list, cos remember it needs a list; and that's a

00:12:06,029 --> 00:12:09,170
great linq method that to list is coming
off linq here which is pretty handy

00:12:09,170 --> 00:12:13,250
three closing braces and that is the
testing structure you're gonna need for all your

00:12:13,250 --> 00:12:19,439
tests, you define your list of rolls just
like we did before in our score master

00:12:19,439 --> 00:12:23,880
test, then you're gonna make your roll
string should be like 1,2

00:12:23,880 --> 00:12:32,030
X, space, you know, 1, / whatever one character
per box that we're gonna fill it into and then

00:12:32,030 --> 00:12:35,310
you'll always do this same line; so that's
the structure of your test, let's make sure that that

00:12:35,310 --> 00:12:43,430
test fails which is where we want to
start, and many to run selected there you

00:12:43,430 --> 00:12:46,040
go and that's a failing tests you get an
empty string and it's not surprising

00:12:46,040 --> 00:12:50,310
because the helper method the format rolls does nothing. Cool, so in the next video I'm going to be

00:12:50,310 --> 00:12:53,480
challenging you to do that, so if you want a break go
take a break and in the next

00:12:53,480 --> 00:12:56,730
video it's going to be write format
rolls using test driven development

00:12:56,730 --> 00:12:57,750
I'll see you soon.


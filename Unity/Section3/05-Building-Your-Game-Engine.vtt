WEBVTT

1
00:00:03.000 --> 00:00:06.000
Hey welcome back! So, in this video we are

2
00:00:06.000 --> 00:00:09.000
going to look at the structure of our little text

3
00:00:09.000 --> 00:00:12.000
adventure engine. We're going to look at something called an enum

4
00:00:12.000 --> 00:00:15.000
or enumerated type, and I'm going to challenge you, at the end,

5
00:00:15.000 --> 00:00:18.000
to apply your knowledge by completing the story.

6
00:00:18.000 --> 00:00:21.000
And I hope you write your own story, actually. it would be fantastic if

7
00:00:21.000 --> 00:00:24.000
you could use different story text than we

8
00:00:24.000 --> 00:00:27.000
are using. So, what is the structure

9
00:00:27.000 --> 00:00:30.000
of our game engine? I'll just tell you and then I'll show you

10
00:00:30.000 --> 00:00:33.000
and then I'll remind you. So, don't expect to

11
00:00:33.000 --> 00:00:36.000
understand this straight away, but the Update function is going to keep the game

12
00:00:36.000 --> 00:00:39.000
in the right state. We're going to write separate state methods.

13
00:00:39.000 --> 00:00:42.000
Their job will be to set the text and respond to keys,

14
00:00:42.000 --> 00:00:45.000
and we'll have one of those per state i.e., eight

15
00:00:45.000 --> 00:00:48.000
state methods. So, just to put that in context, what

16
00:00:48.000 --> 00:00:51.000
on earth does that mean? Let's dive into our code,

17
00:00:51.000 --> 00:00:54.000
go into TextController.cs, and this is how it

18
00:00:54.000 --> 00:00:57.000
is, at the moment. Let's start thinking about how we want it to be.

19
00:00:57.000 --> 00:01:00.000
Right, so firstly we need

20
00:01:00.000 --> 00:01:03.000
to talk about what this Update

21
00:01:03.000 --> 00:01:06.000
method is going to do, and it's not going to

22
00:01:06.000 --> 00:01:09.000
be setting any text. Instead it's going to keep the game in a particular

23
00:01:09.000 --> 00:01:12.000
state. So, let's make the first of our state

24
00:01:12.000 --> 00:01:15.000
methods first. So void, each one of these is going to be void, it

25
00:01:15.000 --> 00:01:18.000
returns nothing. I'm going to prefix it with state,

26
00:01:18.000 --> 00:01:21.000
and then, I'm going to call the first one cell.

27
00:01:21.000 --> 00:01:24.000
OK, so this is the method that handles what happens in the

28
00:01:24.000 --> 00:01:27.000
cell state. So, this is where we can just take our text,

29
00:01:27.000 --> 00:01:30.000
that we used to have in the Update for testing, and pop it down

30
00:01:30.000 --> 00:01:33.000
there. I'm going to fix the indentation,

31
00:01:33.000 --> 00:01:36.000
so it looks nice, and that's that! Great!

32
00:01:36.000 --> 00:01:39.000
I said the second thing that a

33
00:01:39.000 --> 00:01:42.000
state method was going to do was to handle key presses. Well, look

34
00:01:42.000 --> 00:01:45.000
we have some code here, which we wrote before, so let's use that.

35
00:01:45.000 --> 00:01:48.000
What are the key presses you can make

36
00:01:48.000 --> 00:01:51.000
from the cell? Well, let's take a look!

37
00:01:51.000 --> 00:01:54.000
S for Sheets, for example, and that goes to sheets_0,

38
00:01:54.000 --> 00:01:57.000
so let's make that happen.

39
00:01:57.000 --> 00:02:00.000
If (Input.GetKeyDown

40
00:02:00.000 --> 00:02:03.000
is (KeyCode.S)) then what? Well, then we

41
00:02:03.000 --> 00:02:06.000
set the state. So, now we need to think about what setting

42
00:02:06.000 --> 00:02:09.000
the state means, so this is where we need something called

43
00:02:09.000 --> 00:02:12.000
enum. We need this enumerated type to store our

44
00:02:12.000 --> 00:02:15.000
state. We could just store the state in numbers, it's not very nice though,

45
00:02:15.000 --> 00:02:18.000
because we could easily lose track of our numbers, so why don't we

46
00:02:18.000 --> 00:02:21.000
store them in English.

47
00:02:21.000 --> 00:02:24.000
C# has something called an enum.

48
00:02:24.000 --> 00:02:27.000
The Microsoft docs define it like this: "The enum keyword is

49
00:02:27.000 --> 00:02:30.000
used to declare an enumeration, a disitinct type that consists of a set

50
00:02:30.000 --> 00:02:33.000
of named consatants called the enumerator list."

51
00:02:33.000 --> 00:02:36.000
Let's take a look at their documentation and see how that actually pans out.

52
00:02:36.000 --> 00:02:39.000
Here you go, you've got a great example here with days

53
00:02:39.000 --> 00:02:42.000
of the week, Saturday, Sunday Monday, etc., a

54
00:02:42.000 --> 00:02:45.000
simple list of constants. So, let's copy that code from

55
00:02:45.000 --> 00:02:48.000
Microsoft documentation, or you could just type

56
00:02:48.000 --> 00:02:51.000
what you see when I get that and let's start

57
00:02:51.000 --> 00:02:54.000
making this happen. Now, where in this

58
00:02:54.000 --> 00:02:57.000
script are we going to be making this enum

59
00:02:57.000 --> 00:03:00.000
variable? Well, it's going to need to be an instance

60
00:03:00.000 --> 00:03:03.000
variable, up here at the top at this level of

61
00:03:03.000 --> 00:03:06.000
scope, because we're going to want to set it in several

62
00:03:06.000 --> 00:03:09.000
different places, in several different sub-methods. So,

63
00:03:09.000 --> 00:03:12.000
we define the enum like this. Of course, it's not called Days,

64
00:03:12.000 --> 00:03:15.000
it's called States, and it's not got these members, it's got

65
00:03:15.000 --> 00:03:18.000
other members that include things like cell,

66
00:03:18.000 --> 00:03:21.000
mirror, etc. And we

67
00:03:21.000 --> 00:03:24.000
want to define explicitly whether it's public or private, and

68
00:03:24.000 --> 00:03:27.000
I want it to be private, because we just don't need access to it outside

69
00:03:27.000 --> 00:03:30.000
of this method. So, just go ahead now and

70
00:03:30.000 --> 00:03:33.000
fill in the rest of your states, from the Game

71
00:03:33.000 --> 00:03:36.000
Design Doc. Cell, Mirror, and then what else do we

72
00:03:36.000 --> 00:03:39.000
have? We have sheets_0 and lock_0.

73
00:03:42.000 --> 00:03:45.000
And then, on the other side of the

74
00:03:45.000 --> 00:03:48.000
chasm, we have cell_0, sheets_1, lock_1.

75
00:03:54.000 --> 00:03:57.000
And finally, freedom}; OK fantastic!

76
00:03:57.000 --> 00:04:00.000
So, therefore we have setup the enum there, but we haven't

77
00:04:00.000 --> 00:04:03.000
yet actually made a variable, somewhere we can actually

78
00:04:03.000 --> 00:04:06.000
store the current state. So, how are we going to do

79
00:04:06.000 --> 00:04:09.000
that? Well, it's going to be private,

80
00:04:09.000 --> 00:04:12.000
and it's going to be

81
00:04:12.000 --> 00:04:15.000
of type States. Remember, we go

82
00:04:15.000 --> 00:04:18.000
the type and then the name of our variable, and then,

83
00:04:18.000 --> 00:04:21.000
it's myState. Alright, so we've made a variable called

84
00:04:21.000 --> 00:04:24.000
state that can store any one of these states. So, let's test that, let's

85
00:04:24.000 --> 00:04:27.000
see how it works. We don't need "Hello world!" in the Start

86
00:04:27.000 --> 00:04:30.000
anymore, but what would be nice, in the Start, is to set the state wouldn't it.

87
00:04:30.000 --> 00:04:33.000
And what is my state, at the Start? Well,

88
00:04:33.000 --> 00:04:36.000
myState = States.

89
00:04:36.000 --> 00:04:39.000
to access the list and then you've got a dropdown list. Wonderful!

90
00:04:39.000 --> 00:04:42.000
States.cell; Great!

91
00:04:42.000 --> 00:04:45.000
Now, we said the Update function was going to log out what state

92
00:04:45.000 --> 00:04:48.000
it's in and make the state changes, so let's start

93
00:04:48.000 --> 00:04:51.000
by logging out what state it's in. print, what are you going to print?

94
00:04:51.000 --> 00:04:54.000
Have a think. If we're going to log the state to the

95
00:04:54.000 --> 00:04:57.000
Console, what would you print? myState! Do you want to

96
00:04:57.000 --> 00:05:00.000
try it? Hopefully, it'll just print

97
00:05:00.000 --> 00:05:03.000
"cell", it's going to be pretty boring but let's just do it. Play,

98
00:05:03.000 --> 00:05:06.000
prison, Console, cell.

99
00:05:06.000 --> 00:05:09.000
Cel cell cell cell cell, every frame. I have collapse on,

100
00:05:09.000 --> 00:05:12.000
in my Console. If you're seeing it this way, it's because you don't have

101
00:05:12.000 --> 00:05:15.000
Collapse on. Either way, whatever tickles your fancy.

102
00:05:15.000 --> 00:05:18.000
Fantastic! So, on Start we set the state to cell,

103
00:05:18.000 --> 00:05:21.000
the Update method just prints the state, the state_cell method

104
00:05:21.000 --> 00:05:24.000
never gets called, so let's change that. Let's make the state_cell

105
00:05:24.000 --> 00:05:27.000
get called. So, what we're saying is

106
00:05:27.000 --> 00:05:30.000
if (myState ==,

107
00:05:30.000 --> 00:05:33.000
it's a comparison, two equals for a comparison.

108
00:05:33.000 --> 00:05:36.000
== States.cell)

109
00:05:36.000 --> 00:05:39.000
Then, what are we going to do?

110
00:05:39.000 --> 00:05:42.000
Well, if we find ourselves in the cell state, we just call

111
00:05:42.000 --> 00:05:45.000
state_cell, the method, and let it

112
00:05:45.000 --> 00:05:48.000
deal with what happens. And we jump down here and it sets the

113
00:05:48.000 --> 00:05:51.000
text and listens for the key S. What would happen if the

114
00:05:51.000 --> 00:05:54.000
Key S got pushed? Well, then the state would change

115
00:05:54.000 --> 00:05:57.000
right. myState = States

116
00:05:57.000 --> 00:06:00.000
with a capital S

117
00:06:00.000 --> 00:06:03.000
.what? Well, we've just pushed...

118
00:06:03.000 --> 00:06:06.000
Let's take a look at the GDD. We just pushed S, it takes us to sheets_0.

119
00:06:06.000 --> 00:06:09.000
.sheets_0 perfect!

120
00:06:09.000 --> 00:06:12.000
So, can you see what's happening here?

121
00:06:12.000 --> 00:06:15.000
At the Start, just once, we set it to the cell state.

122
00:06:15.000 --> 00:06:18.000
The Update function, every single frame., asks the question what state am I in?

123
00:06:18.000 --> 00:06:21.000
If we're in the cell state, it goes to cell, else

124
00:06:21.000 --> 00:06:24.000
if... Now, you can just copy.

125
00:06:24.000 --> 00:06:27.000
(myState == States

126
00:06:27.000 --> 00:06:30.000
dot what? sheets_0)

127
00:06:30.000 --> 00:06:33.000
Well then, what are we going to do? Firstly, we're going to keep track of our brackets.

128
00:06:33.000 --> 00:06:36.000
That's why this indentation is so important. And we're going to call a new

129
00:06:36.000 --> 00:06:39.000
method that doesn't exist yet, called state_

130
00:06:39.000 --> 00:06:42.000
sheets_0();

131
00:06:42.000 --> 00:06:45.000
And that method is going to handle

132
00:06:45.000 --> 00:06:48.000
what happens in the state sheets_0 state.

133
00:06:48.000 --> 00:06:51.000
So, let's make that method, copy you're state_cell () method.

134
00:06:51.000 --> 00:06:54.000
There it is! Different

135
00:06:54.000 --> 00:06:57.000
text of course. So, in sheet_0 what's the deal?

136
00:06:57.000 --> 00:07:00.000
I've pre-prepared a little bit of text, and I really encourage you

137
00:07:00.000 --> 00:07:03.000
to use a completely different story in your game, but

138
00:07:03.000 --> 00:07:06.000
what I'm going to say is: "You can't believe you sleep in these things, surely

139
00:07:06.000 --> 00:07:09.000
it's"... Ooh, hang on! I'm having

140
00:07:09.000 --> 00:07:12.000
strangenesses. Hold on one second. Let's try again!

141
00:07:12.000 --> 00:07:15.000
Whoah, having very strangenesses!

142
00:07:15.000 --> 00:07:18.000
OK, give me just a second, while Mono decides to

143
00:07:18.000 --> 00:07:21.000
settle down. [Laughs] OK, it started displaying

144
00:07:21.000 --> 00:07:24.000
properly now. OK, so we're back to saying:

145
00:07:24.000 --> 00:07:27.000
"You can't believe you sleep in these things. Surely it's time somebody changed them. The pleasures of

146
00:07:27.000 --> 00:07:30.000
prison life I guess". "Press R to Return

147
00:07:30.000 --> 00:07:33.000
to roaming your cell." which was the only

148
00:07:33.000 --> 00:07:36.000
transition we allowed, so it's (KeyCode.R). And what would the state be?

149
00:07:36.000 --> 00:07:39.000
Well, check the State Diagram if you need to. Cell!

150
00:07:39.000 --> 00:07:42.000
So, we go to State.cell; OK, I think

151
00:07:42.000 --> 00:07:45.000
we have our first complete loop now!

152
00:07:45.000 --> 00:07:48.000
state_sheets_0()! OK,

153
00:07:48.000 --> 00:07:51.000
we need to have the method name called right.

154
00:07:51.000 --> 00:07:54.000
OK, so if all is well, this thing should,

155
00:07:54.000 --> 00:07:57.000
when you save, all be the right sensible colors.

156
00:07:57.000 --> 00:08:00.000
And you're handling the

157
00:08:00.000 --> 00:08:03.000
cell state, the sheets_0 state, and you've got different text

158
00:08:03.000 --> 00:08:06.000
for those two, and different keyboard responses. So, we

159
00:08:06.000 --> 00:08:09.000
should at least here be able to go to the sheets and back to the cell. Let's

160
00:08:09.000 --> 00:08:12.000
see if it works! Play,

161
00:08:12.000 --> 00:08:15.000
watch the Console, we're in the cell. Push S for Sheets.

162
00:08:15.000 --> 00:08:18.000
We go to sheets_0, the text changes and

163
00:08:18.000 --> 00:08:21.000
hopefully it's listening for R. We push R and we go back to the cell.

164
00:08:21.000 --> 00:08:24.000
Perfect! You can see that this is basically the

165
00:08:24.000 --> 00:08:27.000
fundamentals of the whole game! We can now transition state and

166
00:08:27.000 --> 00:08:30.000
change the text. That's huge congratulations! That is

167
00:08:30.000 --> 00:08:33.000
really really cool getting that far, because you actually,

168
00:08:33.000 --> 00:08:36.000
if you're ambitious, could stop watching this video right now,

169
00:08:36.000 --> 00:08:39.000
and just using this structure and filling out more

170
00:08:39.000 --> 00:08:42.000
and more state methods and more and more if

171
00:08:42.000 --> 00:08:45.000
statements in here, you could write a pretty complicated

172
00:08:45.000 --> 00:08:48.000
adventure game. You could imagine the State Diagram continuing off to the

173
00:08:48.000 --> 00:08:51.000
right. Just be careful, if you do decide to go off on your own

174
00:08:51.000 --> 00:08:54.000
right now, that you have quite a few of these kind of single

175
00:08:54.000 --> 00:08:57.000
choking points like mirror to cell mirror,

176
00:08:57.000 --> 00:09:00.000
so that your diagram doesn't explode, otherwise you

177
00:09:00.000 --> 00:09:03.000
can end up with so many states and so many interactions between them

178
00:09:03.000 --> 00:09:06.000
that you just go insane very very quickly.

179
00:09:06.000 --> 00:09:09.000
But if you want to see me finish this game, literally,

180
00:09:09.000 --> 00:09:12.000
go ahead and watch the end of this video. I am simply going to

181
00:09:12.000 --> 00:09:15.000
start fleshing out these methods,

182
00:09:15.000 --> 00:09:18.000
copying and pasting some of the story code, because I don't

183
00:09:18.000 --> 00:09:21.000
want you to sit and watch me type the story code. So,

184
00:09:21.000 --> 00:09:24.000
here we go! Let me go through it! As I said, if you know

185
00:09:24.000 --> 00:09:27.000
what is going on, just stop watching the video now. I'm really not going to do anything

186
00:09:27.000 --> 00:09:30.000
that anybody's going to consider exciting here.

187
00:09:30.000 --> 00:09:33.000
OK cool! So, let's go ahead

188
00:09:33.000 --> 00:09:36.000
and get on with what the next

189
00:09:36.000 --> 00:09:39.000
state in here is going to get. I'm just going to copy and paste actually.

190
00:09:39.000 --> 00:09:42.000
else if

191
00:09:42.000 --> 00:09:45.000
and sheets_0.

192
00:09:45.000 --> 00:09:48.000
Where do I want to go to next? Let's look and see if we can go into the lock_0

193
00:09:48.000 --> 00:09:51.000
state, for example.

194
00:09:51.000 --> 00:09:54.000
lock_0) OK. And then, I'm going to need

195
00:09:54.000 --> 00:09:57.000
to call a method that doesn't exist yet, being very careful with my brackets.

196
00:10:00.000 --> 00:10:03.000
It's state_lock_0

197
00:10:03.000 --> 00:10:06.000
method brackets

198
00:10:06.000 --> 00:10:09.000
closed, semicolon. Sort your spelling

199
00:10:09.000 --> 00:10:12.000
out. OK, the only thing is that

200
00:10:12.000 --> 00:10:15.000
state_lock0(); doesn't exist yet, it's not surprising

201
00:10:15.000 --> 00:10:18.000
So, I'm going to copy what we had,

202
00:10:18.000 --> 00:10:21.000
on the sheets. Actually, I'm just going to bring my

203
00:10:21.000 --> 00:10:24.000
lock_0 solution straight in.

204
00:10:24.000 --> 00:10:27.000
Save you watching me type too much

205
00:10:27.000 --> 00:10:30.000
stuff. Here you go! lock_0, it has some new text,

206
00:10:30.000 --> 00:10:33.000
which you're welcome to read at your leisure, when you test the game.

207
00:10:33.000 --> 00:10:36.000
By the way, if you don't want to go through and do all of this, on the next lecture,

208
00:10:36.000 --> 00:10:39.000
we're going to give you the code to download.

209
00:10:39.000 --> 00:10:42.000
So, you can go ahead and download the TextController.cs, which has all of this

210
00:10:42.000 --> 00:10:45.000
in it if you don't really fancy typing it all out. That's one option, if you

211
00:10:45.000 --> 00:10:48.000
want to reproduce our game. Another option is you just

212
00:10:48.000 --> 00:10:51.000
carry on yourself now, and make an awesome story, and then,

213
00:10:51.000 --> 00:10:54.000
rejoin me on the video where I show you how to

214
00:10:54.000 --> 00:10:57.000
make this buildable for the web and share it with your friends.

215
00:10:57.000 --> 00:11:00.000
Alright, but if you were to look at the lock, you could return to the

216
00:11:00.000 --> 00:11:03.000
cell, so that's a lock_1. And then, I

217
00:11:03.000 --> 00:11:06.000
basically just got a whole bunch of others, which I'm going to

218
00:11:06.000 --> 00:11:09.000
just start putting in. So, lock_0 would be another one.

219
00:11:09.000 --> 00:11:12.000
For example, we have lock_1. What's lock_1? Lock_1 is

220
00:11:12.000 --> 00:11:15.000
when we look at the lock and have the mirror in hand.

221
00:11:15.000 --> 00:11:18.000
So, that would be what happened at lock_1, and it give you

222
00:11:18.000 --> 00:11:21.000
the option to get to freedom. What else have we got?

223
00:11:21.000 --> 00:11:24.000
We've got sheets_1, which I think

224
00:11:24.000 --> 00:11:27.000
we haven't dealt with yet. I want to stick that straight under sheets,

225
00:11:27.000 --> 00:11:30.000
and that says something slightly different. I'm

226
00:11:30.000 --> 00:11:33.000
using some subtlety and saying different things at each

227
00:11:33.000 --> 00:11:36.000
stage, because I think that's really cool!

228
00:11:36.000 --> 00:11:39.000
The other thing that I'm doing is I'm

229
00:11:39.000 --> 00:11:42.000
slightly changing the syntax,

230
00:11:42.000 --> 00:11:45.000
in places, while I'm just bringing up the...

231
00:11:45.000 --> 00:11:48.000
Whereas we had the curly brackets, like this,

232
00:11:48.000 --> 00:11:51.000
and then, open

233
00:11:51.000 --> 00:11:54.000
curly brackets, indent, myState =

234
00:11:54.000 --> 00:11:57.000
closed curly brackets. It takes up a lot of lines doing that! So, one optoin

235
00:11:57.000 --> 00:12:00.000
for you is to just do it the way that

236
00:12:00.000 --> 00:12:03.000
I've done here. It's just a white space change,

237
00:12:03.000 --> 00:12:06.000
so that they all line up. So, you see what I'm saying. You go

238
00:12:06.000 --> 00:12:09.000
from myState, indented there, you just delete it back, and then,

239
00:12:09.000 --> 00:12:12.000
tab in here, so that you end up

240
00:12:12.000 --> 00:12:15.000
with a slightly more readable list.

241
00:12:15.000 --> 00:12:18.000
So, you might well want to do that, and you can do the same

242
00:12:18.000 --> 00:12:21.000
with your inputs, exactly the same refactoring.

243
00:12:21.000 --> 00:12:24.000
you're just going from that

244
00:12:24.000 --> 00:12:27.000
back to that, basically. It's a very

245
00:12:27.000 --> 00:12:30.000
minor, very minor, thing. So, we have...

246
00:12:30.000 --> 00:12:33.000
What do we have, sheets_0, sheets_1? Now, one of the easiest

247
00:12:33.000 --> 00:12:36.000
ways to keep track of what's going on here is

248
00:12:36.000 --> 00:12:39.000
to continue to fill out your Update function.

249
00:12:39.000 --> 00:12:42.000
In fact, fill., out your Update function first, because what's going to

250
00:12:42.000 --> 00:12:45.000
happen is the methods are going to go red, when they don't exist,

251
00:12:45.000 --> 00:12:48.000
and that'll tell you what methods you need to write. So,

252
00:12:48.000 --> 00:12:51.000
I'm going to refactor the Update function in the same way. I'm going to delete back,

253
00:12:51.000 --> 00:12:54.000
like so,

254
00:12:54.000 --> 00:12:57.000
so that I have single lines for each if statement.

255
00:12:57.000 --> 00:13:00.000
Just deleting back.

256
00:13:00.000 --> 00:13:03.000
Remember the white space doesn't matter between

257
00:13:03.000 --> 00:13:06.000
our instructions.

258
00:13:06.000 --> 00:13:09.000
OK, so it's going to be that format, and what I'm going to do is tab in

259
00:13:09.000 --> 00:13:12.000
about this far, for the

260
00:13:12.000 --> 00:13:15.000
code blocks. So, that's

261
00:13:15.000 --> 00:13:18.000
so that they just line up and they're really easy to see.

262
00:13:18.000 --> 00:13:21.000
Alright, so you can imagine with very little imagination. I want you

263
00:13:21.000 --> 00:13:24.000
to do that for the rest of the

264
00:13:24.000 --> 00:13:27.000
states, and if you do that you'll get this: sheet_0,

265
00:13:27.000 --> 00:13:30.000
sheets_1, yada yada yada. And this is what

266
00:13:30.000 --> 00:13:33.000
I mean about it going red. You can see that the three functions we still need to defin

267
00:13:33.000 --> 00:13:36.000
are mirror, so let's do that now.

268
00:13:36.000 --> 00:13:39.000
And the moment

269
00:13:39.000 --> 00:13:42.000
I put a mirror function in, again you're going to put your

270
00:13:42.000 --> 00:13:45.000
story in, aren't you? You're going to be nice and creative for us.

271
00:13:45.000 --> 00:13:48.000
Yeah, I've got a mirror function in and I've got my if statements in this new

272
00:13:48.000 --> 00:13:51.000
format. Then, that's no longer red

273
00:13:51.000 --> 00:13:54.000
but cell_mirror is. The difference being you're back in your cell

274
00:13:54.000 --> 00:13:57.000
holding onto the mirror, and it's a slightly different situation. I

275
00:13:57.000 --> 00:14:00.000
encourage you to use a different story text, on every single

276
00:14:00.000 --> 00:14:03.000
screen, because I think it add much more richness

277
00:14:03.000 --> 00:14:06.000
to the game. So

278
00:14:06.000 --> 00:14:09.000
for example, you're still in your cell and you still want to escape,

279
00:14:09.000 --> 00:14:12.000
etc. In my opinion, that's

280
00:14:12.000 --> 00:14:15.000
nice, that just adds some richness. And then, the final

281
00:14:15.000 --> 00:14:18.000
one you're going to need is a freedom state, which is

282
00:14:18.000 --> 00:14:21.000
going to look something like... Let's put it at the bottom, it just makes

283
00:14:21.000 --> 00:14:24.000
sense. The order of these, of course, doesn't matter, but

284
00:14:24.000 --> 00:14:27.000
it is nice to have some sort of logical order

285
00:14:27.000 --> 00:14:30.000
to them. So, with the wind

286
00:14:30.000 --> 00:14:33.000
that's it! Let's test it, that's what I want you to do next, is just

287
00:14:33.000 --> 00:14:36.000
test your game. So,

288
00:14:36.000 --> 00:14:39.000
run! "You are in a prison

289
00:14:39.000 --> 00:14:42.000
cell, and you want to escape." So, let's look at the Sheets, so we go to sheets_0.

290
00:14:42.000 --> 00:14:45.000
We can return to the cell. Good! We could

291
00:14:45.000 --> 00:14:48.000
look at the lock, L for Lock. Now, Lock is

292
00:14:48.000 --> 00:14:51.000
not working, so this is a typical kind of loop you're going to

293
00:14:51.000 --> 00:14:54.000
need to go through. Why is the lock not working?

294
00:14:54.000 --> 00:14:57.000
So, from cell I don't have the necessary

295
00:14:57.000 --> 00:15:00.000
if statement for the lock

296
00:15:00.000 --> 00:15:03.000
alright. Actually, there's three things I can

297
00:15:03.000 --> 00:15:06.000
do in the cell, so let me just put that code in here. Bang!

298
00:15:06.000 --> 00:15:09.000
S, M, and L, going to Sheets, Mirror, and Lock

299
00:15:09.000 --> 00:15:12.000
respectively OK.

300
00:15:12.000 --> 00:15:15.000
So, let's take a look! Sheets takes us

301
00:15:15.000 --> 00:15:18.000
to Sheets, Return. Lock takes us to Lock

302
00:15:18.000 --> 00:15:21.000
and Return. Mirror takes us to Mirror and Return.

303
00:15:21.000 --> 00:15:24.000
Fantastic! If we go to the Mirror and take the mirror, then

304
00:15:24.000 --> 00:15:27.000
we still want to escape. We could look at our sheets and they don't look any better,

305
00:15:27.000 --> 00:15:30.000
for having a mirror. We could look at the lock,

306
00:15:30.000 --> 00:15:33.000
and it's giving us a hint that we may be able to open it.

307
00:15:33.000 --> 00:15:36.000
We may want to return to the cell, it'd be a slightly strange thing to do,

308
00:15:36.000 --> 00:15:39.000
or we could go to the lock and then open the door.

309
00:15:39.000 --> 00:15:42.000
And then, what I've added in, at the bottom here,

310
00:15:42.000 --> 00:15:45.000
is a P to Play again.

311
00:15:45.000 --> 00:15:48.000
So, if you push P then,

312
00:15:48.000 --> 00:15:51.000
Play again goes straight back to the cell.

313
00:15:51.000 --> 00:15:54.000
P Plays again and we're back at the beginning! Fantastic,

314
00:15:54.000 --> 00:15:57.000
you have a complete loop, you have a working game! Let's

315
00:15:57.000 --> 00:16:00.000
just recap what we've actually done here!

316
00:16:00.000 --> 00:16:03.000
So, we looked at the structure of our engine. We worked out what an

317
00:16:03.000 --> 00:16:06.000
enum was, and then, you completed the story. So

318
00:16:06.000 --> 00:16:09.000
congratulations! See you soon!


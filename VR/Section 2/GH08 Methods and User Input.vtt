WEBVTT

1
00:00:00.000 --> 00:00:04.000


2
00:00:04.000 --> 00:00:08.000
Welcome!

3
00:00:08.000 --> 00:00:12.000
In this lecture, Methods and User Input, we are going to be learning

4
00:00:12.000 --> 00:00:16.000
to teach ourselves, by using the Unity documentation, and

5
00:00:16.000 --> 00:00:20.000
how to get input from the user. In order to do this, we're going to need to know

6
00:00:20.000 --> 00:00:24.000
about a little thing called methods or also known as

7
00:00:24.000 --> 00:00:28.000
functions, but we're going to be using the term methods, and we're going to be

8
00:00:28.000 --> 00:00:33.500
learning about what this Update () method is all about. So let's dive right in!

9
00:00:33.500 --> 00:00:37.500
So this is where we left off with our code, and I want to show you

10
00:00:37.500 --> 00:00:41.500
where we are in the pseudocode. So we've done a little bit of

11
00:00:41.500 --> 00:00:45.500
update location from home. We haven't actually updated the location, because

12
00:00:45.500 --> 00:00:49.500
we haven't got the input yet. So we're going to be looking at how

13
00:00:49.500 --> 00:00:53.500
to get the input, in this lecture. Now, I want to teach

14
00:00:53.500 --> 00:00:57.500
you guys to teach yourselves, essentially, because programming is so expansive that you

15
00:00:57.500 --> 00:01:01.500
could never know it all. You simply have to know how to get

16
00:01:01.500 --> 00:01:05.500
to the answer, and you know, things like Stack Overflow are great tools and

17
00:01:05.500 --> 00:01:09.500
well Google is going to be your biggest friend, so let's start right there! We want to

18
00:01:09.500 --> 00:01:13.500
know how to get input in Unity. And

19
00:01:13.500 --> 00:01:17.500
more specifically, what do we want to do? Well we want to know whether the user

20
00:01:17.500 --> 00:01:21.500
has pressed down a key in order to update

21
00:01:21.500 --> 00:01:25.500
our location, based on what they've pressed. So we're going to

22
00:01:25.500 --> 00:01:29.500
say, how do we get a key down in

23
00:01:29.500 --> 00:01:33.500
Unity?

24
00:01:33.500 --> 00:01:37.500
Now this is a little bit cheating, because I

25
00:01:37.500 --> 00:01:41.500
know that the method is called GetKeyDown in Unity, and that's

26
00:01:41.500 --> 00:01:45.500
the terminology that's used. But, similarly, if you just look for "Unity

27
00:01:45.500 --> 00:01:49.500
input" you would get there, eventually. So you'd get to this page,

28
00:01:49.500 --> 00:01:53.500
on Unity Input, and it would describe the various methods there.

29
00:01:53.500 --> 00:01:57.500
And you might go ooh OK, so what do we have? We've got GetKeyDown, Get blah blah

30
00:01:57.500 --> 00:02:01.500
blah. So we've got GetButtonDown, GetKeyDown, and so on. I'll tell

31
00:02:01.500 --> 00:02:05.500
you that GetKeyDown is the one we're going to be using most frequently.

32
00:02:05.500 --> 00:02:09.500
So that is the main important thing, but

33
00:02:09.500 --> 00:02:13.500
first off, we need to understand what on Earth this is actually talking about! What

34
00:02:13.500 --> 00:02:17.500
is this syntax, with the GetKeyDown? If you look at the example, it's got

35
00:02:17.500 --> 00:02:21.500
an if statement, I get that, but you know, we've got

36
00:02:21.500 --> 00:02:25.500
this stuff going on. What is this? It's similar to print, we understand that, but

37
00:02:25.500 --> 00:02:29.500
it looks a bit different, it's got this dot syntax as well. So

38
00:02:29.500 --> 00:02:33.500
that's all a bit confusing, so let's have a look at it! This is what's known

39
00:02:33.500 --> 00:02:37.500
as a method. Print is also known as a method, but basically, a

40
00:02:37.500 --> 00:02:41.500
method is very much like a factory, it does some work. You don't need

41
00:02:41.500 --> 00:02:45.500
to know about the internal workings of the factory, all you need to know is

42
00:02:45.500 --> 00:02:49.500
what it produces and what you have to give it. So the

43
00:02:49.500 --> 00:02:53.500
input to this factory is the inputs here inside

44
00:02:53.500 --> 00:02:57.500
the brackets, similarly to print. In print

45
00:02:57.500 --> 00:03:01.500
we gave it text, we only gave it one input, and

46
00:03:01.500 --> 00:03:05.500
then it does some operation, it does some working inside the factory with those

47
00:03:05.500 --> 00:03:09.500
inputs, and it produces, sometimes, some output. In the case of print, there's no

48
00:03:09.500 --> 00:03:13.500
output other than to the console, but there's nothing that

49
00:03:13.500 --> 00:03:17.500
this expression evaluates to. However, with

50
00:03:17.500 --> 00:03:21.500
GetKeyDown, we actually get a boolean coming out the other side,

51
00:03:21.500 --> 00:03:25.500
and that boolean is going to be important, because it tells us whether the

52
00:03:25.500 --> 00:03:29.500
key has been pressed in this frame.

53
00:03:29.500 --> 00:03:33.500
So obviously in games you're familiar with the concept of a

54
00:03:33.500 --> 00:03:37.500
frame rate, and that basically means how many times a second is it

55
00:03:37.500 --> 00:03:41.500
running the code. So we can say, in this particular

56
00:03:41.500 --> 00:03:45.500
frame in this time slot, has the user

57
00:03:45.500 --> 00:03:49.500
pressed the key down, and if so, we'll do some action. So

58
00:03:49.500 --> 00:03:53.500
we know what methods are, and we can take a little bit more of

59
00:03:53.500 --> 00:03:57.500
a deep dive on this GetKeyDown. So the dot operator, you don't have to

60
00:03:57.500 --> 00:04:01.500
worry about too much, just treat it as if it's part of the

61
00:04:01.500 --> 00:04:05.500
full name, for now, and we will get into more detail as to what dots

62
00:04:05.500 --> 00:04:09.500
actually mean later on. But for now, we have

63
00:04:09.500 --> 00:04:13.500
this Input.GetKeyDown, and then we pass it

64
00:04:13.500 --> 00:04:17.500
some sort of argument here. Argument is another word for input,

65
00:04:17.500 --> 00:04:21.500
so this is the argument that we're passing it.

66
00:04:21.500 --> 00:04:25.500
And then, we can do something

67
00:04:25.500 --> 00:04:29.500
with the result, which in this case because it's a boolean and it creates a boolean

68
00:04:29.500 --> 00:04:33.500
value, we can use it in an if statement. OK, so let's try that

69
00:04:33.500 --> 00:04:37.500
out ourselves! If we go and put

70
00:04:37.500 --> 00:04:41.500
the if in the bottom here,

71
00:04:41.500 --> 00:04:45.500
say if (Input.GetKeyDown()).

72
00:04:45.500 --> 00:04:49.500


73
00:04:49.500 --> 00:04:53.500
And then, what do we put in here? Well there are two options you can see

74
00:04:53.500 --> 00:04:57.500
right here. We've got a KeyCode option and one which takes a string

75
00:04:57.500 --> 00:05:01.500
name. Let's, for now, stick with the type that we know,

76
00:05:01.500 --> 00:05:05.500
which is the string. And

77
00:05:05.500 --> 00:05:09.500
what are the names that it can have? Well we've got space, so...

78
00:05:09.500 --> 00:05:13.500
Well that's actually not very easy to find out,

79
00:05:13.500 --> 00:05:17.500
what the other things are, but if you don't, go with the KeyCode example

80
00:05:17.500 --> 00:05:21.500
down here. You see that's very straight forward, we just have a KeyCode dot

81
00:05:21.500 --> 00:05:25.500
and the name. So let's try that one out, because VisualStudio might be able to help us

82
00:05:25.500 --> 00:05:29.500
out here! So we want (KeyCode

83
00:05:29.500 --> 00:05:33.500
dot... Hmm? OK. So let's say

84
00:05:33.500 --> 00:05:37.500
the LeftArrow. Ah hah, there we go!

85
00:05:37.500 --> 00:05:41.500
So VisualStudio has helped us out and given us the

86
00:05:41.500 --> 00:05:45.500
(KeyCode.LeftArrow). Now, really what's happening here is that KeyCode

87
00:05:45.500 --> 00:05:49.500
is a list, essentially, of different

88
00:05:49.500 --> 00:05:53.500
integer values, and by using the dot

89
00:05:53.500 --> 00:05:57.500
operator, we can get an element of that

90
00:05:57.500 --> 00:06:01.500
list. And as you see, when I hover over it, it says that actually the value of that

91
00:06:01.500 --> 00:06:05.500
is 276. We don't have to worry about it, but we could probably just have put

92
00:06:05.500 --> 00:06:09.500
(276). But this is a nice representative name,

93
00:06:09.500 --> 00:06:13.500
KeyCode.Left

94
00:06:13.500 --> 00:06:17.500
Arrow), and that basically allows

95
00:06:17.500 --> 00:06:21.500
VisualStudio to help us out. The same thing is going on with

96
00:06:21.500 --> 00:06:25.500
Input here. Input is just a list of methods to

97
00:06:25.500 --> 00:06:29.500
do with Input, and we can do a dot to Get the KeyDown.

98
00:06:29.500 --> 00:06:33.500
OK, let's write the body of our statement here, and

99
00:06:33.500 --> 00:06:37.500
I'll do it print("Left

100
00:06:37.500 --> 00:06:41.500
key pressed."). I'll put a

101
00:06:41.500 --> 00:06:45.500
semicolon on the end, and let's go ahead and play!

102
00:06:45.500 --> 00:06:49.500
OK, so

103
00:06:49.500 --> 00:06:53.500
now if I hit my Left Key... Hmm, nothing is

104
00:06:53.500 --> 00:06:57.500
happening! Now, why is that? Well the hint is

105
00:06:57.500 --> 00:07:01.500
with this Start (). So what we already said about

106
00:07:01.500 --> 00:07:05.500
Start () is that, this code is executed at the start of

107
00:07:05.500 --> 00:07:09.500
our game. Now, what we actually want to happen is this to happen

108
00:07:09.500 --> 00:07:13.500
every single frame, so every single time slot. So we need to move

109
00:07:13.500 --> 00:07:17.500
this into the Update, which handily enough has a comment saying "// Update

110
00:07:17.500 --> 00:07:21.500
is called once per frame". So let's cut and paste this,

111
00:07:21.500 --> 00:07:25.500
using my Mac keyboard shortcuts there. [Laughs]

112
00:07:25.500 --> 00:07:29.500
That's not so great. OK, so I've copied and pasted it, and I just want

113
00:07:29.500 --> 00:07:33.500
to draw your attention to something called indentation. You can see that

114
00:07:33.500 --> 00:07:37.500
VisualStudio is doing a lot of the indentation for us, automatically,

115
00:07:37.500 --> 00:07:41.500
but basically, we are, whenever we are

116
00:07:41.500 --> 00:07:45.500
going between these braces here, the curly

117
00:07:45.500 --> 00:07:49.500
braces, then we are adding a level of indentation. This just makes it

118
00:07:49.500 --> 00:07:53.500
easier to read and so, between these update

119
00:07:53.500 --> 00:07:57.500
braces we've got one more level of indentation, and then between these if statement

120
00:07:57.500 --> 00:08:01.500
braces we also have a level of indentation. So let's save that,

121
00:08:01.500 --> 00:08:05.500
go back into Unity, and hit play!

122
00:08:05.500 --> 00:08:09.500
Now, you see when I hit the Left Key I get

123
00:08:09.500 --> 00:08:13.500
that key pressed! So that is working! A method which we gave

124
00:08:13.500 --> 00:08:17.500
an argument, remember argument is another word for input.

125
00:08:17.500 --> 00:08:21.500
We gave the argument of the LeftArrow, it tells

126
00:08:21.500 --> 00:08:25.500
us whether, in this frame, the key that we gave it is

127
00:08:25.500 --> 00:08:29.500
down, and then, it tells us that as an output of a boolean.

128
00:08:29.500 --> 00:08:33.500
So the return value, so output is another word

129
00:08:33.500 --> 00:08:37.500
for, in our terminology we're going to call it a return value.

130
00:08:37.500 --> 00:08:41.500
So we have been able to do that! It's time for you to have a

131
00:08:41.500 --> 00:08:45.500
little challenge of handling the other keys. Well in this game we only have a

132
00:08:45.500 --> 00:08:49.500
backwards and forwards, so far. So use the code you have written and

133
00:08:49.500 --> 00:08:53.500
add a new case, a new if statement, for the Right Arrow. And which

134
00:08:53.500 --> 00:08:57.500
KeyCode should you be using? Well you can use VisualStudio's hints

135
00:08:57.500 --> 00:09:01.500
to get that out of it. So let's pause the video

136
00:09:01.500 --> 00:09:05.500
and have a go! OK welcome back! Let's

137
00:09:05.500 --> 00:09:09.500
try the other key, the Right Key. So I'm going to copy this over,

138
00:09:09.500 --> 00:09:13.500
and using my Mac keyboard shortcuts again

139
00:09:13.500 --> 00:09:17.500
and I'm going to go over and paste. My other computer

140
00:09:17.500 --> 00:09:21.500
is a Mac, I should have that sticker on the back of my computer. And then,

141
00:09:21.500 --> 00:09:25.500
RightArrow. Funnily enough, you could

142
00:09:25.500 --> 00:09:29.500
have guessed it, but if you want to, you can do a dot and then Right.

143
00:09:29.500 --> 00:09:33.500
There you go, you get things like RightApple, RightArrow, RightBracket, and so on, all the

144
00:09:33.500 --> 00:09:37.500
types of key names that you might want. And let's just change the text

145
00:09:37.500 --> 00:09:41.500
to say something appropriate like ("Right key pressed."),

146
00:09:41.500 --> 00:09:45.500
and go into Unity and hit play.

147
00:09:45.500 --> 00:09:49.500
So now, I can hit different keys, and that is

148
00:09:49.500 --> 00:09:53.500
what I'm going to get as output, these different log messages.

149
00:09:53.500 --> 00:09:57.500
Success! So we have successfully got input, We have learned

150
00:09:57.500 --> 00:10:01.500
what methods are. Like this, we've seen that

151
00:10:01.500 --> 00:10:05.500
print () is an example of a method, GetKeyDown () is an example of a method, and I actually

152
00:10:05.500 --> 00:10:09.500
want to draw your attention to something a little bit sneaky, but this Start () and Update ()

153
00:10:09.500 --> 00:10:13.500
are also examples of methods. In this case, we aren't calling

154
00:10:13.500 --> 00:10:17.500
them but we are defining them. So we're saying that we have created

155
00:10:17.500 --> 00:10:21.500
this Update () method, and then, this Update () method gets called from somewhere else, it gets called

156
00:10:21.500 --> 00:10:25.500
from Unity, on every frame. So that's just a little bonus piece of information

157
00:10:25.500 --> 00:10:29.500
about methods. OK, so we are good

158
00:10:29.500 --> 00:10:33.500
with getting input! The only problem now is, if

159
00:10:33.500 --> 00:10:37.500
we want to update our location. Our location is

160
00:10:37.500 --> 00:10:41.500
currently not available to us in this method. I can try that out, I can

161
00:10:41.500 --> 00:10:45.500
say location, and you can see it's

162
00:10:45.500 --> 00:10:49.500
not even completing, location, it's still completing into a completely different thing.

163
00:10:49.500 --> 00:10:53.500
That's because it's not in scope, and we're going to talk a bit about scope

164
00:10:53.500 --> 00:10:56.000
in the next lecture! See you there!


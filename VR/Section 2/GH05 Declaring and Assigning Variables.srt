1
00:00:00,000 --> 00:00:04,000
...

2
00:00:04,000 --> 00:00:09,000
Welcome to using variables! In this

3
00:00:09,000 --> 00:00:13,000
lecture, we are going to be creating a location as a starting point.

4
00:00:13,000 --> 00:00:17,033
We're also going to be using pseudocode, a method of basically

5
00:00:17,033 --> 00:00:21,033
outlining our program, so that we can plan what we're going to do in this section and

6
00:00:21,033 --> 00:00:25,033
figure out what we need to know in order to get there. And the first thing we're going to

7
00:00:25,033 --> 00:00:29,233
need to know is variables, and that's what this lecture is all about! So let's dive right in!

8
00:00:29,233 --> 00:00:30,233
...

9
00:00:30,233 --> 00:00:34,233
So here we are again in front of our project and our

10
00:00:34,233 --> 00:00:38,233
ConsolePrinter. So we know now how to print things to the Console but

11
00:00:38,233 --> 00:00:42,233
that's hardly a game, it's hardly interactive. So let's take a step

12
00:00:42,233 --> 00:00:46,233
back and have a little think about how we're going to make our game

13
00:00:46,233 --> 00:00:50,233
do what we want it do do. So what I'm introducing you

14
00:00:50,233 --> 00:00:54,233
to is the concept of pseudo code. So this is not code, because we don't

15
00:00:54,233 --> 00:00:58,233
yet know how to write these things in code, but it is an outline of what we want

16
00:00:58,233 --> 00:01:02,233
to do. It's an outline of that script that we're going to tell an actor to

17
00:01:02,233 --> 00:01:06,233
perform. So what do we want to do as the first step?

18
00:01:06,233 --> 00:01:10,233
Well we're basically going off the basis of the rules of our game

19
00:01:10,233 --> 00:01:14,233
that we want to have a distance and that we move and then we get an updated distance,

20
00:01:14,233 --> 00:01:18,233
and so on. So, for a start, we're going to set a starting

21
00:01:18,233 --> 00:01:22,233
location. So this is where we begin and that

22
00:01:22,233 --> 00:01:26,233
is going to be something that can change, so that not each game

23
00:01:26,233 --> 00:01:30,233
is going to be the same. Then, we're going to calculate that

24
00:01:30,233 --> 00:01:34,233
distance, that location from home, and print that

25
00:01:34,233 --> 00:01:38,233
distance out to the Console, so that the player can

26
00:01:38,233 --> 00:01:42,233
decide which direction they are going to move in.

27
00:01:42,233 --> 00:01:46,233
Then, we're going to have to read the player's move. So the player is going to have to

28
00:01:46,233 --> 00:01:50,233
have some way of telling the Unity interface or

29
00:01:50,233 --> 00:01:54,233
our game, essentially, how they want to move. And then,

30
00:01:54,233 --> 00:01:58,233
we update the location from home and repeat, so

31
00:01:58,233 --> 00:02:02,233
once we've updated the location it will go back through, calculate the distance from home, and print the distance,

32
00:02:02,233 --> 00:02:06,233
and then, the player repeats again until we win. And we'll talk about

33
00:02:06,233 --> 00:02:10,233
the until we win later on. So what I

34
00:02:10,233 --> 00:02:14,233
want to look at now is these first two bits. So far,

35
00:02:14,233 --> 00:02:18,233
we've been able to print things to the console which are fixed. You know, we've

36
00:02:18,233 --> 00:02:22,233
said, in our program, that we're going to print the welcome

37
00:02:22,233 --> 00:02:26,233
to Go Home, but what we want to do

38
00:02:26,233 --> 00:02:30,233
is create a possibility for us to

39
00:02:30,233 --> 00:02:34,233
input things that are variable, such as the location and the distance.

40
00:02:34,233 --> 00:02:38,233
So for that, we're going to introduce, funnily enough, a concept called

41
00:02:38,233 --> 00:02:42,233
variables. Now what is a variable? It's very simple, a variable is very

42
00:02:42,233 --> 00:02:46,233
much just like a box, in which you can put certain values.

43
00:02:46,233 --> 00:02:50,233
So this box, for example, has the value 2

44
00:02:50,233 --> 00:02:54,233
in it, and it also has a label, some number,

45
00:02:54,233 --> 00:02:58,233
so that is the label of the box. So a quick

46
00:02:58,233 --> 00:03:02,233
recap! We've got a box with a label, and inside it there is a

47
00:03:02,233 --> 00:03:06,233
value. So that is what a variable is! The box with the label is the variable

48
00:03:06,233 --> 00:03:10,233
and the value is a value. Now,

49
00:03:10,233 --> 00:03:14,233
these boxes have different shapes, also known as types,

50
00:03:14,233 --> 00:03:18,233
so these boxes will store different types of values.

51
00:03:18,233 --> 00:03:22,233
You can't put a square peg in a round hole, so this value in here, this

52
00:03:22,233 --> 00:03:26,233
one anInteger, this variable can only store things like

53
00:03:26,233 --> 00:03:30,233
this number 2. aString can only store well

54
00:03:30,233 --> 00:03:34,233
text items and you can see it's a different shape, and aFloat can only store

55
00:03:34,233 --> 00:03:38,233
point numbers, so 2 point 0, for example.

56
00:03:38,233 --> 00:03:42,233
So this is because the computer has to store all these things

57
00:03:42,233 --> 00:03:46,233
in memory, and it needs to know what shape these values are

58
00:03:46,233 --> 00:03:50,233
in order to allocate the right amount of space in memory.

59
00:03:50,233 --> 00:03:54,233
So here's a little table to summarize these three

60
00:03:54,233 --> 00:03:58,233
different types, that we will see. You've got integers, which

61
00:03:58,233 --> 00:04:02,233
are used only for whole numbers, not fractional or

62
00:04:02,233 --> 00:04:06,233
you know irrational numbers and they can be both positive and negative, and here

63
00:04:06,233 --> 00:04:10,233
are some example values that you could put inside an integer box or an integer

64
00:04:10,233 --> 00:04:14,233
variable. You have the value 0,  you have

65
00:04:14,233 --> 00:04:18,233
-1, you have 143, so basically any

66
00:04:18,233 --> 00:04:22,233
whole number. Then we have float numbers,

67
00:04:22,233 --> 00:04:26,233
which are basically real numbers. If you don't know what the term real number

68
00:04:26,233 --> 00:04:30,233
means, it basically means anything with a decimal point in it

69
00:04:30,233 --> 00:04:34,233
and that can include rational and irrational numbers. Don't worry if you don't understand

70
00:04:34,233 --> 00:04:38,233
these mathematical terms, basically anything with a decimal point.

71
00:04:38,233 --> 00:04:42,233
And you can see that, in the value syntax there is a special little

72
00:04:42,233 --> 00:04:46,233
f at the end, as well, to denote that it's a floating point, but otherwise, it's just

73
00:04:46,233 --> 00:04:50,233
a number with a decimal point and again it can have a negative sign

74
00:04:50,233 --> 00:04:54,233
in front of it. Then, finally we have the string, which I told you about

75
00:04:54,233 --> 00:04:58,233
in the last lecture. A string is just a fancy name for text, so that

76
00:04:58,233 --> 00:05:02,233
is what we can store in it, and we've seen how to make text values

77
00:05:02,233 --> 00:05:06,233
in the previous lecture, with these double quotes around the text that

78
00:05:06,233 --> 00:05:10,233
we want to store. So how does all of this translate into code?

79
00:05:10,233 --> 00:05:14,233
Well I'm going to show you! Let's go to our ConsolePrinter

80
00:05:14,233 --> 00:05:18,233
and try and print out a value from

81
00:05:18,233 --> 00:05:22,233
a variable. So here it's telling me that I have inconsistent

82
00:05:22,233 --> 00:05:26,233
line endings. You may well get this kind of error

83
00:05:26,233 --> 00:05:30,233
and if you do, you simply need to select what kind of Line Ending you want.

84
00:05:30,233 --> 00:05:34,233
If you're on Mac, you'd select Macintosh, if you're on Window, you'd select Windows, and

85
00:05:34,233 --> 00:05:38,233
you hit Yes. Basically, this is about invisible characters that are

86
00:05:38,233 --> 00:05:42,233
being used to show you line endings in your file but don't worry too much about that.

87
00:05:42,233 --> 00:05:46,233
So how do we go about creating

88
00:05:46,233 --> 00:05:50,233
a variable? Well, first off, like I said, variables require space

89
00:05:50,233 --> 00:05:54,233
in memory, so we have to declare that we're going to use a variable for the

90
00:05:54,233 --> 00:05:58,233
computer to set aside that amount of space. So the declaration of a variable,

91
00:05:58,233 --> 00:06:02,233
we have to tell it the type, the shape of the box, and the name

92
00:06:02,233 --> 00:06:06,233
of that box. So we start off with the type.

93
00:06:06,233 --> 00:06:10,233
Integer is abbreviated to int, so I'm going to start off with the simplest type,

94
00:06:10,233 --> 00:06:14,233
the whole numbers, and we will start with some

95
00:06:14,233 --> 00:06:18,233
Number. And you can put a semicolon

96
00:06:18,233 --> 00:06:22,233
at the end, to say we've finished declaring this variable.

97
00:06:22,233 --> 00:06:26,233
Then, you can go on to assign to the

98
00:06:26,233 --> 00:06:30,233
variable. Assign, what do I mean by that? Well I mean put a number in the box. So

99
00:06:30,233 --> 00:06:34,233
someNumber = 1, for example.

100
00:06:34,233 --> 00:06:38,233
And then, you can go on and print this just like you would

101
00:06:38,233 --> 00:06:42,233
print a string with that print function, and

102
00:06:42,233 --> 00:06:46,233
the brackets around the thing that you're going to print

103
00:06:46,233 --> 00:06:50,233
and then the (someNumber) and remember your semicolon at the end.

104
00:06:50,233 --> 00:06:54,233
Now because this is a variable directly,

105
00:06:54,233 --> 00:06:58,233
you don't need to put quotes around it, because the quotes are simply used

106
00:06:58,233 --> 00:07:02,233
when you're trying to create a string value. Here what it's saying is, get the value

107
00:07:02,233 --> 00:07:06,233
out of the (someNumber) variable and print it. So

108
00:07:06,233 --> 00:07:10,233
we can save that, head over into Unity, and

109
00:07:10,233 --> 00:07:14,233
hit play, and go over to our Console and you'll see that it has indeed

110
00:07:14,233 --> 00:07:18,233
printed out the number 1. Now if I changed some number

111
00:07:18,233 --> 00:07:22,233
to a different value like 134

112
00:07:22,233 --> 00:07:26,233
and go back and replay it,

113
00:07:26,233 --> 00:07:30,233
you'll notice that that is what gets changed in the text, as well.

114
00:07:30,233 --> 00:07:34,233
Now we could obviously do this with different types, too.

115
00:07:34,233 --> 00:07:38,233
So now it's time for your challenge. I'd like you to declare and assign

116
00:07:38,233 --> 00:07:42,233
variables. Declare a new variable of each type, that's int,

117
00:07:42,233 --> 00:07:46,233
float, and string. Assign an initial value

118
00:07:46,233 --> 00:07:50,233
and print the values out, and just

119
00:07:50,233 --> 00:07:54,233
do a little experiment. I'd like to see, can you assign any value

120
00:07:54,233 --> 00:07:58,233
of one type into a variable of another? And if not, what goes wrong?

121
00:07:58,233 --> 00:08:02,233
And if so, which ones? Are there any specific combinations? So pause the video

122
00:08:02,233 --> 00:08:06,233
and give this challenge a go!

123
00:08:06,233 --> 00:08:10,233
OK welcome back! I wonder how you got on with that challenge, particularly the last

124
00:08:10,233 --> 00:08:14,233
bit. A little bit tricky, a little bit challenging. So let's declare

125
00:08:14,233 --> 00:08:18,233
some things. So I'm going to have, first off, my int

126
00:08:18,233 --> 00:08:22,233
called, I'm going to rename it to anInteger.

127
00:08:22,233 --> 00:08:26,233
Then, I'm going to create a float as well, which is just with the keyword

128
00:08:26,233 --> 00:08:30,233
float for the type and then aFloat, like so.

129
00:08:30,233 --> 00:08:34,233
And then, finally a string with aString.

130
00:08:34,233 --> 00:08:38,233
So all these are declared! I'm going to set

131
00:08:38,233 --> 00:08:42,233
an integer, I'm going to

132
00:08:42,233 --> 00:08:46,233
set aFloat

133
00:08:46,233 --> 00:08:50,233
to 0 this time, and

134
00:08:50,233 --> 00:08:54,233
I'm going to set aString

135
00:08:54,233 --> 00:08:58,233
to, well let's just go with "Hello".

136
00:08:58,233 --> 00:09:02,233
Remember I'm always adding semicolons on

137
00:09:02,233 --> 00:09:06,233
the end of any instructions, because our actor is done and doesn't know when the

138
00:09:06,233 --> 00:09:10,233
instruction has finished, otherwise. Now we can go on and print these

139
00:09:10,233 --> 00:09:14,233
all out. So I will print, first, the

140
00:09:14,233 --> 00:09:18,233
anInteger. You see that VisualStudio's automatically giving me

141
00:09:18,233 --> 00:09:22,233
suggestions, based on what I type. If I hit Enter, then it will automatically fill that out.

142
00:09:22,233 --> 00:09:26,233
The same goes for print, it's always

143
00:09:26,233 --> 00:09:30,233
suggesting, very very helpful of it. And

144
00:09:30,233 --> 00:09:34,233
I'm going to also print (aString).

145
00:09:34,233 --> 00:09:38,233
OK, let's go back into Unity and hit play!

146
00:09:38,233 --> 00:09:42,233
And there we go, we've got the float printed

147
00:09:42,233 --> 00:09:46,233
out and the "Hello"! You'll notice that, when it prints out the float, it doesn't bother with the decimal points,

148
00:09:46,233 --> 00:09:50,233
because it doesn't think it needs to, but if  put something in these decimal

149
00:09:50,233 --> 00:09:54,233
points and then play,

150
00:09:54,233 --> 00:09:58,233
you notice it will bother with the decimal points and it will print everything.

151
00:09:58,233 --> 00:10:02,233
OK, so that is with the correct

152
00:10:02,233 --> 00:10:06,233
values aside. But what if I try and swap a few around? So, first off, let

153
00:10:06,233 --> 00:10:10,233
me try and put a string into the floats and the

154
00:10:10,233 --> 00:10:14,233
integers.

155
00:10:14,233 --> 00:10:18,233
Just some random strings, it doesn't really matter what the contents

156
00:10:18,233 --> 00:10:22,233
of the string is. And if we go and play, it'll say

157
00:10:22,233 --> 00:10:26,233
oops, there's an error! Now, you may see these errors, when you mistype things,

158
00:10:26,233 --> 00:10:30,233
it simply means, go back into VisualStudio and check out what you're done wrong. Now you

159
00:10:30,233 --> 00:10:34,233
notice those squiggly lines under here, and if you hover over it, it gives you

160
00:10:34,233 --> 00:10:38,233
the error: "Cannot implicitly convert type 'string' to float. So

161
00:10:38,233 --> 00:10:42,233
that's very easy! Basically it's saying, you've given me a string value and this is aFloat

162
00:10:42,233 --> 00:10:46,233
box and I can't fit a square peg in a round hole.

163
00:10:46,233 --> 00:10:50,233
OK, so that makes more or less, you know, sense. What about integers, if I try

164
00:10:50,233 --> 00:10:54,233
and put integer in all of these boxes?

165
00:10:54,233 --> 00:10:58,233
OK, so the

166
00:10:58,233 --> 00:11:02,233
only one it's complaining about is the string. It's saying that I can't convert an

167
00:11:02,233 --> 00:11:06,233
int into a string. That's fair enough but funnily enough, it's not

168
00:11:06,233 --> 00:11:10,233
complaining with the Float. Now the reason for that is because it can

169
00:11:10,233 --> 00:11:14,233
fit aFloat in here. It's kind of like fitting a circle in a square

170
00:11:14,233 --> 00:11:18,233
box, because it kind of does fit in, and you'll notice that

171
00:11:18,233 --> 00:11:22,233
also if I do... But if I do it the other way around, so if I put a float in the

172
00:11:22,233 --> 00:11:26,233
int, it's saying no I can't do that, because the

173
00:11:26,233 --> 00:11:30,233
floats don't include... Sorry the other way around, the floats

174
00:11:30,233 --> 00:11:34,233
include the integers, but the integers don't include the floats, so that's why we can

175
00:11:34,233 --> 00:11:38,233
convert in this particular direction. Now, let's just set things back to how they should be,

176
00:11:38,233 --> 00:11:42,233
and let's

177
00:11:42,233 --> 00:11:46,233
make this a float value.

178
00:11:46,233 --> 00:11:50,233
There we go, the first few digits of pie. And ah, you see I've

179
00:11:50,233 --> 00:11:54,233
got a syntax error and if I look at it carefully, this error's actually

180
00:11:54,233 --> 00:11:58,233
giving me a bit of a red herring to follow. But this first error says

181
00:11:58,233 --> 00:12:02,233
"Newline in constant" and that's because I haven't got

182
00:12:02,233 --> 00:12:06,233
this end of my string, so it's kind of including the

183
00:12:06,233 --> 00:12:10,233
whole end of the line, include at the new line, so that's what was going wrong there.

184
00:12:10,233 --> 00:12:14,233
So let's hit play and we will notice

185
00:12:14,233 --> 00:12:18,233
that everything works just fine, and actually, if we hit

186
00:12:18,233 --> 00:12:22,233
play, then we will notice that, indeed, it works find. So well

187
00:12:22,233 --> 00:12:26,233
done! Congratulations, you have just been introduced to variables! And just to

188
00:12:26,233 --> 00:12:30,233
summarize why we were doing all of that, it's in order

189
00:12:30,233 --> 00:12:34,233
to be able to do locations and calculating distance from home. So now we can

190
00:12:34,233 --> 00:12:38,233
actually go ahead and make this a location. We

191
00:12:38,233 --> 00:12:42,233
can say, let's make it a float, because we could be like

192
00:12:42,233 --> 00:12:46,233
half a meter away from home. So let's say float

193
00:12:46,233 --> 00:12:50,233
location

194
00:12:50,233 --> 00:12:54,233
and then set that location to

195
00:12:54,233 --> 00:12:58,233
5.0

196
00:12:58,233 --> 00:13:02,233
and let's add what is known as a comment here,

197
00:13:02,233 --> 00:13:06,233
which just doesn't mean anything to the computer but it means something to us.

198
00:13:06,233 --> 00:13:10,233
And we always add these to make a note to ourselves,

199
00:13:10,233 --> 00:13:14,233
so "// Distance in meters".

200
00:13:14,233 --> 00:13:18,233
Basically anything that comes after these

201
00:13:18,233 --> 00:13:22,233
double slashes will be highlighted in green

202
00:13:22,233 --> 00:13:26,233
by VisualStudio and is actually a comment, so it won't be picked up by

203
00:13:26,233 --> 00:13:30,233
Unity at all. So I'm going to remove these print statements, which it's

204
00:13:30,233 --> 00:13:34,233
complaining about, because those variables no longer exist, and

205
00:13:34,233 --> 00:13:38,233
there we go, print out the location. And let's print

206
00:13:38,233 --> 00:13:42,233
out some string before that saying, we're about to print the location.

207
00:13:42,233 --> 00:13:46,233
...

208
00:13:46,233 --> 00:13:50,233
And go back into Unity!

209
00:13:50,233 --> 00:13:54,233
OK, so now it says

210
00:13:54,233 --> 00:13:58,233
"Location", "5". So that makes sense, we have

211
00:13:58,233 --> 00:14:02,233
done our first step of this pseudocode. We're going to have to figure out how to

212
00:14:02,233 --> 00:14:06,233
calculate and print. Well we've done some printing as well, so we're going to have

213
00:14:06,233 --> 00:14:10,233
to figure out how to calculate in the next lecture. See you there!

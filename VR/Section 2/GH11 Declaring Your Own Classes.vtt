WEBVTT

1
00:00:00.000 --> 00:00:02.900


2
00:00:02.900 --> 00:00:08.000
Welcome to Declaring Your Own Classes! In this

3
00:00:08.000 --> 00:00:12.000
lecture we are going to be doing what is on the tin, finding out how to

4
00:00:12.000 --> 00:00:16.000
create a class, how to attach variables to the class so that we can

5
00:00:16.000 --> 00:00:20.000
share them between our Start () and Update () method, as we are currently doing here with

6
00:00:20.000 --> 00:00:24.000
location and home Location. And bonus, we are going to be

7
00:00:24.000 --> 00:00:28.000
able to see those variables in the Inspector of the

8
00:00:28.000 --> 00:00:33.500
Unity Editor. So let's dive right in! This is a crucial building block for us, being able to complete this game!

9
00:00:33.500 --> 00:00:37.500
So far, we have got the three steps at the beginning pretty

10
00:00:37.500 --> 00:00:41.500
much nailed. We've got the set start location, calculate the distance

11
00:00:41.500 --> 00:00:45.500
printing. That's all fine! We're reading the player's moves just fine! The problem is updating

12
00:00:45.500 --> 00:00:49.500
the location, and the problem we have here is that we can't share this

13
00:00:49.500 --> 00:00:53.500
variable between these two different methods. Essentially, what's happening

14
00:00:53.500 --> 00:00:57.500
is this, when the engine,

15
00:00:57.500 --> 00:01:01.500
when Unity calls the Start () method, we create a new box,

16
00:01:01.500 --> 00:01:05.500
and then, we put this value in the box and blah blah blah blah blah,

17
00:01:05.500 --> 00:01:09.500
all this stuff happens. But as soon as we end, you know, as

18
00:01:09.500 --> 00:01:13.500
soon as we get to the bottom of this, all of the variables and the boxes that we created,

19
00:01:13.500 --> 00:01:17.500
within these two brackets, get thrown away, and

20
00:01:17.500 --> 00:01:21.500
next time this Start () gets called, we start from scratch. So the same thing would

21
00:01:21.500 --> 00:01:25.500
happen with Update () if we put the location, the homeLocation, in Update ().

22
00:01:25.500 --> 00:01:29.500
Then every frame, when this is called, we would be starting from

23
00:01:29.500 --> 00:01:33.500
scratch, creating the new variables all over again, and then, they get thrown away

24
00:01:33.500 --> 00:01:37.500
when we're done. So this is no good, we don't want them to be thrown away

25
00:01:37.500 --> 00:01:41.500
when we're done. We want them to hang around each time that this gets called

26
00:01:41.500 --> 00:01:45.500
on each frame, so that we can have a location that persists

27
00:01:45.500 --> 00:01:49.500
between frames and that we can update that location.

28
00:01:49.500 --> 00:01:53.500
So how do we do that? Well I've alluded to it already, so, you know, this is the area we're working

29
00:01:53.500 --> 00:01:57.500
on, working between these three points. So I've alluded

30
00:01:57.500 --> 00:02:01.500
to it already with objects. An Object, as we've said, is a collection of

31
00:02:01.500 --> 00:02:05.500
variables, with values and methods that act on those variables. So

32
00:02:05.500 --> 00:02:09.500
with vectors we saw that quite clearly, that you've got the X and Y of a vector,

33
00:02:09.500 --> 00:02:13.500
but when you've got those X and Y together you can do cool things like, you

34
00:02:13.500 --> 00:02:17.500
can say define vector addition or vector subtraction.

35
00:02:17.500 --> 00:02:21.500
You can also define doing the magnitude, which is a Pythagoras Theorem and

36
00:02:21.500 --> 00:02:25.500
requires those X and Y variables. So when you know that you have those variables, because

37
00:02:25.500 --> 00:02:29.500
they've been defined in the Class, you can do all sorts of different operations

38
00:02:29.500 --> 00:02:33.500
and methods on them. So in our example this was the house,

39
00:02:33.500 --> 00:02:37.500
and the house was built from a blueprint, and the blueprint is

40
00:02:37.500 --> 00:02:41.500
the Class in our analogy, and the Class is the blueprint, which defines

41
00:02:41.500 --> 00:02:45.500
all those variables and says, you need to have these variables, in order for these methods to work.

42
00:02:45.500 --> 00:02:49.500
And so the architect's drawing of the house was the

43
00:02:49.500 --> 00:02:53.500
example of that, the blueprint of the house. So there was this fancy word,

44
00:02:53.500 --> 00:02:57.500
Instantiation. What does that mean? Well Instantiation is the process of

45
00:02:57.500 --> 00:03:01.500
making an Object from a Class. So it's as simple as that, that you are

46
00:03:01.500 --> 00:03:05.500
taking a Class and making an Object out of it, that's

47
00:03:05.500 --> 00:03:09.500
Instantiation, because of that, because of the word Instantiation, we also have the

48
00:03:09.500 --> 00:03:13.500
word Instance, which basically means the same thing as Object. We'll be

49
00:03:13.500 --> 00:03:17.500
using the word Object because it's simpler, but you may hear people use the word

50
00:03:17.500 --> 00:03:21.500
Instance, it just basically means the same thing. Oh, and by the way, we've seen the syntax

51
00:03:21.500 --> 00:03:25.500
of new Vector2, you know, basically where we have the, new, keyword

52
00:03:25.500 --> 00:03:29.500
to say that we're going to instantiate this class, Vector2 being the class that we're instantiating

53
00:03:29.500 --> 00:03:33.500
and then the values to put in the variables

54
00:03:33.500 --> 00:03:37.500
that the Vector2 has. OK fair enough. So this

55
00:03:37.500 --> 00:03:41.500
is all quite clear, but how do you create classes? Well

56
00:03:41.500 --> 00:03:45.500
hint, we've already created one. You didn't even know this but ConsolePrinter

57
00:03:45.500 --> 00:03:49.500
is actually a class itself. You can tell because we've got this class keyword and then

58
00:03:49.500 --> 00:03:53.500
the name of the class, which is ConsolePrinter. But how is

59
00:03:53.500 --> 00:03:57.500
this a class, it doesn't have any variables? Well like I say, it doesn't have to have

60
00:03:57.500 --> 00:04:01.500
variables, it doesn't even have to have methods to be a class, but in practice it will have

61
00:04:01.500 --> 00:04:05.500
both. So what is this? Actually, if you look at it, we've

62
00:04:05.500 --> 00:04:09.500
got our game object over here, this silly little man, and then, you've got this

63
00:04:09.500 --> 00:04:13.500
class attached to it. In fact, it's not a class, because it's in purple and it's got values.

64
00:04:13.500 --> 00:04:17.500
This is an object. So if we go back into Unity, in the Hierarchy

65
00:04:17.500 --> 00:04:21.500
we click on ConsolePrinterGO, so that's the game object, that's the

66
00:04:21.500 --> 00:04:25.500
funny little knight. And then, in the Inspector, we can see all of

67
00:04:25.500 --> 00:04:29.500
its components, and these components

68
00:04:29.500 --> 00:04:33.500
are actually just objects, not classes but objects, because

69
00:04:33.500 --> 00:04:37.500
they have things like values. As you can see, this Transform is also a component.

70
00:04:37.500 --> 00:04:41.500
So the location of the game objects in space is also a component, just the same as

71
00:04:41.500 --> 00:04:45.500
our ConsolePrinter script is a component. And so

72
00:04:45.500 --> 00:04:49.500
the reason I know it's an object is because if I go to a different game

73
00:04:49.500 --> 00:04:53.500
object, I can add another component, which is also of a Console

74
00:04:53.500 --> 00:04:57.500
Printer script. So that means these two are linked together with a blueprint,

75
00:04:57.500 --> 00:05:01.500
and what is that blueprint? Well it's the script that we have been writing this whole time. That

76
00:05:01.500 --> 00:05:05.500
it is the blueprint that defines our game

77
00:05:05.500 --> 00:05:09.500
object, and our component rather that goes on the game object.

78
00:05:09.500 --> 00:05:13.500
And well Start () and Update () are these two factories,

79
00:05:13.500 --> 00:05:17.500
in our blueprint, they are the methods that operate

80
00:05:17.500 --> 00:05:21.500
on these variables. Now the variables we haven't yet defined but we can.

81
00:05:21.500 --> 00:05:25.500
And once we do define them, they will only be

82
00:05:25.500 --> 00:05:29.500
thrown away when the object is thrown away, and because the object stays there for

83
00:05:29.500 --> 00:05:33.500
the entire duration of the game, these variables won't be thrown away, which

84
00:05:33.500 --> 00:05:37.500
means we can keep a location there the whole time. So to declare a

85
00:05:37.500 --> 00:05:41.500
variable that can be used in our

86
00:05:41.500 --> 00:05:45.500
objects, in our methods, we need to

87
00:05:45.500 --> 00:05:49.500
do this within the class, rather than within the method. So

88
00:05:49.500 --> 00:05:53.500
very simply, we go between these two braces here,

89
00:05:53.500 --> 00:05:57.500
which are the braces in which we're defining all the methods,

90
00:05:57.500 --> 00:06:01.500
so it can define all the variables in here, and by convention we put this at the top of the class.

91
00:06:01.500 --> 00:06:05.500
So what do we want to do? Well we want to declare a location

92
00:06:05.500 --> 00:06:09.500
variable. And what type does it want to be? Well the type

93
00:06:09.500 --> 00:06:13.500
that goes before and we want it to be a Vector2 just like before. Now notice,

94
00:06:13.500 --> 00:06:17.500
we need a semicolon on the end of this line as well, so now we have created a

95
00:06:17.500 --> 00:06:21.500
variable. This is now shared

96
00:06:21.500 --> 00:06:25.500
between all calls and it will only ever be thrown

97
00:06:25.500 --> 00:06:29.500
away when that object is thrown away. So what we're saying

98
00:06:29.500 --> 00:06:33.500
is that every time Update () is called and every time Start () is called, it's accessing that same

99
00:06:33.500 --> 00:06:37.500
box. It's not a new box that's been created at the beginning of Update (), it's

100
00:06:37.500 --> 00:06:41.500
always that same box, so we can keep values in there to refer to later.

101
00:06:41.500 --> 00:06:45.500
So we can get rid of this location box that we have created

102
00:06:45.500 --> 00:06:49.500
in the Start () method, just remove that, and you'll notice it's not complaining, because we've

103
00:06:49.500 --> 00:06:53.500
already got a location for it to refer to. So that's fine, it's

104
00:06:53.500 --> 00:06:57.500
printing that out. Now let's just test this

105
00:06:57.500 --> 00:07:01.500
out. We can... Well, in fact, I'm going to let you test it out. I want

106
00:07:01.500 --> 00:07:05.500
to see whether it is indeed sharing, I want you to check whether it's sharing.

107
00:07:05.500 --> 00:07:09.500
Can you print the variable from both methods? That is the key

108
00:07:09.500 --> 00:07:13.500
thing to check. And do the methods act differently if you

109
00:07:13.500 --> 00:07:17.500
change the variable? Can you update that variable to be something else?

110
00:07:17.500 --> 00:07:21.500
And can you also make the homeLocation shared too?

111
00:07:21.500 --> 00:07:25.500
So pause the video and have a go at this slightly tricky challenge!

112
00:07:25.500 --> 00:07:29.500
OK welcome back! So

113
00:07:29.500 --> 00:07:33.500
we've got these variables, and I'm saying that they're shared. And how do you know that? Well

114
00:07:33.500 --> 00:07:37.500
because if we go into our Update () method and hit

115
00:07:37.500 --> 00:07:41.500
print and then we say ("Location: "

116
00:07:41.500 --> 00:07:45.500
and I add in the location here,

117
00:07:45.500 --> 00:07:49.500
you'll notice that the first hint is that this isn't being complained about,

118
00:07:49.500 --> 00:07:53.500
but in the second hint, is if I go and actually play the game,

119
00:07:53.500 --> 00:07:57.500
go into my Console, you'll notice well it's calculating the "Path to home".

120
00:07:57.500 --> 00:08:01.500
So that's a good start, we must have a location then, in the Start () method,

121
00:08:01.500 --> 00:08:05.500
but if I go left, you'll notice it's also printing out my location

122
00:08:05.500 --> 00:08:09.500
right here. So that is correct, it is indeed

123
00:08:09.500 --> 00:08:13.500
in both of these, getting the location. The only thing

124
00:08:13.500 --> 00:08:17.500
is the location is not set, but we can easily solve that problem can't

125
00:08:17.500 --> 00:08:21.500
we? We can say that, maybe when my Right Arrow is down,

126
00:08:21.500 --> 00:08:25.500
I'll set the location to something, I'll say new Vector. Notice

127
00:08:25.500 --> 00:08:29.500
I don't have to put the type before here, because I'm not actually declaring the location I'm just

128
00:08:29.500 --> 00:08:33.500
using that variable, I'm just assigning into it like we did at the beginning when we

129
00:08:33.500 --> 00:08:37.500
declared things separately and then assigned into them later. That was why I showed you

130
00:08:37.500 --> 00:08:41.500
that because this is exactly what we're doing, we're declaring at the top of the class, but then,

131
00:08:41.500 --> 00:08:45.500
we're assigning into it inside the methods. So I'm just

132
00:08:45.500 --> 00:08:49.500
going to put 2 and 3. Notice that, instead of doing the whole float syntax, I've

133
00:08:49.500 --> 00:08:53.500
just used ints, and they automatically get turned into floats,

134
00:08:53.500 --> 00:08:57.500
which is the shape of box that the Vector2 wants.

135
00:08:57.500 --> 00:09:01.500
Let's go back into Unity, hit play,

136
00:09:01.500 --> 00:09:05.500
and let's hit Left. So when I've got Left

137
00:09:05.500 --> 00:09:09.500
my Location is 0, but if I hit Right, "Right key pressed". Great!

138
00:09:09.500 --> 00:09:13.500
Then, I hit Left again. You notice my location has been

139
00:09:13.500 --> 00:09:17.500
updated, and it will continue to be updated from now on. Now,

140
00:09:17.500 --> 00:09:21.500
that can't possibly be that, because this

141
00:09:21.500 --> 00:09:25.500
line is after this line. So what is happening is that, I go through

142
00:09:25.500 --> 00:09:29.500
the Update () once, I update that location that is persisting, it's not being

143
00:09:29.500 --> 00:09:33.500
thrown away, and then, the next time we go through Update (), it's getting that value

144
00:09:33.500 --> 00:09:37.500
that I set in the previous time we went through Update (). So

145
00:09:37.500 --> 00:09:41.500
it's definately being shared, both between these two methods

146
00:09:41.500 --> 00:09:45.500
but also between different calls to these methods. So

147
00:09:45.500 --> 00:09:49.500
I think that is a success! One more thing to do is share the homeLocation, as well.

148
00:09:49.500 --> 00:09:53.500
This is very much the same process, Vector2

149
00:09:53.500 --> 00:09:57.500
homeLocation, and

150
00:09:57.500 --> 00:10:01.500
again, I can remove it from here and everything is hunkydory,

151
00:10:01.500 --> 00:10:05.500
everything works out just fine! But I want to show you an even cooler thing!

152
00:10:05.500 --> 00:10:09.500
This is a feature specific to Unity, but because, currently,

153
00:10:09.500 --> 00:10:13.500
if you go into the Inspector and have a look at our ConsolePrinter... Oh, by the

154
00:10:13.500 --> 00:10:17.500
way, all these messages in the Console were in duplicate, and the reason for that was

155
00:10:17.500 --> 00:10:21.500
because we actually had two ConsolePrinters, one on the Directional Light and one

156
00:10:21.500 --> 00:10:25.500
on the ConsolePrinterGO. So we want to remove the one on

157
00:10:25.500 --> 00:10:29.500
the ConsolLight, but that's just showing you that they are indeed two different objects, because they're

158
00:10:29.500 --> 00:10:33.500
both printing out to the Console independently of

159
00:10:33.500 --> 00:10:37.500
each other. OK, so we now just have

160
00:10:37.500 --> 00:10:41.500
one and we've got this homeLocation. Let's go into the

161
00:10:41.500 --> 00:10:45.500
Hierarchy and just have a look! So there's currently no properties here in the Inspector,

162
00:10:45.500 --> 00:10:49.500
but what we can actually do is get Unity to print out the

163
00:10:49.500 --> 00:10:53.500
variables of the ConsolePrinter. Currently, these variables by default

164
00:10:53.500 --> 00:10:57.500
are invisible to other classes, because they are protected

165
00:10:57.500 --> 00:11:01.500
so that, you know, other classes can't peer into our insides if we don't want them

166
00:11:01.500 --> 00:11:05.500
to, but we can expose them to everyone else, by saying these are safe for

167
00:11:05.500 --> 00:11:09.500
everyone, see by putting the public keyword before the type. So remember, it has

168
00:11:09.500 --> 00:11:13.500
to be before the type like this, and then, we can go into Unity

169
00:11:13.500 --> 00:11:17.500
and hit play and notice, there you go, you've got

170
00:11:17.500 --> 00:11:21.500
Location and Home Location, both with their X and their Y, the two different variable

171
00:11:21.500 --> 00:11:25.500
slots. And this is what defines our ConsolePrinter, this is the

172
00:11:25.500 --> 00:11:29.500
variable, the object. So I can change the Location

173
00:11:29.500 --> 00:11:33.500
here, and you'll notice that now, when

174
00:11:33.500 --> 00:11:37.500
I hit the Left key and I scroll down to the

175
00:11:37.500 --> 00:11:41.500
bottom of the Console, that this value that I put in is the

176
00:11:41.500 --> 00:11:45.500
one that's showing up. If I change it to 5 and go Left, you'll notice

177
00:11:45.500 --> 00:11:49.500
that's what comes up! You'll also notice if I go Right, it updates the

178
00:11:49.500 --> 00:11:53.500
values that are here in the Inspector, So this is just re-enforcing that these

179
00:11:53.500 --> 00:11:57.500
variable are here to stay, they're hanging around as long as this component

180
00:11:57.500 --> 00:12:01.500
is hanging around. Obviously if I remove the component bam, those variables

181
00:12:01.500 --> 00:12:05.500
are gone! So if I go and add that component back you'll notice that they start

182
00:12:05.500 --> 00:12:09.500
from scratch, just like when we were calling the method before, when we

183
00:12:09.500 --> 00:12:13.500
finished calling the method then those variables disappeared. So

184
00:12:13.500 --> 00:12:17.500
that's just a little bit of information for you about when variables come and go, basically

185
00:12:17.500 --> 00:12:21.500
when they're created and when they die. So that is useful

186
00:12:21.500 --> 00:12:25.500
information for us to know, and now we have seen how we can share between these two methods.

187
00:12:25.500 --> 00:12:29.500
In the next video we will be able to put that knowledge together, the

188
00:12:29.500 --> 00:12:33.500
sharing and the updating, in order for us to

189
00:12:33.500 --> 00:12:37.500
update the location on the arrow presses and make this game

190
00:12:37.500 --> 00:12:41.500
finally start to come together. So I'm looking forward to that! I'll see you in the next lecture!

191
00:12:41.500 --> 00:12:41.533



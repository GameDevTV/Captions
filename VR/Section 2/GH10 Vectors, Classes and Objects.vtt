WEBVTT

1
00:00:00.000 --> 00:00:04.000


2
00:00:04.000 --> 00:00:08.000
Welcome to Vectors,

3
00:00:08.000 --> 00:00:12.000
Classes, and Objects! In this lecture we are going to be learning how we can

4
00:00:12.000 --> 00:00:16.000
represent the vectors, that we learned about in the last lecture, in

5
00:00:16.000 --> 00:00:20.000
variables, so that we can do cool things like calculate our path to home

6
00:00:20.000 --> 00:00:24.000
in two dimension, and then calculate the distance to home,

7
00:00:24.000 --> 00:00:28.533
as well. So all of that coming right up! Let's dive in!

8
00:00:28.533 --> 00:00:32.533
So now we're back at the code, and we have our

9
00:00:32.533 --> 00:00:36.533
location stored as a float. Now what we'd want to do is, I've introduced you to vectors

10
00:00:36.533 --> 00:00:40.533
as a notion of location. Well we want to change our location

11
00:00:40.533 --> 00:00:44.533
to be a vector. Now, how are we going to do this? How do you

12
00:00:44.533 --> 00:00:48.533
store a complex thing like a vector in a variable. Well for

13
00:00:48.533 --> 00:00:52.533
that, we're going to need something called classes and objects, but first, let's do a little quick

14
00:00:52.533 --> 00:00:56.533
revision of our glossary. So this is the glossary we've seen

15
00:00:56.533 --> 00:01:00.533
so far. We've got Values, Types, and Variables, which hopefully we should be very familiar with

16
00:01:00.533 --> 00:01:04.533
by now. The Value being things like strings, the Types being those little

17
00:01:04.533 --> 00:01:08.533
markers that we add the shapes on the Variables, and

18
00:01:08.533 --> 00:01:12.533
the Variables, of course, themselves. Then, we have statements, which we have

19
00:01:12.533 --> 00:01:16.533
mastered with the semicolon at the end, and the Expressions which

20
00:01:16.533 --> 00:01:20.533
are the things that return as values. So we even cover things like booleans

21
00:01:20.533 --> 00:01:24.533
in Expressions, at this point now. Now our Glossary 2,

22
00:01:24.533 --> 00:01:28.533
as we go on from here! Well we have our methods, we've talked

23
00:01:28.533 --> 00:01:32.533
about those a little bit, those are the things like GetKeyDown and print

24
00:01:32.533 --> 00:01:36.533
over here. Let me just get my little pointer here. We've got print and GetKey

25
00:01:36.533 --> 00:01:40.533
Down. So these are the factories, which with input

26
00:01:40.533 --> 00:01:44.533
can do some mechanizing, some processing, some doing,

27
00:01:44.533 --> 00:01:48.533
and then, produce some output, and the things, these inputs that go into

28
00:01:48.533 --> 00:01:52.533
methods, we call them arguments for some reason, I don't know. I don't want to pick an

29
00:01:52.533 --> 00:01:56.533
argument. And the outputs of these methods we call

30
00:01:56.533 --> 00:02:00.533
return values. So those are some of these things

31
00:02:00.533 --> 00:02:04.533
we've seen before! We've also seen an operation! Now how are an operation and a method

32
00:02:04.533 --> 00:02:08.533
different, because they seem like they kind of both do operations, in a sense,

33
00:02:08.533 --> 00:02:12.533
and you'd be right. An operation is indeed basically just a method

34
00:02:12.533 --> 00:02:16.533
but instead of having a big English name like Get

35
00:02:16.533 --> 00:02:20.533
KeyDown, they have a symbol, and that symbol is called

36
00:02:20.533 --> 00:02:24.533
an operator, such as addition, you use the + operator.

37
00:02:24.533 --> 00:02:28.533
And they're often, instead of putting like + and then open

38
00:02:28.533 --> 00:02:32.533
brackets, we just give it the arguments on either side, this is called

39
00:02:32.533 --> 00:02:36.533
infix, in quotes. You can't see my air quotes, but you can see them here on the

40
00:02:36.533 --> 00:02:40.533
page, 'infix'. So that is our quick summary of a

41
00:02:40.533 --> 00:02:44.533
glossary! Now, what is an object? So an object

42
00:02:44.533 --> 00:02:48.533
is something a bit more complicated than just a float, it's

43
00:02:48.533 --> 00:02:52.533
something that really encapsulates some more that's

44
00:02:52.533 --> 00:02:56.533
something more than that. So let's have a look at what an object is! An object

45
00:02:56.533 --> 00:03:00.533
is a collection of different methods, I've denoted them here again with a factory

46
00:03:00.533 --> 00:03:04.533
symbol, and a bunch of variables,

47
00:03:04.533 --> 00:03:08.533
variables with values in it, in this case. So

48
00:03:08.533 --> 00:03:12.533
in a object they have these values, and

49
00:03:12.533 --> 00:03:16.533
we can create multiple copies of these objects but they could have

50
00:03:16.533 --> 00:03:20.533
different values in it. They'll have the same factories but they would have

51
00:03:20.533 --> 00:03:24.533
different values, and, in order to do this, we make

52
00:03:24.533 --> 00:03:28.533
these copies from a blueprint. Now that blueprint, obviously, has no values of its own,

53
00:03:28.533 --> 00:03:32.533
it gets the values only when they have been made into

54
00:03:32.533 --> 00:03:36.533
actual things. So you can think of this as the difference between the blueprint of a

55
00:03:36.533 --> 00:03:40.533
house and the actual house itself. The actual house itself has wood and bricks,

56
00:03:40.533 --> 00:03:44.533
but the blueprint just tells you where to put those wood and bricks.

57
00:03:44.533 --> 00:03:48.533
Now, the way we create this is using a new keyword called new,

58
00:03:48.533 --> 00:03:52.533
and you can obviously use it to create as many things from

59
00:03:52.533 --> 00:03:56.533
these class blueprints as we like. So the type of class that we aren't

60
00:03:56.533 --> 00:04:00.533
going to use for location is called Vector2,

61
00:04:00.533 --> 00:04:04.533
because it's a two dimensional vector. So we do something like Vector2,

62
00:04:04.533 --> 00:04:08.533
and then, we need to give it the

63
00:04:08.533 --> 00:04:12.533
values that make up its, well these values here,

64
00:04:12.533 --> 00:04:16.533
that go inside of its variables. And, in this case,

65
00:04:16.533 --> 00:04:20.533
because it's a two dimensional vector we give it two values,

66
00:04:20.533 --> 00:04:24.533
the X and the Y. So we can do something like this,

67
00:04:24.533 --> 00:04:28.533
which gives us the coordinates of that vector.

68
00:04:28.533 --> 00:04:32.533
Now, you'll notice it's complaining. Now the reason for that is, it says you

69
00:04:32.533 --> 00:04:36.533
can't invoke Vector2 like a method, and that's because we need to use the

70
00:04:36.533 --> 00:04:40.533
special keyword to create a new object of that

71
00:04:40.533 --> 00:04:44.533
Vector2 type. So this is the way that we

72
00:04:44.533 --> 00:04:48.533
initialize. We create,

73
00:04:48.533 --> 00:04:52.533
basically, a Vector2. Now you'll notice it's still giving us an error and

74
00:04:52.533 --> 00:04:56.533
that is because it is trying to be stored in the

75
00:04:56.533 --> 00:05:00.533
wrong shape variable. We need this variable to be of type Vector2,

76
00:05:00.533 --> 00:05:04.533
and now you can see that, indeed,

77
00:05:04.533 --> 00:05:08.533
we are getting the thing we would expect, on this line anyway. There's errors

78
00:05:08.533 --> 00:05:12.533
further down but we won't worry too much about that!

79
00:05:12.533 --> 00:05:13.200


80
00:05:13.200 --> 00:05:17.200
So it's challenge time! I'd like you to replace the floats

81
00:05:17.200 --> 00:05:21.200
with Vector2's, throughout your program.

82
00:05:21.200 --> 00:05:25.200
Now, to do this, you're going to have to turn homeLocation into a Vector2,

83
00:05:25.200 --> 00:05:29.200
you're going to have to update distance to be pathToHome, because distance doesn't make

84
00:05:29.200 --> 00:05:33.200
sense anymore if it's going to be a vector, and remove any code

85
00:05:33.200 --> 00:05:37.200
that doesn't make sense. Well, basically, use your brain,

86
00:05:37.200 --> 00:05:41.200
think about why this wouldn't make sense if it's a vector.

87
00:05:41.200 --> 00:05:45.200
And just remember things like saying one vector is greater

88
00:05:45.200 --> 00:05:49.200
than another doesn't really make sense, unless you're talking about in a direction because, you know,

89
00:05:49.200 --> 00:05:53.200
what's it mean if this vector is bigger than another? Is this location

90
00:05:53.200 --> 00:05:57.200
over here bigger than that location over there? It's hard to say, unless we give it some sense

91
00:05:57.200 --> 00:06:01.200
of direction, so maybe you need to remove a few things and we'll need to reconsider.

92
00:06:01.200 --> 00:06:05.200
Then, print out the path home and see, what does it look like. Does it

93
00:06:05.200 --> 00:06:09.200
look right? Are your calculations correct? And remember that we can

94
00:06:09.200 --> 00:06:13.200
still use the operations, subtraction and addition, on

95
00:06:13.200 --> 00:06:17.200
these Vector2's, so you know, they're now operating on a more complex

96
00:06:17.200 --> 00:06:21.200
object but those operations will still work. So pause the video and have a go at

97
00:06:21.200 --> 00:06:25.200
updating your code! OK welcome back!

98
00:06:25.200 --> 00:06:29.200
I hope you've all had a go, and if you got stuck, no worries, it's

99
00:06:29.200 --> 00:06:33.200
a bit of a tricky challenge. But if you managed, go ahead and share what you managed to do

100
00:06:33.200 --> 00:06:37.200
in the discussions, before even having a look at my solution, and then, you can pick up

101
00:06:37.200 --> 00:06:41.200
notes and share those in the discussions as well. So let's

102
00:06:41.200 --> 00:06:45.200
have a look! First off homeLocation, that needs to be a Vector2, as well!

103
00:06:45.200 --> 00:06:49.200
And as we said, we need to do a new Vector2,

104
00:06:49.200 --> 00:06:53.200
and then, we put in brackets here the

105
00:06:53.200 --> 00:06:57.200
things, the location that home is.

106
00:06:57.200 --> 00:07:02.533
So I'm just picking a random location, you can do whatever you

107
00:07:02.533 --> 00:07:05.200
like. Probably random 2 is a good place to start.

108
00:07:05.200 --> 00:07:09.200
Now, If I have a look at this, I Cannot impliciltly convert type 'UnityEngine.Vector2' to

109
00:07:09.200 --> 00:07:13.200
'float' ". Yep, that makes sense, because we want this to now be a Vector2,

110
00:07:13.200 --> 00:07:17.200
and we want this to be called pathToHome,

111
00:07:17.200 --> 00:07:21.200
fair enough. And we want to print

112
00:07:21.200 --> 00:07:25.200
out ("Path to home: " + path

113
00:07:25.200 --> 00:07:29.200
ToHome). Let's save that!

114
00:07:29.200 --> 00:07:33.200
Now what's not going to make sense? Well equality, that might

115
00:07:33.200 --> 00:07:37.200
make sense, you can say that I'm home, so we'll leave that in, but inequality,

116
00:07:37.200 --> 00:07:41.200
so less than and greater than, they aren't going to make sense. I'm going to remove those,

117
00:07:41.200 --> 00:07:45.200
so this all makes sense. We've got

118
00:07:45.200 --> 00:07:49.200
our pathToHome being calculated as a vector. Let's go ahead and

119
00:07:49.200 --> 00:07:53.200
hit play and see whether this makes sense now. So

120
00:07:53.200 --> 00:07:57.200
it's saying that, in the X direction, we need to go forward 3

121
00:07:57.200 --> 00:08:01.200
to get home. Yep, that looks correct!

122
00:08:01.200 --> 00:08:05.200
It's saying that we need to go -2 in the Y direction. Yep, so everything

123
00:08:05.200 --> 00:08:09.200
looks as it should. And if we look at this, this

124
00:08:09.200 --> 00:08:13.200
calculation, that we haven't actually had to change at all, is exactly what we

125
00:08:13.200 --> 00:08:17.200
worked out previously, in the last lecture, when it came to

126
00:08:17.200 --> 00:08:21.200
finding the distance from home. You see that? We just did Home - Player,

127
00:08:21.200 --> 00:08:25.200
which is the same as saying homeLocation - Location here. So

128
00:08:25.200 --> 00:08:29.200
that calculation with the vectors stands up, it's basically the

129
00:08:29.200 --> 00:08:33.200
same and that's fantastic! Now, what we've done in terms of objects?

130
00:08:33.200 --> 00:08:37.200
So here we have given our Vector, we've created a new

131
00:08:37.200 --> 00:08:41.200
object from the blueprint of the Vector2, we've given it some

132
00:08:41.200 --> 00:08:45.200
values to put in its different variable boxes,

133
00:08:45.200 --> 00:08:49.200
and then, we have performed some operations on it. Now it's not easy to see the operations, because

134
00:08:49.200 --> 00:08:53.200
they don't look like GetKeyDown, but, as I said before,

135
00:08:53.200 --> 00:08:57.200
operators and operations that we have are things like

136
00:08:57.200 --> 00:09:01.200
- and + and this is just as much an operation on the Vector

137
00:09:01.200 --> 00:09:05.200
and a factory on the Vector as, you know, doing something

138
00:09:05.200 --> 00:09:09.200
else would be. Now, a quick bonus to find that actual

139
00:09:09.200 --> 00:09:13.200
distance of pathToHome. We can actually use

140
00:09:13.200 --> 00:09:17.200
a method on that vector. Now, let's have a look! So

141
00:09:17.200 --> 00:09:21.200
print("Distance to home: "

142
00:09:21.200 --> 00:09:25.200
+. Now the pathToHome),

143
00:09:25.200 --> 00:09:29.200
if you use this dot operator, it gives you all the methods

144
00:09:29.200 --> 00:09:33.200
that exist on this particular object,

145
00:09:33.200 --> 00:09:37.200
so these methods automatically can

146
00:09:37.200 --> 00:09:41.200
operate on all these values that we've passed in and are attached, essentially,

147
00:09:41.200 --> 00:09:45.200
to the value in that location variable or in the path

148
00:09:45.200 --> 00:09:49.200
ToHome variable. And we can get something such as,

149
00:09:49.200 --> 00:09:53.200
for example, magnitude.

150
00:09:53.200 --> 00:09:57.200
Now magnitude here isn't actually a method, it's

151
00:09:57.200 --> 00:10:01.200
something like a pretend variable, it's a variable that's been

152
00:10:01.200 --> 00:10:05.200
calculated from these. So we

153
00:10:05.200 --> 00:10:09.200
can put the semicolon on the end and go on

154
00:10:09.200 --> 00:10:13.200
it like that. So basically, you can think of

155
00:10:13.200 --> 00:10:17.200
magnitude as being like a method, except we don't need to

156
00:10:17.200 --> 00:10:21.200
use the method syntax of having the brackets after it.

157
00:10:21.200 --> 00:10:25.200
So now you can see the "Distance to home" has been calculated for us.

158
00:10:25.200 --> 00:10:29.200
That's automatically been calculated by a Pythagorus Theorem, so that's

159
00:10:29.200 --> 00:10:33.200
very easily the square root of the two numbers squared,

160
00:10:33.200 --> 00:10:37.200
but you don't have to worry about that, because that's all been calculated for you.

161
00:10:37.200 --> 00:10:41.200
And the magnitude just tells us the size, without the direction of the

162
00:10:41.200 --> 00:10:45.200
vector, so it's telling us exactly how far away from home we are.

163
00:10:45.200 --> 00:10:49.200
So that's all been done, because of the handiness of objects!

164
00:10:49.200 --> 00:10:53.200
So you can see that because we've been able to box

165
00:10:53.200 --> 00:10:57.200
up all these variables and attach operations and methods to

166
00:10:57.200 --> 00:11:01.200
them, you're able to do these very easy operations

167
00:11:01.200 --> 00:11:05.200
on them at a very high level of abstraction, so that is the cool thing

168
00:11:05.200 --> 00:11:09.200
about classes and objects! In the next lecture we're going to see how, actually, the whole

169
00:11:09.200 --> 00:11:13.200
Console printer itself is a class and

170
00:11:13.200 --> 00:11:17.200
it becomes an object in Unity. So we're going to find out how we can

171
00:11:17.200 --> 00:11:21.200
use that to share variables between these two different methods.

172
00:11:21.200 --> 00:11:23.000
So I will see you there!


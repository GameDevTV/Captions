WEBVTT

1
00:00:06.633 --> 00:00:10.633
Welcome! In this lecture we are going to be learning about

2
00:00:10.633 --> 00:00:14.633
variables, how we declare them, how we assign to them, and most

3
00:00:14.633 --> 00:00:18.633
importantly how we print them. So as you can see here, we have some text saying "After 10

4
00:00:18.633 --> 00:00:22.633
steps, you are 5 meters away from home." But these are not just pointing

5
00:00:22.633 --> 00:00:26.633
into our strings, into our text, they are actually declared

6
00:00:26.633 --> 00:00:30.633
through variables here. So we're doing a substitution to

7
00:00:30.633 --> 00:00:33.833
print them out in text. Let's get stuck right in!

8
00:00:33.833 --> 00:00:37.833
So we want to give our user an indication of how far

9
00:00:37.833 --> 00:00:41.833
through the game they are, so we might do this with a new print saying something

10
00:00:41.833 --> 00:00:45.833
like ("After 0 steps,

11
00:00:45.833 --> 00:00:49.833
you are X

12
00:00:49.833 --> 00:00:53.833
meters away from

13
00:00:53.833 --> 00:00:57.833
home.") like so. And we could say, you know, "After Y steps,"

14
00:00:57.833 --> 00:01:01.833
so that is different every time that we print it.

15
00:01:01.833 --> 00:01:05.833
OK, so you can see, what I'm doing here is I'm putting in some

16
00:01:05.833 --> 00:01:09.833
substitutes for what I actually want to say.

17
00:01:09.833 --> 00:01:13.833
Now, in programming, we call these substitutes variables,

18
00:01:13.833 --> 00:01:17.833
because they're things that we want to vary. OK, so

19
00:01:17.833 --> 00:01:21.833
how can we define a variable in programming? So,

20
00:01:21.833 --> 00:01:25.833
just before this first print statement i'm going to add a new line, and that's where I'm

21
00:01:25.833 --> 00:01:29.833
going to do this variable declaration as it's called.

22
00:01:29.833 --> 00:01:33.833
Now, a variable has a type, so what kind of thing is

23
00:01:33.833 --> 00:01:37.833
stored in it? Is it a number? is it a text string

24
00:01:37.833 --> 00:01:41.833
like this, or is it perhaps a different type of

25
00:01:41.833 --> 00:01:45.833
number, a floating point number? We'll go into the differences with that

26
00:01:45.833 --> 00:01:49.833
a little bit later in this lecture. So this first one is an integer, because it's something you can

27
00:01:49.833 --> 00:01:53.833
count on your fingers. So integer comes from the Latin word

28
00:01:53.833 --> 00:01:57.833
digit. No it doesn't! It doesn't come from the Latin word!

29
00:01:57.833 --> 00:02:01.833
So an integer is for basically a digit that you

30
00:02:01.833 --> 00:02:05.833
can count on your fingers, it's 1, 2, etc. but not

31
00:02:05.833 --> 00:02:09.833
something like 1.5. You can't have 1.5 fingers unless  you're lucky.

32
00:02:09.833 --> 00:02:13.833
So there it is, the number of steps

33
00:02:13.833 --> 00:02:17.833
taken is what we're trying to do. So number

34
00:02:17.833 --> 00:02:21.833
OfSteps. And that is the name of the variable, that's how we're going

35
00:02:21.833 --> 00:02:25.833
to refer to it in the rest of the code. And now we need to give this variable

36
00:02:25.833 --> 00:02:29.833
an initial value, and in this case, we're going to start off

37
00:02:29.833 --> 00:02:33.833
with 0. And remember, like I said, every line finishes off

38
00:02:33.833 --> 00:02:37.833
with a semicolon. So let's just look at this line again!

39
00:02:37.833 --> 00:02:41.833
I've got the type, then the name of the variable, then an

40
00:02:41.833 --> 00:02:45.833
equals sign. Now this is what we call assignment, it

41
00:02:45.833 --> 00:02:49.833
means that we are giving this variable the value on the right-hand side, this

42
00:02:49.833 --> 00:02:53.833
0. So at the end of this line the variable, numberOfSteps,

43
00:02:53.833 --> 00:02:57.833
will simply give us 0. Now that's all very

44
00:02:57.833 --> 00:03:01.833
well and good, but what can we actually do with this? Well we can refer to it, later on, in our

45
00:03:01.833 --> 00:03:05.833
code. So what we can do is, we can actually replace this Y

46
00:03:05.833 --> 00:03:09.833
with number of steps, but we have to close the string first.

47
00:03:09.833 --> 00:03:13.833
So we've created now two strings, the "After"

48
00:03:13.833 --> 00:03:17.833
and "steps", and then, we're going to use the

49
00:03:17.833 --> 00:03:21.833
plus symbol, or as it's called

50
00:03:21.833 --> 00:03:25.833
an operator, to add these

51
00:03:25.833 --> 00:03:29.833
strings and number and this variable, together. So numberOfSteps

52
00:03:29.833 --> 00:03:33.833
plus. So we've got this string, plus this variable,

53
00:03:33.833 --> 00:03:37.833
plus this string, and we'll see what that outputs!

54
00:03:37.833 --> 00:03:41.833
I'm going to Save, go into Unity, and hit play!

55
00:03:41.833 --> 00:03:45.833
OK, as you can see,

56
00:03:45.833 --> 00:03:49.833
we've got now, "After 0 steps, you are X meters from home.", so we can

57
00:03:49.833 --> 00:03:53.833
see that, that variable has been substituted into our string.

58
00:03:53.833 --> 00:03:57.833
So I can change the variable to something else perhaps,

59
00:03:57.833 --> 00:04:01.833
like 10 steps, and if I hit

60
00:04:01.833 --> 00:04:05.833
play again, we should see that that is what is updated

61
00:04:05.833 --> 00:04:09.833
in our string or out text. Here we go,

62
00:04:09.833 --> 00:04:13.833
10 steps! So you can see that variable is actually getting substituted in

63
00:04:13.833 --> 00:04:17.833
here. It's actually, It's taking it's value from this variable

64
00:04:17.833 --> 00:04:21.833
declaration and assignment, more importantly, here.

65
00:04:22.433 --> 00:04:26.433
Now, its' your turn for a bit of a challenge! I'd like you to add a

66
00:04:26.433 --> 00:04:30.433
distance variable, you'll remember we saw that as an X here.

67
00:04:30.433 --> 00:04:34.433
I would like you to basically assign a variable that does

68
00:04:34.433 --> 00:04:38.433
that, so you need to declare a new variable with type float.

69
00:04:38.433 --> 00:04:42.433
I'll leave you to decide what the name of the variable is going to be. Try and use something

70
00:04:42.433 --> 00:04:46.433
descriptive, which actually describes what it holds.

71
00:04:46.433 --> 00:04:50.433
Then, I'd like you to assign a value of 0.0f.

72
00:04:50.433 --> 00:04:54.433
Now, don't worry about why that's different to why it's not just 0

73
00:04:54.433 --> 00:04:58.433
that we're assigning, the reason is because it needs to be the same type

74
00:04:58.433 --> 00:05:02.433
basically. It's not, This is the syntax for saying,

75
00:05:02.433 --> 00:05:06.433
we want 0.0 as a floating point number, and

76
00:05:06.433 --> 00:05:10.433
floating point numbers are things that we can't count on our fingers, such as

77
00:05:10.433 --> 00:05:14.433
1.2 or 1.6 or

78
00:05:14.433 --> 00:05:18.433
1.333, all those kind of numbers are going to be

79
00:05:18.433 --> 00:05:22.433
floating point numbers. Then, we want to print the distance

80
00:05:22.433 --> 00:05:26.433
from home, so I'll let you do that. Try and

81
00:05:26.433 --> 00:05:30.433
do the same sort of thing as we did with our number

82
00:05:30.433 --> 00:05:34.433
of steps. Then, I'd like you to try and

83
00:05:34.433 --> 00:05:38.433
figure out what happens if you assign 0, instead of 0.0f.

84
00:05:38.433 --> 00:05:42.433
What happens when you click play? What happens in the

85
00:05:42.433 --> 00:05:46.433
IDE, does anything show you there might be an error?

86
00:05:46.433 --> 00:05:50.433
OK, so pause the video and have a go at this little challenge!

87
00:05:50.433 --> 00:05:54.433
OK welcome back! I hope you've all

88
00:05:54.433 --> 00:05:58.433
had a go! Remember that attempting these challenges really does help your learning

89
00:05:58.433 --> 00:06:02.433
massively. OK, let's dive in and have a go at this!

90
00:06:02.433 --> 00:06:06.433
So the first thing I want to do is declare a new variable, and as I said, I want the

91
00:06:06.433 --> 00:06:10.433
type to b float, like so. And what's a

92
00:06:10.433 --> 00:06:14.433
good name? Maybe distance would be a good name, and I'm going to

93
00:06:14.433 --> 00:06:18.433
assign 0.0f to it, like so,

94
00:06:18.433 --> 00:06:22.433
lower case f. Remember that, we need,  the computer is very

95
00:06:22.433 --> 00:06:26.433
fussy about reading this code. If we get things wrong like

96
00:06:26.433 --> 00:06:30.433
a capital F, sometimes that will be a problem,

97
00:06:30.433 --> 00:06:34.433
or if we just

98
00:06:34.433 --> 00:06:38.433
type something wrong, you see that it knows that this doesn't

99
00:06:38.433 --> 00:06:42.433
quite make sense. However, you can often

100
00:06:42.433 --> 00:06:46.433
miss spaces, so things like this don't matter so much, spaces are not

101
00:06:46.433 --> 00:06:50.433
what's so important, and you can generally put, wherever

102
00:06:50.433 --> 00:06:54.433
there is one space you can put many many spaces, like so.

103
00:06:54.433 --> 00:06:58.433
And sometimes this is useful, when you want formatting to be

104
00:06:58.433 --> 00:07:02.433
nice and neat, but almost never do this, almost never add multiple

105
00:07:02.433 --> 00:07:06.433
spaces, because it just looks a bit odd. One case where you might

106
00:07:06.433 --> 00:07:10.433
do it is, if you wanted to nicely align these names

107
00:07:10.433 --> 00:07:14.433
with the variables, and perhaps the equal sign sometimes programmers like

108
00:07:14.433 --> 00:07:18.433
doing that for neatness. But we aren't going to be doing that, it just makes

109
00:07:18.433 --> 00:07:22.433
it a little bit harder to keep your code up to date and we don't want that. So

110
00:07:22.433 --> 00:07:26.433
let's stick with this convention, at the moment. Try and don't use more than

111
00:07:26.433 --> 00:07:30.433
one space, wherever possible. The other thing you'll notice is,

112
00:07:30.433 --> 00:07:34.433
all these lines are indented, that means they have the same amount of

113
00:07:34.433 --> 00:07:38.433
space here to the left, and that allows

114
00:07:38.433 --> 00:07:42.433
us to see that they are all part of this, between

115
00:07:42.433 --> 00:07:46.433
these brackets. It just keeps things nice and neat and we can see

116
00:07:46.433 --> 00:07:50.433
what is what. So we'll see more about indentation

117
00:07:50.433 --> 00:07:54.433
in lectures coming up. OK

118
00:07:54.433 --> 00:07:58.433
so we have our distance variable now,

119
00:07:58.433 --> 00:08:02.433
and we want to add it into our print statement, so

120
00:08:02.433 --> 00:08:06.433
let's do the same procedure as we did before. I'm just going to turn this into two strings,

121
00:08:06.433 --> 00:08:10.433
this one and this one, and then, I'm going to put a

122
00:08:10.433 --> 00:08:14.433
plus in the middle and a plus in the distance, like so.

123
00:08:14.433 --> 00:08:18.433
OK let's hop back into Unity and see what

124
00:08:18.433 --> 00:08:22.433
this does!

125
00:08:22.433 --> 00:08:26.433
OK, now it says 0 meters from home. Let's just change that,

126
00:08:26.433 --> 00:08:30.433
to make sure that we can do other things. So, like I said, numbers can be all

127
00:08:30.433 --> 00:08:34.433
sorts of things like 1243.33, something like this.

128
00:08:34.433 --> 00:08:38.433
And if I print that, it should

129
00:08:38.433 --> 00:08:42.433
still give me that. So let's have a look! There you go,

130
00:08:42.433 --> 00:08:46.433
we've got the floating point number! Now what happens if I try to put

131
00:08:46.433 --> 00:08:50.433
this number? I'm just going to copy it and replace 10 with it.

132
00:08:50.433 --> 00:08:54.433
Does that work? Now you can see, I get a red squiggly line

133
00:08:54.433 --> 00:08:58.433
underneath, saying that it "Cannot implicitly convert from type 'float' to 'int'. "

134
00:08:58.433 --> 00:09:02.433
So we're getting some indication of what these types are doing, we can't

135
00:09:02.433 --> 00:09:06.433
mix and match them, just like that. Sometimes it works like we're seeing,

136
00:09:06.433 --> 00:09:10.433
with the plus operator we're doing an int added to a

137
00:09:10.433 --> 00:09:14.433
string, added to a float. There it works! So in some places it can do it

138
00:09:14.433 --> 00:09:18.433
implicitly but here it can't, that's what it just told us.

139
00:09:18.433 --> 00:09:22.433
How about if I put a 0 here, will that work?

140
00:09:22.433 --> 00:09:26.433
I'll hit Save,

141
00:09:26.433 --> 00:09:30.433
and then, I hit, we can hit play, see what that's going to work

142
00:09:30.433 --> 00:09:34.433
out. Yeah, so in this case, it

143
00:09:34.433 --> 00:09:38.433
has been able to do an implicit conversion from

144
00:09:38.433 --> 00:09:42.433
the two, so I could perhaps put 5 as well.

145
00:09:42.433 --> 00:09:46.433
Let's see whether that can be implicitly

146
00:09:46.433 --> 00:09:50.433
converted. Yeah, that can also be implicitly

147
00:09:50.433 --> 00:09:54.433
converted. But if we want to make sure that it's floating point number, it's

148
00:09:54.433 --> 00:09:58.433
that syntax here, with the, make sure there's a decimal

149
00:09:58.433 --> 00:10:02.433
point and making sure there is f at the end.

150
00:10:02.433 --> 00:10:06.433
OK, so that is a challenge successfully completed! You have introduced

151
00:10:06.433 --> 00:10:10.033
your your first variables! I'm looking forward to seeing you in the next lecture!


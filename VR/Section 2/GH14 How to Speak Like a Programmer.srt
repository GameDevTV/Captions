1
00:00:00,000 --> 00:00:04,000
...

2
00:00:04,000 --> 00:00:08,000
Welcome to How to

3
00:00:08,000 --> 00:00:12,000
Speak Like  A Programmer! In this lecture we are going

4
00:00:12,000 --> 00:00:16,000
to be doing a recap of all this new terminology and all this new knowledge,

5
00:00:16,000 --> 00:00:20,000
that we have seen this section, because I really want it to sink in for you,

6
00:00:20,000 --> 00:00:24,000
so you can go away with a strong base for the next few sections.

7
00:00:24,000 --> 00:00:28,000
So the key things are going to be understanding the structure of programs that you are

8
00:00:28,000 --> 00:00:32,000
writing, learning the programming jargon, which we've been covering in

9
00:00:32,000 --> 00:00:36,000
our glossary so far, and the statements vs. Expressions question.

10
00:00:36,000 --> 00:00:40,000
What exactly is the difference, as well as methods, and Execution Flow? What

11
00:00:40,000 --> 00:00:44,000
these things mean, well what is execution flow, in the first place, and the components of a

12
00:00:44,000 --> 00:00:48,000
class? So let's dive right in and start to answer some of these

13
00:00:48,000 --> 00:00:52,000
questions! What is a program? So

14
00:00:52,000 --> 00:00:56,000
as we said, it's just basically a script that is given to an actor, so it's

15
00:00:56,000 --> 00:01:00,000
just a series of steps for the computer to execute, and these

16
00:01:00,000 --> 00:01:04,000
steps change data, the data that is stored in variables.

17
00:01:04,000 --> 00:01:08,000
So you've got steps that are going along, changing the data in some sort of

18
00:01:08,000 --> 00:01:12,000
way. And the order of these steps is

19
00:01:12,000 --> 00:01:16,000
Execution Flow. So basically, which step happens after which

20
00:01:16,000 --> 00:01:20,000
other step? And it might seem obvious but once you start to add in

21
00:01:20,000 --> 00:01:24,000
methods it becomes a little bit less obvious and we'll see that in just a second, but

22
00:01:24,000 --> 00:01:28,000
first off, I want to have a look at Statements and Expressions and what the difference

23
00:01:28,000 --> 00:01:32,000
is between the two. So we've seen these lines of code, the print

24
00:01:32,000 --> 00:01:36,000
("Welcome to Go Home!") and ("A game where you need to find your way back.").

25
00:01:36,000 --> 00:01:40,000
So both of these here are Statements, they execute an instruction,

26
00:01:40,000 --> 00:01:44,000
and, in this case, the instruction is to print something to the screen.

27
00:01:44,000 --> 00:01:48,000
How about this thing here? Well quite clearly

28
00:01:48,000 --> 00:01:52,000
it has an Expression in it, which evaluates to a value, that location

29
00:01:52,000 --> 00:01:56,000
+ movementVector creates another vector, a new vector,

30
00:01:56,000 --> 00:02:00,000
which is the sum of those two. But the whole thing

31
00:02:00,000 --> 00:02:04,000
is a Statement, because it has an Expression that is being assigned

32
00:02:04,000 --> 00:02:08,000
to a location, therefore it's this action that's being executed

33
00:02:08,000 --> 00:02:12,000
to assign to the location variable, and so we are changing the

34
00:02:12,000 --> 00:02:16,000
data in that location variable. Now there's

35
00:02:16,000 --> 00:02:20,000
something called a compound statement and we've seen these before in if statements.

36
00:02:20,000 --> 00:02:24,000
So basically, a compound statement sounds like a fancy word but, very

37
00:02:24,000 --> 00:02:28,000
simply put, it has some Expressions in it, such as

38
00:02:28,000 --> 00:02:32,000
we've seen here as well, we've had an Expression inside a statement. So you've got an

39
00:02:32,000 --> 00:02:36,000
Expression there, which is the boolean Expression which tells us whether to execute this

40
00:02:36,000 --> 00:02:40,000
block of code or not, and then, inside this block

41
00:02:40,000 --> 00:02:44,000
we have lots of statements, not just one. Each of these

42
00:02:44,000 --> 00:02:48,000
lines, in fact, is a statement. As we saw, this is a statement, obviously this is updating

43
00:02:48,000 --> 00:02:52,000
the pathToHome, we're printing something as well, and then, we've got another if statement even

44
00:02:52,000 --> 00:02:56,000
or another compound statement inside. So as a whole, this whole

45
00:02:56,000 --> 00:03:00,000
block is a Compound Statement, because it consists of multiple sub-statements.

46
00:03:00,000 --> 00:03:04,000
So just some interesting terminology, in the way that

47
00:03:04,000 --> 00:03:08,000
statements go within statements and expressions go within expressions, t's not

48
00:03:08,000 --> 00:03:12,000
completely trivial. We've also got Methods

49
00:03:12,000 --> 00:03:16,000
and Execution Flow! So what is this? Well firstly, these things here are

50
00:03:16,000 --> 00:03:20,000
Methods. As we quite clearly know, they both have a void return

51
00:03:20,000 --> 00:03:24,000
type, they take some arguments, or no arguments. Then, they've got their body

52
00:03:24,000 --> 00:03:28,000
block of code that they execute. Now, how does

53
00:03:28,000 --> 00:03:32,000
it start? So if we start executing Start(), how does the Execution Flow look?

54
00:03:32,000 --> 00:03:36,000
Let's have a look! Well at first we would do the prints, we'd print and then

55
00:03:36,000 --> 00:03:40,000
print, and then we'd reach the Average() method,

56
00:03:40,000 --> 00:03:44,000
and we would call that method. That means that the Execution Flow

57
00:03:44,000 --> 00:03:48,000
jumps over to the Average() method and starts

58
00:03:48,000 --> 00:03:52,000
executing through that. So we work out our Average,

59
00:03:52,000 --> 00:03:56,000
we print the Average. Then, what happens when we get to the end? Well Execution

60
00:03:56,000 --> 00:04:00,000
Flow returns back to where we left it, so we left

61
00:04:00,000 --> 00:04:04,000
it at 2 and we come back to it at 4, and that means that in at

62
00:04:04,000 --> 00:04:08,000
5 we can move on to the next line in that function

63
00:04:08,000 --> 00:04:12,000
and then it jumps back into Average again. You can see how this is helping

64
00:04:12,000 --> 00:04:16,000
with avoiding repetition, because now we run through this code a second

65
00:04:16,000 --> 00:04:20,000
time with number 7 and then jump back. So

66
00:04:20,000 --> 00:04:24,000
instead of having to write those statements out twice, we just simply

67
00:04:24,000 --> 00:04:28,000
executed them twice. And you can see how Execution Flow really does just

68
00:04:28,000 --> 00:04:32,000
follow along. You can read it from top to bottom and just jump to the

69
00:04:32,000 --> 00:04:36,000
functions and remember where you have to jump back to. Obviously, the more

70
00:04:36,000 --> 00:04:40,000
functions you get, the more jumping around you do, it starts to get hard to remember

71
00:04:40,000 --> 00:04:44,000
where you jump back to, but the computer is very good at remembering this for you.

72
00:04:44,000 --> 00:04:48,000
So Classes, Types, and Variables. Here

73
00:04:48,000 --> 00:04:52,000
we have, obviously, some Variables that we have defined our location

74
00:04:52,000 --> 00:04:56,000
and homeLocation. As we know, these Variables have to have

75
00:04:56,000 --> 00:05:00,000
a Type at the beginning, and sometimes these types are actually Classes, they're user

76
00:05:00,000 --> 00:05:04,000
defined and complex. As opposed to being things like ints and floats and strings,

77
00:05:04,000 --> 00:05:08,000
which are just simple types, you can have Class based Types, often

78
00:05:08,000 --> 00:05:12,000
they have a capital letter at the front, and they have

79
00:05:12,000 --> 00:05:16,000
often much more in them, such as the Vector2 has 2 vectors and

80
00:05:16,000 --> 00:05:20,000
you can do all sorts of operations on those vectors. So

81
00:05:20,000 --> 00:05:24,000
this whole thing, in comprising the Variables and the Methods,

82
00:05:24,000 --> 00:05:28,000
is a Class, and we know that the Class name is given here,

83
00:05:28,000 --> 00:05:32,000
after that little bit of class keyword

84
00:05:32,000 --> 00:05:36,000
that indicates this. ConsolePrinter is the name of the Class.

85
00:05:36,000 --> 00:05:40,000
So time for a challenge for you! I would like you to

86
00:05:40,000 --> 00:05:44,000
annotate your program. So your program may look slightly different to mine,

87
00:05:44,000 --> 00:05:48,000
it might not. You may have chosen slightly different variable names or you may not have.

88
00:05:48,000 --> 00:05:52,000
But I'd like you to take a screenshot of the entire program and put

89
00:05:52,000 --> 00:05:56,000
some annotations on it. So find the simple and compound

90
00:05:56,000 --> 00:06:00,000
statements, for example. Label all your functions or as I call them methods,

91
00:06:00,000 --> 00:06:04,000
they're also called functions. Use an arrow to

92
00:06:04,000 --> 00:06:08,000
show the execution flow through your program. Don't worry about getting the whole

93
00:06:08,000 --> 00:06:12,000
Execution Flow, that might be too much, but just give it a go for some

94
00:06:12,000 --> 00:06:16,000
shallow level. And then, what data does our

95
00:06:16,000 --> 00:06:20,000
class contain? Because we know that the data is what fundamentally gets

96
00:06:20,000 --> 00:06:24,000
changed, as we run through our statements.

97
00:06:24,000 --> 00:06:28,000
And what are the functions? We've

98
00:06:28,000 --> 00:06:32,000
kind of already covered that. And share this on

99
00:06:32,000 --> 00:06:36,000
the forum. Basically, go to your discussions link

100
00:06:36,000 --> 00:06:40,000
in the lecture resources and that will take you straight to the discussions for this

101
00:06:40,000 --> 00:06:44,000
lecture, and just post on the bottom of one of those threads there, where people

102
00:06:44,000 --> 00:06:48,000
are already sharing their annotated programs. OK, so Pause the video and have a go at

103
00:06:48,000 --> 00:06:52,000
creating your own annotation!

104
00:06:52,000 --> 00:06:56,000
OK welcome back! I look forward to seeing your annotations in the thread! There's

105
00:06:56,000 --> 00:07:00,000
loads of people who've done loads of great work there, already! Now I just

106
00:07:00,000 --> 00:07:04,000
want to quickly do a little review. We've seen quite a few glossaries. If you've followed the lecture

107
00:07:04,000 --> 00:07:08,000
resource link here, to these lecture slides, you'll also be able

108
00:07:08,000 --> 00:07:12,000
to take a look at this glossary and revise these terms, if ever you get

109
00:07:12,000 --> 00:07:16,000
confused about something I say, in any of the lectures coming up or that have

110
00:07:16,000 --> 00:07:20,000
been. So we've seen Values, Types, Variables,

111
00:07:20,000 --> 00:07:24,000
Statements, and Expressions. I don't think I need to cover that in too much detail anymore.

112
00:07:24,000 --> 00:07:28,000
We have Methods that take Arguments and they Return Values,

113
00:07:28,000 --> 00:07:32,000
and Methods are essentially Operations. We've

114
00:07:32,000 --> 00:07:36,000
seen the difference between an Object and a Class and how an Object is an

115
00:07:36,000 --> 00:07:40,000
Instantiated version of that blueprint, the Class, and that an

116
00:07:40,000 --> 00:07:44,000
Object is sometimes also called an Instance. And just

117
00:07:44,000 --> 00:07:48,000
in this lecture, we have seen how Compound Statements are, themselves, made out of

118
00:07:48,000 --> 00:07:52,000
sub-statements, the example being the if Statement. We've got

119
00:07:52,000 --> 00:07:56,000
Execution Flow, which is the order in which Statements are executed,

120
00:07:56,000 --> 00:08:00,000
and we have the DRY Principle, which stands for Don't Repeat Yourself

121
00:08:00,000 --> 00:08:04,000
and it is basically the principle of avoiding repetition.

122
00:08:04,000 --> 00:08:08,000
So for example, we, in the last lecture, factored out some

123
00:08:08,000 --> 00:08:12,000
Methods to avoid repeating code, and we've just seen how the

124
00:08:12,000 --> 00:08:16,000
Execution Flow works, when you do that. And Refactoring, as we know, is the

125
00:08:16,000 --> 00:08:20,000
process of doing both that, trying to conform to the DRY Principle

126
00:08:20,000 --> 00:08:24,000
by moving and renaming code for better maintainability just in general.

127
00:08:24,000 --> 00:08:28,000
So an example of that, that we haven't already covered, would be renaming

128
00:08:28,000 --> 00:08:33,300
Variables or Methods and Classes, and we will be doing a bit of that. In fact, let's do that right now!

129
00:08:33,300 --> 00:08:37,300
So here is the code, as we left it!

130
00:08:37,300 --> 00:08:41,300
The thing I'm really looking out for is whether these names are appropriate,

131
00:08:41,300 --> 00:08:45,300
if we read through and check it out. So is it a

132
00:08:45,300 --> 00:08:49,300
ConsolePrinter still? Is this Class a ConsolePrinter? No, not really, it's a Go

133
00:08:49,300 --> 00:08:53,300
Home game, so we want to rename this. So I'm going to change

134
00:08:53,300 --> 00:08:57,300
this to being called a GoHomeGame,

135
00:08:57,300 --> 00:09:01,300
and

136
00:09:01,300 --> 00:09:05,300
obviously, I need to rename the file as well. So I'll go over to the Project

137
00:09:05,300 --> 00:09:09,300
and rename it to

138
00:09:09,300 --> 00:09:13,300
GoHomeGame, because that has to match.

139
00:09:13,300 --> 00:09:17,300
I'll just Reload! It's obviously disappeared, because the file name's

140
00:09:17,300 --> 00:09:21,300
no longer the same. We can't change the name of Start().

141
00:09:21,300 --> 00:09:25,300
Average() here isn't actually doing anything. We don't want that code,

142
00:09:25,300 --> 00:09:29,300
it was just there to show us that we can

143
00:09:29,300 --> 00:09:33,300
factor out methods like that. How about location and

144
00:09:33,300 --> 00:09:37,300
homeLocation? Well location's a bit ambiguous, just by itself, so I'll teach

145
00:09:37,300 --> 00:09:41,300
you a little trick. If we right-click on this, we can go to Rename,

146
00:09:41,300 --> 00:09:45,300
in VisualStudio, and call this the playerLocation

147
00:09:45,300 --> 00:09:49,300
like so. And if I hit Apply, you'll notice that further down

148
00:09:49,300 --> 00:09:53,300
the location has been replaced with playerLocation. So that

149
00:09:53,300 --> 00:09:57,300
is all great! How about CheckForMovement?

150
00:09:57,300 --> 00:10:01,300
Does that seem about right? Well

151
00:10:01,300 --> 00:10:05,300
it does, however, some of it is not actually

152
00:10:05,300 --> 00:10:09,300
checking for movement. So what we have in here, we've got pathTo

153
00:10:09,300 --> 00:10:13,300
Home, and it is printing out the "Distance to

154
00:10:13,300 --> 00:10:17,300
home: " and it's printing out that message. That's not really checking for movement, and this bit is

155
00:10:17,300 --> 00:10:21,300
updating movement, so maybe we call this UpdateMovement.

156
00:10:21,300 --> 00:10:25,300
So I can, again, right-click, Rename,

157
00:10:25,300 --> 00:10:29,300
and call this UpdateMovement.

158
00:10:29,300 --> 00:10:33,300
Apply, and that's starting to get more legible already.

159
00:10:33,300 --> 00:10:37,300
Now, one other trick that you want to do,

160
00:10:37,300 --> 00:10:41,300
when trying to keep things at a steady level of

161
00:10:41,300 --> 00:10:45,300
abstraction. You have this UpdateMovement() Method,

162
00:10:45,300 --> 00:10:49,300
which is doing one thing and it's updating movement here, but then, it's also doing

163
00:10:49,300 --> 00:10:53,300
all this other stuff to try and calculate the "Distance to home: ", which is really happening

164
00:10:53,300 --> 00:10:57,300
at a different level. Really, what this whole block is doing is

165
00:10:57,300 --> 00:11:01,300
update user distance or update display

166
00:11:01,300 --> 00:11:05,300
user, something like that. So what we can do is, we can take this out

167
00:11:05,300 --> 00:11:09,300
into a Method, and it doesn't actually take any arguments or return anything or...

168
00:11:09,300 --> 00:11:13,300
Well it does but it's just the playerLocation,

169
00:11:13,300 --> 00:11:17,300
which is already available to the class. So what we can do is, in

170
00:11:17,300 --> 00:11:21,300
VisualStudio it's very easy. If we right-click, we can do Quick Actions and Refactoring,

171
00:11:21,300 --> 00:11:25,300
and we want to, indeed, Extract a Method. So

172
00:11:25,300 --> 00:11:29,300
we click on that

173
00:11:29,300 --> 00:11:33,300
and we want to rename it

174
00:11:33,300 --> 00:11:37,300
to something meaningful. So what shall we

175
00:11:37,300 --> 00:11:41,300
call it? Basically, it is PrintDistance

176
00:11:41,300 --> 00:11:45,300
ToHome(),

177
00:11:45,300 --> 00:11:49,300
and we'll apply that and suddenly the UpdateMovement becomes very obvious.

178
00:11:49,300 --> 00:11:53,300
We're checking if the key is down, we're updating the location, then we're printing the distance to home,

179
00:11:53,300 --> 00:11:57,300
and that's very clear, and then, if you go into print("Distance to home: ", it's clear

180
00:11:57,300 --> 00:12:01,300
why it's doing all these calculations. So this has

181
00:12:01,300 --> 00:12:05,300
simply made our code that much easier to read, simply by

182
00:12:05,300 --> 00:12:09,300
extracting methods out of our existing code, and

183
00:12:09,300 --> 00:12:13,300
you've also seen how easy it is to extract methods in that way. You'll

184
00:12:13,300 --> 00:12:17,300
notice that this has private in front of it, this is very similar to these methods

185
00:12:17,300 --> 00:12:21,300
here, these Variables which have public. By default, Variables are private

186
00:12:21,300 --> 00:12:25,300
and Methods are public, which is why we need to make this one

187
00:12:25,300 --> 00:12:29,300
private, because basically we don't want other people printing this. And we can do that same

188
00:12:29,300 --> 00:12:33,300
thing with UpdateMovement. We don't want other classes

189
00:12:33,300 --> 00:12:37,300
to be able to Update our Movement, we just want to be able to do that ourselves.

190
00:12:37,300 --> 00:12:41,300
So I will save that and we'll just go, and

191
00:12:41,300 --> 00:12:45,300
it's always a good idea to check that your game is still working, after doing a bit of refactoring,

192
00:12:45,300 --> 00:12:49,300
because it's very easy to break things. So I can

193
00:12:49,300 --> 00:12:53,300
still move. And can I win the game?

194
00:12:53,300 --> 00:12:57,300
Let's get home. Yes, I'm home! So I have been able to

195
00:12:57,300 --> 00:13:01,300
win the game, and I've improved the state of my code slightly, so that

196
00:13:01,300 --> 00:13:05,300
is fantastic! That is refactoring in action, moving, renaming

197
00:13:05,300 --> 00:13:09,300
code for better readability. There you have it! So I will see

198
00:13:09,300 --> 00:13:13,300
you in the next lecture, where we'll be learning to debug our code!

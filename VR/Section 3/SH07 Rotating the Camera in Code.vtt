WEBVTT

1
00:00:06.866 --> 00:00:10.866
Welcome! In this lecture we are going to be learning how to rotate

2
00:00:10.866 --> 00:00:14.866
our camera, based on the...

3
00:00:14.866 --> 00:00:18.866
a concept called a Quaternion.

4
00:00:19.600 --> 00:00:23.600
OK, so the first thing we need to do to get this rotation

5
00:00:23.600 --> 00:00:27.600
happening in code is Create a new Script, and we like to

6
00:00:27.600 --> 00:00:31.600
have different scripts for every different responsibility. So we had one for spawning

7
00:00:31.600 --> 00:00:35.600
the ball and we have a responsibility of turning the

8
00:00:35.600 --> 00:00:39.600
camera, so we've got CameraRotation.

9
00:00:39.600 --> 00:00:43.600
So that's what the script's going to be called, and I'm going to drag that on the Camera as well. So you see it keeps

10
00:00:43.600 --> 00:00:47.600
all the components nice and modular. If we look on the Camera, you can

11
00:00:47.600 --> 00:00:51.600
see each.. each script is doing it's own thing.

12
00:00:51.600 --> 00:00:55.600
OK this is a ghost component from something I was doing before,

13
00:00:55.600 --> 00:00:59.600
that's a bit naughty that it was in the video. Um, so we have

14
00:00:59.600 --> 00:01:03.600
the CameraRotation script, and here we have this Camera

15
00:01:03.600 --> 00:01:07.600
Rotation script. Let's open it up in VisualStudio.

16
00:01:07.600 --> 00:01:11.600
And what can we do with the CameraRotation? So

17
00:01:11.600 --> 00:01:15.600
if we look at our game object, for the Camera, for a moment,

18
00:01:15.600 --> 00:01:19.600
we'll notice that there's a Transform with a Rotation property.

19
00:01:19.600 --> 00:01:23.600
Now we want to be looking at that one. Now a transform is very easy to

20
00:01:23.600 --> 00:01:27.600
get hold of. We don't have to do, ah..we can do a GetComponent

21
00:01:27.600 --> 00:01:31.600
transform, like you've seen

22
00:01:31.600 --> 00:01:35.600
me do before but that's not necessary. There's a

23
00:01:35.600 --> 00:01:39.600
shortcut for that, which is just transform like this. So transform

24
00:01:39.600 --> 00:01:43.600
and here we can do a .rotation or we can

25
00:01:43.600 --> 00:01:47.600
do a .local rotation. Well we'll be doing a .rotation for now.

26
00:01:47.600 --> 00:01:51.600
And now, what can you set the rotation

27
00:01:51.600 --> 00:01:55.600
to? So this is something new, updating

28
00:01:55.600 --> 00:01:59.600
updating a property. Well we

29
00:01:59.600 --> 00:02:03.600
actually are with velocity, so that's exactly the same thing we're doing here. We're

30
00:02:03.600 --> 00:02:07.600
updating this field in code, by assigning to it.

31
00:02:07.600 --> 00:02:11.600
Now what can we assign? Well we need to assign is a..what's called a

32
00:02:11.600 --> 00:02:15.600
Quaternion. This is a new type but don't worry

33
00:02:15.600 --> 00:02:19.600
too much about the details. It's a complex algebraic structure, but all we

34
00:02:19.600 --> 00:02:23.600
need to know about it is that it implements a rotation, if we do

35
00:02:23.600 --> 00:02:27.600
Quaternion.Euler(), like this.

36
00:02:27.600 --> 00:02:31.600
Euler refers to some mathematical

37
00:02:31.600 --> 00:02:35.600
constructs. Don't really worry about the details, all you need to know is, to do a rotation you

38
00:02:35.600 --> 00:02:39.600
need a Quaternion.Euler. And then,

39
00:02:39.600 --> 00:02:43.600
if we have a look down with the arrows, you'll see, we're going to be using this signature here, which gives us the

40
00:02:43.600 --> 00:02:47.600
x, y, and z. And as it says, in the documentation here, "Returns

41
00:02:47.600 --> 00:02:51.600
a rotation that rotates z degrees around the z axis,

42
00:02:51.600 --> 00:02:55.600
x degrees around the x axis", etc. So let's

43
00:02:55.600 --> 00:02:59.600
rotate around the Y axis. So I'm going to do 0 in X,

44
00:02:59.600 --> 00:03:03.600
90 degrees in Y, and 0 in Z.

45
00:03:03.600 --> 00:03:07.600
Now I'll put my semicolon there. And let's go back to

46
00:03:07.600 --> 00:03:11.600
Unity and have a look at how this plays!

47
00:03:11.600 --> 00:03:15.600
OK, we do appear to have changed the viewing angle of our

48
00:03:15.600 --> 00:03:19.600
camera, because now if I enter balls in the scene we can't actually see them.

49
00:03:19.600 --> 00:03:23.600
Now I want to show you something really cool about the Unity Editor. If you go into the Scene

50
00:03:23.600 --> 00:03:27.600
tab, you can actually have a look live

51
00:03:27.600 --> 00:03:31.600
at what your game is doing. You can scroll

52
00:03:31.600 --> 00:03:35.600
around and select items that are in the scene

53
00:03:35.600 --> 00:03:39.600
and only at runtime. So if we have a look at our Camera

54
00:03:39.600 --> 00:03:43.600
object, and we'll look from the top, because that's the dimension in which

55
00:03:43.600 --> 00:03:47.600
we were rotating it. I want to see

56
00:03:47.600 --> 00:03:51.600
the cone of the camera,

57
00:03:51.600 --> 00:03:55.600
which is proving hard to get hold of.

58
00:03:55.600 --> 00:03:59.600
But we don't have to see the cone, because you can see the Rotation, in the

59
00:03:59.600 --> 00:04:03.600
Inspector, is 90 degrees. OK that is quite

60
00:04:03.600 --> 00:04:07.600
clear. Now I want to show you one more feature of Quaternions,

61
00:04:07.600 --> 00:04:11.600
is that you can essentially add them together,

62
00:04:11.600 --> 00:04:15.600
in the sense that you can rotate by 90 degrees

63
00:04:15.600 --> 00:04:19.600
and then you can rotate by another 90 degrees. So how would you

64
00:04:19.600 --> 00:04:23.600
do that? Or let's say 90 degrees and 30 degrees. Well

65
00:04:23.600 --> 00:04:27.600
you would be tempted to think that you could do + Quaternion

66
00:04:27.600 --> 00:04:31.600
.Euler(0, 90,

67
00:04:31.600 --> 00:04:35.600
or 30 degrees like that. However, you see

68
00:04:35.600 --> 00:04:39.600
this gives us an error, because we can't do + apparently between

69
00:04:39.600 --> 00:04:43.600
Quaternion types. However, you can do multiplication, and in actual fact,

70
00:04:43.600 --> 00:04:47.600
multiplication is what we want. If you multiply this rotation by this

71
00:04:47.600 --> 00:04:51.600
rotation, what the result is essentially

72
00:04:51.600 --> 00:04:55.600
having rotated by both of these. So if I pause

73
00:04:55.600 --> 00:04:59.600
and hit play again

74
00:04:59.600 --> 00:05:03.600
and then we come back to our scene and look at our Main Camera,

75
00:05:03.600 --> 00:05:07.600
you'll notice indeed it has rotated by 120, which is the sum of those

76
00:05:07.600 --> 00:05:11.100
two rotations.

77
00:05:11.100 --> 00:05:15.100
So here is my challenge! I'd like you to send the camera spinning! By

78
00:05:15.100 --> 00:05:19.100
that I mean I want you to spin the camera around and around over time.

79
00:05:19.100 --> 00:05:23.100
To do this, you need to update the CameraRotation every frame.

80
00:05:23.100 --> 00:05:27.100
So remember how you can do that, if not have a look back through the

81
00:05:27.100 --> 00:05:31.100
previous lectures at how we do things every frame. And then, I would like you to

82
00:05:31.100 --> 00:05:35.100
base the new rotation off the old one, so that we are constantly

83
00:05:35.100 --> 00:05:39.100
incrementing this rotation. And then, here's a

84
00:05:39.100 --> 00:05:43.100
hint, you'll need to use multiplication to do this. So pause the video and have a

85
00:05:43.100 --> 00:05:47.100
go at this challenge!

86
00:05:47.100 --> 00:05:51.100
OK welcome back! Let's dive right into

87
00:05:51.100 --> 00:05:55.100
doing this! So the first thing, I

88
00:05:55.100 --> 00:05:59.100
said I wanted it to happen every frame, and Update () is the place for things that

89
00:05:59.100 --> 00:06:03.100
happen every frame, as this method gets called every frame. So we update the

90
00:06:03.100 --> 00:06:07.100
rotation but we're updating it to a fixed value.

91
00:06:07.100 --> 00:06:11.100
There's always this 30 degree rotation, so that's not actually going to help us.

92
00:06:11.100 --> 00:06:15.100
It's not going to rotate the camera any further. So what we need to do is

93
00:06:15.100 --> 00:06:19.100
factor into account the old rotation as well, so I'll multiply

94
00:06:19.100 --> 00:06:23.100
by transform.rotation. So you

95
00:06:23.100 --> 00:06:27.100
remember this is the very common pattern that we had, like we had with distance, where we

96
00:06:27.100 --> 00:06:31.100
had distance = distance + 1, for example.

97
00:06:31.100 --> 00:06:35.100
Now let's have a look in the Unity Editor at what this does

98
00:06:35.100 --> 00:06:39.100
for us! OK, as you see, it's

99
00:06:39.100 --> 00:06:43.100
spinning ridiculously quickly, because we're rotating by 90 degrees every frame.

100
00:06:43.100 --> 00:06:47.100
So it's just all of a jutter! So if we just rotated

101
00:06:47.100 --> 00:06:51.100
by 1 degree per frame, let's see what effect that has!

102
00:06:51.100 --> 00:06:55.100
OK

103
00:06:55.100 --> 00:06:59.100
that is much nicer and much smoother! Now, just to show you

104
00:06:59.100 --> 00:07:03.100
that the rotation can happen in other dimensions too, so

105
00:07:03.100 --> 00:07:07.100
we can rotate around Z. Let's try that out!

106
00:07:07.100 --> 00:07:11.100
I'm going to hit play! There you go! That

107
00:07:11.100 --> 00:07:15.100
is a rotation around Z, and

108
00:07:15.100 --> 00:07:19.100
finally, let's do a rotation around X.

109
00:07:19.100 --> 00:07:23.100
That's this one here. Hit play

110
00:07:23.100 --> 00:07:27.100
and there we go! That's

111
00:07:27.100 --> 00:07:31.100
our rotation around X. So

112
00:07:31.100 --> 00:07:35.100
you've finally managed to get the code to rotate

113
00:07:35.100 --> 00:07:39.100
the camera, and you've learned about Quaternion

114
00:07:39.100 --> 00:07:42.966
multiplication. Well done, that's a lot of concepts for one lecture!


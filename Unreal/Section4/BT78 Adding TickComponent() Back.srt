<<<<<<< HEAD:Unreal/Section4/BT78 Adding TickComponent() Back.srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
Hey. and for want of a better

2
00:00:04.000 --> 00:00:08.000
name I'm going to call this Adding TickComponent() Back! It's a little bit more than that. we'll

3
00:00:08.000 --> 00:00:12.000
be about halfway towards this crosshair changing color. based on firing state. by the

4
00:00:12.000 --> 00:00:16.000
end. and the trickiest bit would be adding the TickComponents

5
00:00:16.000 --> 00:00:20.000
back to a AActorComponent. You've got BeginPlay() and

6
00:00:20.000 --> 00:00:24.000
TickComponent rather than Tick. and we're going to see how to do that. amongst a whole bunch of other things.

7
00:00:24.000 --> 00:00:24.500


8
00:00:24.500 --> 00:00:28.500
So just before I start this one. I'm getting some real strange things going on with my

9
00:00:28.500 --> 00:00:32.500
project. so I've gone back to my previous checkout. which is just

10
00:00:32.500 --> 00:00:36.500
here. the last video. Remember how you clear things out. you select

11
00:00:36.500 --> 00:00:40.500
these directories .vs. Binaries. Intermediate.

12
00:00:40.500 --> 00:00:44.500
and Saved. and the solution file. and the database file on

13
00:00:44.500 --> 00:00:48.500
PC. very similar on the Mac. Delete the whole lot.

14
00:00:48.500 --> 00:00:52.500
rebuild the VisualStudio project files. Yes you can do that on a Mac. but you have to go down

15
00:00:52.500 --> 00:00:56.500
to Services. at the bottom of the right-click menu. and then generate Xcode

16
00:00:56.500 --> 00:01:00.500
project. Once your project is generated. you won't be able to open Unreal. because

17
00:01:00.500 --> 00:01:04.500
it will not have been compiled. so you need to go in and build your project.

18
00:01:04.500 --> 00:01:08.500
Once that's built then you'll have a clean build. so sometimes it's worth doing

19
00:01:08.500 --> 00:01:12.500
this. What happens. occasionally between videos. is I go ahead and explore and try

20
00:01:12.500 --> 00:01:16.500
some stuff and then reset my commit. If you're doing that. if you're doing something

21
00:01:16.500 --> 00:01:20.500
exploratory and you decide. hang on what I've just tried to do hasn't worked at all. I'm going to go back

22
00:01:20.500 --> 00:01:24.500
to my last known working position. my last commit. Then.

23
00:01:24.500 --> 00:01:28.500
sometimes you can just reopen the Editor and recompile your code. but sometimes you'll end up with

24
00:01:28.500 --> 00:01:32.500
too much stuff that cached and the Editor may end up in a funny state. So then. you

25
00:01:32.500 --> 00:01:36.500
need to clear this out. as per the video in the previous section about clearing derived

26
00:01:36.500 --> 00:01:40.500
files. So once it has compiled in VisualStudio. it's a question of just

27
00:01:40.500 --> 00:01:44.500
reopening in the Editor. and you should be good to go.

28
00:01:44.500 --> 00:01:48.500
What it's doing here is it's trying to spawn my Oculus program.

29
00:01:48.500 --> 00:01:52.500
and that's because I've probably got VR plugins turn on.

30
00:01:52.500 --> 00:01:56.500
If you get a VR device and you don't want it trying to open it. you can turn all these plugins

31
00:01:56.500 --> 00:02:00.500
off. You can then

32
00:02:00.500 --> 00:02:04.500
restart the Editor. once those things have been saved. and it won't try and open

33
00:02:04.500 --> 00:02:08.500
those plugins again.

34
00:02:08.500 --> 00:02:12.500
So there you go!

35
00:02:12.500 --> 00:02:16.500
Alright. so let's have a look where we are! Anything to look at on the console? No. Let's play the game!

36
00:02:16.500 --> 00:02:20.500
It all seems to be OK!

37
00:02:20.500 --> 00:02:24.500
Good to go! Alright. so let's start looking at the issues. What we're trying

38
00:02:24.500 --> 00:02:28.500
to do here is. we're trying to get the cursor to change color. So

39
00:02:28.500 --> 00:02:32.500
this is going to be in the TankAimingComponent.

40
00:02:32.500 --> 00:02:36.500
and let's start with this bit here. where

41
00:02:36.500 --> 00:02:40.500
we say isReloaded. So. at the moment. we're using a boolean

42
00:02:40.500 --> 00:02:44.500
and a local boolean in the Fire() method called isReloaded. What we want to do

43
00:02:44.500 --> 00:02:48.500
is keep track of whether we're reloaded every single frame. So the first challenge we have

44
00:02:48.500 --> 00:02:52.500
to overcome is putting a Tick method back into this. So we currently

45
00:02:52.500 --> 00:02:56.500
don't have a Tick. How do you find out what the Tick signature is for

46
00:02:56.500 --> 00:03:00.500
an ActorComponent? Remember if we go to the header file for this guy that

47
00:03:00.500 --> 00:03:04.500
it is a ActorComponent. Well one way is to go to the

48
00:03:04.500 --> 00:03:08.500
definition of an ActorComponent. go and look at the actual code that you're going to be overriding.

49
00:03:08.500 --> 00:03:12.500
search for Tick or TickComponent. I happen to know that it is.

50
00:03:12.500 --> 00:03:16.500
Just cancel that search. because I've accidentally searched in the entire project

51
00:03:16.500 --> 00:03:20.500
but it's found it. I meant to search in just this file but it's OK. On line

52
00:03:20.500 --> 00:03:24.500
478 of the ActorComponent. here we go. we have the signature for Tick

53
00:03:24.500 --> 00:03:28.500
Component. There it is! So you can copy that. probably the easiest way.

54
00:03:28.500 --> 00:03:32.500
and go ahead and put it into the private

55
00:03:32.500 --> 00:03:36.500
section. because we're not going to be calling it from any of our other classes of the TankAiming

56
00:03:36.500 --> 00:03:40.500
Component. Notice it's a bit weird. it needs a DeltaTime.

57
00:03:40.500 --> 00:03:44.500
an enum about the LevelTick type. and an FActorComponent

58
00:03:44.500 --> 00:03:48.500
TickFunction. So just paste it in but. of course. we need override

59
00:03:48.500 --> 00:03:52.500
just to signal that we want to check that against the parent class. to make sure that we've

60
00:03:52.500 --> 00:03:56.500
got exactly the right naming. And then. I'm going to go ahead and put this

61
00:03:56.500 --> 00:04:00.500
under the Constructor. inside the C++ file.

62
00:04:00.500 --> 00:04:04.500
without the virtual. without the override on the end.

63
00:04:04.500 --> 00:04:08.500
and that's it. we're good to go! Now the only other thing we need to do to make it tick is. where it says

64
00:04:08.500 --> 00:04:12.500
PrimaryComponentTick.vCanEverTick. in the Constructor. that needs to be

65
00:04:12.500 --> 00:04:16.500
true. OK. let's just check that this is

66
00:04:16.500 --> 00:04:20.500
ticking. UE_LOG(LogTemp.

67
00:04:20.500 --> 00:04:24.500
Warning. TEXT

68
00:04:24.500 --> 00:04:28.500
("Aiming Comp. ticking"). OK

69
00:04:28.500 --> 00:04:32.500
fantastic! Save that and go ahead and Compile! I'll show you the source

70
00:04:32.500 --> 00:04:36.500
control. so you can see what's changed while it compiles.

71
00:04:36.500 --> 00:04:40.500
We have switched this boolean in the constructor and popped the Tick

72
00:04:40.500 --> 00:04:44.500
signature in. And the other place you can get that signature is here from Unreal docs.

73
00:04:44.500 --> 00:04:48.500
UActorComponent::TickComponent and the signature is here. I'll put that in the resources of the

74
00:04:48.500 --> 00:04:52.500
lecture for you. Cool! Compile failed! So we've made a

75
00:04:52.500 --> 00:04:56.500
boo boo! Where did I make a boo boo?

76
00:04:56.500 --> 00:05:00.500
OK unresolved externals mean linker errors about unresolved

77
00:05:00.500 --> 00:05:04.500
externals. mean that I have a mismatch in my signature somewhere. So let's look at it

78
00:05:04.500 --> 00:05:08.500
in the header file! I say virtual void TickComponent in the C++

79
00:05:08.500 --> 00:05:12.500
file. What I'm missing is the name of the class

80
00:05:12.500 --> 00:05:16.500
OK. so that's the problem there. Let's try and recompile.

81
00:05:16.500 --> 00:05:20.500
So whenever you see a linker area. the first thing is

82
00:05:20.500 --> 00:05:24.500
to try and see. why can't it link these two things together. and it's because typically.

83
00:05:24.500 --> 00:05:28.500
you have a mismatch in signature. Let's play the game! It's taking a long

84
00:05:28.500 --> 00:05:32.500
time to play. which suggests it's either going to crash or an ensure is going to fire off.

85
00:05:32.500 --> 00:05:36.500
The game started but what's going on? Now we've got some serious errors here!

86
00:05:36.500 --> 00:05:40.500
Unresolved externals. that'll be from the last build.

87
00:05:40.500 --> 00:05:44.500
Starting HotReload. HotReload successful. OK so further down.

88
00:05:44.500 --> 00:05:48.500
"Handled error". "Barrel && ProjectileBlueprint" on

89
00:05:48.500 --> 00:05:52.500
line 72 of the TankAimingComponent. Let's go look at that! We have an assertion failure on line

90
00:05:52.500 --> 00:05:56.500
72. So here we check both the Barrel pointer

91
00:05:56.500 --> 00:06:00.500
and the ProjectileBlueprint pointer simultaneously. This will happen. by the way. immediately

92
00:06:00.500 --> 00:06:04.500
that the game starts. because currently the AI is firing immediately when the

93
00:06:04.500 --> 00:06:08.500
game starts. you probably noticed that. So one thing I can do is. move this assertion down to

94
00:06:08.500 --> 00:06:12.500
where we need it. which is here. We don't need it until we're reloaded and about to fire.

95
00:06:12.500 --> 00:06:16.500
And the other thing we can do is split this into two assertions. one about the Barrel

96
00:06:16.500 --> 00:06:20.500
and one about the ProjectileBlueprint. and that will give us more

97
00:06:20.500 --> 00:06:24.500
information than we currently have about this error. Let's see if there are any other errors! This is the

98
00:06:24.500 --> 00:06:28.500
stack trace for that error. Nope! So I'm going to clear the log. recompile.

99
00:06:28.500 --> 00:06:32.500
and play the game. So the change there is to take this assertion from

100
00:06:32.500 --> 00:06:36.500
the top of the TankAimingComponent Fire() method and move it down into the

101
00:06:36.500 --> 00:06:40.500
if statement. so that it is done just in time. Playing the game is

102
00:06:40.500 --> 00:06:44.500
still taking a while. Now we get to find out whether it's the Barrel or the ProjectileBlueprint that's causing the

103
00:06:44.500 --> 00:06:48.500
problem.

104
00:06:48.500 --> 00:06:52.500
Firstly. I can fire so. at some point. that does have a ProjectileBlueprint

105
00:06:52.500 --> 00:06:56.500
pointer set and the Barrel moved. Which one is it? The ProjectileBlueprint!

106
00:06:56.500 --> 00:07:00.500
OK. so I'm not going to worry too much about that. right now.

107
00:07:00.500 --> 00:07:04.500
because we're about to change the logic anyway so that we... In fact. let's change the logic now!

108
00:07:04.500 --> 00:07:08.500
Let's say that LastFireTime = FPlatformTime in Seconds

109
00:07:08.500 --> 00:07:12.500
on BeginPlay(). so that neither of us can fire until we

110
00:07:12.500 --> 00:07:16.500
have waited for an initial reload. for the gun to load in the first place.

111
00:07:16.500 --> 00:07:20.500
Let's do that on the BeginPlay(). so here's a little challenge

112
00:07:20.500 --> 00:07:24.500
for you. I just want you to add BeginPlay() in. which is much simpler than the

113
00:07:24.500 --> 00:07:28.500
TickComponent. and then. insert that line of code there about the

114
00:07:28.500 --> 00:07:32.500
last fire time. which will make sure we can't fire until we've waited for the reload time. in the

115
00:07:32.500 --> 00:07:36.500
beginning. I'm not going to put a challenge slide. I'm going to keep you on your feet.

116
00:07:36.500 --> 00:07:40.500
There's not always going to be a challenge slide there. I'm hoping you're listening. too.

117
00:07:40.500 --> 00:07:44.500
OK so I'm going to use that line of code. because I've already got it in the paste buffer.

118
00:07:44.500 --> 00:07:48.500
I'm going to take the class name. because I know I'm going to need that. it's going to be void

119
00:07:48.500 --> 00:07:52.500
the class name BeginPlay(). It doesn't actually take any parameters. which is helpful.

120
00:07:52.500 --> 00:07:56.500
Then. we've got this guy here. which I'm going to put in curlies.

121
00:07:56.500 --> 00:08:00.500
And then. all that remains. in order to do that. is to comment

122
00:08:00.500 --> 00:08:04.500
why we're doing this. "// So that first fire is after

123
00:08:04.500 --> 00:08:08.500
initial reload". And then. we just need to go

124
00:08:08.500 --> 00:08:12.500
virtual void BeginPlay() override on here. which I'd prefer to put just

125
00:08:12.500 --> 00:08:16.500
above the TickComponent.

126
00:08:16.500 --> 00:08:20.500
Perfect! Now let's see if that prevents. see what

127
00:08:20.500 --> 00:08:24.500
that prevents. Firstly. it may prevent this error. It may just be that the Projectile

128
00:08:24.500 --> 00:08:28.500
Blueprint is not available. not set quite that early. It is

129
00:08:28.500 --> 00:08:32.500
set. of course. on the Tank against the TankBlueprint.

130
00:08:32.500 --> 00:08:36.500
on the TankAimingComponent here. and it is set but maybe it doesn't get set quite early enough.

131
00:08:36.500 --> 00:08:40.500
So we have a Compile Failure. it's probably something simple: " 'void' should be preceded

132
00:08:40.500 --> 00:08:44.500
by" something on the TankAimingComponent. header file 45.

133
00:08:44.500 --> 00:08:48.500
and that's because I can't spell virtual! OK

134
00:08:48.500 --> 00:08:52.500
let's refresh. clear the logs because I want a nice

135
00:08:52.500 --> 00:08:56.500
clear slate to start from. and then. see how we get on. So this is all about overriding

136
00:08:56.500 --> 00:09:00.500
methods in Actor

137
00:09:00.500 --> 00:09:04.500
Components. OK. let's play the game. see what happens. It played nice and quick.

138
00:09:04.500 --> 00:09:08.500
Aiming is working. and I can't fire for

139
00:09:08.500 --> 00:09:12.500
presumably 3 seconds. Yes. in the beginning! Let's just retest that one!

140
00:09:12.500 --> 00:09:16.500
I'm firing. I'm clicking clicking clicking clicking. and the AI tanks aren't firing either.

141
00:09:16.500 --> 00:09:20.500
until we get to the 3 second mark. I'm just going to make sure the AI tanks

142
00:09:20.500 --> 00:09:24.500
do eventually fire. I'm going to do that by going F11. get my controller

143
00:09:24.500 --> 00:09:28.500
out. my Xbox controller. and just move away.

144
00:09:28.500 --> 00:09:32.500
and make sure that eventually these guys can actually fire. We must sort that bug with selft-

145
00:09:32.500 --> 00:09:36.500
collisions with the ground. Yep. I just saw one fire there! OK. so that

146
00:09:36.500 --> 00:09:40.500
initial firing is working now. The next thing I want to do. just before

147
00:09:40.500 --> 00:09:44.500
we finish off this particular video. is to rather than in the

148
00:09:44.500 --> 00:09:48.500
Fire use this... Where are we? ...this isReloaded. we want to use

149
00:09:48.500 --> 00:09:52.533
the enum we've already setup. So how are we going to do that? Well

150
00:09:52.533 --> 00:09:56.500
we'll do it up in the Tick. won't we? We're going to use that logic.

151
00:09:56.500 --> 00:10:00.500
In fact. I'll cut that logic now. and I'll say if

152
00:10:00.500 --> 00:10:04.500
(FiringState

153
00:10:04.500 --> 00:10:08.500
!= not equal to EFiringStateReloading.

154
00:10:08.500 --> 00:10:12.500


155
00:10:12.500 --> 00:10:16.500
So if it's not reloading. then go ahead and fire OK.

156
00:10:16.500 --> 00:10:20.500
So now. we need to set the logic for it reloading or not reloading. we do this in Tick.

157
00:10:20.500 --> 00:10:24.500
We don't need the log anymore in here. but we can say if and then

158
00:10:24.500 --> 00:10:28.500
this logic. which is the difference between

159
00:10:28.500 --> 00:10:32.500
the PlatformTime and the LastFireTime. By the way. if you don't like Platform

160
00:10:32.500 --> 00:10:36.500
Time. then you are welcome to say something different. which we've done before

161
00:10:36.500 --> 00:10:40.500
which is GetWorld GetTimeInSeconds. I'm not going to change it until it causes a problem.

162
00:10:40.500 --> 00:10:44.500
It will cause a problem later. but I just thought I'd put that as an aside. You can go

163
00:10:44.500 --> 00:10:48.500
GetWorld arrow GetTimeInSeconds. Anyway. if the PlatformTime -

164
00:10:48.500 --> 00:10:52.500
the LastFireTime is greater than the ReloadTime. i.e. if we have reloaded. then

165
00:10:52.500 --> 00:10:56.500
what do we do with this state? Well then EFiringState

166
00:10:56.500 --> 00:11:00.500
or FiringState = EFiringState. to fully declare it

167
00:11:00.500 --> 00:11:04.500
Reloading. OK. that's all

168
00:11:04.500 --> 00:11:08.500
very well. let's try it! But of course. it's never going to leave the Reloading state with this

169
00:11:08.500 --> 00:11:12.500
particular code is it. because this guy is going to set it to Reloading. But

170
00:11:12.500 --> 00:11:16.500
nothing is going to be setting it to another state. which is the Aiming or the Locked state.

171
00:11:16.500 --> 00:11:20.500
but we'll do that in another video. So let's just try now! What do we get? We get

172
00:11:20.500 --> 00:11:24.500
continuous firing from the AI tanks and that's expected. as I

173
00:11:24.500 --> 00:11:28.500
say. because if you look over in the TankAimingComponent we are not

174
00:11:28.500 --> 00:11:32.500
initializing. We need to initialize to Reloading. that's going to be

175
00:11:32.500 --> 00:11:36.500
our initial state is that it's not ready to fire. Let's try that! So it

176
00:11:36.500 --> 00:11:40.500
initializes to Reloading. Every frame it asks the

177
00:11:40.500 --> 00:11:44.500
question. has it been the ReloadTime since

178
00:11:44.500 --> 00:11:48.500
we last fired? When did we last fire? On BeginPlay(). So let's see

179
00:11:48.500 --> 00:11:52.500
what the behavior is like now. No firing for 1. 2.

180
00:11:52.500 --> 00:11:56.500
3. and then. of course. it never leaves the ReloadingState.

181
00:11:56.500 --> 00:12:00.500
which is expected at this point. because we need further logic under here

182
00:12:00.500 --> 00:12:04.500
which we will do in the next video. So I just flesh out the further logic.

183
00:12:04.500 --> 00:12:08.500
"// TODO Handle

184
00:12:08.500 --> 00:12:12.500
aiming and locked states".

185
00:12:12.500 --> 00:12:16.500
There you go! But let's not do that now. this video is plenty long enough. Congratulations

186
00:12:16.500 --> 00:12:20.500
on getting that far! I'm going to Save All my code.

187
00:12:20.500 --> 00:12:24.500
quickly review with you what has been done. in terms of the source

188
00:12:24.500 --> 00:12:28.500
control changes. and then. we will start finishing... [Laughs] Start finishing.

189
00:12:28.500 --> 00:12:32.500
Finish this in the next video. So we have a BeginPlay()

190
00:12:32.500 --> 00:12:36.500
that's been put in. We on BeginPlay() set the initial

191
00:12:36.500 --> 00:12:40.500
fire as if it's fired. phantom fire in the beginning. On

192
00:12:40.500 --> 00:12:44.500
Tick we ask whether or not the Reload

193
00:12:44.500 --> 00:12:48.500
Time has passed or not. Later. we'll handle the rest of the states. we move some checks

194
00:12:48.500 --> 00:12:52.500
and split them up. from up here down into there. and we moved the

195
00:12:52.500 --> 00:12:56.500
whole idea. instead of using a local boolean. we're using the member

196
00:12:56.500 --> 00:13:00.500
variable FiringState enum. And then. the changes in the header file are just the

197
00:13:00.500 --> 00:13:04.500
changes we had to put in the header file. to support those code changes. So fantastic! I'll see you in the

198
00:13:04.500 --> 00:13:06.400
next video!

=======

1
00:00:00,000 --> 00:00:04,000
Hey, and for want of a better

2
00:00:04,000 --> 00:00:08,000
name I'm going to call this Adding TickComponent() Back! It's a little bit more than that, we'll

3
00:00:08,000 --> 00:00:12,000
be about halfway towards this crosshair changing color, based on firing state, by the

4
00:00:12,000 --> 00:00:16,000
end, and the trickiest bit would be adding the TickComponents

5
00:00:16,000 --> 00:00:20,000
back to a AActorComponent. You've got BeginPlay() and

6
00:00:20,000 --> 00:00:24,000
TickComponent rather than Tick, and we're going to see how to do that, amongst a whole bunch of other things.

7
00:00:24,000 --> 00:00:24,500


8
00:00:24,500 --> 00:00:28,500
So just before I start this one, I'm getting some real strange things going on with my

9
00:00:28,500 --> 00:00:32,500
project, so I've gone back to my previous checkout, which is just

10
00:00:32,500 --> 00:00:36,500
here, the last video. Remember how you clear things out, you select

11
00:00:36,500 --> 00:00:40,500
these directories .vs, Binaries, Intermediate,

12
00:00:40,500 --> 00:00:44,500
and Saved, and the solution file, and the database file on

13
00:00:44,500 --> 00:00:48,500
PC, very similar on the Mac. Delete the whole lot,

14
00:00:48,500 --> 00:00:52,500
rebuild the VisualStudio project files. Yes you can do that on a Mac, but you have to go down

15
00:00:52,500 --> 00:00:56,500
to Services, at the bottom of the right-click menu, and then generate Xcode

16
00:00:56,500 --> 00:01:00,500
project. Once your project is generated, you won't be able to open Unreal, because

17
00:01:00,500 --> 00:01:04,500
it will not have been compiled, so you need to go in and build your project.

18
00:01:04,500 --> 00:01:08,500
Once that's built then you'll have a clean build, so sometimes it's worth doing

19
00:01:08,500 --> 00:01:12,500
this. What happens, occasionally between videos, is I go ahead and explore and try

20
00:01:12,500 --> 00:01:16,500
some stuff and then reset my commit. If you're doing that, if you're doing something

21
00:01:16,500 --> 00:01:20,500
exploratory and you decide, hang on what I've just tried to do hasn't worked at all, I'm going to go back

22
00:01:20,500 --> 00:01:24,500
to my last known working position, my last commit. Then,

23
00:01:24,500 --> 00:01:28,500
sometimes you can just reopen the Editor and recompile your code, but sometimes you'll end up with

24
00:01:28,500 --> 00:01:32,500
too much stuff that cached and the Editor may end up in a funny state. So then, you

25
00:01:32,500 --> 00:01:36,500
need to clear this out, as per the video in the previous section about clearing derived

26
00:01:36,500 --> 00:01:40,500
files. So once it has compiled in VisualStudio, it's a question of just

27
00:01:40,500 --> 00:01:44,500
reopening in the Editor, and you should be good to go.

28
00:01:44,500 --> 00:01:48,500
What it's doing here is it's trying to spawn my Oculus program,

29
00:01:48,500 --> 00:01:52,500
and that's because I've probably got VR plugins turn on.

30
00:01:52,500 --> 00:01:56,500
If you get a VR device and you don't want it trying to open it, you can turn all these plugins

31
00:01:56,500 --> 00:02:00,500
off. You can then

32
00:02:00,500 --> 00:02:04,500
restart the Editor, once those things have been saved, and it won't try and open

33
00:02:04,500 --> 00:02:08,500
those plugins again.

34
00:02:08,500 --> 00:02:12,500
So there you go!

35
00:02:12,500 --> 00:02:16,500
Alright, so let's have a look where we are! Anything to look at on the console? No. Let's play the game!

36
00:02:16,500 --> 00:02:20,500
It all seems to be OK!

37
00:02:20,500 --> 00:02:24,500
Good to go! Alright, so let's start looking at the issues. What we're trying

38
00:02:24,500 --> 00:02:28,500
to do here is, we're trying to get the cursor to change color. So

39
00:02:28,500 --> 00:02:32,500
this is going to be in the TankAimingComponent,

40
00:02:32,500 --> 00:02:36,500
and let's start with this bit here, where

41
00:02:36,500 --> 00:02:40,500
we say isReloaded. So, at the moment, we're using a boolean

42
00:02:40,500 --> 00:02:44,500
and a local boolean in the Fire() method called isReloaded. What we want to do

43
00:02:44,500 --> 00:02:48,500
is keep track of whether we're reloaded every single frame. So the first challenge we have

44
00:02:48,500 --> 00:02:52,500
to overcome is putting a Tick method back into this. So we currently

45
00:02:52,500 --> 00:02:56,500
don't have a Tick. How do you find out what the Tick signature is for

46
00:02:56,500 --> 00:03:00,500
an ActorComponent? Remember if we go to the header file for this guy that

47
00:03:00,500 --> 00:03:04,500
it is a ActorComponent. Well one way is to go to the

48
00:03:04,500 --> 00:03:08,500
definition of an ActorComponent, go and look at the actual code that you're going to be overriding,

49
00:03:08,500 --> 00:03:12,500
search for Tick or TickComponent, I happen to know that it is.

50
00:03:12,500 --> 00:03:16,500
Just cancel that search, because I've accidentally searched in the entire project

51
00:03:16,500 --> 00:03:20,500
but it's found it. I meant to search in just this file but it's OK. On line

52
00:03:20,500 --> 00:03:24,500
478 of the ActorComponent, here we go, we have the signature for Tick

53
00:03:24,500 --> 00:03:28,500
Component. There it is! So you can copy that, probably the easiest way,

54
00:03:28,500 --> 00:03:32,500
and go ahead and put it into the private

55
00:03:32,500 --> 00:03:36,500
section, because we're not going to be calling it from any of our other classes of the TankAiming

56
00:03:36,500 --> 00:03:40,500
Component. Notice it's a bit weird, it needs a DeltaTime,

57
00:03:40,500 --> 00:03:44,500
an enum about the LevelTick type, and an FActorComponent

58
00:03:44,500 --> 00:03:48,500
TickFunction. So just paste it in but, of course, we need override

59
00:03:48,500 --> 00:03:52,500
just to signal that we want to check that against the parent class, to make sure that we've

60
00:03:52,500 --> 00:03:56,500
got exactly the right naming. And then, I'm going to go ahead and put this

61
00:03:56,500 --> 00:04:00,500
under the Constructor, inside the C++ file,

62
00:04:00,500 --> 00:04:04,500
without the virtual, without the override on the end,

63
00:04:04,500 --> 00:04:08,500
and that's it, we're good to go! Now the only other thing we need to do to make it tick is, where it says

64
00:04:08,500 --> 00:04:12,500
PrimaryComponentTick.vCanEverTick, in the Constructor, that needs to be

65
00:04:12,500 --> 00:04:16,500
true. OK, let's just check that this is

66
00:04:16,500 --> 00:04:20,500
ticking. UE_LOG(LogTemp,

67
00:04:20,500 --> 00:04:24,500
Warning, TEXT

68
00:04:24,500 --> 00:04:28,500
("Aiming Comp. ticking"). OK

69
00:04:28,500 --> 00:04:32,500
fantastic! Save that and go ahead and Compile! I'll show you the source

70
00:04:32,500 --> 00:04:36,500
control, so you can see what's changed while it compiles.

71
00:04:36,500 --> 00:04:40,500
We have switched this boolean in the constructor and popped the Tick

72
00:04:40,500 --> 00:04:44,500
signature in. And the other place you can get that signature is here from Unreal docs.

73
00:04:44,500 --> 00:04:48,500
UActorComponent::TickComponent and the signature is here. I'll put that in the resources of the

74
00:04:48,500 --> 00:04:52,500
lecture for you. Cool! Compile failed! So we've made a

75
00:04:52,500 --> 00:04:56,500
boo boo! Where did I make a boo boo?

76
00:04:56,500 --> 00:05:00,500
OK unresolved externals mean linker errors about unresolved

77
00:05:00,500 --> 00:05:04,500
externals, mean that I have a mismatch in my signature somewhere. So let's look at it

78
00:05:04,500 --> 00:05:08,500
in the header file! I say virtual void TickComponent in the C++

79
00:05:08,500 --> 00:05:12,500
file. What I'm missing is the name of the class

80
00:05:12,500 --> 00:05:16,500
OK, so that's the problem there. Let's try and recompile.

81
00:05:16,500 --> 00:05:20,500
So whenever you see a linker area, the first thing is

82
00:05:20,500 --> 00:05:24,500
to try and see, why can't it link these two things together, and it's because typically,

83
00:05:24,500 --> 00:05:28,500
you have a mismatch in signature. Let's play the game! It's taking a long

84
00:05:28,500 --> 00:05:32,500
time to play, which suggests it's either going to crash or an ensure is going to fire off.

85
00:05:32,500 --> 00:05:36,500
The game started but what's going on? Now we've got some serious errors here!

86
00:05:36,500 --> 00:05:40,500
Unresolved externals, that'll be from the last build.

87
00:05:40,500 --> 00:05:44,500
Starting HotReload, HotReload successful. OK so further down,

88
00:05:44,500 --> 00:05:48,500
"Handled error". "Barrel && ProjectileBlueprint" on

89
00:05:48,500 --> 00:05:52,500
line 72 of the TankAimingComponent. Let's go look at that! We have an assertion failure on line

90
00:05:52,500 --> 00:05:56,500
72. So here we check both the Barrel pointer

91
00:05:56,500 --> 00:06:00,500
and the ProjectileBlueprint pointer simultaneously. This will happen, by the way, immediately

92
00:06:00,500 --> 00:06:04,500
that the game starts, because currently the AI is firing immediately when the

93
00:06:04,500 --> 00:06:08,500
game starts, you probably noticed that. So one thing I can do is, move this assertion down to

94
00:06:08,500 --> 00:06:12,500
where we need it, which is here. We don't need it until we're reloaded and about to fire.

95
00:06:12,500 --> 00:06:16,500
And the other thing we can do is split this into two assertions, one about the Barrel

96
00:06:16,500 --> 00:06:20,500
and one about the ProjectileBlueprint, and that will give us more

97
00:06:20,500 --> 00:06:24,500
information than we currently have about this error. Let's see if there are any other errors! This is the

98
00:06:24,500 --> 00:06:28,500
stack trace for that error. Nope! So I'm going to clear the log, recompile,

99
00:06:28,500 --> 00:06:32,500
and play the game. So the change there is to take this assertion from

100
00:06:32,500 --> 00:06:36,500
the top of the TankAimingComponent Fire() method and move it down into the

101
00:06:36,500 --> 00:06:40,500
if statement, so that it is done just in time. Playing the game is

102
00:06:40,500 --> 00:06:44,500
still taking a while. Now we get to find out whether it's the Barrel or the ProjectileBlueprint that's causing the

103
00:06:44,500 --> 00:06:48,500
problem.

104
00:06:48,500 --> 00:06:52,500
Firstly, I can fire so, at some point, that does have a ProjectileBlueprint

105
00:06:52,500 --> 00:06:56,500
pointer set and the Barrel moved. Which one is it? The ProjectileBlueprint!

106
00:06:56,500 --> 00:07:00,500
OK, so I'm not going to worry too much about that, right now,

107
00:07:00,500 --> 00:07:04,500
because we're about to change the logic anyway so that we... In fact, let's change the logic now!

108
00:07:04,500 --> 00:07:08,500
Let's say that LastFireTime = FPlatformTime in Seconds

109
00:07:08,500 --> 00:07:12,500
on BeginPlay(), so that neither of us can fire until we

110
00:07:12,500 --> 00:07:16,500
have waited for an initial reload, for the gun to load in the first place.

111
00:07:16,500 --> 00:07:20,500
Let's do that on the BeginPlay(), so here's a little challenge

112
00:07:20,500 --> 00:07:24,500
for you. I just want you to add BeginPlay() in, which is much simpler than the

113
00:07:24,500 --> 00:07:28,500
TickComponent, and then, insert that line of code there about the

114
00:07:28,500 --> 00:07:32,500
last fire time, which will make sure we can't fire until we've waited for the reload time, in the

115
00:07:32,500 --> 00:07:36,500
beginning. I'm not going to put a challenge slide, I'm going to keep you on your feet.

116
00:07:36,500 --> 00:07:40,500
There's not always going to be a challenge slide there, I'm hoping you're listening, too.

117
00:07:40,500 --> 00:07:44,500
OK so I'm going to use that line of code, because I've already got it in the paste buffer,

118
00:07:44,500 --> 00:07:48,500
I'm going to take the class name, because I know I'm going to need that, it's going to be void

119
00:07:48,500 --> 00:07:52,500
the class name BeginPlay(). It doesn't actually take any parameters, which is helpful.

120
00:07:52,500 --> 00:07:56,500
Then, we've got this guy here, which I'm going to put in curlies.

121
00:07:56,500 --> 00:08:00,500
And then, all that remains, in order to do that, is to comment

122
00:08:00,500 --> 00:08:04,500
why we're doing this. "// So that first fire is after

123
00:08:04,500 --> 00:08:08,500
initial reload". And then, we just need to go

124
00:08:08,500 --> 00:08:12,500
virtual void BeginPlay() override on here, which I'd prefer to put just

125
00:08:12,500 --> 00:08:16,500
above the TickComponent.

126
00:08:16,500 --> 00:08:20,500
Perfect! Now let's see if that prevents, see what

127
00:08:20,500 --> 00:08:24,500
that prevents. Firstly, it may prevent this error. It may just be that the Projectile

128
00:08:24,500 --> 00:08:28,500
Blueprint is not available, not set quite that early. It is

129
00:08:28,500 --> 00:08:32,500
set, of course, on the Tank against the TankBlueprint,

130
00:08:32,500 --> 00:08:36,500
on the TankAimingComponent here, and it is set but maybe it doesn't get set quite early enough.

131
00:08:36,500 --> 00:08:40,500
So we have a Compile Failure, it's probably something simple: " 'void' should be preceded

132
00:08:40,500 --> 00:08:44,500
by" something on the TankAimingComponent, header file 45,

133
00:08:44,500 --> 00:08:48,500
and that's because I can't spell virtual! OK

134
00:08:48,500 --> 00:08:52,500
let's refresh, clear the logs because I want a nice

135
00:08:52,500 --> 00:08:56,500
clear slate to start from, and then, see how we get on. So this is all about overriding

136
00:08:56,500 --> 00:09:00,500
methods in Actor

137
00:09:00,500 --> 00:09:04,500
Components. OK, let's play the game, see what happens. It played nice and quick,

138
00:09:04,500 --> 00:09:08,500
Aiming is working, and I can't fire for

139
00:09:08,500 --> 00:09:12,500
presumably 3 seconds. Yes, in the beginning! Let's just retest that one!

140
00:09:12,500 --> 00:09:16,500
I'm firing, I'm clicking clicking clicking clicking, and the AI tanks aren't firing either,

141
00:09:16,500 --> 00:09:20,500
until we get to the 3 second mark. I'm just going to make sure the AI tanks

142
00:09:20,500 --> 00:09:24,500
do eventually fire. I'm going to do that by going F11, get my controller

143
00:09:24,500 --> 00:09:28,500
out, my Xbox controller, and just move away,

144
00:09:28,500 --> 00:09:32,500
and make sure that eventually these guys can actually fire. We must sort that bug with selft-

145
00:09:32,500 --> 00:09:36,500
collisions with the ground. Yep, I just saw one fire there! OK, so that

146
00:09:36,500 --> 00:09:40,500
initial firing is working now. The next thing I want to do, just before

147
00:09:40,500 --> 00:09:44,500
we finish off this particular video, is to rather than in the

148
00:09:44,500 --> 00:09:48,500
Fire use this... Where are we? ...this isReloaded, we want to use

149
00:09:48,500 --> 00:09:52,533
the enum we've already setup. So how are we going to do that? Well

150
00:09:52,533 --> 00:09:56,500
we'll do it up in the Tick, won't we? We're going to use that logic.

151
00:09:56,500 --> 00:10:00,500
In fact, I'll cut that logic now, and I'll say if

152
00:10:00,500 --> 00:10:04,500
(FiringState

153
00:10:04,500 --> 00:10:08,500
!= not equal to EFiringStateReloading.

154
00:10:08,500 --> 00:10:12,500


155
00:10:12,500 --> 00:10:16,500
So if it's not reloading, then go ahead and fire OK.

156
00:10:16,500 --> 00:10:20,500
So now, we need to set the logic for it reloading or not reloading, we do this in Tick.

157
00:10:20,500 --> 00:10:24,500
We don't need the log anymore in here, but we can say if and then

158
00:10:24,500 --> 00:10:28,500
this logic, which is the difference between

159
00:10:28,500 --> 00:10:32,500
the PlatformTime and the LastFireTime. By the way, if you don't like Platform

160
00:10:32,500 --> 00:10:36,500
Time, then you are welcome to say something different, which we've done before

161
00:10:36,500 --> 00:10:40,500
which is GetWorld GetTimeInSeconds. I'm not going to change it until it causes a problem.

162
00:10:40,500 --> 00:10:44,500
It will cause a problem later, but I just thought I'd put that as an aside. You can go

163
00:10:44,500 --> 00:10:48,500
GetWorld arrow GetTimeInSeconds. Anyway, if the PlatformTime -

164
00:10:48,500 --> 00:10:52,500
the LastFireTime is greater than the ReloadTime, i.e. if we have reloaded, then

165
00:10:52,500 --> 00:10:56,500
what do we do with this state? Well then EFiringState

166
00:10:56,500 --> 00:11:00,500
or FiringState = EFiringState, to fully declare it

167
00:11:00,500 --> 00:11:04,500
Reloading. OK, that's all

168
00:11:04,500 --> 00:11:08,500
very well, let's try it! But of course, it's never going to leave the Reloading state with this

169
00:11:08,500 --> 00:11:12,500
particular code is it, because this guy is going to set it to Reloading. But

170
00:11:12,500 --> 00:11:16,500
nothing is going to be setting it to another state, which is the Aiming or the Locked state,

171
00:11:16,500 --> 00:11:20,500
but we'll do that in another video. So let's just try now! What do we get? We get

172
00:11:20,500 --> 00:11:24,500
continuous firing from the AI tanks and that's expected, as I

173
00:11:24,500 --> 00:11:28,500
say, because if you look over in the TankAimingComponent we are not

174
00:11:28,500 --> 00:11:32,500
initializing. We need to initialize to Reloading, that's going to be

175
00:11:32,500 --> 00:11:36,500
our initial state is that it's not ready to fire. Let's try that! So it

176
00:11:36,500 --> 00:11:40,500
initializes to Reloading. Every frame it asks the

177
00:11:40,500 --> 00:11:44,500
question, has it been the ReloadTime since

178
00:11:44,500 --> 00:11:48,500
we last fired? When did we last fire? On BeginPlay(). So let's see

179
00:11:48,500 --> 00:11:52,500
what the behavior is like now. No firing for 1, 2,

180
00:11:52,500 --> 00:11:56,500
3, and then, of course, it never leaves the ReloadingState,

181
00:11:56,500 --> 00:12:00,500
which is expected at this point, because we need further logic under here

182
00:12:00,500 --> 00:12:04,500
which we will do in the next video. So I just flesh out the further logic,

183
00:12:04,500 --> 00:12:08,500
"// TODO Handle

184
00:12:08,500 --> 00:12:12,500
aiming and locked states".

185
00:12:12,500 --> 00:12:16,500
There you go! But let's not do that now, this video is plenty long enough. Congratulations

186
00:12:16,500 --> 00:12:20,500
on getting that far! I'm going to Save All my code,

187
00:12:20,500 --> 00:12:24,500
quickly review with you what has been done, in terms of the source

188
00:12:24,500 --> 00:12:28,500
control changes, and then, we will start finishing... [Laughs] Start finishing.

189
00:12:28,500 --> 00:12:32,500
Finish this in the next video. So we have a BeginPlay()

190
00:12:32,500 --> 00:12:36,500
that's been put in. We on BeginPlay() set the initial

191
00:12:36,500 --> 00:12:40,500
fire as if it's fired, phantom fire in the beginning. On

192
00:12:40,500 --> 00:12:44,500
Tick we ask whether or not the Reload

193
00:12:44,500 --> 00:12:48,500
Time has passed or not. Later, we'll handle the rest of the states, we move some checks

194
00:12:48,500 --> 00:12:52,500
and split them up, from up here down into there, and we moved the

195
00:12:52,500 --> 00:12:56,500
whole idea, instead of using a local boolean, we're using the member

196
00:12:56,500 --> 00:13:00,500
variable FiringState enum. And then, the changes in the header file are just the

197
00:13:00,500 --> 00:13:04,500
changes we had to put in the header file, to support those code changes. So fantastic! I'll see you in the

198
00:13:04,500 --> 00:13:06,400
next video!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT78 Adding TickComponent() Back.srt

<<<<<<< HEAD:Unreal/Section4/BT82 Avoiding Boolean Flags.srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
So welcome to Avoiding Boolean Flags!

2
00:00:04.000 --> 00:00:08.000
We'll talk about why it's called that in the middle of the lecture. but for now. what I want to tell you

3
00:00:08.000 --> 00:00:12.000
is that. by the end of the video. your tank and the AI tanks will be

4
00:00:12.000 --> 00:00:16.000
not applying forces. unless they are in contact with the ground. And they'll

5
00:00:16.000 --> 00:00:21.866
be moving a lot more sensibly. much more like a tank and none of this funny flying. So see you in there!

6
00:00:21.866 --> 00:00:25.866
OK. so we'll get to why this video is called what it is a little bit later on. but for now.

7
00:00:25.866 --> 00:00:29.866
the first thing I'm going to do is remove the AI tanks from the

8
00:00:29.866 --> 00:00:33.866
scene. so remove both of those. So the World Outliner may be the most reliable place. rather than

9
00:00:33.866 --> 00:00:37.866
hunting around in the 3D View. Then. the next thing I'm going to do is

10
00:00:37.866 --> 00:00:41.866
just do a little bit of tweaking to my tank's physics. I'm removing those AI tanks. by the way. just

11
00:00:41.866 --> 00:00:45.866
because we're focusing on our movement right now. we can put some new AI tanks in

12
00:00:45.866 --> 00:00:49.866
later. So I want to go to the tank blueprint and observe

13
00:00:49.866 --> 00:00:53.866
a couple of things. In fact. let's just show you this in the world first. Notice that if I move

14
00:00:53.866 --> 00:00:57.866
along. I'm pushing the throttle. if I let go of the throttle I keep going at the same speed. seemingly

15
00:00:57.866 --> 00:01:01.866
forever. That's rubbish and a tank is going to slow down! So the way you sort this out is. you go to

16
00:01:01.866 --> 00:01:05.866
your tank blueprint. to the Tank root (Static Mesh Component) there.

17
00:01:05.866 --> 00:01:09.866
scroll down. While you're scrolling down. make sure your Collision simulation generates

18
00:01:09.866 --> 00:01:13.866
events is on. Mine didn't persist from the last video. for some reason. so I'll just save that

19
00:01:13.866 --> 00:01:17.866
now. And it's under here. Linear Damping. Play with your figures

20
00:01:17.866 --> 00:01:21.866
of Linear Damping. I'm going to choose 0.5. I tend to do... Well let's

21
00:01:21.866 --> 00:01:25.866
see what 0.5 is like. before I say I'm going to choose it. So I accelerate away

22
00:01:25.866 --> 00:01:29.866
and I let go of the throttle now and it comes to a halt in...

23
00:01:29.866 --> 00:01:33.866
Yeah. I think that's a reasonable amount of time! But pick your own Linear Damping. What

24
00:01:33.866 --> 00:01:37.866
Linear Damping is. is a force that works in opposition to the Linear Motion. It

25
00:01:37.866 --> 00:01:41.866
is a force that works backwards. at a factor that depends on both

26
00:01:41.866 --> 00:01:45.866
the tank's speed but also on this Linear Damping factor. Now let's look at

27
00:01:45.866 --> 00:01:49.866
Angular Damping. At the moment. if we go hurtling off something. we have two

28
00:01:49.866 --> 00:01:53.866
fundamental problems. when we're in the air. Not that we're going to do too much flying in tanks. because you can't

29
00:01:53.866 --> 00:01:57.866
fly a tank fool. according to the A Team! But one of those problems is that

30
00:01:57.866 --> 00:02:01.866
this happens. forces are still applied when it's in the air. we're going to fix that. and the other one is it

31
00:02:01.866 --> 00:02:05.866
spins far too fast for a tank. So I'm going to give it a fair amount of Angular Damping.

32
00:02:05.866 --> 00:02:09.866
0.8 Angular Damping. Rotations aren't completely properly

33
00:02:09.866 --> 00:02:13.866
handled in these engines. The Intermediate Axis Theorem. if you want to look it up.

34
00:02:13.866 --> 00:02:17.866
isn't built in really properly. but Angular Damping will give us

35
00:02:17.866 --> 00:02:21.866
a nice effect. where the thing is a little bit harder to rotate than

36
00:02:21.866 --> 00:02:25.866
it looks like it was. So if I put enough Angular Damping in look what happens as we're in the air.

37
00:02:25.866 --> 00:02:29.866
it's a little bit better. everything's a little bit more mellow. So that's what I'm going to do. On the

38
00:02:29.866 --> 00:02:33.866
tank blueprint. 0.5. 0.8 slows things down. I'm going to save this blueprint right now.

39
00:02:33.866 --> 00:02:37.866
In fact. I'm going to Save All. so we never lose anything again. And now. we're going to turn

40
00:02:37.866 --> 00:02:41.866
our attention to how we are going to decide whether we're

41
00:02:41.866 --> 00:02:45.866
grounded or not and then how we're going to architect this class. Now don't use a

42
00:02:45.866 --> 00:02:49.866
boolean flag. A boolean flag is when you're temped to say. ooh I'm going to set some

43
00:02:49.866 --> 00:02:53.866
flag called IsGrounded. Just don't do that. the only time you want to use a boolean

44
00:02:53.866 --> 00:02:57.866
is when the thing you're talking about really is true or false. like whether a button

45
00:02:57.866 --> 00:03:01.866
is depressed or not. or something like that. But not when you're using

46
00:03:01.866 --> 00:03:05.866
it to ask a question at one time. like am I grounded? So you could be

47
00:03:05.866 --> 00:03:09.866
tempted to go. oh on hit. let's set a flag to say I'm grounded. and then. later

48
00:03:09.866 --> 00:03:13.866
you read that flag. Well hang on. that's a bit nuts isn't it. because how

49
00:03:13.866 --> 00:03:17.866
do you know that you're still grounded. when you come to read the flag later?

50
00:03:17.866 --> 00:03:21.866
Why not just ask the question at the right time? But to do

51
00:03:21.866 --> 00:03:25.866
that. you've got to architect his class a little bit differently. so what I'm going to suggest is that we don't have this

52
00:03:25.866 --> 00:03:29.866
class ticking at all and that we just do everything on OnHit.

53
00:03:29.866 --> 00:03:33.866
So OnHit gets called every frame anyway. and you saw that in the

54
00:03:33.866 --> 00:03:37.866
logs up here. or every frame

55
00:03:37.866 --> 00:03:41.866
that attracts our hitting something. it gets called right. So what makes sense.

56
00:03:41.866 --> 00:03:45.866
from a pseudocode point of view. is just simply this. What we do OnHit is.

57
00:03:45.866 --> 00:03:49.866
we "// Drive the tracks". and then. we "// Apply

58
00:03:49.866 --> 00:03:53.866
a sideways force" and that's probably about it.

59
00:03:53.866 --> 00:03:57.866
So let's start that process! The sideways force. let's

60
00:03:57.866 --> 00:04:01.866
deal with that. as it's right in front of us. That code I've just highlighted in TickComponent is purely

61
00:04:01.866 --> 00:04:05.866
about applying a sideways force. and we can't see that. so it's worth extracting it into

62
00:04:05.866 --> 00:04:09.866
its own method. for self documentation purposes and so it can be called easily from On

63
00:04:09.866 --> 00:04:13.866
Hit. So highlight that lot! In VisualStudio you've got quick actions. Right-click at the top

64
00:04:13.866 --> 00:04:17.866
and then Extract Function. You can call it ApplySideways

65
00:04:17.866 --> 00:04:21.866
Force. Now when you do this. notice that it's

66
00:04:21.866 --> 00:04:25.866
noticing that you need the DeltaTime passed in there

67
00:04:25.866 --> 00:04:29.866
OK. So we'll roll with that for a moment. OK

68
00:04:29.866 --> 00:04:33.866
so what's happening is that TickComponent is now calling

69
00:04:33.866 --> 00:04:37.866
ApplySidewaysForce. so that the behavior will be identical to what it was before. but we

70
00:04:37.866 --> 00:04:41.866
actually don't want to call it from Tick. we want to call it straight from OnHit.

71
00:04:41.866 --> 00:04:45.866
because OnHit's getting called every frame anyway. OK well that's all

72
00:04:45.866 --> 00:04:49.866
we're doing from TickComponent. so guess what? We can get rid of TickComponent. we can

73
00:04:49.866 --> 00:04:53.866
turn off ticking in the constructor. and. of course. we can remove

74
00:04:53.866 --> 00:04:57.866
the TickComponent override. in the header file. Let's try

75
00:04:57.866 --> 00:05:01.866
all that. before we go any further. So that's good news. because we

76
00:05:01.866 --> 00:05:05.866
stopped our thing ticking. which is cool! Let me show you the uncommitted changes.

77
00:05:05.866 --> 00:05:09.866
while we're here. I'm hearing that you like that. so that's good news. That's

78
00:05:09.866 --> 00:05:13.866
what I've changed in the Tank.cpp and the Tank.h.

79
00:05:13.866 --> 00:05:17.866
it's fairly obvious I've just removed that thing. OK cool!

80
00:05:17.866 --> 00:05:21.866
So VisualStudio is popping up. Let's just play the game. make sure it still works! It should work

81
00:05:21.866 --> 00:05:25.866
in exactly the same way. should the compile have succeeded. Delta

82
00:05:25.866 --> 00:05:29.866
Time is an "undeclared identifier". OK fine.

83
00:05:29.866 --> 00:05:33.866
So what happened is the Tick event had a Delta

84
00:05:33.866 --> 00:05:37.866
Time inside it previously. remember it was one of it's parameters. and now we don't have it

85
00:05:37.866 --> 00:05:41.866
available. so that's actually changed the signature of ApplySidewaysForce. Take the

86
00:05:41.866 --> 00:05:45.866
DeltaTime out of it altogether. and we are actually just going to

87
00:05:45.866 --> 00:05:49.866
cache... Well we don't even need to cache the DeltaTime. we can just. where we used

88
00:05:49.866 --> 00:05:53.866
DeltaTime here let's just go get it. Let's just say. immediately before

89
00:05:53.866 --> 00:05:57.866
that. auto DeltaTime = GetWorld().

90
00:05:57.866 --> 00:06:01.866
Whenever you use GetWorld ask yourself if you really need to but.

91
00:06:01.866 --> 00:06:05.866
in this case. it is a global piece of information the DeltaTime. it is WorldScale.

92
00:06:05.866 --> 00:06:09.866
so it's fine to reach up to that global scope. GetDeltaTimeSeconds

93
00:06:09.866 --> 00:06:13.866
or DeltaSeconds rather. So just do that. just get it just

94
00:06:13.866 --> 00:06:17.866
before you need it. In fact. I'm going to move this comment up to the top of this method.

95
00:06:17.866 --> 00:06:21.866
Then that's it. ApplySidewaysFriction doesn't need to take in a DeltaTime.

96
00:06:21.866 --> 00:06:25.866
It works out the required acceleration. using the DeltaTime

97
00:06:25.866 --> 00:06:29.866
and applies the SidewaysForce. Does that make sense? OK let's try it to see if it...

98
00:06:29.866 --> 00:06:33.866
You know. let's not cry for how much sense it makes until we've

99
00:06:33.866 --> 00:06:37.866
[Laughs] actually got it compiling. So this time I'll wait for it to compile.

100
00:06:37.866 --> 00:06:41.866
before I show you the code. just because

101
00:06:41.866 --> 00:06:45.866
you love staring at the Compiling C++ thing. It looks a bit like Knight Rider doesn't it?

102
00:06:45.866 --> 00:06:49.866
Kit from Knight Rider. that little thing. OK. so we're refactoring here. so hopefully

103
00:06:49.866 --> 00:06:53.866
we're close to compilation all the time. and look. it works the same! Does it? Am I slipping

104
00:06:53.866 --> 00:06:57.866
sideways? No I''m not. So that's cool. yeah we've made good progress there!

105
00:06:57.866 --> 00:07:01.866
I'll just quickly show you the code changes. for those of you who are interested. In the Tank.cpp. this is

106
00:07:01.866 --> 00:07:05.866
what I've changed so far. It's a bit hard to read. but obviously the red is where I've deleted and

107
00:07:05.866 --> 00:07:09.866
the green is where I've added. OK. so on here

108
00:07:09.866 --> 00:07:13.866
we're applying a sideways force every frame. we've got rid of ticking. and it's

109
00:07:13.866 --> 00:07:17.866
pretty good progress. How about this SetThrottle malarkey? Well

110
00:07:17.866 --> 00:07:21.866
remember that that SetThrottle gets called four times per frame.

111
00:07:21.866 --> 00:07:25.866
twice from IntendMoveForward and try twice from IntendTurnRight.

112
00:07:25.866 --> 00:07:29.866
So we need to consume this throttle a little in a slightly

113
00:07:29.866 --> 00:07:33.866
more interesting way. because you could be intending to move forward and turn right at the same

114
00:07:33.866 --> 00:07:37.866
time. In fact. it happens whenever you're using the left thumb-stick on the controller. because

115
00:07:37.866 --> 00:07:41.866
both of those inputs are kind of mixed together. So we want to make sure that we can't

116
00:07:41.866 --> 00:07:45.866
get to a value of more than 1 in total. a total throttle of 1.

117
00:07:45.866 --> 00:07:49.866
So let's think about what's going on here! This stuff inside

118
00:07:49.866 --> 00:07:53.866
SetThrottle. at the moment. isn't setting the throttle at all really. is it? If you think about what it's actually

119
00:07:53.866 --> 00:07:57.866
doing. we can extract this method. it's actually driving the

120
00:07:57.866 --> 00:08:01.866
track. and it's taking a

121
00:08:01.866 --> 00:08:05.866
throttle. So let's roll with that for a second! SetThrottle.

122
00:08:05.866 --> 00:08:09.866
should SetThrottle just call DriveTrack with a (Throttle)? That is a completely

123
00:08:09.866 --> 00:08:13.866
useless piece of refactoring. apart from DriveTrack is arguably a better

124
00:08:13.866 --> 00:08:17.866
name than SetThrottle. right. Oh. by the way. for those none VisualStudio people.

125
00:08:17.866 --> 00:08:21.866
when I do that extract function it is actually adding in all of my

126
00:08:21.866 --> 00:08:25.866
header file things that I need for me. so that's kind of it. but if you

127
00:08:25.866 --> 00:08:29.866
don't have that then you're going to need to do it manually. Anyway. when we set the throttle.

128
00:08:29.866 --> 00:08:33.866
what I actually want to do is I want to cache this Throttle state. I want to keep the Throttle state.

129
00:08:33.866 --> 00:08:37.866
Bear with me a second. let's show you why. So what we do is we just go float Current

130
00:08:37.866 --> 00:08:41.866
Throttle. and I'm just going to say = 0. because I want

131
00:08:41.866 --> 00:08:45.866
a sensible default. We put that as a member variable. The Drive

132
00:08:45.866 --> 00:08:49.866
Track therefore no longer needs to take a throttle in at all. so we can get rid of that in its

133
00:08:49.866 --> 00:08:53.866
signature. When it asks about a throttle.

134
00:08:53.866 --> 00:08:57.866
it's going to use the CurrentThrottle. so DriveTrack's good to

135
00:08:57.866 --> 00:09:01.866
go now. When we set a throttle what we want to do is this. we want to say that the CurrentThrottle

136
00:09:01.866 --> 00:09:05.866
= the CurrentThrottle plus. not

137
00:09:05.866 --> 00:09:09.866
+= in this case because I want to break it down further.

138
00:09:09.866 --> 00:09:13.866
The CurrentThrottle is whatever CurrentThrottle was previously. plus the Throttle we're adding in.

139
00:09:13.866 --> 00:09:17.866
but we don't want this to exceed 1. so we use a MathF

140
00:09:17.866 --> 00:09:21.866
or FMath rather::Clamp

141
00:09:21.866 --> 00:09:25.866
on that. And we restrict the range to

142
00:09:25.866 --> 00:09:28.633
-1 to 1.

143
00:09:28.633 --> 00:09:32.633
Now we want to be explicit that we want a floating point value out of this. not

144
00:09:32.633 --> 00:09:38.733
an integer value out of this. so we're going to just put a float annotation here. in between the

145
00:09:38.733 --> 00:09:40.700
word Clamp and the open brackets.

146
00:09:40.700 --> 00:09:44.700
So hopefully that makes sense what we're doing. We're making sure that this CurrentThrottle member variable.

147
00:09:44.700 --> 00:09:48.700
regardless of whether for MovementComponent. we are setting the

148
00:09:48.700 --> 00:09:52.700
intention to move forward and to turn right at the same time. It's always going to end up

149
00:09:52.700 --> 00:09:56.700
between -1 and +1. OK let's see how this behaves now!

150
00:09:56.700 --> 00:10:00.700
And if it works it's all good news! Then. all we need to do is go over to the

151
00:10:00.700 --> 00:10:04.700
AI tanks and make sure that they are playing the same game. by dropping them back in the scene.

152
00:10:04.700 --> 00:10:08.700
It's a good idea to refresh them occasionally anyway. if we're making lots of changes to them. because you

153
00:10:08.700 --> 00:10:12.700
can't be 110% sure that something didn't happen. Remember that the constructor

154
00:10:12.700 --> 00:10:16.700
applies. runs on those tanks only when you drag them into the scene. so you can't be

155
00:10:16.700 --> 00:10:20.700
100% sure that they're still going to work after major changes. So what's going

156
00:10:20.700 --> 00:10:24.700
on? No movement at all! So I need to just work out what I've done

157
00:10:24.700 --> 00:10:28.700
wrong there. Hop back into the code.

158
00:10:28.700 --> 00:10:32.700
and of course. what I haven't done is ever called this DriveTrack method.

159
00:10:32.700 --> 00:10:36.700
So we're setting a throttle. we extracted DriveTrack() out. but I deleted the call

160
00:10:36.700 --> 00:10:40.700
to DriveTrack(). So where I've commented DriveTrack(). I'm just going to say DriveTrack().

161
00:10:40.700 --> 00:10:44.700
It should be Track. because we are in single

162
00:10:44.700 --> 00:10:48.700
track. if that makes sense. The other thing we should do while we're here is. it's all very well

163
00:10:48.700 --> 00:10:52.700
setting this throttle but the tanks going to... Well let's just show you! I was going to say. the tank's going to continue to

164
00:10:52.700 --> 00:10:56.700
roll forward isn't it. because we never set the throttle back to 0? So one thing

165
00:10:56.700 --> 00:11:00.700
I'm thinking. while it compiles. we want to be doing is here we want to "//. reset

166
00:11:00.700 --> 00:11:04.700
throttle". which is going to be trivial. but let me show you the effect of you not

167
00:11:04.700 --> 00:11:08.700
resetting the throttle first. So I'm using the left stick on my controller here and I'm moving

168
00:11:08.700 --> 00:11:12.700
around and it seems to be working fine. the question is. when we leave the ground.

169
00:11:12.700 --> 00:11:16.700
Now. in the air you see there's no forces going on! Previously.

170
00:11:16.700 --> 00:11:20.700
that tank would have flown but it's not. When it's not in the air there are no

171
00:11:20.700 --> 00:11:24.700
forces. Much much much more like it! Now we are doing movement

172
00:11:24.700 --> 00:11:28.700
the hard way with these tanks. of course we are. because there's a lot more learning in doing it this way than me

173
00:11:28.700 --> 00:11:32.700
just saying to you. oh open up a new project in Unreal. use the four wheel vehicle.

174
00:11:32.700 --> 00:11:36.700
then oh and the section's over. You're not going to learn anything from that. so doing things the

175
00:11:36.700 --> 00:11:40.700
hard way. like training with a massive backpack on in the army. often gives you a lot

176
00:11:40.700 --> 00:11:44.700
more growth. So let's reset this throttle. that's really trivial. Once we've used it.

177
00:11:44.700 --> 00:11:48.700
we're just going to say CurrentThrottle = 0. Sorry. I never did show

178
00:11:48.700 --> 00:11:52.700
you the problem with not doing that. so let me do that before I

179
00:11:52.700 --> 00:11:56.700
go away. I've let go of the stick now. I'm not touching any controls and the tank

180
00:11:56.700 --> 00:12:00.700
is still going! Why is it not slowing down. because of Linear Damping? It's nothing to do with that! The

181
00:12:00.700 --> 00:12:04.700
fact is that. that current throttle member variable is still pinned at whatever value

182
00:12:04.700 --> 00:12:08.700
it was at. OK. That's the problem we're seeing there. So if you set CurrentThrottle to 0.

183
00:12:08.700 --> 00:12:12.700
we are golden. Let's take a look!

184
00:12:12.700 --> 00:12:16.700
Then. all that remains is I dump in the two AI tanks and I

185
00:12:16.700 --> 00:12:20.700
revel in the fact that they must behave. very similarly to the way my tank behaves. and

186
00:12:20.700 --> 00:12:24.700
I'm going to say it again because they're using the same movement API. So I'm going to push

187
00:12:24.700 --> 00:12:28.700
the throttle forward. then I'm going to let go of it. and the tank comes to a halt under the Linear

188
00:12:28.700 --> 00:12:32.700
Damping. Bonzer! And then. I'm going to drop an AI tank or

189
00:12:32.700 --> 00:12:36.700
two into the scene and just F11 it and make

190
00:12:36.700 --> 00:12:40.700
sure that they can actually move now. And you'll find that they're moving much more

191
00:12:40.700 --> 00:12:44.700
naturally. you see they've got sideways friction. they've got damping. They're still bouncing off these weird

192
00:12:44.700 --> 00:12:48.700
imperfections in the terrain. What that is. is that the colliders of our tracks

193
00:12:48.700 --> 00:12:52.700
are sometimes disappearing. but what I think this is that our colliders from our tracks

194
00:12:52.700 --> 00:12:56.700
are sometimes disappearing into the floor and then popping back out. I haven't confirmed that yet

195
00:12:56.700 --> 00:13:00.700
but it's not a dramatic problem. it's like we're hitting pebbles or something. so I'm not too

196
00:13:00.700 --> 00:13:04.700
worried about it. and the point is that you're getting lots and lots and lots of different ways of using

197
00:13:04.700 --> 00:13:08.700
Unreal here. So congratulations on getting that far. the tanks are working much better!

198
00:13:08.700 --> 00:13:12.700
Remember you can always go to GitHub. my GitHub. in order to find

199
00:13:12.700 --> 00:13:18.633
the code changes. I'll put a link in the resources. And I'll see you in the next lecture!

=======

1
00:00:00,000 --> 00:00:04,000
So welcome to Avoiding Boolean Flags!

2
00:00:04,000 --> 00:00:08,000
We'll talk about why it's called that in the middle of the lecture, but for now, what I want to tell you

3
00:00:08,000 --> 00:00:12,000
is that, by the end of the video, your tank and the AI tanks will be

4
00:00:12,000 --> 00:00:16,000
not applying forces, unless they are in contact with the ground. And they'll

5
00:00:16,000 --> 00:00:21,866
be moving a lot more sensibly, much more like a tank and none of this funny flying. So see you in there!

6
00:00:21,866 --> 00:00:25,866
OK, so we'll get to why this video is called what it is a little bit later on, but for now,

7
00:00:25,866 --> 00:00:29,866
the first thing I'm going to do is remove the AI tanks from the

8
00:00:29,866 --> 00:00:33,866
scene, so remove both of those. So the World Outliner may be the most reliable place, rather than

9
00:00:33,866 --> 00:00:37,866
hunting around in the 3D View. Then, the next thing I'm going to do is

10
00:00:37,866 --> 00:00:41,866
just do a little bit of tweaking to my tank's physics. I'm removing those AI tanks, by the way, just

11
00:00:41,866 --> 00:00:45,866
because we're focusing on our movement right now, we can put some new AI tanks in

12
00:00:45,866 --> 00:00:49,866
later. So I want to go to the tank blueprint and observe

13
00:00:49,866 --> 00:00:53,866
a couple of things. In fact, let's just show you this in the world first. Notice that if I move

14
00:00:53,866 --> 00:00:57,866
along, I'm pushing the throttle, if I let go of the throttle I keep going at the same speed, seemingly

15
00:00:57,866 --> 00:01:01,866
forever. That's rubbish and a tank is going to slow down! So the way you sort this out is, you go to

16
00:01:01,866 --> 00:01:05,866
your tank blueprint, to the Tank root (Static Mesh Component) there,

17
00:01:05,866 --> 00:01:09,866
scroll down. While you're scrolling down, make sure your Collision simulation generates

18
00:01:09,866 --> 00:01:13,866
events is on. Mine didn't persist from the last video, for some reason, so I'll just save that

19
00:01:13,866 --> 00:01:17,866
now. And it's under here, Linear Damping. Play with your figures

20
00:01:17,866 --> 00:01:21,866
of Linear Damping. I'm going to choose 0.5, I tend to do... Well let's

21
00:01:21,866 --> 00:01:25,866
see what 0.5 is like, before I say I'm going to choose it. So I accelerate away

22
00:01:25,866 --> 00:01:29,866
and I let go of the throttle now and it comes to a halt in...

23
00:01:29,866 --> 00:01:33,866
Yeah, I think that's a reasonable amount of time! But pick your own Linear Damping. What

24
00:01:33,866 --> 00:01:37,866
Linear Damping is, is a force that works in opposition to the Linear Motion. It

25
00:01:37,866 --> 00:01:41,866
is a force that works backwards, at a factor that depends on both

26
00:01:41,866 --> 00:01:45,866
the tank's speed but also on this Linear Damping factor. Now let's look at

27
00:01:45,866 --> 00:01:49,866
Angular Damping. At the moment, if we go hurtling off something, we have two

28
00:01:49,866 --> 00:01:53,866
fundamental problems, when we're in the air. Not that we're going to do too much flying in tanks, because you can't

29
00:01:53,866 --> 00:01:57,866
fly a tank fool, according to the A Team! But one of those problems is that

30
00:01:57,866 --> 00:02:01,866
this happens, forces are still applied when it's in the air, we're going to fix that, and the other one is it

31
00:02:01,866 --> 00:02:05,866
spins far too fast for a tank. So I'm going to give it a fair amount of Angular Damping,

32
00:02:05,866 --> 00:02:09,866
0.8 Angular Damping. Rotations aren't completely properly

33
00:02:09,866 --> 00:02:13,866
handled in these engines. The Intermediate Axis Theorem, if you want to look it up,

34
00:02:13,866 --> 00:02:17,866
isn't built in really properly, but Angular Damping will give us

35
00:02:17,866 --> 00:02:21,866
a nice effect, where the thing is a little bit harder to rotate than

36
00:02:21,866 --> 00:02:25,866
it looks like it was. So if I put enough Angular Damping in look what happens as we're in the air,

37
00:02:25,866 --> 00:02:29,866
it's a little bit better, everything's a little bit more mellow. So that's what I'm going to do. On the

38
00:02:29,866 --> 00:02:33,866
tank blueprint, 0.5, 0.8 slows things down. I'm going to save this blueprint right now.

39
00:02:33,866 --> 00:02:37,866
In fact, I'm going to Save All, so we never lose anything again. And now, we're going to turn

40
00:02:37,866 --> 00:02:41,866
our attention to how we are going to decide whether we're

41
00:02:41,866 --> 00:02:45,866
grounded or not and then how we're going to architect this class. Now don't use a

42
00:02:45,866 --> 00:02:49,866
boolean flag. A boolean flag is when you're temped to say, ooh I'm going to set some

43
00:02:49,866 --> 00:02:53,866
flag called IsGrounded. Just don't do that, the only time you want to use a boolean

44
00:02:53,866 --> 00:02:57,866
is when the thing you're talking about really is true or false, like whether a button

45
00:02:57,866 --> 00:03:01,866
is depressed or not, or something like that. But not when you're using

46
00:03:01,866 --> 00:03:05,866
it to ask a question at one time, like am I grounded? So you could be

47
00:03:05,866 --> 00:03:09,866
tempted to go, oh on hit, let's set a flag to say I'm grounded, and then, later

48
00:03:09,866 --> 00:03:13,866
you read that flag. Well hang on, that's a bit nuts isn't it, because how

49
00:03:13,866 --> 00:03:17,866
do you know that you're still grounded, when you come to read the flag later?

50
00:03:17,866 --> 00:03:21,866
Why not just ask the question at the right time? But to do

51
00:03:21,866 --> 00:03:25,866
that, you've got to architect his class a little bit differently, so what I'm going to suggest is that we don't have this

52
00:03:25,866 --> 00:03:29,866
class ticking at all and that we just do everything on OnHit.

53
00:03:29,866 --> 00:03:33,866
So OnHit gets called every frame anyway, and you saw that in the

54
00:03:33,866 --> 00:03:37,866
logs up here, or every frame

55
00:03:37,866 --> 00:03:41,866
that attracts our hitting something, it gets called right. So what makes sense,

56
00:03:41,866 --> 00:03:45,866
from a pseudocode point of view, is just simply this. What we do OnHit is,

57
00:03:45,866 --> 00:03:49,866
we "// Drive the tracks", and then, we "// Apply

58
00:03:49,866 --> 00:03:53,866
a sideways force" and that's probably about it.

59
00:03:53,866 --> 00:03:57,866
So let's start that process! The sideways force, let's

60
00:03:57,866 --> 00:04:01,866
deal with that, as it's right in front of us. That code I've just highlighted in TickComponent is purely

61
00:04:01,866 --> 00:04:05,866
about applying a sideways force, and we can't see that, so it's worth extracting it into

62
00:04:05,866 --> 00:04:09,866
its own method, for self documentation purposes and so it can be called easily from On

63
00:04:09,866 --> 00:04:13,866
Hit. So highlight that lot! In VisualStudio you've got quick actions. Right-click at the top

64
00:04:13,866 --> 00:04:17,866
and then Extract Function. You can call it ApplySideways

65
00:04:17,866 --> 00:04:21,866
Force. Now when you do this, notice that it's

66
00:04:21,866 --> 00:04:25,866
noticing that you need the DeltaTime passed in there

67
00:04:25,866 --> 00:04:29,866
OK. So we'll roll with that for a moment. OK

68
00:04:29,866 --> 00:04:33,866
so what's happening is that TickComponent is now calling

69
00:04:33,866 --> 00:04:37,866
ApplySidewaysForce, so that the behavior will be identical to what it was before, but we

70
00:04:37,866 --> 00:04:41,866
actually don't want to call it from Tick, we want to call it straight from OnHit,

71
00:04:41,866 --> 00:04:45,866
because OnHit's getting called every frame anyway. OK well that's all

72
00:04:45,866 --> 00:04:49,866
we're doing from TickComponent, so guess what? We can get rid of TickComponent, we can

73
00:04:49,866 --> 00:04:53,866
turn off ticking in the constructor, and, of course, we can remove

74
00:04:53,866 --> 00:04:57,866
the TickComponent override, in the header file. Let's try

75
00:04:57,866 --> 00:05:01,866
all that, before we go any further. So that's good news, because we

76
00:05:01,866 --> 00:05:05,866
stopped our thing ticking, which is cool! Let me show you the uncommitted changes,

77
00:05:05,866 --> 00:05:09,866
while we're here. I'm hearing that you like that, so that's good news. That's

78
00:05:09,866 --> 00:05:13,866
what I've changed in the Tank.cpp and the Tank.h,

79
00:05:13,866 --> 00:05:17,866
it's fairly obvious I've just removed that thing. OK cool!

80
00:05:17,866 --> 00:05:21,866
So VisualStudio is popping up. Let's just play the game, make sure it still works! It should work

81
00:05:21,866 --> 00:05:25,866
in exactly the same way, should the compile have succeeded. Delta

82
00:05:25,866 --> 00:05:29,866
Time is an "undeclared identifier". OK fine.

83
00:05:29,866 --> 00:05:33,866
So what happened is the Tick event had a Delta

84
00:05:33,866 --> 00:05:37,866
Time inside it previously, remember it was one of it's parameters, and now we don't have it

85
00:05:37,866 --> 00:05:41,866
available, so that's actually changed the signature of ApplySidewaysForce. Take the

86
00:05:41,866 --> 00:05:45,866
DeltaTime out of it altogether, and we are actually just going to

87
00:05:45,866 --> 00:05:49,866
cache... Well we don't even need to cache the DeltaTime, we can just, where we used

88
00:05:49,866 --> 00:05:53,866
DeltaTime here let's just go get it. Let's just say, immediately before

89
00:05:53,866 --> 00:05:57,866
that, auto DeltaTime = GetWorld().

90
00:05:57,866 --> 00:06:01,866
Whenever you use GetWorld ask yourself if you really need to but,

91
00:06:01,866 --> 00:06:05,866
in this case, it is a global piece of information the DeltaTime, it is WorldScale,

92
00:06:05,866 --> 00:06:09,866
so it's fine to reach up to that global scope, GetDeltaTimeSeconds

93
00:06:09,866 --> 00:06:13,866
or DeltaSeconds rather. So just do that, just get it just

94
00:06:13,866 --> 00:06:17,866
before you need it. In fact, I'm going to move this comment up to the top of this method.

95
00:06:17,866 --> 00:06:21,866
Then that's it, ApplySidewaysFriction doesn't need to take in a DeltaTime.

96
00:06:21,866 --> 00:06:25,866
It works out the required acceleration, using the DeltaTime

97
00:06:25,866 --> 00:06:29,866
and applies the SidewaysForce. Does that make sense? OK let's try it to see if it...

98
00:06:29,866 --> 00:06:33,866
You know, let's not cry for how much sense it makes until we've

99
00:06:33,866 --> 00:06:37,866
[Laughs] actually got it compiling. So this time I'll wait for it to compile,

100
00:06:37,866 --> 00:06:41,866
before I show you the code, just because

101
00:06:41,866 --> 00:06:45,866
you love staring at the Compiling C++ thing. It looks a bit like Knight Rider doesn't it?

102
00:06:45,866 --> 00:06:49,866
Kit from Knight Rider, that little thing. OK, so we're refactoring here, so hopefully

103
00:06:49,866 --> 00:06:53,866
we're close to compilation all the time, and look, it works the same! Does it? Am I slipping

104
00:06:53,866 --> 00:06:57,866
sideways? No I''m not. So that's cool, yeah we've made good progress there!

105
00:06:57,866 --> 00:07:01,866
I'll just quickly show you the code changes, for those of you who are interested. In the Tank.cpp, this is

106
00:07:01,866 --> 00:07:05,866
what I've changed so far. It's a bit hard to read, but obviously the red is where I've deleted and

107
00:07:05,866 --> 00:07:09,866
the green is where I've added. OK, so on here

108
00:07:09,866 --> 00:07:13,866
we're applying a sideways force every frame, we've got rid of ticking, and it's

109
00:07:13,866 --> 00:07:17,866
pretty good progress. How about this SetThrottle malarkey? Well

110
00:07:17,866 --> 00:07:21,866
remember that that SetThrottle gets called four times per frame,

111
00:07:21,866 --> 00:07:25,866
twice from IntendMoveForward and try twice from IntendTurnRight.

112
00:07:25,866 --> 00:07:29,866
So we need to consume this throttle a little in a slightly

113
00:07:29,866 --> 00:07:33,866
more interesting way, because you could be intending to move forward and turn right at the same

114
00:07:33,866 --> 00:07:37,866
time. In fact, it happens whenever you're using the left thumb-stick on the controller, because

115
00:07:37,866 --> 00:07:41,866
both of those inputs are kind of mixed together. So we want to make sure that we can't

116
00:07:41,866 --> 00:07:45,866
get to a value of more than 1 in total, a total throttle of 1.

117
00:07:45,866 --> 00:07:49,866
So let's think about what's going on here! This stuff inside

118
00:07:49,866 --> 00:07:53,866
SetThrottle, at the moment, isn't setting the throttle at all really, is it? If you think about what it's actually

119
00:07:53,866 --> 00:07:57,866
doing, we can extract this method. it's actually driving the

120
00:07:57,866 --> 00:08:01,866
track, and it's taking a

121
00:08:01,866 --> 00:08:05,866
throttle. So let's roll with that for a second! SetThrottle,

122
00:08:05,866 --> 00:08:09,866
should SetThrottle just call DriveTrack with a (Throttle)? That is a completely

123
00:08:09,866 --> 00:08:13,866
useless piece of refactoring, apart from DriveTrack is arguably a better

124
00:08:13,866 --> 00:08:17,866
name than SetThrottle, right. Oh, by the way, for those none VisualStudio people,

125
00:08:17,866 --> 00:08:21,866
when I do that extract function it is actually adding in all of my

126
00:08:21,866 --> 00:08:25,866
header file things that I need for me, so that's kind of it, but if you

127
00:08:25,866 --> 00:08:29,866
don't have that then you're going to need to do it manually. Anyway, when we set the throttle,

128
00:08:29,866 --> 00:08:33,866
what I actually want to do is I want to cache this Throttle state, I want to keep the Throttle state.

129
00:08:33,866 --> 00:08:37,866
Bear with me a second, let's show you why. So what we do is we just go float Current

130
00:08:37,866 --> 00:08:41,866
Throttle, and I'm just going to say = 0, because I want

131
00:08:41,866 --> 00:08:45,866
a sensible default. We put that as a member variable. The Drive

132
00:08:45,866 --> 00:08:49,866
Track therefore no longer needs to take a throttle in at all, so we can get rid of that in its

133
00:08:49,866 --> 00:08:53,866
signature. When it asks about a throttle,

134
00:08:53,866 --> 00:08:57,866
it's going to use the CurrentThrottle, so DriveTrack's good to

135
00:08:57,866 --> 00:09:01,866
go now. When we set a throttle what we want to do is this, we want to say that the CurrentThrottle

136
00:09:01,866 --> 00:09:05,866
= the CurrentThrottle plus, not

137
00:09:05,866 --> 00:09:09,866
+= in this case because I want to break it down further.

138
00:09:09,866 --> 00:09:13,866
The CurrentThrottle is whatever CurrentThrottle was previously, plus the Throttle we're adding in,

139
00:09:13,866 --> 00:09:17,866
but we don't want this to exceed 1, so we use a MathF

140
00:09:17,866 --> 00:09:21,866
or FMath rather::Clamp

141
00:09:21,866 --> 00:09:25,866
on that. And we restrict the range to

142
00:09:25,866 --> 00:09:28,633
-1 to 1.

143
00:09:28,633 --> 00:09:32,633
Now we want to be explicit that we want a floating point value out of this, not

144
00:09:32,633 --> 00:09:38,733
an integer value out of this, so we're going to just put a float annotation here, in between the

145
00:09:38,733 --> 00:09:40,700
word Clamp and the open brackets.

146
00:09:40,700 --> 00:09:44,700
So hopefully that makes sense what we're doing. We're making sure that this CurrentThrottle member variable,

147
00:09:44,700 --> 00:09:48,700
regardless of whether for MovementComponent, we are setting the

148
00:09:48,700 --> 00:09:52,700
intention to move forward and to turn right at the same time. It's always going to end up

149
00:09:52,700 --> 00:09:56,700
between -1 and +1. OK let's see how this behaves now!

150
00:09:56,700 --> 00:10:00,700
And if it works it's all good news! Then, all we need to do is go over to the

151
00:10:00,700 --> 00:10:04,700
AI tanks and make sure that they are playing the same game, by dropping them back in the scene.

152
00:10:04,700 --> 00:10:08,700
It's a good idea to refresh them occasionally anyway, if we're making lots of changes to them, because you

153
00:10:08,700 --> 00:10:12,700
can't be 110% sure that something didn't happen. Remember that the constructor

154
00:10:12,700 --> 00:10:16,700
applies, runs on those tanks only when you drag them into the scene, so you can't be

155
00:10:16,700 --> 00:10:20,700
100% sure that they're still going to work after major changes. So what's going

156
00:10:20,700 --> 00:10:24,700
on? No movement at all! So I need to just work out what I've done

157
00:10:24,700 --> 00:10:28,700
wrong there. Hop back into the code,

158
00:10:28,700 --> 00:10:32,700
and of course, what I haven't done is ever called this DriveTrack method.

159
00:10:32,700 --> 00:10:36,700
So we're setting a throttle, we extracted DriveTrack() out, but I deleted the call

160
00:10:36,700 --> 00:10:40,700
to DriveTrack(). So where I've commented DriveTrack(), I'm just going to say DriveTrack().

161
00:10:40,700 --> 00:10:44,700
It should be Track, because we are in single

162
00:10:44,700 --> 00:10:48,700
track, if that makes sense. The other thing we should do while we're here is, it's all very well

163
00:10:48,700 --> 00:10:52,700
setting this throttle but the tanks going to... Well let's just show you! I was going to say, the tank's going to continue to

164
00:10:52,700 --> 00:10:56,700
roll forward isn't it, because we never set the throttle back to 0? So one thing

165
00:10:56,700 --> 00:11:00,700
I'm thinking, while it compiles, we want to be doing is here we want to "//. reset

166
00:11:00,700 --> 00:11:04,700
throttle", which is going to be trivial, but let me show you the effect of you not

167
00:11:04,700 --> 00:11:08,700
resetting the throttle first. So I'm using the left stick on my controller here and I'm moving

168
00:11:08,700 --> 00:11:12,700
around and it seems to be working fine, the question is, when we leave the ground.

169
00:11:12,700 --> 00:11:16,700
Now, in the air you see there's no forces going on! Previously,

170
00:11:16,700 --> 00:11:20,700
that tank would have flown but it's not. When it's not in the air there are no

171
00:11:20,700 --> 00:11:24,700
forces. Much much much more like it! Now we are doing movement

172
00:11:24,700 --> 00:11:28,700
the hard way with these tanks, of course we are, because there's a lot more learning in doing it this way than me

173
00:11:28,700 --> 00:11:32,700
just saying to you, oh open up a new project in Unreal, use the four wheel vehicle,

174
00:11:32,700 --> 00:11:36,700
then oh and the section's over. You're not going to learn anything from that, so doing things the

175
00:11:36,700 --> 00:11:40,700
hard way, like training with a massive backpack on in the army, often gives you a lot

176
00:11:40,700 --> 00:11:44,700
more growth. So let's reset this throttle, that's really trivial. Once we've used it,

177
00:11:44,700 --> 00:11:48,700
we're just going to say CurrentThrottle = 0. Sorry, I never did show

178
00:11:48,700 --> 00:11:52,700
you the problem with not doing that, so let me do that before I

179
00:11:52,700 --> 00:11:56,700
go away. I've let go of the stick now, I'm not touching any controls and the tank

180
00:11:56,700 --> 00:12:00,700
is still going! Why is it not slowing down, because of Linear Damping? It's nothing to do with that! The

181
00:12:00,700 --> 00:12:04,700
fact is that, that current throttle member variable is still pinned at whatever value

182
00:12:04,700 --> 00:12:08,700
it was at, OK. That's the problem we're seeing there. So if you set CurrentThrottle to 0,

183
00:12:08,700 --> 00:12:12,700
we are golden. Let's take a look!

184
00:12:12,700 --> 00:12:16,700
Then, all that remains is I dump in the two AI tanks and I

185
00:12:16,700 --> 00:12:20,700
revel in the fact that they must behave, very similarly to the way my tank behaves, and

186
00:12:20,700 --> 00:12:24,700
I'm going to say it again because they're using the same movement API. So I'm going to push

187
00:12:24,700 --> 00:12:28,700
the throttle forward, then I'm going to let go of it, and the tank comes to a halt under the Linear

188
00:12:28,700 --> 00:12:32,700
Damping. Bonzer! And then, I'm going to drop an AI tank or

189
00:12:32,700 --> 00:12:36,700
two into the scene and just F11 it and make

190
00:12:36,700 --> 00:12:40,700
sure that they can actually move now. And you'll find that they're moving much more

191
00:12:40,700 --> 00:12:44,700
naturally, you see they've got sideways friction, they've got damping. They're still bouncing off these weird

192
00:12:44,700 --> 00:12:48,700
imperfections in the terrain. What that is, is that the colliders of our tracks

193
00:12:48,700 --> 00:12:52,700
are sometimes disappearing, but what I think this is that our colliders from our tracks

194
00:12:52,700 --> 00:12:56,700
are sometimes disappearing into the floor and then popping back out. I haven't confirmed that yet

195
00:12:56,700 --> 00:13:00,700
but it's not a dramatic problem, it's like we're hitting pebbles or something, so I'm not too

196
00:13:00,700 --> 00:13:04,700
worried about it, and the point is that you're getting lots and lots and lots of different ways of using

197
00:13:04,700 --> 00:13:08,700
Unreal here. So congratulations on getting that far, the tanks are working much better!

198
00:13:08,700 --> 00:13:12,700
Remember you can always go to GitHub, my GitHub, in order to find

199
00:13:12,700 --> 00:13:18,633
the code changes, I'll put a link in the resources. And I'll see you in the next lecture!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT82 Avoiding Boolean Flags.srt

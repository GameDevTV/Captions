WEBVTT

1
00:00:00.000 --> 00:00:04.000
So welcome to

2
00:00:04.000 --> 00:00:08.000
Attaching a Debugger to Unreal! What we're going to do in this video is exactly what I've

3
00:00:08.000 --> 00:00:12.000
said on the tin. and by the end of it. well firstly the game will play which will be good.

4
00:00:12.000 --> 00:00:16.000
We'll have found out what was wrong. by using the debugger. and also we'll be doing a little bit of

5
00:00:16.000 --> 00:00:20.000
other logging in Blueprint. which you can see here. We'll be printing out some references

6
00:00:20.000 --> 00:00:24.000
just as another kind of form of debugging. temporary debugging. So

7
00:00:24.000 --> 00:00:26.366
this video is all about debugging. let's dive in and do it!

8
00:00:26.366 --> 00:00:30.366
OK. so let's just remind ourselves of the sorry state we're in. If we try and play our

9
00:00:30.366 --> 00:00:34.366
game. we get a hard crash of the Editor. Now normally when I get a crash like that. I

10
00:00:34.366 --> 00:00:38.366
say well Unreal does that sometimes. particularly when we change blueprints. So

11
00:00:38.366 --> 00:00:42.366
we reopen Unreal and we just run again. and see if we still get another

12
00:00:42.366 --> 00:00:46.366
hard crash. because sometimes it does just do that. We just close Steam.

13
00:00:46.366 --> 00:00:50.366
OK. so if I play. I'm getting another hard crash. So what on Earth do you do about these? This

14
00:00:50.366 --> 00:00:54.366
is the topic of this video. You could potentially think about trying to

15
00:00:54.366 --> 00:00:58.366
write to an external log file. perhaps you know an external fine. and then look

16
00:00:58.366 --> 00:01:02.366
at that log to see what happened. But I want to show you. perhaps a better way. or an

17
00:01:02.366 --> 00:01:06.366
easy quick way and a very generally applicable way. which is to use the VisualStudio

18
00:01:06.366 --> 00:01:10.366
Debugger. So what we're going to do is. we're going to open up our instance of the Unreal

19
00:01:10.366 --> 00:01:14.366
Editor. but not click play. because it's just going to die when we do that. So you go to the Debug

20
00:01:14.366 --> 00:01:18.366
menu. and then. Attach to Process. And in Xcode or other IDEs

21
00:01:18.366 --> 00:01:22.366
it'll be a similar idea to this. So we look through our list of processes.

22
00:01:22.366 --> 00:01:26.366
and one of those would be the UE4 Editor. that is our Editor that is running down here

23
00:01:26.366 --> 00:01:30.366
at the moment. So we attach the debugger to the UE4.

24
00:01:30.366 --> 00:01:34.366
for instance. Now that will automatically change your user interface a  little bit. and it'll

25
00:01:34.366 --> 00:01:38.366
go ahead and load some windows and do some attaching in the background. We don't need to worry

26
00:01:38.366 --> 00:01:42.366
ourselves too much about exactly how that's working and what it's doing. but now it says

27
00:01:42.366 --> 00:01:46.366
Ready and we can go back to Unreal and click play. Now what's happened

28
00:01:46.366 --> 00:01:50.366
here is. Unreal is still there but it's just sitting ready to

29
00:01:50.366 --> 00:01:54.366
crash. and VisualStudio has intercepted this and it says look

30
00:01:54.366 --> 00:01:58.366
"Exception thrown: read access violation." This was a null pointer. So it was a null

31
00:01:58.366 --> 00:02:02.366
pointer issue. and then. we can click Break. Now what Break will do is. it

32
00:02:02.366 --> 00:02:06.366
stops the execution of Unreal. just before it's closed itself. We can't go

33
00:02:06.366 --> 00:02:10.366
back to it. it's not in a good state. but we can see some very useful

34
00:02:10.366 --> 00:02:14.366
information. So what is showing is the TankAimingComponent. On line

35
00:02:14.366 --> 00:02:18.366
28 there's a little yellow arrow. it's saying this is the next statement that will be executed.

36
00:02:18.366 --> 00:02:22.366
So it's sitting here and it's saying that this... Now what is this? This

37
00:02:22.366 --> 00:02:26.366
is the TankAimingComponent. and you can see that from the type here.

38
00:02:26.366 --> 00:02:30.366
has a value of null. so that it's the TankAimingComponent

39
00:02:30.366 --> 00:02:34.366
pointer that has no value. Why not? Well what called Aim

40
00:02:34.366 --> 00:02:38.366
At? I think it was the Tank that called AimAt. so let's go and find that. If you have trouble you can

41
00:02:38.366 --> 00:02:42.366
bring back your solution explorer. go find your Tank.cpp.

42
00:02:42.366 --> 00:02:46.366
and let's look at that code. Now that code is actually here. it's just under this menu.

43
00:02:46.366 --> 00:02:50.366
So what we're going to need to do to make this work

44
00:02:50.366 --> 00:02:54.366
is actually allow Unreal to finish crashing. because what

45
00:02:54.366 --> 00:02:58.366
Unreal has done is it's popped a window up in the foreground. over the top of VisualStudio.

46
00:02:58.366 --> 00:03:02.366
We could move ourselves out of the way to look at the tank. that's another option. but let's just let

47
00:03:02.366 --> 00:03:06.366
Unreal finish crashing. put it out of it's misery. That way you do that is. you click Continue in

48
00:03:06.366 --> 00:03:10.366
VisualStudio. "Pass exception on to the program being debugged?" That's

49
00:03:10.366 --> 00:03:14.366
going to pass the exception back to Unreal but it can't handle it. It doesn't like following null pointers.

50
00:03:14.366 --> 00:03:18.366
it just dies and bails out. So now we're left just in VisualStudio without Unreal

51
00:03:18.366 --> 00:03:22.366
running. That's fine for now! So let's look at the Tank. What we used to do

52
00:03:22.366 --> 00:03:26.366
in the Tank's constructor is that we would add a TankAimingComponent

53
00:03:26.366 --> 00:03:30.366
as a default sub-object. We tried that architecture. we decided not to do it like that

54
00:03:30.366 --> 00:03:34.366
and compose the tank in Blueprint. but we never actually replaced

55
00:03:34.366 --> 00:03:38.366
the finding of the TankAimingComponent. Now we're not going to do that in this video. We are just going to

56
00:03:38.366 --> 00:03:42.366
focus on protecting this pointer. before we try and use it. In fact. I'm going to get you to do that

57
00:03:42.366 --> 00:03:46.366
because I've talked enough. So protect the null pointer we've just found. ensure the game still

58
00:03:46.366 --> 00:03:50.366
runs with that. and don't worry about setting that pointer yet. and don't worry that the aiming

59
00:03:50.366 --> 00:03:54.366
won't work. OK. so go ahead. pause the video. protect up that pointer.

60
00:03:54.366 --> 00:03:58.366
and I'll see you when you come back.

61
00:03:58.366 --> 00:04:02.366
OK. so welcome back! This is a very standard thing

62
00:04:02.366 --> 00:04:06.366
that we do quite a lot. So AimAt should be saying to itself. if not

63
00:04:06.366 --> 00:04:10.366
TankAimingComponent then. and we do it all on one

64
00:04:10.366 --> 00:04:14.366
line just so we keep it short and sharp. then . We just are protecting

65
00:04:14.366 --> 00:04:18.366
the pointer there. OK so if you do that and then go back to

66
00:04:18.366 --> 00:04:22.366
the Unreal project. we're going to need to recompile our code.

67
00:04:22.366 --> 00:04:26.366
of course. And then. once we do that. what I'm hoping will happen is that the game will run

68
00:04:26.366 --> 00:04:30.366
and it will run in such a way that it doesn't aim. because the aiming

69
00:04:30.366 --> 00:04:34.366
component pointer isn't set. but it at least runs and that is the point

70
00:04:34.366 --> 00:04:38.366
of pointer protection. In fact. this shows you exactly the difference between not protecting your

71
00:04:38.366 --> 00:04:42.366
pointers and protecting them. It's the difference between a hard crash and just some functionality not quite

72
00:04:42.366 --> 00:04:46.366
working. which you can work with. So we play the game now. and you see no aiming is

73
00:04:46.366 --> 00:04:50.366
happening but we are not crashing. which is awesome! Now

74
00:04:50.366 --> 00:04:54.366
just to set us up for what's coming next. there are a couple of issues here. If you're in the

75
00:04:54.366 --> 00:04:58.366
smart amongst you'll have noticed that here we have a bunch of warnings

76
00:04:58.366 --> 00:05:02.366
about trying to read properties. We'll come to this in the next couple

77
00:05:02.366 --> 00:05:06.366
of lectures. But also notice. if you're sharp. that the crosshair is red.

78
00:05:06.366 --> 00:05:10.366
Now if we look in the UI over here. in the Player UI

79
00:05:10.366 --> 00:05:14.366
blueprint. in the Event Graph. we said that Reloading

80
00:05:14.366 --> 00:05:18.366
would be red. OK. well that's fine. but where would

81
00:05:18.366 --> 00:05:22.366
we have declared. in the TankAimingComponent header file.

82
00:05:22.366 --> 00:05:26.366
this Enum we said we wanted the default state to be aiming?

83
00:05:26.366 --> 00:05:30.366
Now aiming should be amber. so what's going on? Why are we getting a red crosshair?

84
00:05:30.366 --> 00:05:34.366
Well what's going on is the same thing that you are

85
00:05:34.366 --> 00:05:38.366
seeing reported in the console. It's all to

86
00:05:38.366 --> 00:05:42.366
do with when things are happening. It's to do with when

87
00:05:42.366 --> 00:05:46.366
this BP Aiming Component Reference is actually set. over in the PlayerController blueprint

88
00:05:46.366 --> 00:05:50.366
and whether or not it's actually finding a reference. So

89
00:05:50.366 --> 00:05:54.366
in the spirit of debugging. which this video's all about. let's just briefly look at what

90
00:05:54.366 --> 00:05:58.366
this AimingComponent Reference is set to. You can pull off it. you can

91
00:05:58.366 --> 00:06:02.366
say string to turn it into a string.

92
00:06:02.366 --> 00:06:06.366
like so. And then. we can come off of here and say print. Print the String.

93
00:06:06.366 --> 00:06:10.366
Now when are we going to print the string? Well on the Get. The Get actually happens every

94
00:06:10.366 --> 00:06:14.366
frame. but we're not concerned about when that Get happens. because we've left it to the engine

95
00:06:14.366 --> 00:06:18.366
to worry about this execution flow. But we're saying. every time we ask about the color and opacity

96
00:06:18.366 --> 00:06:22.366
of this crosshair. print out the value of the AimingComponent

97
00:06:22.366 --> 00:06:26.366
for me. so that we can check it's not none. OK. let's see what it actually is.

98
00:06:26.366 --> 00:06:30.366
Play! Now that print comes by default. You see it on the viewport there.

99
00:06:30.366 --> 00:06:34.366
on the left-hand side in blue? And it will also be printed into the log. You can see the

100
00:06:34.366 --> 00:06:38.366
log getting bigger and bigger. If I scroll down the log. you'll see none none none none none. So

101
00:06:38.366 --> 00:06:42.366
we're actually not getting an Aiming Component Reference. So where was that set

102
00:06:42.366 --> 00:06:46.366
to the Aiming Component Reference? We can take a look! It was set in the tank. under the TankPlayer

103
00:06:46.366 --> 00:06:50.366
Controller here. And it was set where we get Controlled Tank. and then.

104
00:06:50.366 --> 00:06:54.366
we try and set this Aiming Component. it's not happening. So the subject of the next video is going to

105
00:06:54.366 --> 00:06:58.366
be working out why that is not happening. But for now. we have

106
00:06:58.366 --> 00:07:02.366
made great progress. We're actually not going to set the

107
00:07:02.366 --> 00:07:06.366
TankAimingComponent pointer yet. because we need to think very carefully

108
00:07:06.366 --> 00:07:10.366
about how we put out tank together. when we put out tank together. where we put our

109
00:07:10.366 --> 00:07:14.366
tank together. and what we're doing about Aiming Component References

110
00:07:14.366 --> 00:07:18.366
and building up the UI and what gets done where. and more importantly what gets done when.

111
00:07:18.366 --> 00:07:21.999
So that's what we're going to talk about next!


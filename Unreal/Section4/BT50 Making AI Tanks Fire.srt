
1
00:00:00,000 --> 00:00:04,000
Hey

2
00:00:04,000 --> 00:00:08,000
and welcome to Making AI Tanks Fire! in this video, what we're going to

3
00:00:08,000 --> 00:00:12,000
do is, we're going to limit the firing rate down to 1 every 3 to 5 seconds,

4
00:00:12,000 --> 00:00:16,000
whatever we set, and also make sure that these AI Tanks can

5
00:00:16,000 --> 00:00:21,000
fire at us, so it'll become a bit more of a game in the process. So see you in there!

6
00:00:21,000 --> 00:00:25,000
So we're back to that age old question, what's the least fun thing about this

7
00:00:25,000 --> 00:00:29,000
game? Well lots of things need improving, but I would say the least fun thing is there is zero

8
00:00:29,000 --> 00:00:33,000
challenge right now. We can just pick these other tanks off like sitting ducks,

9
00:00:33,000 --> 00:00:37,000
quite literally, because they can't fire back. So let's focus our attention on

10
00:00:37,000 --> 00:00:41,000
having them fire back, for now. Remember that we're running in an iterative cycle.

11
00:00:41,000 --> 00:00:45,000
We've just been working on the controls of our tank, now we're just going to move on to thinking

12
00:00:45,000 --> 00:00:49,000
about improving Player 2, and we'll be back to work on

13
00:00:49,000 --> 00:00:53,000
controls and aiming and lots of other things later. So how are we going to

14
00:00:53,000 --> 00:00:57,000
do that? Well I want the AI tanks to fire, so let's go

15
00:00:57,000 --> 00:01:01,000
and have a look at our code and think about where that would happen. It would happen in

16
00:01:01,000 --> 00:01:05,000
the TankAIController. Now, in this TankAI

17
00:01:05,000 --> 00:01:09,000
Controller, we actually have a couple of very thin methods here, one gets the

18
00:01:09,000 --> 00:01:13,000
ControlledTank and one gets the PlayerTank. Now if we go and look

19
00:01:13,000 --> 00:01:17,000
at the header code for this, you'll notice that these getters are actually

20
00:01:17,000 --> 00:01:21,000
private getters, and that's probably a bit of a warning sign that maybe

21
00:01:21,000 --> 00:01:25,000
we've done a bit too much refactoring here. So thank you to those of you who pointed out

22
00:01:25,000 --> 00:01:29,000
that possibly we've gone overboard with the creation of methods. If these getters aren't even

23
00:01:29,000 --> 00:01:33,000
needed from the outside, i.e. they're not in the public interface,

24
00:01:33,000 --> 00:01:37,000
why do we necessarily need separate methods for them. I would argue we don't.

25
00:01:37,000 --> 00:01:41,000
So as part of this making this tank fire, let's go ahead

26
00:01:41,000 --> 00:01:45,000
and make it work, as we are to start with, and then, I will ask you to do a defactor

27
00:01:45,000 --> 00:01:49,000
[Laughs] the opposite of a refactor. So firstly, let's just make the fire work.

28
00:01:49,000 --> 00:01:53,000
So let's use the existing clunky GetControlledTank()

29
00:01:53,000 --> 00:01:57,000
method, and then, we can just say Fire(). Now remember that

30
00:01:57,000 --> 00:02:01,000
it just fires where the barrel is currently pointing, so this is going to fire

31
00:02:01,000 --> 00:02:05,000
every single frame. It's not fire if ready, but it's fire every

32
00:02:05,000 --> 00:02:09,000
frame. So get rid of the comment, and let's just try building that and see

33
00:02:09,000 --> 00:02:13,000
what comic effect we get from that! And then, we will get you to do some

34
00:02:13,000 --> 00:02:17,000
de-factoring, because knowing how to refactor code and to factor out

35
00:02:17,000 --> 00:02:21,000
methods is hugely important to extract functions. But doing the opposite sometimes is an

36
00:02:21,000 --> 00:02:25,000
equally important skill. Look at this, hose pipes of

37
00:02:25,000 --> 00:02:29,000
projectiles there! Look it's crazy! There's actually almost a little bit of a challenge

38
00:02:29,000 --> 00:02:33,000
now, because we have to aim and hit these tanks before they do that to us.

39
00:02:33,000 --> 00:02:37,000
[laughs] What a load of fun! So we have achieved our

40
00:02:37,000 --> 00:02:41,000
aim of having the tanks fire every single frame. What I want

41
00:02:41,000 --> 00:02:45,000
you to do now is get rid of these two methods, and to put it all inside the Tick() method

42
00:02:45,000 --> 00:02:49,000
as neatly as you can. So here's your challenge!

43
00:02:49,000 --> 00:02:53,000
Inline the two private getters. Remove the two methods, it's called inlining or

44
00:02:53,000 --> 00:02:57,000
de-factoring. Put the code in the Tick() method. You can remove

45
00:02:57,000 --> 00:03:01,000
the code and BeginPlay() as well. By the way, we don't need that any more, those checks. So

46
00:03:01,000 --> 00:03:05,000
go ahead, pause the video, and see if you can inline the code now.

47
00:03:05,000 --> 00:03:09,000
If you're not sure what I'm talking about, I'm literally just saying

48
00:03:09,000 --> 00:03:13,000
remove those two methods and do what they do as simply and cleanly as possible,

49
00:03:13,000 --> 00:03:17,000
inside the Tick() method.

50
00:03:17,000 --> 00:03:21,000
OK welcome back! So the way that I'm going to attack this is, I'm

51
00:03:21,000 --> 00:03:25,000
going to firstly delete this code at the top. We don't need to check about controllers possessing tanks,

52
00:03:25,000 --> 00:03:29,000
it seems to be working most of the time and we're not having any issues with that.

53
00:03:29,000 --> 00:03:33,000
So if (GetPlayerTank())! Well instead of GetPlayerTank

54
00:03:33,000 --> 00:03:37,000
this is getting the player tank, this thing here. So what I'm going to

55
00:03:37,000 --> 00:03:41,000
say is, auto...

56
00:03:41,000 --> 00:03:45,000
Now we'll talk about why we do this every frame, in a second. ...auto PlayerTank =

57
00:03:45,000 --> 00:03:49,000
that stuff. Now be careful, because previously it was a

58
00:03:49,000 --> 00:03:53,000
PlayerPawn and then it cast to a tank, so let's to the cast all in one go.

59
00:03:53,000 --> 00:03:57,000
PlayerTank is the result of going and finding

60
00:03:57,000 --> 00:04:01,000
the FirstPlayerController's Pawn and casting it

61
00:04:01,000 --> 00:04:05,000
to a ATank. Cool! So that does everything this

62
00:04:05,000 --> 00:04:09,000
does, apart from the protecting of the PlayerTank pointer, but

63
00:04:09,000 --> 00:04:13,000
we can do that right here, we already kind of were, if (PlayerTank).

64
00:04:13,000 --> 00:04:17,000
Now, if you look at it, we've got the Cast, we've got the Get, and we've got the

65
00:04:17,000 --> 00:04:21,000
pointer protection, we don't need GetPlayerTank anymore at all. And in

66
00:04:21,000 --> 00:04:25,000
the header file, we can get rid of a declaration.

67
00:04:25,000 --> 00:04:29,000
Fantastic! OK, so what next? GetControlledTank, well that's even thinner!

68
00:04:29,000 --> 00:04:33,000
So let's take a look at that, and we can say auto Controlled

69
00:04:33,000 --> 00:04:37,000
Tank or it could be AITank I guess, but

70
00:04:37,000 --> 00:04:41,000
we're inside the TankAIController, so I think ControlledTank is more meaningful

71
00:04:41,000 --> 00:04:45,000
and just that. And that's all that method did, so we can get

72
00:04:45,000 --> 00:04:49,000
rid of it. Now make sure you've got rid of your code in BeginPlay(), because that was calling these methods, too!

73
00:04:49,000 --> 00:04:53,000
Just remove GetControlledTank. We've lost quite a few lines of code here,

74
00:04:53,000 --> 00:04:57,000
for the same behavior, and losing lines of code and ending up with the same behavior

75
00:04:57,000 --> 00:05:01,000
is generally a good thing. So we're nearly there! These two lines

76
00:05:01,000 --> 00:05:05,000
need to change, so instead of GetControlledTank, etc. I'm just going to write the new

77
00:05:05,000 --> 00:05:09,000
line above it. ControlledTank->

78
00:05:09,000 --> 00:05:13,000
AimAt() and then (PlayerTank).

79
00:05:13,000 --> 00:05:17,000
Now we're nearly there, and then you look through the PlayerTank pointer and say GetActorLocation.

80
00:05:17,000 --> 00:05:21,000
And I think that looks absolutely fine!

81
00:05:21,000 --> 00:05:25,000
The ControlledTank should aim at the PlayerTank's location, almost reads in English!

82
00:05:25,000 --> 00:05:29,000
Perfect! Same thing here, instead of GetControlledTank it is just Controlled

83
00:05:29,000 --> 00:05:33,000
Tank->Fire(); and then, there is going to be a

84
00:05:33,000 --> 00:05:37,000
TODO here. "// TODO don't fire every

85
00:05:37,000 --> 00:05:41,000
frame". So we need to limit, or more specifically, we need to "limit

86
00:05:41,000 --> 00:05:45,000
firing rate". We need to do that later, but for now, let's stay

87
00:05:45,000 --> 00:05:49,000
focused on one job at a time, it was to de-factor this code like this.

88
00:05:49,000 --> 00:05:53,000
So let's go ahead and compile and

89
00:05:53,000 --> 00:05:57,000
see how this behaves. Oh, we love waiting

90
00:05:57,000 --> 00:06:01,000
for compilation to happen! I'll resist the urge to fill this with filler! Ooh,

91
00:06:01,000 --> 00:06:05,000
I just did! OK, so here we go! Let's see what happens, it still works!

92
00:06:05,000 --> 00:06:09,000
I can still fire! Oh, and that's pretty good! OK

93
00:06:09,000 --> 00:06:13,000
fantastic! So we have what we were looking for, which is

94
00:06:13,000 --> 00:06:17,000
a simpler way of doing this, and also the AI tanks

95
00:06:17,000 --> 00:06:21,000
are firing now, which is great! So we need to be limiting the firing

96
00:06:21,000 --> 00:06:25,000
rate, as a next port of call, so let's think about that really quickly.

97
00:06:25,000 --> 00:06:29,000
It's in the Tank that we would be limiting the fire rate, and what we would

98
00:06:29,000 --> 00:06:33,000
want in the tank is something like a float called Reload

99
00:06:33,000 --> 00:06:37,000
TimeInSeconds,

100
00:06:37,000 --> 00:06:41,000
and we could make that 3 seconds.

101
00:06:41,000 --> 00:06:45,000
Alright, so I'm going to make a float on the tank called ReloadTimeInSeconds.

102
00:06:45,000 --> 00:06:49,000
Then, remember that the AIController, both the tank and us just call this

103
00:06:49,000 --> 00:06:53,000
Fire() method. Well let's go look at the tank's Fire() method. This tank's Fire() method

104
00:06:53,000 --> 00:06:57,000
currently just fires regardless, but how about if we didn't just

105
00:06:57,000 --> 00:07:01,000
fire regardless, how about if we were to set a

106
00:07:01,000 --> 00:07:05,000
timer and then only fire if that timer had expired

107
00:07:05,000 --> 00:07:09,000
basically? So the way that I'd be doing that is a boolean

108
00:07:09,000 --> 00:07:13,000
for isReloaded, and it's going to

109
00:07:13,000 --> 00:07:17,000
be = to. Now, I'm going to introduce you to a new, more precise, world

110
00:07:17,000 --> 00:07:21,000
timer. Instead of GetWorldGetTimeSeconds, we can also use

111
00:07:21,000 --> 00:07:25,000
FPlatformTime::

112
00:07:25,000 --> 00:07:29,000
Seconds. Now that actually returns a double.

113
00:07:29,000 --> 00:07:33,000
Now let's imagine we have something called LastFireTime) a member variable, which we

114
00:07:33,000 --> 00:07:37,000
don't. Well if this subtraction is greater than the Reload

115
00:07:37,000 --> 00:07:41,000
Time in seconds, then

116
00:07:41,000 --> 00:07:45,000
that means that we are reloaded, so let's make ourselves a last

117
00:07:45,000 --> 00:07:49,000
fire time, double Last

118
00:07:49,000 --> 00:07:53,000
FireTime starts of equalling 0. So

119
00:07:53,000 --> 00:07:57,000
assuming that we fired, effectively fired, at time = 0, so this

120
00:07:57,000 --> 00:08:01,000
does mean that our first shot won't be able to happen for 3 seconds but that's fine. So we

121
00:08:01,000 --> 00:08:05,000
have this boolean isReloaded. OK, now I'm going to change the

122
00:08:05,000 --> 00:08:09,000
logic around. Instead of saying if not (!Barrel)  I'm going to say,

123
00:08:09,000 --> 00:08:13,000
if... Pull all of this into the if,

124
00:08:13,000 --> 00:08:17,000
sort out my curly braces,

125
00:08:17,000 --> 00:08:21,000
then say if (Barrel &&

126
00:08:21,000 --> 00:08:25,000
isReloaded). So if we have a Barrel

127
00:08:25,000 --> 00:08:29,000
and we're Reloaded, then spawn a projectile, fire it off,

128
00:08:29,000 --> 00:08:33,000
and then, reset this LastFireTime

129
00:08:33,000 --> 00:08:37,000
to the FPlatformTime::Seconds(), remembering that

130
00:08:37,000 --> 00:08:41,000
these things are doubles. OK, when I declare

131
00:08:41,000 --> 00:08:45,000
and actually initialize the value of LastFireTime to 0 here, it

132
00:08:45,000 --> 00:08:49,000
will be a double automatically in C#. By the way, if you don't save

133
00:08:49,000 --> 00:08:53,000
the f for float, then you get a double, but in this case, this thing

134
00:08:53,000 --> 00:08:57,000
will be a float because we've explicitly said it's going to be a float here and this 0 here

135
00:08:57,000 --> 00:09:01,000
will be interpreted as a double, not only because we've said double but because actually that's the default behavior

136
00:09:01,000 --> 00:09:05,000
in C++. Let's see if this reload timer works! Take a

137
00:09:05,000 --> 00:09:09,000
look at this code, make sure you're happy with that reload timer,

138
00:09:09,000 --> 00:09:13,000
and then, let's compile. And the idea here is, we'll have a limited

139
00:09:13,000 --> 00:09:17,000
firing speed, which will then be able to set... Later on, I'll show you how to set it

140
00:09:17,000 --> 00:09:21,000
in the Inspector, but we're not going to do that now, we're not just going to slap an Edit Anywhere

141
00:09:21,000 --> 00:09:25,000
on it, because I'm fed up with using that, I want to start showing you simple

142
00:09:25,000 --> 00:09:29,000
alternatives. So this is pretty cool! Look I can fire! Boom!

143
00:09:29,000 --> 00:09:33,000
I can't fire, can't fire, can't fire, and then, suddenly I can fire! And it's the same

144
00:09:33,000 --> 00:09:37,000
with the AI tanks, so it's becoming somewhat more of an actual game now.

145
00:09:37,000 --> 00:09:41,000
Things are happening! [laughs] OK great! So well done getting this far

146
00:09:41,000 --> 00:09:45,000
in this video, and I will see you in the next one!

147
00:09:45,000 --> 00:09:45,533




1
00:00:00,000 --> 00:00:04,000
Welcome to

2
00:00:04,000 --> 00:00:08,000
DeprojectScreenToWorld. In this video what we're going to do

3
00:00:08,000 --> 00:00:12,000
is, we're actually now going to find out, as we look around with the camera,

4
00:00:12,000 --> 00:00:16,000
what the world space direction we are looking in as a

5
00:00:16,000 --> 00:00:20,000
unit vector is. You can see that logged out to the console, so let's do it!

6
00:00:20,000 --> 00:00:20,500


7
00:00:20,500 --> 00:00:24,500
So, it's time to do this deprojection thing. We're going to work out what the

8
00:00:24,500 --> 00:00:28,500
screen position, that our crosshair is effectively pointing at, is which

9
00:00:28,500 --> 00:00:32,533
will be fun. So, the method that you need for this is on the

10
00:00:32,533 --> 00:00:36,533
APlayerController. We've got something called DeprojectScreenPositionToWorld on the APlayerController.

11
00:00:36,533 --> 00:00:40,500
So there it is and there is its signature. Now, it doesn't

12
00:00:40,500 --> 00:00:44,500
tell you what this WorldLocation is, it's actually the camera

13
00:00:44,500 --> 00:00:48,500
world location. We don't need that but we need to provide a variable so

14
00:00:48,500 --> 00:00:52,500
that it can spit the camera world location into it. So, that's what's

15
00:00:52,500 --> 00:00:56,500
going on there. ScreenX is the ScreenX position, ScreenY is the ScreenY position,

16
00:00:56,500 --> 00:01:00,500
which we've just calculated both of these here, and they're all wrapped up in this screen

17
00:01:00,500 --> 00:01:04,500
location. But of course, we can do a dot X dot Y to get those out,

18
00:01:04,500 --> 00:01:08,500
and then, the WorldDirection is the thing we're looking for. We're looking for the direction

19
00:01:08,500 --> 00:01:12,500
that we're looking in, so that we can line trace down that. So, that's what I

20
00:01:12,500 --> 00:01:16,500
want you to do actually. I want you to do the deprojection yourself.

21
00:01:16,500 --> 00:01:20,500
Lookup that method, DeprojectScreenPositionToWorld. Make sure you've got the one

22
00:01:20,500 --> 00:01:24,500
that I just showed you, that's here on the APlayerController, because there is another method that sounds similar.

23
00:01:24,500 --> 00:01:28,500
In fact, there are two others; one's in game play statics and I've forgotten where the other

24
00:01:28,500 --> 00:01:32,500
one is but this is the one you want anyway. That's the method, look up the method

25
00:01:32,500 --> 00:01:36,500
signature online, or just go back in the video a second to where I just had it and spoke about

26
00:01:36,500 --> 00:01:40,500
it. Log the WorldDirection it returns. So, use the method and

27
00:01:40,500 --> 00:01:44,500
log out the WorldDirection to see if it makes sense, and ignore WorldLocation

28
00:01:44,500 --> 00:01:48,500
it. It's actually the camera's World Location. Camera World Location may be a

29
00:01:48,500 --> 00:01:52,500
good name for the variable but we'll just discard it. So go ahead, pause the video, and see

30
00:01:52,500 --> 00:01:56,500
if you can get that working now please. I say please,

31
00:01:56,500 --> 00:02:00,500
it's please for your sake more than mine. Really all the learning happens when you do these

32
00:02:00,500 --> 00:02:04,500
challenges, so please go ahead, pause the video, and give it a crack.

33
00:02:04,500 --> 00:02:08,500


34
00:02:08,500 --> 00:02:12,500
Welcome back! OK, let's get this thing done! So we need an

35
00:02:12,500 --> 00:02:16,500
FVector, or it could be an auto, but let's just be explicit this time for fun.

36
00:02:16,500 --> 00:02:20,500
Let's go FVector CameraWorld

37
00:02:20,500 --> 00:02:24,500
Location. I said we're going to have to throw that away, so there it is.

38
00:02:24,500 --> 00:02:28,500
Now, we're going to do the actual deproject, so how do we do that?

39
00:02:28,500 --> 00:02:32,500
Well, it's DeprojectScreenPositionTo

40
00:02:32,500 --> 00:02:36,500
World(). There you go, that's the one! Now, what does it take in? Well it wants a

41
00:02:36,500 --> 00:02:40,500
ScreenX position, so that is viewport...no no it's not

42
00:02:40,500 --> 00:02:44,500
It's (ScreenLocation.X).

43
00:02:44,500 --> 00:02:48,500
Lowercase X won't work. ScreenLocation oop hello!

44
00:02:48,500 --> 00:02:52,500
Dot capital Y, so that's

45
00:02:52,500 --> 00:02:56,500
giving it that. Now, it wants a WorldLocation. That is this Camera

46
00:02:56,500 --> 00:03:00,500
WorldLocation thing that we talked about, so let's give it what it asked for, and

47
00:03:00,500 --> 00:03:04,500
then, finally it wants to give us a WorldDirection.

48
00:03:04,500 --> 00:03:08,500
So, let's just use something called WorldDirection,

49
00:03:08,500 --> 00:03:12,500
and then, let's make ourselves another FVector temporarily

50
00:03:12,500 --> 00:03:16,500
for the WorldDirection. Ultimately this is probably going to be refactored

51
00:03:16,500 --> 00:03:20,500
into another method, but so that we can see that this is working, let's just make another

52
00:03:20,500 --> 00:03:24,500
FVector. I won't put it on the same line as the one above, because we're going to remove this one, probably.

53
00:03:24,500 --> 00:03:28,500
FVector WorldDirection OK, and then that gives

54
00:03:28,500 --> 00:03:32,500
us something to pass into the Deproject position to world. Now, that's

55
00:03:32,500 --> 00:03:36,500
a boolean type that comes back from us, remember. So, we can actually say if

56
00:03:36,500 --> 00:03:40,500
DeprojectScreenPositionToWorld, i.e. if that works do something.

57
00:03:40,500 --> 00:03:44,500
What are we going to do? Well we're going to do a famous log to make sure it works. So, here

58
00:03:44,500 --> 00:03:48,500
is the log entry above, which I can just copy,

59
00:03:48,500 --> 00:03:52,500
and we're going to come in and say... Now is it

60
00:03:52,500 --> 00:03:56,500
Look direction? I think it actually is the Look direction! Yeah, so that's

61
00:03:56,500 --> 00:04:00,500
good! The reason I'm not

62
00:04:00,500 --> 00:04:04,533
returning this value yet, by the way, is because we haven't actually go the hit location yet, so I'm just

63
00:04:04,533 --> 00:04:08,566
debugging that we are looking at the value of the WorldDirection. We need to do a little bit more work.

64
00:04:08,566 --> 00:04:12,533
We need to actually do the line trace here, as per the comment, before we end up with a hit location.

65
00:04:12,533 --> 00:04:16,500
That's why I'm suppressing this logging at the top here, because

66
00:04:16,500 --> 00:04:20,500
we're still working through step by step. So, we're saying if that, and in doing so

67
00:04:20,500 --> 00:04:24,500
you're actually doing this deproject, then tell me what the direction you

68
00:04:24,500 --> 00:04:28,500
found was, otherwise don't tell me anything. So that's what we're doing, let's have a go!

69
00:04:28,500 --> 00:04:32,500
I'll leave my code on the

70
00:04:32,500 --> 00:04:36,500
screen, while it compiles. I think that's probably more helpful for you. I hope you didn't get too tripped up by the

71
00:04:36,500 --> 00:04:40,500
fact you need a capital X and a capital Y and the dot's there, or even indeed I'm just

72
00:04:40,500 --> 00:04:44,500
accessing those members in general. And I hope you didn't get too thrown off by the CameraWorldLocation

73
00:04:44,500 --> 00:04:48,500
thing. How are we doing? I think that worked!

74
00:04:48,500 --> 00:04:52,500
There you go, "Look direction"! Now, let's ask if it makes sense! So, just before I even

75
00:04:52,500 --> 00:04:56,500
start let's see what we'd expect. The tank is pointing down positive X, Z is

76
00:04:56,500 --> 00:05:00,500
above, Y is to the right. So, if we face forward

77
00:05:00,500 --> 00:05:04,500
we get an X value of 1, if we face to the right we get an X value of 0,

78
00:05:04,500 --> 00:05:08,500
and if we face behind we get an X value of -1. OK, that sounds

79
00:05:08,500 --> 00:05:12,500
feasible. Let's have a look at the Y's now, independently. Y is 0

80
00:05:12,500 --> 00:05:16,500
facing that way, it is 1 facing to the right. I said Y was to the right, that sounds good.

81
00:05:16,500 --> 00:05:20,500
0 and -1 yep and then the Z! If we look straight down, Z is

82
00:05:20,500 --> 00:05:24,500
-1ish horizontally, Z is 0ish,

83
00:05:24,500 --> 00:05:28,500
and when we look up Z is 1ish. Great! So, we have the components of

84
00:05:28,500 --> 00:05:32,500
these vectors. Look at this little guy down at the bottom of the screen, the actual axis indicator

85
00:05:32,500 --> 00:05:36,500
down here. But basically, it's telling us what proportions

86
00:05:36,500 --> 00:05:40,500
of this we have in each "Look direction". So if we're looking straight down X, we have a vector that

87
00:05:40,500 --> 00:05:44,500
is 1 0 0 for all the way down X. If we're looking

88
00:05:44,500 --> 00:05:48,500
equally in X and Y, we end up with something that is not

89
00:05:48,500 --> 00:05:52,500
1 1 0. So, the reason we're getting 0.7 something

90
00:05:52,500 --> 00:05:56,500
by 0.7 something here... Or where does it even out? Point

91
00:05:56,500 --> 00:06:00,500
707, there you go! Is because...

92
00:06:00,500 --> 00:06:04,500
If we have a look at a calculator, if we take 0.707 and we square

93
00:06:04,500 --> 00:06:08,500
it, we get 0.5. So, I'd have to draw

94
00:06:08,500 --> 00:06:12,500
you a diagram, but it's simple trigonometry that if you want the vector

95
00:06:12,500 --> 00:06:16,500
to be a total length of 1, then it needs to be 0.707

96
00:06:16,500 --> 00:06:20,500
down either side, because 0.707 squared which is 0.5

97
00:06:20,500 --> 00:06:24,500
+ 0.707 squared gives you 1, and the square

98
00:06:24,500 --> 00:06:28,500
root of 1 is 1. Remember the square on the hippopotamus is the sum of the square on the two opposite squirrels

99
00:06:28,500 --> 00:06:32,500
or whatever the thing is. So basically it's Pythagorus, that's why

100
00:06:32,500 --> 00:06:36,500
this happens. You're always getting a unit vector, is the bottom line. The vector that you get out of it

101
00:06:36,500 --> 00:06:40,500
this is always of length 1, so if you start giving it some Z component,

102
00:06:40,500 --> 00:06:44,500
the other vectors will also shorten appropriately. Alright, so that's what we're getting back!

103
00:06:44,500 --> 00:06:48,500
A unit vector in the direction that we are looking. I think I'll leave it there for

104
00:06:48,500 --> 00:06:52,500
this video. That was short and sweet and simple, but it's pretty good that we

105
00:06:52,500 --> 00:06:56,500
now actually have that direction. So, what we'll go on to do in the next video

106
00:06:56,500 --> 00:07:00,500
is... Actually I'll tell you what, just before I dive out I think I'm going to just refactor

107
00:07:00,500 --> 00:07:04,500
this out, because this method's getting a bit chunky in my opinion. So, let's just

108
00:07:04,500 --> 00:07:08,500
quickly factor out this whole DeprojectScreeToWorld position into

109
00:07:08,500 --> 00:07:12,500
a different method. I think that would be a lot neater. And I think what we're doing in

110
00:07:12,500 --> 00:07:16,500
this method is, we're getting the Look direction. So, it's going to be

111
00:07:16,500 --> 00:07:20,500
bool because we again want to know if it worked. ATankPlayer

112
00:07:20,500 --> 00:07:24,500
a controller and then GetLook

113
00:07:24,500 --> 00:07:28,500
Direction(). And then, what do we need to take in? Well we're going to need

114
00:07:28,500 --> 00:07:32,500
the screen location for this guy to work, so it's going to be an (FVector

115
00:07:32,500 --> 00:07:36,500
2D ScreenLocation) and it's

116
00:07:36,500 --> 00:07:40,500
going to be an FVector. We're going to make ourselves an out parameter, ampersand

117
00:07:40,500 --> 00:07:44,500
because we need a reference for this out parameter, World

118
00:07:44,500 --> 00:07:48,500
Direction. Or to be honest we ought to call that Look

119
00:07:48,500 --> 00:07:52,500
Direction. Let's have a name change here, to be consistent with a name of

120
00:07:52,500 --> 00:07:56,500
the method. OK, so that's what we want! Now, it's complaining because we

121
00:07:56,500 --> 00:08:00,500
haven't yet declared this method in the header file. So, let's go over to the

122
00:08:00,500 --> 00:08:04,500
header file, make a quick declaration, and in our declaration

123
00:08:04,500 --> 00:08:08,500
we probably realized that it should be const. Getting the LookDirection should not change

124
00:08:08,500 --> 00:08:12,500
any of the member variables of this class. So const,

125
00:08:12,500 --> 00:08:16,500
back to the implementation, make it const. I'm simply doing a refactor here,

126
00:08:16,500 --> 00:08:20,500
I'm doing it manually because I too often use Visual Studio tools,

127
00:08:20,500 --> 00:08:24,500
and you poor guys on Xcode don't get the same deal, so I'm going

128
00:08:24,500 --> 00:08:28,500
to do it this way. Alright, so when we actually call this method, what do we do? Well, we set

129
00:08:28,500 --> 00:08:32,500
up a camera location and a WorldDirection, so let's just take all

130
00:08:32,500 --> 00:08:36,500
this code, pop it in here. Now, we don't need WorldDirection.

131
00:08:36,500 --> 00:08:40,500
Indeed it's not WorldDirection anymore, we're calling it Look Direction. That was the name change, so I'll

132
00:08:40,500 --> 00:08:44,500
replace that. This is for discarding,

133
00:08:44,500 --> 00:08:48,500
"// To be discarded",

134
00:08:48,500 --> 00:08:52,500
but it must be passed in, so CameraWorldLocation must go in there. LookDirection

135
00:08:52,500 --> 00:08:56,500
comes in as a reference, as an out parameter. Then, we need to actually do

136
00:08:56,500 --> 00:09:00,500
the deproject, which we do, so take the if off

137
00:09:00,500 --> 00:09:04,500
like so,

138
00:09:04,500 --> 00:09:08,500
and then, I may as well just log to test.

139
00:09:08,500 --> 00:09:12,500
So very simple thin method, it just does the deproject, it gets the Look

140
00:09:12,500 --> 00:09:16,500
Direction. If you want, by the way, with these types of methods, to make life

141
00:09:16,500 --> 00:09:20,500
easier and to make it easier to read with these multi-parameter methods you can

142
00:09:20,500 --> 00:09:24,500
of course do what we've done many times before, which is just space things out into

143
00:09:24,500 --> 00:09:28,500
multiple lines. That, of course, makes everything just that much easier to read.

144
00:09:28,500 --> 00:09:32,500
OK, so that's

145
00:09:32,500 --> 00:09:36,500
done like that! So, DeprojectScreenPosition. Now, we can

146
00:09:36,500 --> 00:09:40,500
go back in and say, well instead of if and then the whole thing, we can just say if

147
00:09:40,500 --> 00:09:44,500
(GetLookDirection()) and then, of course, we pass it

148
00:09:44,500 --> 00:09:48,500
the things that we needed, which is the (ScreenLocation,

149
00:09:48,500 --> 00:09:52,500
and this LookDirection)) like

150
00:09:52,500 --> 00:09:56,500
so. So, if that succeeds then go ahead

151
00:09:56,500 --> 00:10:00,500
and just logout where we saw it. So it's a simple refactor out

152
00:10:00,500 --> 00:10:04,500
here. You could argue that's hardly worth doing, but I think it just makes it a little bit more

153
00:10:04,500 --> 00:10:08,500
what's self documenting, and it helps us practice how you've refactored these slightly trickier things

154
00:10:08,500 --> 00:10:12,500
that need out parameters. Of course, the final thing we need here is an FVector

155
00:10:12,500 --> 00:10:16,500
LookDirection because it's about to be

156
00:10:16,500 --> 00:10:20,500
used as an out parameter here. We're not yet doing anything

157
00:10:20,500 --> 00:10:24,500
with taht LookDirection, but we will do something with that LookDirection. Shortly

158
00:10:24,500 --> 00:10:28,500
we're going to use it here. I'll just make it look

159
00:10:28,500 --> 00:10:32,500
exactly the same along that LookDirection. OK, now let's see if this compiles.

160
00:10:32,500 --> 00:10:36,500
Just getting a couple of complaints, but I think they're just IntelliSense errors. If not, the compiler will

161
00:10:36,500 --> 00:10:40,500
give me a much more useful error. I'll leave the

162
00:10:40,500 --> 00:10:44,500
code on the screen so you can see the refactor that I've done.

163
00:10:44,500 --> 00:10:48,500
I can't see anything wrong but I'm sure

164
00:10:48,500 --> 00:10:52,500
there is something. OK, " 'LookDirection': undeclared identifier"

165
00:10:52,500 --> 00:10:56,500
on line 55.

166
00:10:56,500 --> 00:11:00,500
Ah hah, spelling

167
00:11:00,500 --> 00:11:04,500
error. OK let's try again!

168
00:11:04,500 --> 00:11:08,500
We always get an error on UE_LOGs, of course, as I've mentioned before

169
00:11:08,500 --> 00:11:12,500
or because Visual Studio doesn't understand these macros, so we have to

170
00:11:12,500 --> 00:11:16,500
live with that. I'm not quite sure why I've got an error down here. It's probably glaringly obvious to

171
00:11:16,500 --> 00:11:20,500
somebody out there but I can't see it, and it should be LookDirection

172
00:11:20,500 --> 00:11:24,500
not WorldDirection. That will teach me for renaming variables, but on the other hand, it is

173
00:11:24,500 --> 00:11:28,500
worth renaming things because we want to make sure that things

174
00:11:28,500 --> 00:11:32,500
stay very meaningful, so don't be shy to rename things.

175
00:11:32,500 --> 00:11:36,500


176
00:11:36,500 --> 00:11:40,500
And on line 72 I'm missing a closing brace,

177
00:11:40,500 --> 00:11:44,500
and that is just because I've got too many of them. That's what the complaint

178
00:11:44,500 --> 00:11:48,500
has been, I have too many closing braces. Finally, I think this will compile

179
00:11:48,500 --> 00:11:52,500
and hopefully work. So, you can see how long it can take to refactor things out.

180
00:11:52,500 --> 00:11:56,500
But, at the end of the day I think it makes it easier to read and it

181
00:11:56,500 --> 00:12:00,500
will make sure that our GetSiteRayHitLocation method here doesn't blow up

182
00:12:00,500 --> 00:12:04,500
too large. It's already that big before we start doing the line tracing,

183
00:12:04,500 --> 00:12:08,500
and this makes sure that it kind of stays on a screen.

184
00:12:08,500 --> 00:12:12,500
And finally, Get

185
00:12:12,500 --> 00:12:16,500
LookDirection must return a value. Of course it must and

186
00:12:16,500 --> 00:12:20,500
that's because I haven't returned here. OK, so lots of

187
00:12:20,500 --> 00:12:24,500
errors on my behalf there, but you get to see what a just

188
00:12:24,500 --> 00:12:28,500
eaten a big carbohydrate coder behaves like compared to

189
00:12:28,500 --> 00:12:32,500
the normal sharp self. So, you can excuse yourself if it takes you

190
00:12:32,500 --> 00:12:36,500
this many compiles to get something working, because occasionally it takes me that long too.

191
00:12:36,500 --> 00:12:40,500
Let's take a look and see if it looks feasible! It does, the vectors are coming out OK,

192
00:12:40,500 --> 00:12:44,500
and the code I shall leave on the screen there for you.

193
00:12:44,500 --> 00:12:48,500
And that's it, we've refactored, we've got it working, and in the next video we'll actually do the line trace.

194
00:12:48,500 --> 00:12:49,300



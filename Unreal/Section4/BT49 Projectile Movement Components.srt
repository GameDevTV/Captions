<<<<<<< HEAD:Unreal/Section4/BT49 Projectile Movement Components.srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
So let's talk about Projectile Movement

2
00:00:04.000 --> 00:00:08.000
Components. strangely enough so we can make our projectiles move. By the end of the video.

3
00:00:08.000 --> 00:00:12.000
you'll be in a situation something like this. where we can fire beachball size

4
00:00:12.000 --> 00:00:16.000
projectiles at our other tanks. which will be a lot of fun! OK. see

5
00:00:16.000 --> 00:00:20.000
you in there! Oh. boom off he goes! So

6
00:00:20.000 --> 00:00:24.000
spawning massive projectiles at the end of our barrel is fun and all of that. but it's not

7
00:00:24.000 --> 00:00:28.000
exactly making a great tank game. so let's make these projectiles move!

8
00:00:28.000 --> 00:00:32.000
I'm going to introduce you to something called a ProjectileMovementComponent.

9
00:00:32.000 --> 00:00:36.000
Now. we're going to start by using that here on the projectile blueprint. but I'll very

10
00:00:36.000 --> 00:00:40.000
quickly take it off and we'll do it in C++. because this is a C++ course mainly.

11
00:00:40.000 --> 00:00:44.000
but either way is valid. So let me just look at it with you first. Projectile Movement.

12
00:00:44.000 --> 00:00:48.000
that's the name of the component. It's got a load of stuff on it.

13
00:00:48.000 --> 00:00:52.000
In fact. it's got a bewildering amount of settings and levers that you can pull. which is one of the reasons I'm going to be

14
00:00:52.000 --> 00:00:56.000
using it from code. instead of from here. But the projectile can bounce and it

15
00:00:56.000 --> 00:01:00.000
can home in on things and it can have its movement constrained

16
00:01:00.000 --> 00:01:04.000
to certain planes. And. it can be made to rotate

17
00:01:04.000 --> 00:01:08.000
following the velocity. so imagine it was an old school bomb. then it would always kind of have its fins

18
00:01:08.000 --> 00:01:12.000
facing behind it. It's a pretty comprehensive component. this actually!

19
00:01:12.000 --> 00:01:16.000
So we could add it like this but I'm going not to. We're going to

20
00:01:16.000 --> 00:01:20.000
remove it from the blueprint. and we're going to add it in the same way. that if you remember

21
00:01:20.000 --> 00:01:24.000
on the tank blueprint we added the Aiming Component as an inherited component.

22
00:01:24.000 --> 00:01:28.000
and we did that from code like this. Let's just open VisualStudio.

23
00:01:28.000 --> 00:01:32.000
We added or created a default sub-object on

24
00:01:32.000 --> 00:01:36.000
the tank. if you remember. Let's see where that happens. It's in the Constructor

25
00:01:36.000 --> 00:01:40.000
of the tank. where we say CreateDefaultSubobject

26
00:01:40.000 --> 00:01:44.000
AimingComponent. Where is it?

27
00:01:44.000 --> 00:01:48.000
There it is! That line there. 17 in my code. on the Tank.cpp.

28
00:01:48.000 --> 00:01:52.000
And that will add that code. that component to the

29
00:01:52.000 --> 00:01:56.000
blueprint. without you having to do anything about it. because the tank is inherited from.

30
00:01:56.000 --> 00:02:00.000
The tank blueprint is inherited from the tank C++. This guy gets

31
00:02:00.000 --> 00:02:04.000
inherited. this Aiming Component. and it's in there whether you like it or not. and you can't change anything about it. you

32
00:02:04.000 --> 00:02:08.000
hide all that complexity. Well let's do the same thing with the projectile. let's add this

33
00:02:08.000 --> 00:02:12.000
projectile in code. Now just before I put you into the challenge to do

34
00:02:12.000 --> 00:02:16.000
that. just as a little bit of a hint we're going to go to the. well I'm going to go to the

35
00:02:16.000 --> 00:02:20.000
ClassViewer and I'm going to... Sorry Mac users. you can't see your classes.

36
00:02:20.000 --> 00:02:24.000
but you can look on my screen. ProjectileMovementComponent.

37
00:02:24.000 --> 00:02:28.000
the name of the class is going to be UProjectileMovementComponent. that's

38
00:02:28.000 --> 00:02:32.000
the thing we're going to be after. So let's give you this as a challenge then!

39
00:02:32.000 --> 00:02:36.000
What we want to do is. we want you to add a default sub-object.

40
00:02:36.000 --> 00:02:40.000
Add the projectile movement component in C++. When it's done.

41
00:02:40.000 --> 00:02:44.000
set the bAutoActivate property to false. immediately after you've done it

42
00:02:44.000 --> 00:02:48.000
in the constructor. and then. refer to how we did things in the tank to do this. It's basically the

43
00:02:48.000 --> 00:02:52.000
same with a different class name. So go ahead. pause the video. and see if you can make sure that we

44
00:02:52.000 --> 00:02:56.000
have a movement component on the projectile. as an inherited component

45
00:02:56.000 --> 00:03:00.000
by default.

46
00:03:00.000 --> 00:03:04.000
I know you can do it! For those of you who are beginners. then put the extra effort in.

47
00:03:04.000 --> 00:03:08.000
and for those advanced people. well done. I know it's probably simple for you.

48
00:03:08.000 --> 00:03:12.000
Okey dokey. so let's do this thing! Firstly. we need to start

49
00:03:12.000 --> 00:03:16.000
on the projectile. we need to have some sort of variable to store this. Now. this is a private variable.

50
00:03:16.000 --> 00:03:20.000
Well it's just a helper property. so in the private section I'm going to

51
00:03:20.000 --> 00:03:24.000
say a

52
00:03:24.000 --> 00:03:28.000
UProjectileMovementComponent*

53
00:03:28.000 --> 00:03:32.000


54
00:03:32.000 --> 00:03:36.000
pointer. and I'm just going to call it Projectile

55
00:03:36.000 --> 00:03:40.000
Movement; and we're going to initialize it to the null pointer.

56
00:03:40.000 --> 00:03:44.000
to give it a known value. So there you go. we have our

57
00:03:44.000 --> 00:03:48.000
variable called ProjectileMovement. Alright. now I'm going to go to the tank

58
00:03:48.000 --> 00:03:52.000
and barrow this CreateDefaultSubobject. because it's a lot to type.

59
00:03:52.000 --> 00:03:56.000
and we're going to go and do this over in the projectile's constructor. So

60
00:03:56.000 --> 00:04:00.000
I'm going to say that. looking at the tank. TankAimingComponent

61
00:04:00.000 --> 00:04:04.000
= is how we did it over there. So we're going to say Projectile

62
00:04:04.000 --> 00:04:08.000
Movement = Create

63
00:04:08.000 --> 00:04:12.000
DefaultSubobject of type. Now we had the type before. it's a UProjectileMovement

64
00:04:12.000 --> 00:04:16.000
Component. and now it's going to want a name. so we're going to call it

65
00:04:16.000 --> 00:04:20.000
(FName and then

66
00:04:20.000 --> 00:04:24.000
("Projectile Movement"));

67
00:04:24.000 --> 00:04:28.000
Simples hopefully. So that should have said it. I also said that

68
00:04:28.000 --> 00:04:32.000
once we'd got this guy. we wanted to

69
00:04:32.000 --> 00:04:36.000
set a property on it called AutoActivate. which is bAutoActivate. Now.

70
00:04:36.000 --> 00:04:40.000
it's a pointer so we're going to need to use the arrow operator. So ProjectileMovement->

71
00:04:40.000 --> 00:04:44.000
bAutoActivate = false; And what this

72
00:04:44.000 --> 00:04:48.000
means is. it doesn't start flying off until we actually fire it. so

73
00:04:48.000 --> 00:04:52.000
what we're going to do is compile up our code and make sure we understand

74
00:04:52.000 --> 00:04:56.000
what's going on. So we're adding a new default sub-object to the

75
00:04:56.000 --> 00:05:00.000
projectile blueprint and that is going to be the ProjectileMovement Component. We don't want the projectile

76
00:05:00.000 --> 00:05:04.000
to go flying off at the moment that it's constructed. we only want the projectile

77
00:05:04.000 --> 00:05:08.000
to go flying off when we fire. So

78
00:05:08.000 --> 00:05:12.000
typically that may be at the same time. you may construct it and send it flying off at the same time.

79
00:05:12.000 --> 00:05:16.000
but we want to make sure. for our testing now. that we just

80
00:05:16.000 --> 00:05:20.000
have the thing instantiate and not move. So let's just try. let's compile up this projectile

81
00:05:20.000 --> 00:05:24.000
blueprint. It failed for me. let's try again!

82
00:05:24.000 --> 00:05:28.000
Maybe because we changed the default sub-property of the projectile

83
00:05:28.000 --> 00:05:32.000
blueprint. it didn't like that happening on the fly. so let's just

84
00:05:32.000 --> 00:05:36.000
give the Editor a chance to recover.

85
00:05:36.000 --> 00:05:40.000
And actually it is there now. look Projectile Movement (Inherited). That's cool. I'll make sure it can

86
00:05:40.000 --> 00:05:44.000
compile! Let's play the game and nothing's changed.

87
00:05:44.000 --> 00:05:48.000
because all we've done is added this Projectile Movement Component. We haven't actually

88
00:05:48.000 --> 00:05:52.000
done anything with it yet. But that does mean that over here in the C++

89
00:05:52.000 --> 00:05:56.000
code. we have this ProjectileMovement thing. and we're ready to write our

90
00:05:56.000 --> 00:06:00.000
Launch method or LaunchProjectile. So let's have a method called

91
00:06:00.000 --> 00:06:04.000
void AProjectile:: class we're in

92
00:06:04.000 --> 00:06:08.000
LaunchProjectile.

93
00:06:08.000 --> 00:06:12.000
and we're going to launch it at some speed.

94
00:06:12.000 --> 00:06:16.000
Now before I do anything else. let me declare this over in the header file.

95
00:06:16.000 --> 00:06:20.000
That's a public method. in this case.

96
00:06:20.000 --> 00:06:24.000
without the class name. Perfect! And it's the tank that's

97
00:06:24.000 --> 00:06:28.000
going to launch the projectile. so why don't we just go ahead and call it from the tank straight away.

98
00:06:28.000 --> 00:06:32.000
So the tank is going to spawn a

99
00:06:32.000 --> 00:06:36.000
projectile in the correct location. and then. it's going to go ahead and launch the projectile

100
00:06:36.000 --> 00:06:40.000
but it needs to have a concept of the projectile in order to do that.

101
00:06:40.000 --> 00:06:44.000
So we actually spawn the projectile right here.

102
00:06:44.000 --> 00:06:48.000
and this spawning actor actually returns us a projectile.

103
00:06:48.000 --> 00:06:52.000
So we're going to just capture that value. auto Projectile

104
00:06:52.000 --> 00:06:56.000
= and then this actually gives

105
00:06:56.000 --> 00:07:00.000
us a projectile to work with. It's a local variable at this stage. which is absolutely fine.

106
00:07:00.000 --> 00:07:04.000
Now. we can work on that projectile. We can say Projectile->

107
00:07:04.000 --> 00:07:08.000
then we can call a method on it. which is LaunchProjectile().

108
00:07:08.000 --> 00:07:12.000
Finally. we need to pass in a speed. Well we have a speed in the header file. remember it was a LaunchSpeed

109
00:07:12.000 --> 00:07:16.000
and it was 4.000 by default. So let's pass in this LaunchSpeed

110
00:07:16.000 --> 00:07:20.000
and there we go! Now. let's try this

111
00:07:20.000 --> 00:07:24.000
and then. I'm going to briefly talk to you about the difference between EditAnywhere and EditDefaults

112
00:07:24.000 --> 00:07:28.000
Only but firstly let's try it. Let's make sure that this actually

113
00:07:28.000 --> 00:07:32.000
works. So as a recap. while it compiles.

114
00:07:32.000 --> 00:07:36.000
we're sending LaunchProjectile through to the Projectile code. which is doing nothing

115
00:07:36.000 --> 00:07:40.000
yet. but we can soon sort that out. Let me move my logs in here from

116
00:07:40.000 --> 00:07:44.000
the tank firing. This log here. let's just

117
00:07:44.000 --> 00:07:48.000
move it so there's nothing in the Tank.cpp. into the projectile

118
00:07:48.000 --> 00:07:52.000
and just say... Oops.

119
00:07:52.000 --> 00:07:56.000
I didn't quite cut that right. Let's try cutting again. pasting it in here.

120
00:07:56.000 --> 00:08:00.000
Tank fires or Projectile fires now.

121
00:08:00.000 --> 00:08:04.000
at. And then. let's put in

122
00:08:04.000 --> 00:08:08.000
the speed.

123
00:08:08.000 --> 00:08:12.000
Great! So let's just recompile. and then we're going to have

124
00:08:12.000 --> 00:08:16.000
a log inside the actual projectile's launch. projectile method. telling us the time

125
00:08:16.000 --> 00:08:20.000
that we fired and also the speed. so we should see 4.000 coming through. Unless.

126
00:08:20.000 --> 00:08:24.000
of course. in the tank blueprint. you've overridden that value here

127
00:08:24.000 --> 00:08:28.000
in the Launch Speed. then you'll get a different speed coming through. Let's take a look!

128
00:08:28.000 --> 00:08:32.000
Ah. here you go! The tank fires at 4.000! If you go to the tank blueprint and turn it to say

129
00:08:32.000 --> 00:08:36.000
3999 and compile and play.

130
00:08:36.000 --> 00:08:40.000
you can see that that value from the Inspector or the Details Panel is overriding.

131
00:08:40.000 --> 00:08:44.000
Great. so that is happening! We are nearly there. but the projectiles aren't actually

132
00:08:44.000 --> 00:08:48.000
moving. so we've just got a tiny bit of work to do to make those guys actually fire.

133
00:08:48.000 --> 00:08:52.000
Let's see what's going on in our execution path. So from the Tank.cpp

134
00:08:52.000 --> 00:08:56.000
we launch a projectile at a given (LaunchSpeed). We know that value is coming through because

135
00:08:56.000 --> 00:09:00.000
of the log that we've just done. We get to the Projectile.cpp

136
00:09:00.000 --> 00:09:04.000
and. of course. we are not yet launching. So

137
00:09:04.000 --> 00:09:08.000
the way that we do this is. we go and grab the ProjectileMovement component that we've got there.

138
00:09:08.000 --> 00:09:12.000
It's a pointer remember? The method we're looking for is SetVelocityIn

139
00:09:12.000 --> 00:09:16.000
LocalSpace. and then we can just get the ForwardVector

140
00:09:16.000 --> 00:09:20.000
of the projectile itself.

141
00:09:20.000 --> 00:09:24.000
And remember that when we spawn the projectile. in the first place. inside

142
00:09:24.000 --> 00:09:28.000
the tank C++. we did it with a rotation of the same as the

143
00:09:28.000 --> 00:09:32.000
barrel. So the projectile should be facing forward. in the same direction as the

144
00:09:32.000 --> 00:09:36.000
barrel. So this ForwardVector will be hopefully the barrel's ForwardVector. Once we've got

145
00:09:36.000 --> 00:09:40.000
that vector. it's just a unit vector. so we need to multiply it by this Speed. and that will

146
00:09:40.000 --> 00:09:44.000
give us that initial launch velocity. The second thing we're

147
00:09:44.000 --> 00:09:48.000
going to need to do is actually activate the projectile movement component.

148
00:09:48.000 --> 00:09:52.000
Oh. I'm going to copy it. No good trying to type this morning. by the looks of it.

149
00:09:52.000 --> 00:09:56.000
And then. we're going to say Activate(). which is a method.

150
00:09:56.000 --> 00:10:00.000
so that the deactivation that we did on the start here is then counted

151
00:10:00.000 --> 00:10:04.000
by the fact that we've called an Activate(). Now this is a method notice. I'm setting

152
00:10:04.000 --> 00:10:08.000
AutoActivate is false is a property. It's just so this is saying that when we

153
00:10:08.000 --> 00:10:12.000
construct it don't AutoActivate. but as soon as we launch set the

154
00:10:12.000 --> 00:10:16.000
velocity. then go ahead and activate so the thing actually fires. Let's have a go.

155
00:10:16.000 --> 00:10:20.000
see if it works! And if it does. I think that'll be enough for this video! Launching

156
00:10:20.000 --> 00:10:24.000
beachball size projectiles is a pretty good outcome for one video.

157
00:10:24.000 --> 00:10:28.000
So let's just see that it works! It compiled. let's try.

158
00:10:28.000 --> 00:10:32.000
Oh look at that cool! Beachballs are away boom!

159
00:10:32.000 --> 00:10:36.000
Awesome! Fantastic! So I am now going to leave. on the screen. the main code.

160
00:10:36.000 --> 00:10:40.000
which is that bit there. For the rest of the code. remember you can always go to GitHub.

161
00:10:40.000 --> 00:10:44.000
I'll just quickly show you this. If you go to my GitHub profile.

162
00:10:44.000 --> 00:10:48.000
or if you wish you can go directly to the Unreal Course Repository

163
00:10:48.000 --> 00:10:52.000
there. You go to BattleTank. you click on Commits. and you can see every single

164
00:10:52.000 --> 00:10:56.000
video in the course. This one's not quite there yet but imagine it was. You click on

165
00:10:56.000 --> 00:11:00.000
that and then. you'd be able to see all the code that's been added in this video. So a useful tip

166
00:11:00.000 --> 00:11:04.000
for you. I'll put this in the resources of the lecture for you. and I

167
00:11:04.000 --> 00:11:08.000
will see you soon. I'll put this in the resources of the lecture.

168
00:11:08.000 --> 00:11:10.966
So see you soon!

=======

1
00:00:00,000 --> 00:00:04,000
So let's talk about Projectile Movement

2
00:00:04,000 --> 00:00:08,000
Components, strangely enough so we can make our projectiles move. By the end of the video,

3
00:00:08,000 --> 00:00:12,000
you'll be in a situation something like this, where we can fire beachball size

4
00:00:12,000 --> 00:00:16,000
projectiles at our other tanks, which will be a lot of fun! OK, see

5
00:00:16,000 --> 00:00:20,000
you in there! Oh, boom off he goes! So

6
00:00:20,000 --> 00:00:24,000
spawning massive projectiles at the end of our barrel is fun and all of that, but it's not

7
00:00:24,000 --> 00:00:28,000
exactly making a great tank game, so let's make these projectiles move!

8
00:00:28,000 --> 00:00:32,000
I'm going to introduce you to something called a ProjectileMovementComponent.

9
00:00:32,000 --> 00:00:36,000
Now, we're going to start by using that here on the projectile blueprint, but I'll very

10
00:00:36,000 --> 00:00:40,000
quickly take it off and we'll do it in C++, because this is a C++ course mainly,

11
00:00:40,000 --> 00:00:44,000
but either way is valid. So let me just look at it with you first. Projectile Movement,

12
00:00:44,000 --> 00:00:48,000
that's the name of the component. It's got a load of stuff on it.

13
00:00:48,000 --> 00:00:52,000
In fact, it's got a bewildering amount of settings and levers that you can pull, which is one of the reasons I'm going to be

14
00:00:52,000 --> 00:00:56,000
using it from code, instead of from here. But the projectile can bounce and it

15
00:00:56,000 --> 00:01:00,000
can home in on things and it can have its movement constrained

16
00:01:00,000 --> 00:01:04,000
to certain planes. And, it can be made to rotate

17
00:01:04,000 --> 00:01:08,000
following the velocity, so imagine it was an old school bomb, then it would always kind of have its fins

18
00:01:08,000 --> 00:01:12,000
facing behind it. It's a pretty comprehensive component, this actually!

19
00:01:12,000 --> 00:01:16,000
So we could add it like this but I'm going not to. We're going to

20
00:01:16,000 --> 00:01:20,000
remove it from the blueprint, and we're going to add it in the same way, that if you remember

21
00:01:20,000 --> 00:01:24,000
on the tank blueprint we added the Aiming Component as an inherited component,

22
00:01:24,000 --> 00:01:28,000
and we did that from code like this. Let's just open VisualStudio.

23
00:01:28,000 --> 00:01:32,000
We added or created a default sub-object on

24
00:01:32,000 --> 00:01:36,000
the tank, if you remember. Let's see where that happens. It's in the Constructor

25
00:01:36,000 --> 00:01:40,000
of the tank, where we say CreateDefaultSubobject

26
00:01:40,000 --> 00:01:44,000
AimingComponent. Where is it?

27
00:01:44,000 --> 00:01:48,000
There it is! That line there, 17 in my code, on the Tank.cpp.

28
00:01:48,000 --> 00:01:52,000
And that will add that code, that component to the

29
00:01:52,000 --> 00:01:56,000
blueprint, without you having to do anything about it, because the tank is inherited from.

30
00:01:56,000 --> 00:02:00,000
The tank blueprint is inherited from the tank C++. This guy gets

31
00:02:00,000 --> 00:02:04,000
inherited, this Aiming Component, and it's in there whether you like it or not, and you can't change anything about it, you

32
00:02:04,000 --> 00:02:08,000
hide all that complexity. Well let's do the same thing with the projectile, let's add this

33
00:02:08,000 --> 00:02:12,000
projectile in code. Now just before I put you into the challenge to do

34
00:02:12,000 --> 00:02:16,000
that, just as a little bit of a hint we're going to go to the, well I'm going to go to the

35
00:02:16,000 --> 00:02:20,000
ClassViewer and I'm going to... Sorry Mac users, you can't see your classes,

36
00:02:20,000 --> 00:02:24,000
but you can look on my screen. ProjectileMovementComponent,

37
00:02:24,000 --> 00:02:28,000
the name of the class is going to be UProjectileMovementComponent, that's

38
00:02:28,000 --> 00:02:32,000
the thing we're going to be after. So let's give you this as a challenge then!

39
00:02:32,000 --> 00:02:36,000
What we want to do is, we want you to add a default sub-object.

40
00:02:36,000 --> 00:02:40,000
Add the projectile movement component in C++. When it's done,

41
00:02:40,000 --> 00:02:44,000
set the bAutoActivate property to false, immediately after you've done it

42
00:02:44,000 --> 00:02:48,000
in the constructor, and then, refer to how we did things in the tank to do this. It's basically the

43
00:02:48,000 --> 00:02:52,000
same with a different class name. So go ahead, pause the video, and see if you can make sure that we

44
00:02:52,000 --> 00:02:56,000
have a movement component on the projectile, as an inherited component

45
00:02:56,000 --> 00:03:00,000
by default.

46
00:03:00,000 --> 00:03:04,000
I know you can do it! For those of you who are beginners, then put the extra effort in,

47
00:03:04,000 --> 00:03:08,000
and for those advanced people, well done, I know it's probably simple for you.

48
00:03:08,000 --> 00:03:12,000
Okey dokey, so let's do this thing! Firstly, we need to start

49
00:03:12,000 --> 00:03:16,000
on the projectile, we need to have some sort of variable to store this. Now, this is a private variable.

50
00:03:16,000 --> 00:03:20,000
Well it's just a helper property, so in the private section I'm going to

51
00:03:20,000 --> 00:03:24,000
say a

52
00:03:24,000 --> 00:03:28,000
UProjectileMovementComponent*

53
00:03:28,000 --> 00:03:32,000


54
00:03:32,000 --> 00:03:36,000
pointer, and I'm just going to call it Projectile

55
00:03:36,000 --> 00:03:40,000
Movement; and we're going to initialize it to the null pointer,

56
00:03:40,000 --> 00:03:44,000
to give it a known value. So there you go, we have our

57
00:03:44,000 --> 00:03:48,000
variable called ProjectileMovement. Alright, now I'm going to go to the tank

58
00:03:48,000 --> 00:03:52,000
and barrow this CreateDefaultSubobject, because it's a lot to type,

59
00:03:52,000 --> 00:03:56,000
and we're going to go and do this over in the projectile's constructor. So

60
00:03:56,000 --> 00:04:00,000
I'm going to say that, looking at the tank, TankAimingComponent

61
00:04:00,000 --> 00:04:04,000
= is how we did it over there. So we're going to say Projectile

62
00:04:04,000 --> 00:04:08,000
Movement = Create

63
00:04:08,000 --> 00:04:12,000
DefaultSubobject of type. Now we had the type before, it's a UProjectileMovement

64
00:04:12,000 --> 00:04:16,000
Component, and now it's going to want a name, so we're going to call it

65
00:04:16,000 --> 00:04:20,000
(FName and then

66
00:04:20,000 --> 00:04:24,000
("Projectile Movement"));

67
00:04:24,000 --> 00:04:28,000
Simples hopefully. So that should have said it. I also said that

68
00:04:28,000 --> 00:04:32,000
once we'd got this guy, we wanted to

69
00:04:32,000 --> 00:04:36,000
set a property on it called AutoActivate, which is bAutoActivate. Now,

70
00:04:36,000 --> 00:04:40,000
it's a pointer so we're going to need to use the arrow operator. So ProjectileMovement->

71
00:04:40,000 --> 00:04:44,000
bAutoActivate = false; And what this

72
00:04:44,000 --> 00:04:48,000
means is, it doesn't start flying off until we actually fire it, so

73
00:04:48,000 --> 00:04:52,000
what we're going to do is compile up our code and make sure we understand

74
00:04:52,000 --> 00:04:56,000
what's going on. So we're adding a new default sub-object to the

75
00:04:56,000 --> 00:05:00,000
projectile blueprint and that is going to be the ProjectileMovement Component. We don't want the projectile

76
00:05:00,000 --> 00:05:04,000
to go flying off at the moment that it's constructed, we only want the projectile

77
00:05:04,000 --> 00:05:08,000
to go flying off when we fire. So

78
00:05:08,000 --> 00:05:12,000
typically that may be at the same time, you may construct it and send it flying off at the same time,

79
00:05:12,000 --> 00:05:16,000
but we want to make sure, for our testing now, that we just

80
00:05:16,000 --> 00:05:20,000
have the thing instantiate and not move. So let's just try, let's compile up this projectile

81
00:05:20,000 --> 00:05:24,000
blueprint. It failed for me, let's try again!

82
00:05:24,000 --> 00:05:28,000
Maybe because we changed the default sub-property of the projectile

83
00:05:28,000 --> 00:05:32,000
blueprint, it didn't like that happening on the fly, so let's just

84
00:05:32,000 --> 00:05:36,000
give the Editor a chance to recover.

85
00:05:36,000 --> 00:05:40,000
And actually it is there now, look Projectile Movement (Inherited). That's cool, I'll make sure it can

86
00:05:40,000 --> 00:05:44,000
compile! Let's play the game and nothing's changed,

87
00:05:44,000 --> 00:05:48,000
because all we've done is added this Projectile Movement Component. We haven't actually

88
00:05:48,000 --> 00:05:52,000
done anything with it yet. But that does mean that over here in the C++

89
00:05:52,000 --> 00:05:56,000
code, we have this ProjectileMovement thing, and we're ready to write our

90
00:05:56,000 --> 00:06:00,000
Launch method or LaunchProjectile. So let's have a method called

91
00:06:00,000 --> 00:06:04,000
void AProjectile:: class we're in

92
00:06:04,000 --> 00:06:08,000
LaunchProjectile,

93
00:06:08,000 --> 00:06:12,000
and we're going to launch it at some speed.

94
00:06:12,000 --> 00:06:16,000
Now before I do anything else, let me declare this over in the header file.

95
00:06:16,000 --> 00:06:20,000
That's a public method, in this case,

96
00:06:20,000 --> 00:06:24,000
without the class name. Perfect! And it's the tank that's

97
00:06:24,000 --> 00:06:28,000
going to launch the projectile, so why don't we just go ahead and call it from the tank straight away.

98
00:06:28,000 --> 00:06:32,000
So the tank is going to spawn a

99
00:06:32,000 --> 00:06:36,000
projectile in the correct location, and then, it's going to go ahead and launch the projectile

100
00:06:36,000 --> 00:06:40,000
but it needs to have a concept of the projectile in order to do that.

101
00:06:40,000 --> 00:06:44,000
So we actually spawn the projectile right here,

102
00:06:44,000 --> 00:06:48,000
and this spawning actor actually returns us a projectile.

103
00:06:48,000 --> 00:06:52,000
So we're going to just capture that value, auto Projectile

104
00:06:52,000 --> 00:06:56,000
= and then this actually gives

105
00:06:56,000 --> 00:07:00,000
us a projectile to work with. It's a local variable at this stage, which is absolutely fine.

106
00:07:00,000 --> 00:07:04,000
Now, we can work on that projectile. We can say Projectile->

107
00:07:04,000 --> 00:07:08,000
then we can call a method on it, which is LaunchProjectile().

108
00:07:08,000 --> 00:07:12,000
Finally, we need to pass in a speed. Well we have a speed in the header file, remember it was a LaunchSpeed

109
00:07:12,000 --> 00:07:16,000
and it was 4,000 by default. So let's pass in this LaunchSpeed

110
00:07:16,000 --> 00:07:20,000
and there we go! Now, let's try this

111
00:07:20,000 --> 00:07:24,000
and then, I'm going to briefly talk to you about the difference between EditAnywhere and EditDefaults

112
00:07:24,000 --> 00:07:28,000
Only but firstly let's try it. Let's make sure that this actually

113
00:07:28,000 --> 00:07:32,000
works. So as a recap, while it compiles,

114
00:07:32,000 --> 00:07:36,000
we're sending LaunchProjectile through to the Projectile code, which is doing nothing

115
00:07:36,000 --> 00:07:40,000
yet, but we can soon sort that out. Let me move my logs in here from

116
00:07:40,000 --> 00:07:44,000
the tank firing. This log here, let's just

117
00:07:44,000 --> 00:07:48,000
move it so there's nothing in the Tank.cpp, into the projectile

118
00:07:48,000 --> 00:07:52,000
and just say... Oops,

119
00:07:52,000 --> 00:07:56,000
I didn't quite cut that right. Let's try cutting again, pasting it in here.

120
00:07:56,000 --> 00:08:00,000
Tank fires or Projectile fires now,

121
00:08:00,000 --> 00:08:04,000
at. And then, let's put in

122
00:08:04,000 --> 00:08:08,000
the speed.

123
00:08:08,000 --> 00:08:12,000
Great! So let's just recompile, and then we're going to have

124
00:08:12,000 --> 00:08:16,000
a log inside the actual projectile's launch, projectile method, telling us the time

125
00:08:16,000 --> 00:08:20,000
that we fired and also the speed, so we should see 4,000 coming through. Unless,

126
00:08:20,000 --> 00:08:24,000
of course, in the tank blueprint, you've overridden that value here

127
00:08:24,000 --> 00:08:28,000
in the Launch Speed, then you'll get a different speed coming through. Let's take a look!

128
00:08:28,000 --> 00:08:32,000
Ah, here you go! The tank fires at 4,000! If you go to the tank blueprint and turn it to say

129
00:08:32,000 --> 00:08:36,000
3999 and compile and play,

130
00:08:36,000 --> 00:08:40,000
you can see that that value from the Inspector or the Details Panel is overriding.

131
00:08:40,000 --> 00:08:44,000
Great, so that is happening! We are nearly there, but the projectiles aren't actually

132
00:08:44,000 --> 00:08:48,000
moving, so we've just got a tiny bit of work to do to make those guys actually fire.

133
00:08:48,000 --> 00:08:52,000
Let's see what's going on in our execution path. So from the Tank.cpp

134
00:08:52,000 --> 00:08:56,000
we launch a projectile at a given (LaunchSpeed). We know that value is coming through because

135
00:08:56,000 --> 00:09:00,000
of the log that we've just done. We get to the Projectile.cpp

136
00:09:00,000 --> 00:09:04,000
and, of course, we are not yet launching. So

137
00:09:04,000 --> 00:09:08,000
the way that we do this is, we go and grab the ProjectileMovement component that we've got there.

138
00:09:08,000 --> 00:09:12,000
It's a pointer remember? The method we're looking for is SetVelocityIn

139
00:09:12,000 --> 00:09:16,000
LocalSpace, and then we can just get the ForwardVector

140
00:09:16,000 --> 00:09:20,000
of the projectile itself.

141
00:09:20,000 --> 00:09:24,000
And remember that when we spawn the projectile, in the first place, inside

142
00:09:24,000 --> 00:09:28,000
the tank C++, we did it with a rotation of the same as the

143
00:09:28,000 --> 00:09:32,000
barrel. So the projectile should be facing forward, in the same direction as the

144
00:09:32,000 --> 00:09:36,000
barrel. So this ForwardVector will be hopefully the barrel's ForwardVector. Once we've got

145
00:09:36,000 --> 00:09:40,000
that vector, it's just a unit vector, so we need to multiply it by this Speed, and that will

146
00:09:40,000 --> 00:09:44,000
give us that initial launch velocity. The second thing we're

147
00:09:44,000 --> 00:09:48,000
going to need to do is actually activate the projectile movement component.

148
00:09:48,000 --> 00:09:52,000
Oh, I'm going to copy it. No good trying to type this morning, by the looks of it.

149
00:09:52,000 --> 00:09:56,000
And then, we're going to say Activate(), which is a method,

150
00:09:56,000 --> 00:10:00,000
so that the deactivation that we did on the start here is then counted

151
00:10:00,000 --> 00:10:04,000
by the fact that we've called an Activate(). Now this is a method notice. I'm setting

152
00:10:04,000 --> 00:10:08,000
AutoActivate is false is a property. It's just so this is saying that when we

153
00:10:08,000 --> 00:10:12,000
construct it don't AutoActivate, but as soon as we launch set the

154
00:10:12,000 --> 00:10:16,000
velocity, then go ahead and activate so the thing actually fires. Let's have a go,

155
00:10:16,000 --> 00:10:20,000
see if it works! And if it does, I think that'll be enough for this video! Launching

156
00:10:20,000 --> 00:10:24,000
beachball size projectiles is a pretty good outcome for one video.

157
00:10:24,000 --> 00:10:28,000
So let's just see that it works! It compiled, let's try.

158
00:10:28,000 --> 00:10:32,000
Oh look at that cool! Beachballs are away boom!

159
00:10:32,000 --> 00:10:36,000
Awesome! Fantastic! So I am now going to leave, on the screen, the main code,

160
00:10:36,000 --> 00:10:40,000
which is that bit there. For the rest of the code, remember you can always go to GitHub.

161
00:10:40,000 --> 00:10:44,000
I'll just quickly show you this. If you go to my GitHub profile,

162
00:10:44,000 --> 00:10:48,000
or if you wish you can go directly to the Unreal Course Repository

163
00:10:48,000 --> 00:10:52,000
there. You go to BattleTank, you click on Commits, and you can see every single

164
00:10:52,000 --> 00:10:56,000
video in the course. This one's not quite there yet but imagine it was. You click on

165
00:10:56,000 --> 00:11:00,000
that and then, you'd be able to see all the code that's been added in this video. So a useful tip

166
00:11:00,000 --> 00:11:04,000
for you. I'll put this in the resources of the lecture for you, and I

167
00:11:04,000 --> 00:11:08,000
will see you soon. I'll put this in the resources of the lecture.

168
00:11:08,000 --> 00:11:10,966
So see you soon!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT49 Projectile Movement Components.srt

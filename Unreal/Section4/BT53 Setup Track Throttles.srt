
1
00:00:00,000 --> 00:00:04,000
So welcome to Setup Track

2
00:00:04,000 --> 00:00:08,000
Throttles! In this video we will do exactly that, and by the end of it,

3
00:00:08,000 --> 00:00:12,000
what we will have is something like this, where ignore

4
00:00:12,000 --> 00:00:16,000
what's going on, on the screen, on the 3D Viewport, just look at the console. I have now got left and

5
00:00:16,000 --> 00:00:20,000
right track throttle values, coming through from my gamepad, which is pretty

6
00:00:20,000 --> 00:00:25,033
cool and there are several changes that have been made to make that happen. So let's go and have a look!

7
00:00:25,033 --> 00:00:29,033
And we don't currently have a track class. We do have a barrel and a turret class,

8
00:00:29,033 --> 00:00:33,033
both of which were inheriting from StaticMeshComponent,

9
00:00:33,033 --> 00:00:37,033
but when it comes to the actual tracks, they are just raw Static Mesh Components

10
00:00:37,033 --> 00:00:41,033
with no ability for us to write any C++ code.

11
00:00:41,033 --> 00:00:45,033
So that's the first thing I'm going to want you to do is, base tracks on C++

12
00:00:45,033 --> 00:00:49,033
classes. create a TankTrack class. Inherit from

13
00:00:49,033 --> 00:00:53,033
UStaticMeshComponent, make it BlueprintSpawnable very much

14
00:00:53,033 --> 00:00:57,033
like the barrel and the turret. In fact, this whole thing is very much like the barrel and turret.

15
00:00:57,033 --> 00:01:01,033
Replace the tracks on the tank blueprint and put the meshes back,

16
00:01:01,033 --> 00:01:05,033
and then, just test that the game still works. Nothing will change but you will,

17
00:01:05,033 --> 00:01:09,033
very importantly, have a C++ class in which you can write behavior about

18
00:01:09,033 --> 00:01:13,033
tracks. So pause the video and base your tracks on a C++ class

19
00:01:13,033 --> 00:01:17,033
now. Go on, you can do it!

20
00:01:17,033 --> 00:01:21,033
It's just like the barrel and the turret.

21
00:01:21,033 --> 00:01:25,033
OK welcome back! Let's have a little look at this! So

22
00:01:25,033 --> 00:01:29,033
we're going to make ourselves a new C++ class, it's going to be a UStatic

23
00:01:29,033 --> 00:01:33,033
MeshComponent, so we're going to have to Show All Classes.

24
00:01:33,033 --> 00:01:37,033
We're going to type static mesh component and there it is!

25
00:01:37,033 --> 00:01:41,033
We're going to call it TankTrack. Perfect!

26
00:01:41,033 --> 00:01:45,033
Create Class leaving this Public checkbox

27
00:01:45,033 --> 00:01:49,033
set. Remember that that just makes header files go in a public folder, and C++

28
00:01:49,033 --> 00:01:53,033
files to in a Private folder. We're going to keep it like that for now, just for simplicity

29
00:01:53,033 --> 00:01:57,033
and for consistency with other Unreal tutorials, particularly the ones made by

30
00:01:57,033 --> 00:02:01,033
Unreal themselves. So while that's compiling,

31
00:02:01,033 --> 00:02:05,033
why don't I go take a look... Oh I can't! I'll just be patient in that case. What I will

32
00:02:05,033 --> 00:02:09,033
do, actually, is go take a look at the turret! This is the meta =

33
00:02:09,033 --> 00:02:13,033
(BlueprintSpawnableComponent) annotation that I need, so I'm going to grab

34
00:02:13,033 --> 00:02:17,033
this (BlueprintSpawnableComponent), I'm going to get rid of

35
00:02:17,033 --> 00:02:21,033
the hidecategories comment, because we're not going to hide the collision category. So I'll

36
00:02:21,033 --> 00:02:25,033
get rid of that, it's extra commenting we don't need. I'm going to go to the TankTrack

37
00:02:25,033 --> 00:02:29,033
header file, put in the meta = (BlueprintSpawnableComponent).

38
00:02:29,033 --> 00:02:33,033
Now remember what that means. That means that in the tank blueprint, at the moment, if I do

39
00:02:33,033 --> 00:02:37,033
the dropdown and go to Custom classes I have a barrel in the

40
00:02:37,033 --> 00:02:41,033
turret but no track. If I compile my code with this

41
00:02:41,033 --> 00:02:45,033
header tool directive in this (BlueprintSpawnableComponent),

42
00:02:45,033 --> 00:02:49,033
then... Well let's do it! ...then, it will appear in that list!

43
00:02:49,033 --> 00:02:53,033
While it's compiling I want to do another thing. Look if we look in here at Left Track,

44
00:02:53,033 --> 00:02:57,033
you see it says (Static Mesh Component), then it gives us a load of gray text which tells us

45
00:02:57,033 --> 00:03:01,033
about what a Static Mesh Component is. But right now, if I come in

46
00:03:01,033 --> 00:03:05,033
and add myself a Tank Track, which is now available,

47
00:03:05,033 --> 00:03:09,033
and then say Left Track. Well I'll do the Left Track in a minute. Look if I

48
00:03:09,033 --> 00:03:13,033
hover over it's got no information. OK, so let's give it some information, that information goes

49
00:03:13,033 --> 00:03:17,033
here in that comment block. So let's just look

50
00:03:17,033 --> 00:03:21,033
at the static mesh for inspiration, "StaticMeshComponent

51
00:03:21,033 --> 00:03:25,033
is used to create an instance of a UStaticMesh." OK, so "TankTrack

52
00:03:25,033 --> 00:03:29,033
is used to set maximum driving

53
00:03:29,033 --> 00:03:33,033
force, and to move

54
00:03:33,033 --> 00:03:37,033
the tank" or "to apply forces

55
00:03:37,033 --> 00:03:41,033
to the tank." OK, so

56
00:03:41,033 --> 00:03:45,033
that comment there, when you compile, will come through to this

57
00:03:45,033 --> 00:03:49,033
hover over menu there, where it says TankTrack brackets TankTrack, we'll then usefully

58
00:03:49,033 --> 00:03:53,033
get a little bit more information about it. So do get in the habit, in your C++, of decorating

59
00:03:53,033 --> 00:03:57,033
new classes with some information like that, so that when you

60
00:03:57,033 --> 00:04:01,033
hover you get that. Cool! So what is it about the Left Track that we need to replace? It's

61
00:04:01,033 --> 00:04:05,033
just the Static Mesh. So this new tank track here

62
00:04:05,033 --> 00:04:09,033
is going to replace it with the TankTrack Static Mesh.

63
00:04:09,033 --> 00:04:13,033
I'm going to delete that Left Track now. I've still got the

64
00:04:13,033 --> 00:04:17,033
Right Track, if we wonder about any properties. Call it Left Track,

65
00:04:17,033 --> 00:04:21,033
parent the socket to Left Track,

66
00:04:21,033 --> 00:04:25,033
check the Viewport that the tank still looks feasible, compile up the

67
00:04:25,033 --> 00:04:29,033
blueprint, and let's play the game. The Left

68
00:04:29,033 --> 00:04:33,033
Track looks very much like the Right Track, but the difference is, if you hover over the Left Track, it's based

69
00:04:33,033 --> 00:04:37,033
on our C++ class, whereas the Right Track is a plain old (Static Mesh Component).

70
00:04:37,033 --> 00:04:41,033
Great! Let's now just run this from the main

71
00:04:41,033 --> 00:04:45,033
menu, because we have had problems with that before.

72
00:04:45,033 --> 00:04:49,033
Yeah, it's all working fine! Great! So I'm now just going to do the

73
00:04:49,033 --> 00:04:53,033
same for the Right Track. In fact, I'm just going to delete the Right Track, duplicate the

74
00:04:53,033 --> 00:04:57,033
Left Track, call it Right Track, change

75
00:04:57,033 --> 00:05:01,033
the socket, and Compile

76
00:05:01,033 --> 00:05:05,033
and save. Actually the blueprint, now let's play the game from the menu,

77
00:05:05,033 --> 00:05:09,033
and it works absolutely fine! Great! So that's a good starting

78
00:05:09,033 --> 00:05:13,033
point! In under five minutes we have ourselves a pair of tracks that

79
00:05:13,033 --> 00:05:17,033
give us C++ code that we can access. Cool! So what we want to do now

80
00:05:17,033 --> 00:05:21,033
is drive the tank with that, so we're going to need to give

81
00:05:21,033 --> 00:05:25,033
ourselves an input, for a start. So under the Project Settings

82
00:05:25,033 --> 00:05:29,033
go to Input, and ax, create yourself a new Axis Mapping. I'm going to call it

83
00:05:29,033 --> 00:05:33,033
Left Track Throttle. Now this is the sort of thing the

84
00:05:33,033 --> 00:05:37,033
player would actually see, when they are setting up the controls

85
00:05:37,033 --> 00:05:41,033
themselves. I'm going to use the Left

86
00:05:41,033 --> 00:05:45,033
Trigger. There you go, Gamepad Left Trigger,

87
00:05:45,033 --> 00:05:49,033
and then, I'm going to make a Right Track Throttle

88
00:05:49,033 --> 00:05:53,033
and I'm going to make it the Gamepad Right Trigger.

89
00:05:53,033 --> 00:05:57,033
Gamepad

90
00:05:57,033 --> 00:06:01,033
Right Trigger Axis. Now you want Gamepad Left Trigger Axis as well.

91
00:06:01,033 --> 00:06:05,033
Not Trigger but Trigger Axis OK, because we want it to be analog, you want a

92
00:06:05,033 --> 00:06:09,033
variable amount of throttle. So they are the action mappings that I've setup.

93
00:06:09,033 --> 00:06:13,033
Fantastic! I'll leave this open, just in case I need it! Then, what we want to be able to do in

94
00:06:13,033 --> 00:06:17,033
the Input Setup of the tank is, outside of this block which is no longer, by the way,

95
00:06:17,033 --> 00:06:21,033
just Camera Input Binding, it's more generally because it's got Fire

96
00:06:21,033 --> 00:06:25,033
information here. It's Aiming Input Binding, isn't it? So this block on the right

97
00:06:25,033 --> 00:06:29,033
here is about Aim Input Binding. So immediately you see that if a

98
00:06:29,033 --> 00:06:33,033
comment's not right, just change it. And what we want to be able to do over

99
00:06:33,033 --> 00:06:37,033
on the left here is, we want to be able to go OK let's go find

100
00:06:37,033 --> 00:06:41,033
this throttle thing, which is the Left Track Throttle event

101
00:06:41,033 --> 00:06:45,033
coming in. I'm also going to want the Right Track throttle. They are the input bindings

102
00:06:45,033 --> 00:06:49,033
we just setup, and we're going to want a blueprint callable

103
00:06:49,033 --> 00:06:53,033
method that does something with that. This axis is going to spit out a value

104
00:06:53,033 --> 00:06:57,033
between -1 and +1. Well, it could be bigger than that, if the scaling

105
00:06:57,033 --> 00:07:01,033
is changed here, but by default, it'd be between -1 and +1. A mental

106
00:07:01,033 --> 00:07:05,033
note for later, we may want to do some clamping inside of our actual

107
00:07:05,033 --> 00:07:09,033
throttle code, to make sure that a user can't change their scale and make

108
00:07:09,033 --> 00:07:13,033
the tank actually go any faster. This just wants to change how controls feel, not how the tank behaves.

109
00:07:13,033 --> 00:07:17,033
But anyway, we want to be able to drag out of here, run a

110
00:07:17,033 --> 00:07:21,033
blueprint callable event, and then, pass in the Axis Value.

111
00:07:21,033 --> 00:07:25,033
So in order to do that, we're going to need to make ourselves a public

112
00:07:25,033 --> 00:07:29,033
section of the track.

113
00:07:29,033 --> 00:07:33,033
Then, we're going to need something like void SetThrottle or Throttle

114
00:07:33,033 --> 00:07:37,033
Request. What shall we go with? ThrottleRequest... No, SetThrottle! You can set

115
00:07:37,033 --> 00:07:41,033
it to throttle directly! SetThrottle(float Throttle).

116
00:07:41,033 --> 00:07:45,033
OK, so that's great, but that's not going to be

117
00:07:45,033 --> 00:07:49,033
blueprint callable, unless we say that it's a UFUNCTION.

118
00:07:49,033 --> 00:07:53,033
(BlueprintCallable, and

119
00:07:53,033 --> 00:07:57,033
Category = Input) for neatness.

120
00:07:57,033 --> 00:08:01,033
OK, so we have a BlueprintCallable function there. So before I go

121
00:08:01,033 --> 00:08:05,033
and try and compile this, let's implement this function!

122
00:08:05,033 --> 00:08:09,033
UTank

123
00:08:09,033 --> 00:08:13,033
Track::SetThrottle like so. And I think the first thing we should do is just

124
00:08:13,033 --> 00:08:17,033
log out the value. It's always a good thing to do, so let's search for UELOG

125
00:08:17,033 --> 00:08:21,033
in the current project. Go get this log that we previously had in the Launch

126
00:08:21,033 --> 00:08:25,033
Projectile. We don't need it anymore, let's cut it so that we've only got a log in one place.

127
00:08:25,033 --> 00:08:29,033
In the TankTrack let's paste it and we could

128
00:08:29,033 --> 00:08:33,033
say... Instead of the the time, in fact,

129
00:08:33,033 --> 00:08:37,033
I think I'm going to not use the Time for now, I'll keep it for the next thing, but I think I'm going to say

130
00:08:37,033 --> 00:08:41,033
auto Name = GetName();

131
00:08:41,033 --> 00:08:45,033
see what that comes out as.

132
00:08:45,033 --> 00:08:49,033
And as a string, I'm just going to say this track's throttle

133
00:08:49,033 --> 00:08:53,033
...

134
00:08:53,033 --> 00:08:57,033
colon and then we're going to print out the throttle.

135
00:08:57,033 --> 00:09:01,033
That should work! I think this

136
00:09:01,033 --> 00:09:05,033
also Name = GetName should work, it should come out as an fstring with a star on it.

137
00:09:05,033 --> 00:09:09,033
I think that might work, let's try it! It's going to be quicker than waiting for

138
00:09:09,033 --> 00:09:13,033
UnrealTo, Oh sorry, VisualStudio to

139
00:09:13,033 --> 00:09:17,033
auto-complete. Let's see if that's going to work! So the idea is, I'm going to

140
00:09:17,033 --> 00:09:21,033
say Left Track throttle set to and then it's going to show me... And well it won't

141
00:09:21,033 --> 00:09:25,033
until I actually wire it up, but we can wire it up in the blueprint in just a second,

142
00:09:25,033 --> 00:09:29,033
as soon as the compilation has happened. Yeah cool! So now the compilation happened, we should

143
00:09:29,033 --> 00:09:33,033
be able to look for something called throttle. Set Left Track Throttle function. There's

144
00:09:33,033 --> 00:09:37,033
your blueprint callable function! Again, if you want sensible

145
00:09:37,033 --> 00:09:41,033
comments on there, you can put comments in the top of the

146
00:09:41,033 --> 00:09:45,033
just above the method here, this SetThrottle. You could

147
00:09:45,033 --> 00:09:49,033
do it in the header file, for example, and you can come in here and just say

148
00:09:49,033 --> 00:09:53,033
"// Sets a throttle between -1

149
00:09:53,033 --> 00:09:57,033
and +1, and if we were to compile that up,

150
00:09:57,033 --> 00:10:01,033
then next time we go for SetThrottle, we should get something a bit more helpful. But

151
00:10:01,033 --> 00:10:05,033
while it's compiling, let's wire in the Axis Value to the Throttle input, the float.

152
00:10:05,033 --> 00:10:09,033
I'll put the Left Track in the middle there, it's a bit ugly but it's better than things crossing over.

153
00:10:09,033 --> 00:10:13,033
Let's look for throttle again. Set Throttle

154
00:10:13,033 --> 00:10:17,033
on the (Right Track). You see "Sets a throttle between -1 and +1".

155
00:10:17,033 --> 00:10:21,033
That's helpful and that happened, as I say, because I put a

156
00:10:21,033 --> 00:10:25,033
comment here above the function. OK, so there is

157
00:10:25,033 --> 00:10:29,033
the Right Track. Let's just pull the value

158
00:10:29,033 --> 00:10:33,033
through, Compile this blueprint, and go

159
00:10:33,033 --> 00:10:37,033
have a look. If it compiles, save it in case it crashes. Compile,

160
00:10:37,033 --> 00:10:41,033
play, in we go! Now, I'm using my gamepad, I'm turning

161
00:10:41,033 --> 00:10:45,033
on the gamepad on my computer. It's an Xbox One gamepad, in this case.

162
00:10:45,033 --> 00:10:49,033
We have 0 reports of throttle! Forget what's going on in the main game screen, let's focus

163
00:10:49,033 --> 00:10:53,033
entirely on this output log at the bottom-left. Look at that, I'm pulling my left track throttle between

164
00:10:53,033 --> 00:10:57,033
0 and 1 and the right track between 0 and 1. Awesome!

165
00:10:57,033 --> 00:11:01,033
That's working perfectly! Let me just show you one other thing, this Input Scaling! Let's

166
00:11:01,033 --> 00:11:05,033
turn the Left Track Throttle Input Scaling to 2.5, so you can see what that's

167
00:11:05,033 --> 00:11:09,033
doing! Now if I pull the left track in, it goes between 0 and 2.5

168
00:11:09,033 --> 00:11:13,033
at full travel, but the right track can only go to 1. Now that's a bit weird, we don't

169
00:11:13,033 --> 00:11:17,033
really want that to happen. We do want to limit the full travel, because, at the moment, if

170
00:11:17,033 --> 00:11:21,033
we let this carry on, the player could change... If you give the player

171
00:11:21,033 --> 00:11:25,033
this control over this axis speed, it's control sensitivity

172
00:11:25,033 --> 00:11:29,033
is what you'd normally see in menus, they would actually be able to make the tank go faster. So we're

173
00:11:29,033 --> 00:11:33,033
going to want to clamp these values later, so when you have a thought like that

174
00:11:33,033 --> 00:11:37,033
put it in. It's going to be in here somewhere in SetThrottle, and we're going to make a "// TODO

175
00:11:37,033 --> 00:11:41,033
clamp actual throttle

176
00:11:41,033 --> 00:11:45,033
value to..so

177
00:11:45,033 --> 00:11:49,033
player can't overdrive" or something like that. Just

178
00:11:49,033 --> 00:11:53,033
capture your idea that you want to do that. That is

179
00:11:53,033 --> 00:11:57,033
fantastic! I'm not going to actually put in the applications of the forces, I don't think,

180
00:11:57,033 --> 00:12:01,033
in this video, because we're going to have to think about how much force needs to be applied and a few

181
00:12:01,033 --> 00:12:05,033
other things, and we've done enough for this video. So as a quick recap,

182
00:12:05,033 --> 00:12:09,033
what we've done is, we have based our Left and Right Tracks on

183
00:12:09,033 --> 00:12:13,033
our own classes, which are in turn based on Static Meshes. We have wired

184
00:12:13,033 --> 00:12:17,033
up some Throttle Input Mapping, like this. So by making some axis,

185
00:12:17,033 --> 00:12:21,033
providing references to the tracks, and then, passing the Axis Value

186
00:12:21,033 --> 00:12:25,033
through into this Throttle method. We've then written this Throttle  method. that, at the

187
00:12:25,033 --> 00:12:29,033
moment, just prints. So pretty cool! Good work for one lecture!

188
00:12:29,033 --> 00:12:31,766
See you in the next one!


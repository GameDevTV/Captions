<<<<<<< HEAD:Unreal/Section4/BT93 Using GetTimerManager().srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
So welcome to using GetTimerManager()! We're going to

2
00:00:04.000 --> 00:00:08.000
go and get the TimerManager from the world. in this video. and what we're going to do.

3
00:00:08.000 --> 00:00:12.000
by the end of it. is just have the projectiles that both myself and the enemy tank fire.

4
00:00:12.000 --> 00:00:16.000
Rather than just accumulating in the scene. they're going to destroy themselves after

5
00:00:16.000 --> 00:00:20.866
10 seconds or a reasonable amount of time. So let's get in and make that happen!

6
00:00:20.866 --> 00:00:24.866
OK guys. so let's take a look at these projectiles in action! I'm

7
00:00:24.866 --> 00:00:28.866
going to fire at the enemy tank a few times. and then. I'm going to depossess

8
00:00:28.866 --> 00:00:32.866
and just observe a few things. Firstly. the projectiles are not being

9
00:00:32.866 --> 00:00:36.866
destroyed. which can mean it's a difficult bug to reproduce. but it can mean

10
00:00:36.866 --> 00:00:40.866
the projectiles can actually hit each other in the air. And we can kind of stop the enemy tank

11
00:00:40.866 --> 00:00:44.866
firing. by cluttering the area with

12
00:00:44.866 --> 00:00:48.866
projectiles. As I say. it's a hard problem to reproduce. But what i'm trying to do is

13
00:00:48.866 --> 00:00:52.866
end up with a projectile effectively stuck to the barrel of the other

14
00:00:52.866 --> 00:00:56.866
tank. and then. he can't fire and I can't fire. It's not happening to

15
00:00:56.866 --> 00:01:00.866
me now. It is a tricky one to reproduce. but we don't want these things hanging around in the world

16
00:01:00.866 --> 00:01:04.866
anyway. So what are we going to do about that? Well we have these Collision Meshes.

17
00:01:04.866 --> 00:01:08.866
these brown Collision Meshes. on. Just turning them invisible wouldn't get rid of the problem.

18
00:01:08.866 --> 00:01:12.866
that the projectiles are still sitting around in

19
00:01:12.866 --> 00:01:16.866
the world. even though we may not want them. There you go. I did it in the end! If I depossess

20
00:01:16.866 --> 00:01:20.866
now. let's go look at what's happened! You see the two

21
00:01:20.866 --> 00:01:24.866
projectiles have caught each other in mid air. [Laughs] Now we just get all of the projectiles piling on top

22
00:01:24.866 --> 00:01:28.866
of each other. It looks kind of crazy doesn't it? OK. so what we want to do.

23
00:01:28.866 --> 00:01:32.866
in the C++ code. is when when we actually hit something. we

24
00:01:32.866 --> 00:01:36.866
want to destroy the Collision Mesh. but before we just blindly destroy it. if you

25
00:01:36.866 --> 00:01:40.866
look at the Projectile. remember that it's the root component. Let's get in the habit of

26
00:01:40.866 --> 00:01:44.866
thinking about whether or not we're destroying the root component. If we are let's set

27
00:01:44.866 --> 00:01:48.866
something else first. So I'm going to set the ImpactBlast as the root component. then

28
00:01:48.866 --> 00:01:52.866
destroy the Collision Mesh in the code. OK so it's not super difficult. Set

29
00:01:52.866 --> 00:01:56.866
RootComponent(ImpactBlast). There you go!

30
00:01:56.866 --> 00:02:00.866
And I'll put these as kind of a pair. and then. we're going to

31
00:02:00.866 --> 00:02:04.866
Destroy...

32
00:02:04.866 --> 00:02:08.866
Sorry we need to go to the CollisionMesh. and it's a function on there called

33
00:02:08.866 --> 00:02:12.866
DestroyComponent(). Great! OK

34
00:02:12.866 --> 00:02:16.866
let's have a go at that! Let's see what that looks like! Recompile. and what we should have is.

35
00:02:16.866 --> 00:02:20.866
because the Collision Meshes have actually been destroyed immediately on impact. this situation

36
00:02:20.866 --> 00:02:24.866
should then be impossible. and if it is. then we can

37
00:02:24.866 --> 00:02:28.866
even turn off the Collision Meshes. I don't think we're going to need them anymore. these brown

38
00:02:28.866 --> 00:02:32.866
Collision Meshes. So now. obviously just firing it a few times does

39
00:02:32.866 --> 00:02:36.866
not prove that the bug has gone away. but I think we can reason that the bug must have gone

40
00:02:36.866 --> 00:02:40.866
away. because the Collision Meshes are destroyed immediately on impact.

41
00:02:40.866 --> 00:02:44.866
OK that's cool! Now I don't like these black puffs of smoke that are hanging

42
00:02:44.866 --> 00:02:48.866
around. after the projectile is destroyed. so I'm just going to go and look at the Projectile Blueprint.

43
00:02:48.866 --> 00:02:52.866
Actually. I'll look at the ImpactBlast

44
00:02:52.866 --> 00:02:56.866
Particle Effect. I think what it is. is that my my ImpactBlast has

45
00:02:56.866 --> 00:03:00.866
still got a SmokeTrail Emitter. I don't like that. so I'm going to delete my Smoke TrailEmitter from

46
00:03:00.866 --> 00:03:04.866
the ImpactBlast. and that should stop that funny business

47
00:03:04.866 --> 00:03:08.866
about them hanging around. Let's just take a look. how this

48
00:03:08.866 --> 00:03:12.866
looks now. Yeah. we've got a little

49
00:03:12.866 --> 00:03:16.866
puff there. but that's OK. what we haven't got is those black smoke trails hanging around. OK.

50
00:03:16.866 --> 00:03:20.866
So continually. as you go through this. play with the parameters of your

51
00:03:20.866 --> 00:03:24.866
ImpactBlast and your LaunchBlast and get things how you want them. But what we've got now

52
00:03:24.866 --> 00:03:28.866
is another problem with these projectiles. which is that if we look on the right-hand side. in the World Outliner.

53
00:03:28.866 --> 00:03:32.866
every time we fire a projectile. they may well have their Collision Meshes

54
00:03:32.866 --> 00:03:36.866
destroyed but they still exist in the world. And after not much game play. we'd have a

55
00:03:36.866 --> 00:03:40.866
massive number of projectiles. projectile BP 7. BP9. BP10.

56
00:03:40.866 --> 00:03:44.866
And this is a memory leak. this is creating things without destroying them. We're not tidying up

57
00:03:44.866 --> 00:03:48.866
after ourselves. eventually the game would crash. It might take a while but we need to tidy

58
00:03:48.866 --> 00:03:52.866
it up. So we need to come up with a scheme for destroying our projectiles. so let's just

59
00:03:52.866 --> 00:03:56.866
discuss the possible schemes. One is to use a Projectile Destroy Timer. We're going

60
00:03:56.866 --> 00:04:00.866
to use that one. it's very simple. and the projectile becomes self-responsible. What

61
00:04:00.866 --> 00:04:04.866
we do is we set a timer. and then. when that timer elapses. it just destroys the projectile. it just

62
00:04:04.866 --> 00:04:08.866
destroys itself. The problem. the con. is that it's not very performant if you have

63
00:04:08.866 --> 00:04:12.866
hundreds of projectiles with all these timers going. So you could do something else. you could

64
00:04:12.866 --> 00:04:16.866
Spawn an Explosion Effect. at the impact site. and destroy the

65
00:04:16.866 --> 00:04:20.866
projectile. So the projectile disappears and a explosion.

66
00:04:20.866 --> 00:04:24.866
a new object. starts. It's more physical. the projectile has gone. you could argue. once it's

67
00:04:24.866 --> 00:04:28.866
exploded. and the explosion remains behind. It's more complex to do

68
00:04:28.866 --> 00:04:32.866
this and it could. of course. slow down just when you don't want it. i.e. just when explosions are

69
00:04:32.866 --> 00:04:36.866
going off you're destroying and spawning objects. not necessarily the most performant thing to be doing.

70
00:04:36.866 --> 00:04:40.866
Finally. if you had a natural limit to the number of projectiles

71
00:04:40.866 --> 00:04:44.866
in the world. say you took the number of tanks and then worked out how many times a second

72
00:04:44.866 --> 00:04:48.866
they could fire and how long the projectiles live. you could say. OK we can't have more

73
00:04:48.866 --> 00:04:52.866
than 100 in the world at a time. naturally. So let's just have a pool of 100

74
00:04:52.866 --> 00:04:56.866
projectiles. for example. and then. when a projectile lands you could

75
00:04:56.866 --> 00:05:00.866
disable it and so it effectively disappears and isn't active anymore.

76
00:05:00.866 --> 00:05:04.866
And then. next time a projectile is needed. you pick the oldest

77
00:05:04.866 --> 00:05:08.866
projectile from a pool. and you pluck it. put it in a barrel. and reactivate

78
00:05:08.866 --> 00:05:12.866
it. So the projectiles never actually get instantiated and de-instantiated. but you just have a

79
00:05:12.866 --> 00:05:16.866
fixed number of them that are moved around in a circular fashion in what we call a ring buffer.

80
00:05:16.866 --> 00:05:20.866
in the world. So there's an option for you. We're going to do with the first one. a simple

81
00:05:20.866 --> 00:05:24.866
Projectile Destroy Timer. So how do we do that? Well when we hit.

82
00:05:24.866 --> 00:05:28.866
I'm just going to help you get the method. then I'm going to help you implement it. We need to go to the world.

83
00:05:28.866 --> 00:05:32.866
because the world has in it the TimerManager. so we Get the TimerManager.

84
00:05:32.866 --> 00:05:36.866
Now that we have the world's TimerManager. we

85
00:05:36.866 --> 00:05:40.866
can call a SetTimer() method on it. Now. SetTimer's a bit minging. in that it

86
00:05:40.866 --> 00:05:44.866
has a whole lot of different overloads. We're going to go for overload number 6 here.

87
00:05:44.866 --> 00:05:48.866
mainly because it does everything we need. plus it actually has some

88
00:05:48.866 --> 00:05:52.866
minimal form of documentation on it. We've done things like this before.

89
00:05:52.866 --> 00:05:56.866
You're going to need to make yourself an FTimerHandle. just call it

90
00:05:56.866 --> 00:06:00.866
Timer or TimerHandle. Immediately above the class is going to be

91
00:06:00.866 --> 00:06:04.866
just this. it is just the projectile. We're going to need a

92
00:06:04.866 --> 00:06:08.866
Delegate method. which is a huge. look at that massive parameter

93
00:06:08.866 --> 00:06:12.866
name there. but it is a simple Delegate method OnTimerExpire or something. which

94
00:06:12.866 --> 00:06:16.866
you'll write. And then. we won't loop. this timer isn't going to loop. it's going to go once.

95
00:06:16.866 --> 00:06:20.866
Alright. so that gives you enough of a clue to do this challenge. Make the projectiles

96
00:06:20.866 --> 00:06:24.866
self-destroy. I want you to use that method. Set a Blueprint editable

97
00:06:24.866 --> 00:06:28.866
DestroyDelay. so we don't have to keep recompiling. when we play with our DestroyDelay. Write

98
00:06:28.866 --> 00:06:32.866
a a simple delegate method. In that delegate method. just use the Destroy() method

99
00:06:32.866 --> 00:06:36.866
to destroy the projectile. test that it works. and then. go over to the community.gamedev.tv

100
00:06:36.866 --> 00:06:40.866
and comment on the whole approach and which one you chose. So go ahead.

101
00:06:40.866 --> 00:06:44.866
do that challenge. and I'll see you in a minute!

102
00:06:44.866 --> 00:06:48.866
OK welcome back! So let's get this timer thing going! So

103
00:06:48.866 --> 00:06:52.866
what do we need? We need a timer. so we're going to go FTimerHandle.

104
00:06:52.866 --> 00:06:56.866
Unfortunately. we're just going to throw this away. but it's an out parameter and

105
00:06:56.866 --> 00:07:00.866
we must provide it. So there's the timer! We're going to ignore what it

106
00:07:00.866 --> 00:07:04.866
says here. because this is overload number 2. we want number 6.

107
00:07:04.866 --> 00:07:08.866
so we could go to get to 6 there. So what does it need next? Well it needs a reference

108
00:07:08.866 --> 00:07:12.866
to ourselves. this. this projectile. Then. we need to tell it the delegate

109
00:07:12.866 --> 00:07:16.866
method. so we're going to call it an ampersand AProjectile. or

110
00:07:16.866 --> 00:07:20.866
actually. rather than writing it here. why don't I go write the method now. void

111
00:07:20.866 --> 00:07:24.866
AProjectile::

112
00:07:24.866 --> 00:07:28.866
OnTimer

113
00:07:28.866 --> 00:07:32.866
Expire(). And I might as well even just write it. we simply just

114
00:07:32.866 --> 00:07:36.866
say Destroy(). which will by default destroy the

115
00:07:36.866 --> 00:07:40.866
current projectile. Great! So now the reason I did that is. I can just copy

116
00:07:40.866 --> 00:07:44.866
AProjectile::OnTimerExpire(). Remember to put your ampersand. &. address of operator in front. that's

117
00:07:44.866 --> 00:07:48.866
how you do it when you specify delegates. Destroy

118
00:07:48.866 --> 00:07:52.866
Delay. which we have not defined yet. and false. OK.

119
00:07:52.866 --> 00:07:56.866
I'll make is a slightly longer line there. but it does all fit on one line.

120
00:07:56.866 --> 00:08:00.866
Alright. so we need to go and do a couple of things. Firstly. we need to declare this OnTimer

121
00:08:00.866 --> 00:08:04.866
Expire. I'm going to use the Quick Actions to create a declaration of it in the header file.

122
00:08:04.866 --> 00:08:08.866
I'm going to pop over to the header file. make sure that it's in sensible place. I think it is.

123
00:08:08.866 --> 00:08:12.866
That's fine. And then. I'm also going to

124
00:08:12.866 --> 00:08:16.866
declare a timer delay. so it's going to be

125
00:08:16.866 --> 00:08:20.866
a float and it's going to be a Destroy

126
00:08:20.866 --> 00:08:24.866
Delay. and I'll make it a default of 10 seconds

127
00:08:24.866 --> 00:08:28.866
or something like that. I better make it a UPROPERTY. so we can

128
00:08:28.866 --> 00:08:32.866
Edit it. (EditDefaults

129
00:08:32.866 --> 00:08:36.866
Only). because I think we only want to be able to edit

130
00:08:36.866 --> 00:08:40.866
on the archetype. not on individual projectiles. Category

131
00:08:40.866 --> 00:08:44.866
= "Setup" will do fine. OK. so we have a Destroy

132
00:08:44.866 --> 00:08:48.866
Delay. 10 point maybe we need there. and

133
00:08:48.866 --> 00:08:52.866
yeah we're. I think. good to go! So that's the code I've written. just that.

134
00:08:52.866 --> 00:08:56.866
a delegate and a couple of declarations. Let's go ahead and see if that'll compile! And then.

135
00:08:56.866 --> 00:09:00.866
crucially. what we do is we fire back and forth at each other and what we're hoping is that projectiles will delete

136
00:09:00.866 --> 00:09:04.866
themselves out of the list. and we will not end up with an infinitely

137
00:09:04.866 --> 00:09:08.866
growing list of projectiles. Of course. the first one won't delete for 10 seconds but that's quite normal

138
00:09:08.866 --> 00:09:12.866
and expected. and we'll go from there. it'll be fun. Good!

139
00:09:12.866 --> 00:09:16.866
OK. so I'm going to leave myself in this smaller view here. because I want to be able to see

140
00:09:16.866 --> 00:09:20.866
the World Outliner. And I can see now projectile BP1.

141
00:09:20.866 --> 00:09:24.866
BP2. BP3. BP4. and I'm firing continuously. BP5. 6. 7.

142
00:09:24.866 --> 00:09:28.866
Now what we should see in a minute is (Deleted Actor). There you go. briefly you saw (Deleted

143
00:09:28.866 --> 00:09:32.866
Actor). I'm going to stop firing right now. so that the overall firing rate is lower

144
00:09:32.866 --> 00:09:36.866
than the destruction rate. because previously. between me and the other tank. we were

145
00:09:36.866 --> 00:09:40.866
firing faster than this. And now. you see the projectile pool is just down to the number of projectiles

146
00:09:40.866 --> 00:09:44.866
that the enemy tank is responsible for. So you can see that the

147
00:09:44.866 --> 00:09:48.866
hierarchy. or the World Outliner rather. is keep itself tidy now.

148
00:09:48.866 --> 00:09:52.866
We are destroying what we are creating and that's good news! I'll show you the code we've done

149
00:09:52.866 --> 00:09:56.866
in this lecture. and then. I'll see you in the next lecture. We made these declarations here. Of

150
00:09:56.866 --> 00:10:00.866
course. this UPROPERTY allows us to go to the Projectile Blueprint.

151
00:10:00.866 --> 00:10:04.866
to the top of it there. and then. we go to Destroy Delay. and we can

152
00:10:04.866 --> 00:10:08.866
change that if we want to. The other thing we did is. we popped in

153
00:10:08.866 --> 00:10:15.366
and did this implementation here. which I'll just leave on the screen. And I will see you in the next video!

=======

1
00:00:00,000 --> 00:00:04,000
So welcome to using GetTimerManager()! We're going to

2
00:00:04,000 --> 00:00:08,000
go and get the TimerManager from the world, in this video, and what we're going to do,

3
00:00:08,000 --> 00:00:12,000
by the end of it, is just have the projectiles that both myself and the enemy tank fire.

4
00:00:12,000 --> 00:00:16,000
Rather than just accumulating in the scene, they're going to destroy themselves after

5
00:00:16,000 --> 00:00:20,866
10 seconds or a reasonable amount of time. So let's get in and make that happen!

6
00:00:20,866 --> 00:00:24,866
OK guys, so let's take a look at these projectiles in action! I'm

7
00:00:24,866 --> 00:00:28,866
going to fire at the enemy tank a few times, and then, I'm going to depossess

8
00:00:28,866 --> 00:00:32,866
and just observe a few things. Firstly, the projectiles are not being

9
00:00:32,866 --> 00:00:36,866
destroyed, which can mean it's a difficult bug to reproduce, but it can mean

10
00:00:36,866 --> 00:00:40,866
the projectiles can actually hit each other in the air. And we can kind of stop the enemy tank

11
00:00:40,866 --> 00:00:44,866
firing, by cluttering the area with

12
00:00:44,866 --> 00:00:48,866
projectiles. As I say, it's a hard problem to reproduce. But what i'm trying to do is

13
00:00:48,866 --> 00:00:52,866
end up with a projectile effectively stuck to the barrel of the other

14
00:00:52,866 --> 00:00:56,866
tank, and then, he can't fire and I can't fire. It's not happening to

15
00:00:56,866 --> 00:01:00,866
me now. It is a tricky one to reproduce, but we don't want these things hanging around in the world

16
00:01:00,866 --> 00:01:04,866
anyway. So what are we going to do about that? Well we have these Collision Meshes,

17
00:01:04,866 --> 00:01:08,866
these brown Collision Meshes, on. Just turning them invisible wouldn't get rid of the problem,

18
00:01:08,866 --> 00:01:12,866
that the projectiles are still sitting around in

19
00:01:12,866 --> 00:01:16,866
the world, even though we may not want them. There you go, I did it in the end! If I depossess

20
00:01:16,866 --> 00:01:20,866
now, let's go look at what's happened! You see the two

21
00:01:20,866 --> 00:01:24,866
projectiles have caught each other in mid air. [Laughs] Now we just get all of the projectiles piling on top

22
00:01:24,866 --> 00:01:28,866
of each other. It looks kind of crazy doesn't it? OK, so what we want to do,

23
00:01:28,866 --> 00:01:32,866
in the C++ code, is when when we actually hit something, we

24
00:01:32,866 --> 00:01:36,866
want to destroy the Collision Mesh, but before we just blindly destroy it, if you

25
00:01:36,866 --> 00:01:40,866
look at the Projectile, remember that it's the root component. Let's get in the habit of

26
00:01:40,866 --> 00:01:44,866
thinking about whether or not we're destroying the root component. If we are let's set

27
00:01:44,866 --> 00:01:48,866
something else first. So I'm going to set the ImpactBlast as the root component, then

28
00:01:48,866 --> 00:01:52,866
destroy the Collision Mesh in the code. OK so it's not super difficult. Set

29
00:01:52,866 --> 00:01:56,866
RootComponent(ImpactBlast). There you go!

30
00:01:56,866 --> 00:02:00,866
And I'll put these as kind of a pair, and then, we're going to

31
00:02:00,866 --> 00:02:04,866
Destroy...

32
00:02:04,866 --> 00:02:08,866
Sorry we need to go to the CollisionMesh, and it's a function on there called

33
00:02:08,866 --> 00:02:12,866
DestroyComponent(). Great! OK

34
00:02:12,866 --> 00:02:16,866
let's have a go at that! Let's see what that looks like! Recompile, and what we should have is,

35
00:02:16,866 --> 00:02:20,866
because the Collision Meshes have actually been destroyed immediately on impact, this situation

36
00:02:20,866 --> 00:02:24,866
should then be impossible, and if it is, then we can

37
00:02:24,866 --> 00:02:28,866
even turn off the Collision Meshes. I don't think we're going to need them anymore, these brown

38
00:02:28,866 --> 00:02:32,866
Collision Meshes. So now, obviously just firing it a few times does

39
00:02:32,866 --> 00:02:36,866
not prove that the bug has gone away, but I think we can reason that the bug must have gone

40
00:02:36,866 --> 00:02:40,866
away, because the Collision Meshes are destroyed immediately on impact.

41
00:02:40,866 --> 00:02:44,866
OK that's cool! Now I don't like these black puffs of smoke that are hanging

42
00:02:44,866 --> 00:02:48,866
around, after the projectile is destroyed, so I'm just going to go and look at the Projectile Blueprint.

43
00:02:48,866 --> 00:02:52,866
Actually, I'll look at the ImpactBlast

44
00:02:52,866 --> 00:02:56,866
Particle Effect. I think what it is, is that my my ImpactBlast has

45
00:02:56,866 --> 00:03:00,866
still got a SmokeTrail Emitter. I don't like that, so I'm going to delete my Smoke TrailEmitter from

46
00:03:00,866 --> 00:03:04,866
the ImpactBlast, and that should stop that funny business

47
00:03:04,866 --> 00:03:08,866
about them hanging around. Let's just take a look, how this

48
00:03:08,866 --> 00:03:12,866
looks now. Yeah, we've got a little

49
00:03:12,866 --> 00:03:16,866
puff there, but that's OK, what we haven't got is those black smoke trails hanging around. OK.

50
00:03:16,866 --> 00:03:20,866
So continually, as you go through this, play with the parameters of your

51
00:03:20,866 --> 00:03:24,866
ImpactBlast and your LaunchBlast and get things how you want them. But what we've got now

52
00:03:24,866 --> 00:03:28,866
is another problem with these projectiles, which is that if we look on the right-hand side, in the World Outliner,

53
00:03:28,866 --> 00:03:32,866
every time we fire a projectile, they may well have their Collision Meshes

54
00:03:32,866 --> 00:03:36,866
destroyed but they still exist in the world. And after not much game play, we'd have a

55
00:03:36,866 --> 00:03:40,866
massive number of projectiles, projectile BP 7, BP9, BP10.

56
00:03:40,866 --> 00:03:44,866
And this is a memory leak, this is creating things without destroying them. We're not tidying up

57
00:03:44,866 --> 00:03:48,866
after ourselves, eventually the game would crash. It might take a while but we need to tidy

58
00:03:48,866 --> 00:03:52,866
it up. So we need to come up with a scheme for destroying our projectiles, so let's just

59
00:03:52,866 --> 00:03:56,866
discuss the possible schemes. One is to use a Projectile Destroy Timer. We're going

60
00:03:56,866 --> 00:04:00,866
to use that one, it's very simple, and the projectile becomes self-responsible. What

61
00:04:00,866 --> 00:04:04,866
we do is we set a timer, and then, when that timer elapses, it just destroys the projectile, it just

62
00:04:04,866 --> 00:04:08,866
destroys itself. The problem, the con, is that it's not very performant if you have

63
00:04:08,866 --> 00:04:12,866
hundreds of projectiles with all these timers going. So you could do something else, you could

64
00:04:12,866 --> 00:04:16,866
Spawn an Explosion Effect, at the impact site, and destroy the

65
00:04:16,866 --> 00:04:20,866
projectile. So the projectile disappears and a explosion,

66
00:04:20,866 --> 00:04:24,866
a new object, starts. It's more physical, the projectile has gone, you could argue, once it's

67
00:04:24,866 --> 00:04:28,866
exploded, and the explosion remains behind. It's more complex to do

68
00:04:28,866 --> 00:04:32,866
this and it could, of course, slow down just when you don't want it, i.e. just when explosions are

69
00:04:32,866 --> 00:04:36,866
going off you're destroying and spawning objects, not necessarily the most performant thing to be doing.

70
00:04:36,866 --> 00:04:40,866
Finally, if you had a natural limit to the number of projectiles

71
00:04:40,866 --> 00:04:44,866
in the world, say you took the number of tanks and then worked out how many times a second

72
00:04:44,866 --> 00:04:48,866
they could fire and how long the projectiles live, you could say, OK we can't have more

73
00:04:48,866 --> 00:04:52,866
than 100 in the world at a time, naturally. So let's just have a pool of 100

74
00:04:52,866 --> 00:04:56,866
projectiles, for example, and then, when a projectile lands you could

75
00:04:56,866 --> 00:05:00,866
disable it and so it effectively disappears and isn't active anymore.

76
00:05:00,866 --> 00:05:04,866
And then, next time a projectile is needed, you pick the oldest

77
00:05:04,866 --> 00:05:08,866
projectile from a pool, and you pluck it, put it in a barrel, and reactivate

78
00:05:08,866 --> 00:05:12,866
it. So the projectiles never actually get instantiated and de-instantiated, but you just have a

79
00:05:12,866 --> 00:05:16,866
fixed number of them that are moved around in a circular fashion in what we call a ring buffer,

80
00:05:16,866 --> 00:05:20,866
in the world. So there's an option for you. We're going to do with the first one, a simple

81
00:05:20,866 --> 00:05:24,866
Projectile Destroy Timer. So how do we do that? Well when we hit,

82
00:05:24,866 --> 00:05:28,866
I'm just going to help you get the method, then I'm going to help you implement it. We need to go to the world,

83
00:05:28,866 --> 00:05:32,866
because the world has in it the TimerManager, so we Get the TimerManager.

84
00:05:32,866 --> 00:05:36,866
Now that we have the world's TimerManager, we

85
00:05:36,866 --> 00:05:40,866
can call a SetTimer() method on it. Now, SetTimer's a bit minging, in that it

86
00:05:40,866 --> 00:05:44,866
has a whole lot of different overloads. We're going to go for overload number 6 here,

87
00:05:44,866 --> 00:05:48,866
mainly because it does everything we need, plus it actually has some

88
00:05:48,866 --> 00:05:52,866
minimal form of documentation on it. We've done things like this before.

89
00:05:52,866 --> 00:05:56,866
You're going to need to make yourself an FTimerHandle, just call it

90
00:05:56,866 --> 00:06:00,866
Timer or TimerHandle. Immediately above the class is going to be

91
00:06:00,866 --> 00:06:04,866
just this, it is just the projectile. We're going to need a

92
00:06:04,866 --> 00:06:08,866
Delegate method, which is a huge, look at that massive parameter

93
00:06:08,866 --> 00:06:12,866
name there, but it is a simple Delegate method OnTimerExpire or something, which

94
00:06:12,866 --> 00:06:16,866
you'll write. And then, we won't loop, this timer isn't going to loop, it's going to go once.

95
00:06:16,866 --> 00:06:20,866
Alright, so that gives you enough of a clue to do this challenge. Make the projectiles

96
00:06:20,866 --> 00:06:24,866
self-destroy. I want you to use that method. Set a Blueprint editable

97
00:06:24,866 --> 00:06:28,866
DestroyDelay, so we don't have to keep recompiling, when we play with our DestroyDelay. Write

98
00:06:28,866 --> 00:06:32,866
a a simple delegate method. In that delegate method, just use the Destroy() method

99
00:06:32,866 --> 00:06:36,866
to destroy the projectile, test that it works, and then, go over to the community.gamedev.tv

100
00:06:36,866 --> 00:06:40,866
and comment on the whole approach and which one you chose. So go ahead,

101
00:06:40,866 --> 00:06:44,866
do that challenge, and I'll see you in a minute!

102
00:06:44,866 --> 00:06:48,866
OK welcome back! So let's get this timer thing going! So

103
00:06:48,866 --> 00:06:52,866
what do we need? We need a timer, so we're going to go FTimerHandle.

104
00:06:52,866 --> 00:06:56,866
Unfortunately, we're just going to throw this away, but it's an out parameter and

105
00:06:56,866 --> 00:07:00,866
we must provide it. So there's the timer! We're going to ignore what it

106
00:07:00,866 --> 00:07:04,866
says here, because this is overload number 2, we want number 6,

107
00:07:04,866 --> 00:07:08,866
so we could go to get to 6 there. So what does it need next? Well it needs a reference

108
00:07:08,866 --> 00:07:12,866
to ourselves, this, this projectile. Then, we need to tell it the delegate

109
00:07:12,866 --> 00:07:16,866
method, so we're going to call it an ampersand AProjectile, or

110
00:07:16,866 --> 00:07:20,866
actually, rather than writing it here, why don't I go write the method now. void

111
00:07:20,866 --> 00:07:24,866
AProjectile::

112
00:07:24,866 --> 00:07:28,866
OnTimer

113
00:07:28,866 --> 00:07:32,866
Expire(). And I might as well even just write it, we simply just

114
00:07:32,866 --> 00:07:36,866
say Destroy(), which will by default destroy the

115
00:07:36,866 --> 00:07:40,866
current projectile. Great! So now the reason I did that is, I can just copy

116
00:07:40,866 --> 00:07:44,866
AProjectile::OnTimerExpire(). Remember to put your ampersand, &, address of operator in front, that's

117
00:07:44,866 --> 00:07:48,866
how you do it when you specify delegates. Destroy

118
00:07:48,866 --> 00:07:52,866
Delay, which we have not defined yet, and false. OK,

119
00:07:52,866 --> 00:07:56,866
I'll make is a slightly longer line there, but it does all fit on one line.

120
00:07:56,866 --> 00:08:00,866
Alright, so we need to go and do a couple of things. Firstly, we need to declare this OnTimer

121
00:08:00,866 --> 00:08:04,866
Expire. I'm going to use the Quick Actions to create a declaration of it in the header file.

122
00:08:04,866 --> 00:08:08,866
I'm going to pop over to the header file, make sure that it's in sensible place. I think it is.

123
00:08:08,866 --> 00:08:12,866
That's fine. And then, I'm also going to

124
00:08:12,866 --> 00:08:16,866
declare a timer delay, so it's going to be

125
00:08:16,866 --> 00:08:20,866
a float and it's going to be a Destroy

126
00:08:20,866 --> 00:08:24,866
Delay, and I'll make it a default of 10 seconds

127
00:08:24,866 --> 00:08:28,866
or something like that. I better make it a UPROPERTY, so we can

128
00:08:28,866 --> 00:08:32,866
Edit it. (EditDefaults

129
00:08:32,866 --> 00:08:36,866
Only), because I think we only want to be able to edit

130
00:08:36,866 --> 00:08:40,866
on the archetype, not on individual projectiles. Category

131
00:08:40,866 --> 00:08:44,866
= "Setup" will do fine. OK, so we have a Destroy

132
00:08:44,866 --> 00:08:48,866
Delay, 10 point maybe we need there, and

133
00:08:48,866 --> 00:08:52,866
yeah we're, I think, good to go! So that's the code I've written, just that,

134
00:08:52,866 --> 00:08:56,866
a delegate and a couple of declarations. Let's go ahead and see if that'll compile! And then,

135
00:08:56,866 --> 00:09:00,866
crucially, what we do is we fire back and forth at each other and what we're hoping is that projectiles will delete

136
00:09:00,866 --> 00:09:04,866
themselves out of the list, and we will not end up with an infinitely

137
00:09:04,866 --> 00:09:08,866
growing list of projectiles. Of course, the first one won't delete for 10 seconds but that's quite normal

138
00:09:08,866 --> 00:09:12,866
and expected, and we'll go from there, it'll be fun. Good!

139
00:09:12,866 --> 00:09:16,866
OK, so I'm going to leave myself in this smaller view here, because I want to be able to see

140
00:09:16,866 --> 00:09:20,866
the World Outliner. And I can see now projectile BP1,

141
00:09:20,866 --> 00:09:24,866
BP2, BP3, BP4, and I'm firing continuously, BP5, 6, 7.

142
00:09:24,866 --> 00:09:28,866
Now what we should see in a minute is (Deleted Actor). There you go, briefly you saw (Deleted

143
00:09:28,866 --> 00:09:32,866
Actor). I'm going to stop firing right now, so that the overall firing rate is lower

144
00:09:32,866 --> 00:09:36,866
than the destruction rate, because previously, between me and the other tank, we were

145
00:09:36,866 --> 00:09:40,866
firing faster than this. And now, you see the projectile pool is just down to the number of projectiles

146
00:09:40,866 --> 00:09:44,866
that the enemy tank is responsible for. So you can see that the

147
00:09:44,866 --> 00:09:48,866
hierarchy, or the World Outliner rather, is keep itself tidy now.

148
00:09:48,866 --> 00:09:52,866
We are destroying what we are creating and that's good news! I'll show you the code we've done

149
00:09:52,866 --> 00:09:56,866
in this lecture, and then, I'll see you in the next lecture. We made these declarations here. Of

150
00:09:56,866 --> 00:10:00,866
course, this UPROPERTY allows us to go to the Projectile Blueprint,

151
00:10:00,866 --> 00:10:04,866
to the top of it there, and then, we go to Destroy Delay, and we can

152
00:10:04,866 --> 00:10:08,866
change that if we want to. The other thing we did is, we popped in

153
00:10:08,866 --> 00:10:15,366
and did this implementation here, which I'll just leave on the screen. And I will see you in the next video!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT93 Using GetTimerManager().srt

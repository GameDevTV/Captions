WEBVTT

1
00:00:00.000 --> 00:00:03.200


2
00:00:03.200 --> 00:00:07.200
Hey, so welcome to Using TakeDamage() on Actors! In this video what we're

3
00:00:07.200 --> 00:00:11.200
going to do is starting to take damage. So if we look at this tank

4
00:00:11.200 --> 00:00:15.200
and we see that in the inspector we now have  a current health value that we can read but not change,

5
00:00:15.200 --> 00:00:19.200
and every time we get hit it goes down 20 and eventually our tank can report as

6
00:00:19.200 --> 00:00:21.533
dead. So let's get it done!

7
00:00:21.533 --> 00:00:25.533
So I want to start by making a couple of tweaks to this projectile.

8
00:00:25.533 --> 00:00:29.533
I want to get rid of that brown ball, it seems to have crept back in for me, and that's probably

9
00:00:29.533 --> 00:00:33.533
because I have, at some point, on the Collision

10
00:00:33.533 --> 00:00:37.533
Mesh part of the Projectile Blueprint gone in and made it

11
00:00:37.533 --> 00:00:41.533
invisible but perhaps not saved my blueprint. The other thing I want to do

12
00:00:41.533 --> 00:00:45.533
is increase the Radius of my ExplosionForce, I'm going to do that up to 10 meters,

13
00:00:45.533 --> 00:00:49.533
1,000 centimeters, simply because it's quite hard to

14
00:00:49.533 --> 00:00:53.533
actually make the other enemy tank appear to be hit. So let's just try that with a 10

15
00:00:53.533 --> 00:00:57.533
meter explosion radius. That's good, that's easier to hit him now.

16
00:00:57.533 --> 00:01:01.533
So you can constantly, as you go through the development of your game, of course, tweak these parameters as soon as you

17
00:01:01.533 --> 00:01:05.533
find out that they're not how you want them and make them better.

18
00:01:05.533 --> 00:01:09.533
OK so now on to the issue at hand, which is that when we hit the enemy tank,

19
00:01:09.533 --> 00:01:13.533
another thing that we want to do is we want to actually go in and

20
00:01:13.533 --> 00:01:17.533
apply some damage to him. Just before we set the timer, I would have thought the timer

21
00:01:17.533 --> 00:01:21.533
ought to be the last thing we do, the DestroyTimer, just because it feels like we've

22
00:01:21.533 --> 00:01:25.533
finished with the hit then, but just before that we want to damage the enemy tanks.

23
00:01:25.533 --> 00:01:29.533
So I'm going to start this off, get you going with how to use the Unreal Actor Damage System,

24
00:01:29.533 --> 00:01:33.533
and then, you can go ahead and finish the damage system on the tank side. So

25
00:01:33.533 --> 00:01:37.533
what we can do from here is, we can use something called UGameplayStatics and there's a

26
00:01:37.533 --> 00:01:41.533
method on UGameplayStatics called ApplyRadialDamage()

27
00:01:41.533 --> 00:01:45.533
and that goes very nicely with our ExplosionForce,

28
00:01:45.533 --> 00:01:49.533
that we're already using that is radial. So let's go ahead and open up that method.

29
00:01:49.533 --> 00:01:53.533
Great! So what is in need? Well it's going to need a few things. It's going to need a

30
00:01:53.533 --> 00:01:57.533
reference to the context that we're going to apply the

31
00:01:57.533 --> 00:02:01.533
damage from, which is this projectile right here. We need a BaseDamage

32
00:02:01.533 --> 00:02:05.533
and amount, so on the Projectile I'm going to make ourselves a DamageAmount.

33
00:02:05.533 --> 00:02:09.533
So I'm going to put it here, I'm going to make it a UPROPERTY.

34
00:02:09.533 --> 00:02:13.533
I'm going to make it EditDefaultsOnly(). I'm going to make it

35
00:02:13.533 --> 00:02:17.533
Category =. What shall we have? Components firing

36
00:02:17.533 --> 00:02:21.533
Setup? I think it's still the "Setup".

37
00:02:21.533 --> 00:02:25.533
And then, the deal is that it's going to be a float, which is talking about the

38
00:02:25.533 --> 00:02:29.533
ProjectileDamage. That says set an amount of

39
00:02:29.533 --> 00:02:33.533
damage that this projectile does. Whether it should be a float or an integer is for

40
00:02:33.533 --> 00:02:37.533
discussion, in a way, but if we look over here in the signature of this

41
00:02:37.533 --> 00:02:41.533
method and what it's expecting, it is expecting a float.

42
00:02:41.533 --> 00:02:45.533
So as soon as VisualStudio catches up with me, we'll see that it wants a float,

43
00:02:45.533 --> 00:02:49.533
so let's give it a float. We'll talk about floats and ints and damage and actually getting

44
00:02:49.533 --> 00:02:53.533
to 0 damage, when we get to the other side, in fact, in the solution to the challenge.

45
00:02:53.533 --> 00:02:57.533
So it wants a float, we're giving it a float, let's call it ProjectileDamage.

46
00:02:57.533 --> 00:03:01.533
There we go and that is editable! It then wants an origin of this damage.

47
00:03:01.533 --> 00:03:05.533
Well we just get the ActorLocation. We are already in

48
00:03:05.533 --> 00:03:09.533
the Projectile, which is the Actor in question, that is where the damage is going to start from.

49
00:03:09.533 --> 00:03:13.533
Now the DamageRadius, what we can do here is we can look

50
00:03:13.533 --> 00:03:17.533
through the ExplosionForce to its Radius and just use that,

51
00:03:17.533 --> 00:03:21.533
then we have bound these together for consistency.

52
00:03:21.533 --> 00:03:25.533
Yeah that's pretty handy, if I spelled consistency right, it doesn't really

53
00:03:25.533 --> 00:03:29.533
matter if I haven't. But the idea is that if we change the ExplosionForce in the blueprint, then this

54
00:03:29.533 --> 00:03:33.533
will come through here. That's pretty handy right?! Now we need to give it a UDamageType.

55
00:03:33.533 --> 00:03:37.533
That's the next thing, so let's do that. UDamageType::,

56
00:03:37.533 --> 00:03:41.533
and we're going to use StaticClass() here. If you want to find out more about that,

57
00:03:41.533 --> 00:03:45.533
go to the documentation and read about the

58
00:03:45.533 --> 00:03:49.533
ApplyRadialDamage() method, which we can lookup as follows. I'll put this in the resource

59
00:03:49.533 --> 00:03:53.533
for you as well. UGameplayStatics::ApplyRadialDamage.

60
00:03:53.533 --> 00:03:57.533
There you go! It's giving you all sorts, a big ugly signature, and down here it gives you some

61
00:03:57.533 --> 00:04:01.533
more information about what each of these mean. OK.

62
00:04:01.533 --> 00:04:05.533
I'm just giving you the solution, if you like, on this side, and your challenge will be on the other

63
00:04:05.533 --> 00:04:09.533
side. This is how we apply the damage in the first place. Then, it wants an array of

64
00:04:09.533 --> 00:04:13.533
Actors that are going to receive the damage. Well we want an Array of

65
00:04:13.533 --> 00:04:17.533
AActor pointers, like so, but we're going to give it

66
00:04:17.533 --> 00:04:21.533
an empty array, i.e. we're going to ignore...

67
00:04:21.533 --> 00:04:25.533
Or damage all actors is easier. "// damage all actors".

68
00:04:25.533 --> 00:04:29.533
OK. So that's what we do on this side, and then, all actors,

69
00:04:29.533 --> 00:04:33.533
that are within that radius, are going to receive an amount of damage

70
00:04:33.533 --> 00:04:37.533
that's determined by the ProjectileDamage. So that's one half

71
00:04:37.533 --> 00:04:41.533
of this done. Then, what we need to do is flip our attention over to the

72
00:04:41.533 --> 00:04:45.533
tank, and yes, we're actually going to use the tank. The tank is

73
00:04:45.533 --> 00:04:49.533
not a completely and utterly thin and useless class. Now because

74
00:04:49.533 --> 00:04:53.533
the tank is an Actor there is a method that will be called on the tank automatically,

75
00:04:53.533 --> 00:04:57.533
if it's in that radius, and that method is this AActor::

76
00:04:57.533 --> 00:05:04.000
TakeDamage method and there is the signature for you. And what I want you to do is take on the challenge of trying to implement TankDamage.

77
00:05:04.000 --> 00:05:08.000
So take a look at that AActor::TakeDamage method, as linked in the resources or

78
00:05:08.000 --> 00:05:12.000
just Google search for it. Override the method, the tank's

79
00:05:12.000 --> 00:05:16.000
virtual.. It's a virtual method, we've done this before, virtual void override, all that sort of stuff. Although it's not

80
00:05:16.000 --> 00:05:20.000
void actually, so it's virtual float override, [Laughs] in this case. Clamp the

81
00:05:20.000 --> 00:05:24.000
DamageToApply to the CurrentHealth. So inside we'll have something like Damage

82
00:05:24.000 --> 00:05:28.000
ToApply =, you know, the damage that comes in, which is

83
00:05:28.000 --> 00:05:32.000
called DamageAmount, as you can see in the signature, and we want to clamp that to the Current

84
00:05:32.000 --> 00:05:36.000
Health. So say the tank had, as I said before, 17,

85
00:05:36.000 --> 00:05:40.000
let's say, points of health left, and the damage we want to

86
00:05:40.000 --> 00:05:44.000
try and apply is 20, we actually only want to take 17 points. We want to have health

87
00:05:44.000 --> 00:05:48.000
end up at 0, precisely. But all you need to do for this lecture is log the

88
00:05:48.000 --> 00:05:52.000
DamageAmount and the DamageToApply. So it's really about just overriding that method

89
00:05:52.000 --> 00:05:56.000
and doing a clamp, and then, log these

90
00:05:56.000 --> 00:06:00.000
values out to make sure that the DamageAmount and the DamageToApply look like they're right.

91
00:06:00.000 --> 00:06:04.000
You can tweak the starting values, if you need to check the clamp, and then, either carry on watching

92
00:06:04.000 --> 00:06:08.000
this video or if you, or if you feel confident and this challenge is too small for your level

93
00:06:08.000 --> 00:06:12.000
of experience, then just carry on and finish the entire damage system,

94
00:06:12.000 --> 00:06:16.000
without the UI. I'll be covering the UI of the damage in the next video.

95
00:06:16.000 --> 00:06:20.000
But go ahead, pause the video, and take on the challenge now!

96
00:06:20.000 --> 00:06:24.000


97
00:06:24.000 --> 00:06:28.000
OK cool! So let's go and have a little look at how this is going to work. So on

98
00:06:28.000 --> 00:06:32.000
the tank we are going to need a few new things. Firstly, we're going to need

99
00:06:32.000 --> 00:06:36.000
this method. So here it is! Here is the

100
00:06:36.000 --> 00:06:40.000
signature of it, virtual float TakeDamage. So what we do, as we

101
00:06:40.000 --> 00:06:44.000
know, is firstly decide whether it's public or private. Well it actually needs to be public, if you think about it,

102
00:06:44.000 --> 00:06:48.000
because other classes need to be able to call this. So TakeDamage,

103
00:06:48.000 --> 00:06:52.000
now this leaves the responsibility for taking the damage in the hands of the tank, which is fine.

104
00:06:52.000 --> 00:06:56.000
It doesn't have to TakeDamage, but it

105
00:06:56.000 --> 00:07:00.000
can decide whether it's going to TakeDamage. But this method will get called by the

106
00:07:00.000 --> 00:07:04.000
engine, when something like the projectile is in range

107
00:07:04.000 --> 00:07:08.000
and says that damage should be taken. So all I'm doing here is stripping the white space on

108
00:07:08.000 --> 00:07:12.000
this guy, popping an override on the end of it,

109
00:07:12.000 --> 00:07:16.000
and that's it really. So I've literally just copied that from the documentation.

110
00:07:16.000 --> 00:07:20.000
So we have that public method there, and I think I'm going to put a comment to say

111
00:07:20.000 --> 00:07:24.000
"// called by the engine when actor

112
00:07:24.000 --> 00:07:28.000
damage is dealt". OK fantastic! So

113
00:07:28.000 --> 00:07:32.000
I've got the signature, let's go ahead and just do the implementation of that now. We don't

114
00:07:32.000 --> 00:07:36.000
want the word virtual, it's a float. We'll need to take not of that in a minute, that

115
00:07:36.000 --> 00:07:40.000
we have to return something. We have to put the class name in, we strip an

116
00:07:40.000 --> 00:07:44.000
override off the edge, and switch into curlies. OK,

117
00:07:44.000 --> 00:07:48.000
so that is the beginnings of things. Now, we need to return

118
00:07:48.000 --> 00:07:52.000
something. This wants us to return the amount of damage that was taken, and in the challenge

119
00:07:52.000 --> 00:07:56.000
slide, I said we should call that DamageToApply. So let's return DamageToApply,

120
00:07:56.000 --> 00:08:00.000
and let's also immediately calculate DamageToApply. So

121
00:08:00.000 --> 00:08:04.000
use auto for now and DamageToApply,

122
00:08:04.000 --> 00:08:08.000
and then, we're going to use the clamp, FMath::Clamp().

123
00:08:08.000 --> 00:08:12.000
And what we're going to clamp is the damage that comes

124
00:08:12.000 --> 00:08:16.000
in here, which is the DamageAmount, and we're going to clamp

125
00:08:16.000 --> 00:08:20.000
it between 0 and the current health

126
00:08:20.000 --> 00:08:24.000
of the tank. Now we don't have a CurrentHealth, so let's go and give ourselves a property

127
00:08:24.000 --> 00:08:28.000
in the tank, down here in the private section.

128
00:08:28.000 --> 00:08:32.000
Because it's a variable we want to keep it nice and private, private:

129
00:08:32.000 --> 00:08:36.000
CurrentHealth. Now, what is the value of CurrentHealth. I'm actually going to specify

130
00:08:36.000 --> 00:08:40.000
health in integers. I'm going to go straight to that, because we don't want to be dealing with

131
00:08:40.000 --> 00:08:44.000
comparing floats to 0's. Remember we've talked about this before, so I'm

132
00:08:44.000 --> 00:08:48.000
going to do the following. I'm going to say we have two int32's, one as the StartingHealth,

133
00:08:48.000 --> 00:08:52.000
and I'm going to give it a sensible default value of 100, like

134
00:08:52.000 --> 00:08:56.000
that. And then, I'm going to make a CurrentHealth and I'm going to say that that's the Starting

135
00:08:56.000 --> 00:09:00.000
Health. And we can do that in the header file here, because we know

136
00:09:00.000 --> 00:09:04.000
the compiler knows the StartingHealth, so therefore it can know the CurrentHealth. Now,

137
00:09:04.000 --> 00:09:08.000
while I'm at it, let's make these things UPROPERTY(). And this guy, the Starting

138
00:09:08.000 --> 00:09:12.000
Health is going to be (EditDefaults

139
00:09:12.000 --> 00:09:16.000
Only, and the category is going to be "Setup"),

140
00:09:16.000 --> 00:09:20.000
string referenced. OK, then the

141
00:09:20.000 --> 00:09:24.000
CurrentHealth, well it's going to be

142
00:09:24.000 --> 00:09:28.000
a UPROPERTY, it's going to be (Visible

143
00:09:28.000 --> 00:09:32.000
Anywhere, because we don't want to be changing it, it only wants to be changed in code.

144
00:09:32.000 --> 00:09:36.000
And Category = I'm going to say "Health").

145
00:09:36.000 --> 00:09:40.000
OK, so hopefully it's clear what we're doing there. We have a Starting

146
00:09:40.000 --> 00:09:44.000
Health and a CurrentHealth, which means that over here we can clamp

147
00:09:44.000 --> 00:09:48.000
the DamageToApply, somewhere between

148
00:09:48.000 --> 00:09:52.000
0 and the CurrentHealth, but we don't want to

149
00:09:52.000 --> 00:09:56.000
ever be comparing floats to 0. So what I'm going to do is, I'm

150
00:09:56.000 --> 00:10:00.000
going to start off by saying, actually let's introduce a

151
00:10:00.000 --> 00:10:04.000
concept and be explicit about the type. Now we want an integer concept of Damage

152
00:10:04.000 --> 00:10:08.000
Points, which are going to be an integer, they're a number, and then, what I'm going

153
00:10:08.000 --> 00:10:12.000
to do is, I'm going to use FPlatformMath.

154
00:10:12.000 --> 00:10:16.000
It has a method in it called RoundTo

155
00:10:16.000 --> 00:10:20.000
Int(), and we're going to take the floating point DamageAmount

156
00:10:20.000 --> 00:10:24.000
that comes in, we've got no control over that it has to be a floating point, and we're going to

157
00:10:24.000 --> 00:10:28.000
round this DamageAmount that comes in into DamagePoints.

158
00:10:28.000 --> 00:10:32.000
And then, when we talk about the amount of damage that we're going to apply, we're going to actually

159
00:10:32.000 --> 00:10:36.000
use these DamagePoints, and then, the auto here should come out as

160
00:10:36.000 --> 00:10:40.000
an int32. In fact, I'm even just going to be explicit about that. So I'm

161
00:10:40.000 --> 00:10:44.000
saying, let's convert floating point damage to integer damage. Let's

162
00:10:44.000 --> 00:10:48.000
round the damage to the nearest integer, and then, decide on what the

163
00:10:48.000 --> 00:10:52.000
damage to apply is, as an integer, somewhere between 0 and the current health. And remember that

164
00:10:52.000 --> 00:10:56.000
it's all in integers, the CurrentHealth and the StartingHealth. Hopefully that makes sense. If

165
00:10:56.000 --> 00:11:00.000
we do that, then life is going to be a lot easier, because we can say

166
00:11:00.000 --> 00:11:04.000
for sure that the tank has exactly 0 health. So we're nearly there with the challenge.

167
00:11:04.000 --> 00:11:08.000
Now all I want to do is Log Warning in TEXT,

168
00:11:08.000 --> 00:11:12.000
and I'm just going to say tank or just say

169
00:11:12.000 --> 00:11:16.000
the two things I wanted you to log out, which are the DamageAmount and the DamageToApply. OK,

170
00:11:16.000 --> 00:11:20.000
so ("DamageAmount=%f,

171
00:11:20.000 --> 00:11:24.000
DamageToApply =

172
00:11:24.000 --> 00:11:28.000
another %f), and then, we literally just lay

173
00:11:28.000 --> 00:11:32.000
those out. In fact, because I've named them precisely what they are, I

174
00:11:32.000 --> 00:11:36.000
can just copy and paste there, and we're good to go! And we

175
00:11:36.000 --> 00:11:40.000
have to return a DamageAmount. So hopefully this makes sense, let's see if it works!

176
00:11:40.000 --> 00:11:44.000
I'll show you the source control, while we

177
00:11:44.000 --> 00:11:48.000
go. So this is my declaration!

178
00:11:48.000 --> 00:11:52.000
In fact, it's missed something there, and that's because I'm showing you the wrong

179
00:11:52.000 --> 00:11:56.000
file. There you go! This is what we've done in the Tank

180
00:11:56.000 --> 00:12:00.000
header file and this is what we've done in the Tank C++ file. I'm not going to

181
00:12:00.000 --> 00:12:04.000
show you the full lines there, they're very long, but there you go. OK, but hopefully

182
00:12:04.000 --> 00:12:08.000
the compile has happened by now. Let's see if it's complete!

183
00:12:08.000 --> 00:12:12.000
1901 p.m., which is is in my local time.

184
00:12:12.000 --> 00:12:16.000
So that is, by the way, a way you can tell whether that has worked. Now let's

185
00:12:16.000 --> 00:12:20.000
see if the log... I need the Output Log available and right down at the bottom. In fact, I'll clear it. Let's just

186
00:12:20.000 --> 00:12:24.000
see what happens! So we're not

187
00:12:24.000 --> 00:12:28.000
actually subtracting these things right now.

188
00:12:28.000 --> 00:12:32.000
DamageAmount 0, DamageToApply 0.

189
00:12:32.000 --> 00:12:36.000
OK so that's just probably because in the projectile header file,

190
00:12:36.000 --> 00:12:40.000
where we had ProjectileDamage, we never actually gave that a sensible default, and this is the importance

191
00:12:40.000 --> 00:12:44.000
of giving it a sensible default. So ProjectileDamage = 20f. Let's recompile!

192
00:12:44.000 --> 00:12:48.000
And when we recompile, why don't we just go ahead and have a look

193
00:12:48.000 --> 00:12:52.000
at the Projectile and make sure... Well let's just see where this is going to

194
00:12:52.000 --> 00:12:56.000
be. It should be on the projectile, we should have (EditDefaultsOnly). Yep! So let's

195
00:12:56.000 --> 00:13:00.000
make sure that, on the projectile, when we find the damage that this actually comes in as 20.

196
00:13:00.000 --> 00:13:04.000
Now it hasn't there. What's the problem? It's probably something simple like

197
00:13:04.000 --> 00:13:08.000
the f suffix on Projectile.h. So that's because I've said

198
00:13:08.000 --> 00:13:12.000
20f without a 20 decimal. So I need to put the decimal

199
00:13:12.000 --> 00:13:16.000
in there. OK let's just recompile. And what we're hoping will happen here, on the

200
00:13:16.000 --> 00:13:20.000
Projectile Blueprint, is that you will see here it jumped from a default of

201
00:13:20.000 --> 00:13:24.000
0, which is why 0 damage was being dealt, which is the default if you don't specify

202
00:13:24.000 --> 00:13:28.000
a value up to 20, which it has there. Now the designer can take it from there and improve the values.

203
00:13:28.000 --> 00:13:32.000
So let's see if this is doing what we want!

204
00:13:32.000 --> 00:13:36.000
It's going to go F8, into the output log.

205
00:13:36.000 --> 00:13:40.000
Yeah! So we're getting a DamageAmount of 20

206
00:13:40.000 --> 00:13:44.000
coming through, so the message is being called, which is good news, but the DamageToApply is coming

207
00:13:44.000 --> 00:13:48.000
out as clamped to 0. So what is wrong with the way we're doing DamageTo

208
00:13:48.000 --> 00:13:52.000
Apply? And, in this case, it's not because there's a problem with the value, actually, it's because I'm

209
00:13:52.000 --> 00:13:56.000
using the wrong format operator. It should be %i for integers, and

210
00:13:56.000 --> 00:14:00.000
you will not show a floating point properly, it will not make the conversion

211
00:14:00.000 --> 00:14:04.000
for us. So we have to be very explicit about what types we are expecting

212
00:14:04.000 --> 00:14:08.000
here. So we're saying, DamageAmount=%f, DamageToApply=%i.

213
00:14:08.000 --> 00:14:12.000
I wanted to show you that, because you can believe what you see in the logs sometimes, but, actually,

214
00:14:12.000 --> 00:14:16.000
what you're seeing in the logs is wrong. I should see 20 for both values here, because there is

215
00:14:16.000 --> 00:14:20.000
no clamping to be done. That's good! So we have the fundamentals of

216
00:14:20.000 --> 00:14:24.000
the damage system in place now, which is great news! To finish

217
00:14:24.000 --> 00:14:28.000
that damage system off all we have to do is, when we

218
00:14:28.000 --> 00:14:32.000
get this damage, we simply have to say that the CurrentHealth

219
00:14:32.000 --> 00:14:36.000
-= DamageToApply, like so.

220
00:14:36.000 --> 00:14:40.000
And then, what I'm finally going to do is just use this log entry to say

221
00:14:40.000 --> 00:14:44.000
if the (CurrentHealth) is lower than 0

222
00:14:44.000 --> 00:14:48.000
or less than or equal to 0, not that it should ever get there,

223
00:14:48.000 --> 00:14:52.000
then we're going to log out that the tank is dead. So instead of all

224
00:14:52.000 --> 00:14:56.000
that stuff, I'm just going to simply say tank died. We could say

225
00:14:56.000 --> 00:15:00.000
which tank, if we wanted, by getting names and things, but for now, this is perfectly OK.

226
00:15:00.000 --> 00:15:04.000
And that's it, this is a very simple and very

227
00:15:04.000 --> 00:15:08.000
standard damage piece of code. So let's just

228
00:15:08.000 --> 00:15:12.000
make sure that that works, by compiling, and we'll play the game, we'll

229
00:15:12.000 --> 00:15:16.000
inspect my tank. On my tank we should be able to see the CurrentHealth value

230
00:15:16.000 --> 00:15:20.000
decrease from 100 down to 0, and eventually we should get a log entry to say

231
00:15:20.000 --> 00:15:24.000
that my tank is dead. So I'm going to F8 to depossess, inspect my

232
00:15:24.000 --> 00:15:28.000
tank, go to the Details, then have a look at the tank, and find the Current Health.

233
00:15:28.000 --> 00:15:32.000
If you see 80 there, that's looking good! Sixty as it gets hit again!

234
00:15:32.000 --> 00:15:36.000
Forty as it gets hit again! Twenty as it gets hit again!

235
00:15:36.000 --> 00:15:40.000
It missed that time, hit me the final time,

236
00:15:40.000 --> 00:15:44.000
and tank died, and when tank dies, we need to do some other things, which we'll

237
00:15:44.000 --> 00:15:47.566
cover in the next lecture!


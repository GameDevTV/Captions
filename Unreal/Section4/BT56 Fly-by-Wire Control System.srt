<<<<<<< HEAD:Unreal/Section4/BT56 Fly-by-Wire Control System.srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000


2
00:00:04.000 --> 00:00:08.000
So welcome to Fly-by-Wire Control System!

3
00:00:08.000 --> 00:00:11.266
Let's just dive right in and find out what this is all about!

4
00:00:11.266 --> 00:00:15.266
So back to our trusted question. what's the least fun thing about this game right now?

5
00:00:15.266 --> 00:00:19.266
It's probably not the crazy physics. Think about Goat Simulator. that actually thrives

6
00:00:19.266 --> 00:00:23.266
on crazy physics. so does. what's it called... Who's Your Daddy

7
00:00:23.266 --> 00:00:27.266
and games like that. You don't necessarily have to get your game finished and polished.

8
00:00:27.266 --> 00:00:31.266
in order for it to be highly successful. but it does need to stay fun. So I think

9
00:00:31.266 --> 00:00:35.266
the thing that needs dealing with now is two birds in one stone. Firstly.

10
00:00:35.266 --> 00:00:39.266
I don't necessarily want to have to drive my tank with the Shoulder buttons

11
00:00:39.266 --> 00:00:43.266
and Triggers. Interesting and direct as it is. I want to add the

12
00:00:43.266 --> 00:00:47.266
ability to use the Left Thumb-stick on the controller. for example. in

13
00:00:47.266 --> 00:00:51.266
order to drive the tank and possibly the standard W. S. A. D key

14
00:00:51.266 --> 00:00:55.266
combination. And in order to do that. we're going to need to introduce a new

15
00:00:55.266 --> 00:00:59.266
layer of controller. Fly-by-Wire layer. that turns our intentions

16
00:00:59.266 --> 00:01:03.266
into actual dry track commands. Furthermore. we're

17
00:01:03.266 --> 00:01:07.266
going to need that in order for the other tanks. the enemy tanks. to be able to be driven by

18
00:01:07.266 --> 00:01:11.266
AI. because the AI will not be able to directly

19
00:01:11.266 --> 00:01:15.266
drive these tracks in the way that I'm kind of naturally doing

20
00:01:15.266 --> 00:01:19.266
now. by choosing left and right and the appropriate

21
00:01:19.266 --> 00:01:23.266
mix of throttles; the AI's not going to be able to do that without some help. So let me explain

22
00:01:23.266 --> 00:01:27.266
this in a slide for you. what I plan to do. We start off with a

23
00:01:27.266 --> 00:01:31.266
Human or AI Intention. and the AI Intention may be to

24
00:01:31.266 --> 00:01:35.266
move forward or to turn left or right or whatever. and the Human Intention would be

25
00:01:35.266 --> 00:01:39.266
very similar. Now the things that you can do very specifically

26
00:01:39.266 --> 00:01:43.266
is. you can ask to go clockwise at a speed between -1 and +1.

27
00:01:43.266 --> 00:01:47.266
where +1 clockwise is clockwise as fast as you can go. where a value of

28
00:01:47.266 --> 00:01:51.266
0 coming out of this layer is do nothing. and a value of -1 is

29
00:01:51.266 --> 00:01:55.266
go anti-clockwise. as fast as you can go. And the other thing you could do

30
00:01:55.266 --> 00:01:59.266
is. you could say I want to go Forward. on the same basis or. of course. backwards.

31
00:01:59.266 --> 00:02:03.266
So how does that relate to a controller? There's an Xbox

32
00:02:03.266 --> 00:02:07.266
controller for you. Well if you want to go forward. you could take the Left Thumb-stick. for example.

33
00:02:07.266 --> 00:02:11.266
and you could push Forward in order to go forward at full speed and Back to go backwards. Pretty

34
00:02:11.266 --> 00:02:15.266
simple! If you want to rotate Clockwise. that could be interpreted as

35
00:02:15.266 --> 00:02:19.266
moving the stick left and right. and. of course. there could be any mix

36
00:02:19.266 --> 00:02:23.266
of those two. I could say I want to go mainly forward but turn right a little bit. as I do so.

37
00:02:23.266 --> 00:02:27.266
etc. So that would feel. I think. very natural. that control system. and

38
00:02:27.266 --> 00:02:31.266
it's also a control system. that if the AI was to put its robotic

39
00:02:31.266 --> 00:02:35.266
hands on this controller it would actually be able to control the tank too. because

40
00:02:35.266 --> 00:02:39.266
it's an API that the AI could use. so that's the clever

41
00:02:39.266 --> 00:02:43.266
thing about abstracting the control like this. So in order to make this

42
00:02:43.266 --> 00:02:47.266
work we need a Fly-by-Wire layer. We're going to call it a Tank Movement Component. we're going to make

43
00:02:47.266 --> 00:02:51.266
that in a bit. But it's a fly by wire layer. what that means in an

44
00:02:51.266 --> 00:02:55.266
aircraft. Fly-byWire means that you don't directly control the control surfaces

45
00:02:55.266 --> 00:02:59.266
anymore. but you put a control input in and the Fly-by-Wire system

46
00:02:59.266 --> 00:03:03.266
works out what your intention is. so pulling back on the stick as I intend to pitch

47
00:03:03.266 --> 00:03:07.266
upwards; and then it does what it needs to do with the control systems. in order

48
00:03:07.266 --> 00:03:11.266
to make that intention come true and that's what's happening with this Fly-by-

49
00:03:11.266 --> 00:03:15.266
Wire system here. How does it do it? Well it's very simple actually. it only needs

50
00:03:15.266 --> 00:03:19.266
to spit out two values right. +1 and -1 to the Left Track

51
00:03:19.266 --> 00:03:23.266
and +1 to -1 to the Right Track. That's all it can do!

52
00:03:23.266 --> 00:03:27.266
And by organizing things like this. the cool thing is we can

53
00:03:27.266 --> 00:03:31.266
be sure that the AI also has exactly the same

54
00:03:31.266 --> 00:03:35.266
controls as we do. It's literally like it's a robot holding the controller.

55
00:03:35.266 --> 00:03:39.266
and in a lot of games. and including in Unreal if we're not careful. you will

56
00:03:39.266 --> 00:03:43.266
find that the AI moves very differently to the human players. in some games.

57
00:03:43.266 --> 00:03:47.266
What can tend to happen is that the AI may steer the tank kinematically.

58
00:03:47.266 --> 00:03:51.266
for example. it may just move it's position without any respect for the physics.

59
00:03:51.266 --> 00:03:55.266
so we don't want that. and if we just use Unreal's pathfinding and AI out of

60
00:03:55.266 --> 00:03:59.266
the box that's what would happen. But we want to restrict the AI to the

61
00:03:59.266 --> 00:04:03.266
same control system and the same type of tank as us. it makes the game much more fair. much more fun

62
00:04:03.266 --> 00:04:07.266
and it's a very useful technique to know about. But I want to go one step further.

63
00:04:07.266 --> 00:04:11.266
because I'm ambitious with this. and I want to make sure that we can mix in

64
00:04:11.266 --> 00:04:15.266
our control inputs from the Right and Left

65
00:04:15.266 --> 00:04:19.266
Shoulder buttons and Triggers. Now I'm not showing all of the lines. because that would just mess up the

66
00:04:19.266 --> 00:04:23.266
diagram. but the point is that I could choose to control the tank by pushing.

67
00:04:23.266 --> 00:04:27.266
using the Left Thumb-Stick. or I could immediately let go of the Left

68
00:04:27.266 --> 00:04:31.266
Thumb-Stick and start using the Shoulder Buttons stroke Triggers and

69
00:04:31.266 --> 00:04:35.266
either way the movement would work on my player tank. The AI.

70
00:04:35.266 --> 00:04:39.266
of course. is constrained to talking by the Fly-by-Wire system. So we're going to

71
00:04:39.266 --> 00:04:43.266
end up with a Jewel Control Mapping. one that goes into the Fly-by-Wire system from the Left Thumb-Stick

72
00:04:43.266 --> 00:04:47.266
and another control mapping. which we already have. which goes from all the Shoulder buttons

73
00:04:47.266 --> 00:04:51.266
and triggers directly into the tracks. And we're going to show how to make sure

74
00:04:51.266 --> 00:04:55.266
whether we can mix these things. without doubling up. to make sure that if you say pull both

75
00:04:55.266 --> 00:04:59.266
triggers in for maximum forward speed. and then. push the

76
00:04:59.266 --> 00:05:03.266
left stick forward what would happen then? Well it shouldn't be going faster than its maximum speed. so we'll

77
00:05:03.266 --> 00:05:07.266
learn all these tricks. which will allow you to make games where you have very rich

78
00:05:07.266 --> 00:05:11.266
control systems. where you can allow the player to have some

79
00:05:11.266 --> 00:05:15.266
freedom to do things in more than one way. even at the same time. So I hope that sounds

80
00:05:15.266 --> 00:05:19.266
exciting for you. so that's the idea! Alright. so for the rest of this video

81
00:05:19.266 --> 00:05:23.266
we're just going to talk about this C++ class and what it's going to be based on. because we need to

82
00:05:23.266 --> 00:05:27.266
think a little bit carefully about what we're going to base our TankMovement

83
00:05:27.266 --> 00:05:31.266
Component on. So we are going to create a new C++ class.

84
00:05:31.266 --> 00:05:35.266
and it isn't going to be any of the standard ones in the list. I'm afraid. because there isn't

85
00:05:35.266 --> 00:05:39.266
anything that's quite right. So we're going to go to Show All Classes.

86
00:05:39.266 --> 00:05:43.266
Now. how would you find this the first time for yourself? Well you want a Movement Component. so you might want to

87
00:05:43.266 --> 00:05:47.266
start typing that. "movement" and you get a whole bunch of stuff! And you can see

88
00:05:47.266 --> 00:05:51.266
the hierarchy here. it's the top of this list we want. the Actor Movement Components.

89
00:05:51.266 --> 00:05:55.266
So an ActorComponent clearly isn't enough. just adding an empty component.

90
00:05:55.266 --> 00:05:59.266
A MovementComponent. well what does that do for us? It's "an abstract

91
00:05:59.266 --> 00:06:03.266
component class that defines functionality for moving" primitive components every tick.

92
00:06:03.266 --> 00:06:07.266
OK that's fine! It's not quite enough. so

93
00:06:07.266 --> 00:06:11.266
let's keep going. NavMovement! OK that defines functionality of the MovementComponent

94
00:06:11.266 --> 00:06:15.266
that moves any agent that may be involved in AI pathfinding. So

95
00:06:15.266 --> 00:06:19.266
what is AI pathfinding? It's artificial intelligence agents in

96
00:06:19.266 --> 00:06:23.266
the game. finding a path. finding a path from where they are to you.

97
00:06:23.266 --> 00:06:27.266
So we've got a big old hill in the middle of our landscape right? Let's just take a look at it!

98
00:06:27.266 --> 00:06:31.266
That lump in the middle here. and I hope you've got some sort of obstruction

99
00:06:31.266 --> 00:06:35.266
in your landscape. it makes it more fun. If you haven't add something like this hill.

100
00:06:35.266 --> 00:06:39.266
And what the idea is. is if an AI tank was to start the other side of the hill from us.

101
00:06:39.266 --> 00:06:43.266
it will work its way around the hill. if the hill is seen as an obstruction.

102
00:06:43.266 --> 00:06:47.266
So we want to be doing pathfinding. and this can be done automatically by

103
00:06:47.266 --> 00:06:51.266
Unreal and it's very cool! Alright. so that is

104
00:06:51.266 --> 00:06:55.266
the reason that we're going at least that deep into the hierarchy. Let's go back.

105
00:06:55.266 --> 00:06:59.266
let's type "movement. and let's keep

106
00:06:59.266 --> 00:07:03.266
going. Now is NavMove... Blah! I'll put my teeth back

107
00:07:03.266 --> 00:07:07.266
in and try again! Is NavMovementComponent enough. or do we need a PawnMovementComponent?

108
00:07:07.266 --> 00:07:11.266
"It also provides ways to accumulate and read directional input in a generic way".

109
00:07:11.266 --> 00:07:15.266
Add Input Vector. Consume Input Vector possibly. We could possibly

110
00:07:15.266 --> 00:07:19.266
need as much as a PawnMovementComponent. but why don't we start with the simplest

111
00:07:19.266 --> 00:07:23.266
thing we can. If we're going to allow the AI tanks to do pathfinding

112
00:07:23.266 --> 00:07:27.266
the simplest movement component that we can use. bearing in mind

113
00:07:27.266 --> 00:07:31.266
that every time we go down this tree we get more stuff added on more complexity

114
00:07:31.266 --> 00:07:35.266
added on. is going to be a NavMovementComponent. And

115
00:07:35.266 --> 00:07:39.266
that will come with the pathfinding tools that we need. and then they're going to butcher

116
00:07:39.266 --> 00:07:43.266
in order to make these AI tanks behave. So. a lot

117
00:07:43.266 --> 00:07:47.266
of talking to tell you to ultimately make yourself a new class.

118
00:07:47.266 --> 00:07:51.266
based on the NavMovementComponent. and let's call it Tank

119
00:07:51.266 --> 00:07:55.266
MovementComponent.

120
00:07:55.266 --> 00:07:59.266
There we go! Alright. so hopefully you understand the reasoning for that. We're going to be doing a

121
00:07:59.266 --> 00:08:03.266
lot more work inside the TankMovementComponent. of course. once

122
00:08:03.266 --> 00:08:07.266
we get into the next video. where we will start to setup the actual Fly-by-Wire system.

123
00:08:07.266 --> 00:08:11.266
But for now. your job... We don't need a challenge slide in this video. it's just a lot

124
00:08:11.266 --> 00:08:15.266
of explanation of what's to come. But your job is just to make sure that you have this

125
00:08:15.266 --> 00:08:19.266
TankMovementComponent. like so. and that it's based on a

126
00:08:19.266 --> 00:08:23.266
NavMovementComponent. and that your code still compiles

127
00:08:23.266 --> 00:08:27.266
and that your game still plays as it used to. Obviously

128
00:08:27.266 --> 00:08:31.266
there's going to be no difference in behavior. because we've just added an empty C++ class.

129
00:08:31.266 --> 00:08:35.266
So congratulations on watching this video. I hope you've enjoyed it! I hope this

130
00:08:35.266 --> 00:08:39.266
Fly-by-Wire malarkey makes sense. That is an overview

131
00:08:39.266 --> 00:08:43.266
of what we're doing. I'll just... Ah no. I'll leave the controller on! I'll leave that on the screen for you. so

132
00:08:43.266 --> 00:08:47.266
you can digest what we're doing and why we're doing it. and I will see you

133
00:08:47.266 --> 00:08:50.199
in the next video!

=======

1
00:00:00,000 --> 00:00:04,000


2
00:00:04,000 --> 00:00:08,000
So welcome to Fly-by-Wire Control System!

3
00:00:08,000 --> 00:00:11,266
Let's just dive right in and find out what this is all about!

4
00:00:11,266 --> 00:00:15,266
So back to our trusted question, what's the least fun thing about this game right now?

5
00:00:15,266 --> 00:00:19,266
It's probably not the crazy physics. Think about Goat Simulator, that actually thrives

6
00:00:19,266 --> 00:00:23,266
on crazy physics, so does, what's it called... Who's Your Daddy

7
00:00:23,266 --> 00:00:27,266
and games like that. You don't necessarily have to get your game finished and polished,

8
00:00:27,266 --> 00:00:31,266
in order for it to be highly successful, but it does need to stay fun. So I think

9
00:00:31,266 --> 00:00:35,266
the thing that needs dealing with now is two birds in one stone. Firstly,

10
00:00:35,266 --> 00:00:39,266
I don't necessarily want to have to drive my tank with the Shoulder buttons

11
00:00:39,266 --> 00:00:43,266
and Triggers. Interesting and direct as it is, I want to add the

12
00:00:43,266 --> 00:00:47,266
ability to use the Left Thumb-stick on the controller, for example, in

13
00:00:47,266 --> 00:00:51,266
order to drive the tank and possibly the standard W, S, A, D key

14
00:00:51,266 --> 00:00:55,266
combination. And in order to do that, we're going to need to introduce a new

15
00:00:55,266 --> 00:00:59,266
layer of controller, Fly-by-Wire layer, that turns our intentions

16
00:00:59,266 --> 00:01:03,266
into actual dry track commands. Furthermore, we're

17
00:01:03,266 --> 00:01:07,266
going to need that in order for the other tanks, the enemy tanks, to be able to be driven by

18
00:01:07,266 --> 00:01:11,266
AI, because the AI will not be able to directly

19
00:01:11,266 --> 00:01:15,266
drive these tracks in the way that I'm kind of naturally doing

20
00:01:15,266 --> 00:01:19,266
now, by choosing left and right and the appropriate

21
00:01:19,266 --> 00:01:23,266
mix of throttles; the AI's not going to be able to do that without some help. So let me explain

22
00:01:23,266 --> 00:01:27,266
this in a slide for you, what I plan to do. We start off with a

23
00:01:27,266 --> 00:01:31,266
Human or AI Intention, and the AI Intention may be to

24
00:01:31,266 --> 00:01:35,266
move forward or to turn left or right or whatever, and the Human Intention would be

25
00:01:35,266 --> 00:01:39,266
very similar. Now the things that you can do very specifically

26
00:01:39,266 --> 00:01:43,266
is, you can ask to go clockwise at a speed between -1 and +1,

27
00:01:43,266 --> 00:01:47,266
where +1 clockwise is clockwise as fast as you can go, where a value of

28
00:01:47,266 --> 00:01:51,266
0 coming out of this layer is do nothing, and a value of -1 is

29
00:01:51,266 --> 00:01:55,266
go anti-clockwise, as fast as you can go. And the other thing you could do

30
00:01:55,266 --> 00:01:59,266
is, you could say I want to go Forward, on the same basis or, of course, backwards.

31
00:01:59,266 --> 00:02:03,266
So how does that relate to a controller? There's an Xbox

32
00:02:03,266 --> 00:02:07,266
controller for you. Well if you want to go forward, you could take the Left Thumb-stick, for example,

33
00:02:07,266 --> 00:02:11,266
and you could push Forward in order to go forward at full speed and Back to go backwards. Pretty

34
00:02:11,266 --> 00:02:15,266
simple! If you want to rotate Clockwise, that could be interpreted as

35
00:02:15,266 --> 00:02:19,266
moving the stick left and right, and, of course, there could be any mix

36
00:02:19,266 --> 00:02:23,266
of those two. I could say I want to go mainly forward but turn right a little bit, as I do so,

37
00:02:23,266 --> 00:02:27,266
etc. So that would feel, I think, very natural, that control system, and

38
00:02:27,266 --> 00:02:31,266
it's also a control system, that if the AI was to put its robotic

39
00:02:31,266 --> 00:02:35,266
hands on this controller it would actually be able to control the tank too, because

40
00:02:35,266 --> 00:02:39,266
it's an API that the AI could use, so that's the clever

41
00:02:39,266 --> 00:02:43,266
thing about abstracting the control like this. So in order to make this

42
00:02:43,266 --> 00:02:47,266
work we need a Fly-by-Wire layer. We're going to call it a Tank Movement Component, we're going to make

43
00:02:47,266 --> 00:02:51,266
that in a bit. But it's a fly by wire layer, what that means in an

44
00:02:51,266 --> 00:02:55,266
aircraft, Fly-byWire means that you don't directly control the control surfaces

45
00:02:55,266 --> 00:02:59,266
anymore, but you put a control input in and the Fly-by-Wire system

46
00:02:59,266 --> 00:03:03,266
works out what your intention is, so pulling back on the stick as I intend to pitch

47
00:03:03,266 --> 00:03:07,266
upwards; and then it does what it needs to do with the control systems, in order

48
00:03:07,266 --> 00:03:11,266
to make that intention come true and that's what's happening with this Fly-by-

49
00:03:11,266 --> 00:03:15,266
Wire system here. How does it do it? Well it's very simple actually, it only needs

50
00:03:15,266 --> 00:03:19,266
to spit out two values right, +1 and -1 to the Left Track

51
00:03:19,266 --> 00:03:23,266
and +1 to -1 to the Right Track. That's all it can do!

52
00:03:23,266 --> 00:03:27,266
And by organizing things like this, the cool thing is we can

53
00:03:27,266 --> 00:03:31,266
be sure that the AI also has exactly the same

54
00:03:31,266 --> 00:03:35,266
controls as we do. It's literally like it's a robot holding the controller,

55
00:03:35,266 --> 00:03:39,266
and in a lot of games, and including in Unreal if we're not careful, you will

56
00:03:39,266 --> 00:03:43,266
find that the AI moves very differently to the human players, in some games.

57
00:03:43,266 --> 00:03:47,266
What can tend to happen is that the AI may steer the tank kinematically,

58
00:03:47,266 --> 00:03:51,266
for example, it may just move it's position without any respect for the physics,

59
00:03:51,266 --> 00:03:55,266
so we don't want that, and if we just use Unreal's pathfinding and AI out of

60
00:03:55,266 --> 00:03:59,266
the box that's what would happen. But we want to restrict the AI to the

61
00:03:59,266 --> 00:04:03,266
same control system and the same type of tank as us, it makes the game much more fair, much more fun

62
00:04:03,266 --> 00:04:07,266
and it's a very useful technique to know about. But I want to go one step further,

63
00:04:07,266 --> 00:04:11,266
because I'm ambitious with this, and I want to make sure that we can mix in

64
00:04:11,266 --> 00:04:15,266
our control inputs from the Right and Left

65
00:04:15,266 --> 00:04:19,266
Shoulder buttons and Triggers. Now I'm not showing all of the lines, because that would just mess up the

66
00:04:19,266 --> 00:04:23,266
diagram, but the point is that I could choose to control the tank by pushing,

67
00:04:23,266 --> 00:04:27,266
using the Left Thumb-Stick, or I could immediately let go of the Left

68
00:04:27,266 --> 00:04:31,266
Thumb-Stick and start using the Shoulder Buttons stroke Triggers and

69
00:04:31,266 --> 00:04:35,266
either way the movement would work on my player tank. The AI,

70
00:04:35,266 --> 00:04:39,266
of course, is constrained to talking by the Fly-by-Wire system. So we're going to

71
00:04:39,266 --> 00:04:43,266
end up with a Jewel Control Mapping, one that goes into the Fly-by-Wire system from the Left Thumb-Stick

72
00:04:43,266 --> 00:04:47,266
and another control mapping, which we already have, which goes from all the Shoulder buttons

73
00:04:47,266 --> 00:04:51,266
and triggers directly into the tracks. And we're going to show how to make sure

74
00:04:51,266 --> 00:04:55,266
whether we can mix these things, without doubling up, to make sure that if you say pull both

75
00:04:55,266 --> 00:04:59,266
triggers in for maximum forward speed, and then, push the

76
00:04:59,266 --> 00:05:03,266
left stick forward what would happen then? Well it shouldn't be going faster than its maximum speed, so we'll

77
00:05:03,266 --> 00:05:07,266
learn all these tricks, which will allow you to make games where you have very rich

78
00:05:07,266 --> 00:05:11,266
control systems, where you can allow the player to have some

79
00:05:11,266 --> 00:05:15,266
freedom to do things in more than one way, even at the same time. So I hope that sounds

80
00:05:15,266 --> 00:05:19,266
exciting for you, so that's the idea! Alright, so for the rest of this video

81
00:05:19,266 --> 00:05:23,266
we're just going to talk about this C++ class and what it's going to be based on, because we need to

82
00:05:23,266 --> 00:05:27,266
think a little bit carefully about what we're going to base our TankMovement

83
00:05:27,266 --> 00:05:31,266
Component on. So we are going to create a new C++ class,

84
00:05:31,266 --> 00:05:35,266
and it isn't going to be any of the standard ones in the list, I'm afraid, because there isn't

85
00:05:35,266 --> 00:05:39,266
anything that's quite right. So we're going to go to Show All Classes.

86
00:05:39,266 --> 00:05:43,266
Now, how would you find this the first time for yourself? Well you want a Movement Component, so you might want to

87
00:05:43,266 --> 00:05:47,266
start typing that, "movement" and you get a whole bunch of stuff! And you can see

88
00:05:47,266 --> 00:05:51,266
the hierarchy here, it's the top of this list we want, the Actor Movement Components.

89
00:05:51,266 --> 00:05:55,266
So an ActorComponent clearly isn't enough, just adding an empty component.

90
00:05:55,266 --> 00:05:59,266
A MovementComponent, well what does that do for us? It's "an abstract

91
00:05:59,266 --> 00:06:03,266
component class that defines functionality for moving" primitive components every tick.

92
00:06:03,266 --> 00:06:07,266
OK that's fine! It's not quite enough, so

93
00:06:07,266 --> 00:06:11,266
let's keep going. NavMovement! OK that defines functionality of the MovementComponent

94
00:06:11,266 --> 00:06:15,266
that moves any agent that may be involved in AI pathfinding. So

95
00:06:15,266 --> 00:06:19,266
what is AI pathfinding? It's artificial intelligence agents in

96
00:06:19,266 --> 00:06:23,266
the game, finding a path, finding a path from where they are to you.

97
00:06:23,266 --> 00:06:27,266
So we've got a big old hill in the middle of our landscape right? Let's just take a look at it!

98
00:06:27,266 --> 00:06:31,266
That lump in the middle here, and I hope you've got some sort of obstruction

99
00:06:31,266 --> 00:06:35,266
in your landscape, it makes it more fun. If you haven't add something like this hill.

100
00:06:35,266 --> 00:06:39,266
And what the idea is, is if an AI tank was to start the other side of the hill from us,

101
00:06:39,266 --> 00:06:43,266
it will work its way around the hill, if the hill is seen as an obstruction.

102
00:06:43,266 --> 00:06:47,266
So we want to be doing pathfinding, and this can be done automatically by

103
00:06:47,266 --> 00:06:51,266
Unreal and it's very cool! Alright, so that is

104
00:06:51,266 --> 00:06:55,266
the reason that we're going at least that deep into the hierarchy. Let's go back,

105
00:06:55,266 --> 00:06:59,266
let's type "movement, and let's keep

106
00:06:59,266 --> 00:07:03,266
going. Now is NavMove... Blah! I'll put my teeth back

107
00:07:03,266 --> 00:07:07,266
in and try again! Is NavMovementComponent enough, or do we need a PawnMovementComponent?

108
00:07:07,266 --> 00:07:11,266
"It also provides ways to accumulate and read directional input in a generic way".

109
00:07:11,266 --> 00:07:15,266
Add Input Vector, Consume Input Vector possibly. We could possibly

110
00:07:15,266 --> 00:07:19,266
need as much as a PawnMovementComponent, but why don't we start with the simplest

111
00:07:19,266 --> 00:07:23,266
thing we can. If we're going to allow the AI tanks to do pathfinding

112
00:07:23,266 --> 00:07:27,266
the simplest movement component that we can use, bearing in mind

113
00:07:27,266 --> 00:07:31,266
that every time we go down this tree we get more stuff added on more complexity

114
00:07:31,266 --> 00:07:35,266
added on, is going to be a NavMovementComponent. And

115
00:07:35,266 --> 00:07:39,266
that will come with the pathfinding tools that we need, and then they're going to butcher

116
00:07:39,266 --> 00:07:43,266
in order to make these AI tanks behave. So, a lot

117
00:07:43,266 --> 00:07:47,266
of talking to tell you to ultimately make yourself a new class,

118
00:07:47,266 --> 00:07:51,266
based on the NavMovementComponent, and let's call it Tank

119
00:07:51,266 --> 00:07:55,266
MovementComponent.

120
00:07:55,266 --> 00:07:59,266
There we go! Alright, so hopefully you understand the reasoning for that. We're going to be doing a

121
00:07:59,266 --> 00:08:03,266
lot more work inside the TankMovementComponent, of course, once

122
00:08:03,266 --> 00:08:07,266
we get into the next video, where we will start to setup the actual Fly-by-Wire system.

123
00:08:07,266 --> 00:08:11,266
But for now, your job... We don't need a challenge slide in this video, it's just a lot

124
00:08:11,266 --> 00:08:15,266
of explanation of what's to come. But your job is just to make sure that you have this

125
00:08:15,266 --> 00:08:19,266
TankMovementComponent, like so, and that it's based on a

126
00:08:19,266 --> 00:08:23,266
NavMovementComponent, and that your code still compiles

127
00:08:23,266 --> 00:08:27,266
and that your game still plays as it used to. Obviously

128
00:08:27,266 --> 00:08:31,266
there's going to be no difference in behavior, because we've just added an empty C++ class.

129
00:08:31,266 --> 00:08:35,266
So congratulations on watching this video, I hope you've enjoyed it! I hope this

130
00:08:35,266 --> 00:08:39,266
Fly-by-Wire malarkey makes sense. That is an overview

131
00:08:39,266 --> 00:08:43,266
of what we're doing. I'll just... Ah no, I'll leave the controller on! I'll leave that on the screen for you, so

132
00:08:43,266 --> 00:08:47,266
you can digest what we're doing and why we're doing it, and I will see you

133
00:08:47,266 --> 00:08:50,199
in the next video!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT56 Fly-by-Wire Control System.srt

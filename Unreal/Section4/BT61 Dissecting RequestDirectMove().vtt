WEBVTT

1
00:00:00.000 --> 00:00:04.000
So everybody, welcome to

2
00:00:04.000 --> 00:00:08.000
Dissecting RequestDirectMove()! What

3
00:00:08.000 --> 00:00:12.000
we're going to be doing here is actually reaching into the engine code, looking at

4
00:00:12.000 --> 00:00:16.000
the RequestDirectMove() method, and then, getting logs

5
00:00:16.000 --> 00:00:20.000
of these AI tanks, and laying them out

6
00:00:20.000 --> 00:00:24.000
on the terrain so that we can see where our AI tanks are trying to go. It's

7
00:00:24.000 --> 00:00:28.000
the stage before we actually make these AI tanks move, so this is going

8
00:00:28.000 --> 00:00:29.533
to be fun. Let's go and get it done!

9
00:00:29.533 --> 00:00:33.533
Hey guys, so with reference to the diagram we built in the last video,

10
00:00:33.533 --> 00:00:37.533
we have the Nav Mesh in place, we want to go into our Tank AI

11
00:00:37.533 --> 00:00:41.533
Controller, as a starting point, we're going to follow the arrows left to right, and we're going to go

12
00:00:41.533 --> 00:00:45.533
and use this MoveToActor() method, that will be right there for us, because we're inheriting from

13
00:00:45.533 --> 00:00:49.533
AI Controller. So into the Tank AI Controller then,

14
00:00:49.533 --> 00:00:53.533
into the .cpp file! We already have a TODO that says "Move towards the player". I'm going to get rid of the

15
00:00:53.533 --> 00:00:57.533
word TODO, under the tick method, and I am going to go ahead and say

16
00:00:57.533 --> 00:01:01.533
MoveToActor() and I'm going to look at the signature of what comes up. [Laughs]

17
00:01:01.533 --> 00:01:05.533
When it comes up, good old VisualStudio is still busy searching through

18
00:01:05.533 --> 00:01:09.533
the 3, 4, 5 I'm not sure how many million lines of code

19
00:01:09.533 --> 00:01:13.533
that is in the engine. So that is the dark side of having a large engine like this.

20
00:01:13.533 --> 00:01:17.533
But anyway, in a moment this will come up. Here we go! it wants a pointer to an actor. Well we have one, it's

21
00:01:17.533 --> 00:01:21.533
called the PlayerTank. And it also wants a whole bunch of other stuff,

22
00:01:21.533 --> 00:01:25.533
including an AcceptanceRadius. Now I'm going to assume that's in centimeters, and

23
00:01:25.533 --> 00:01:29.533
that it is the distance that, when the AI tank gets that close to you it

24
00:01:29.533 --> 00:01:33.533
stops. Now we want that, we want about 100 meters away. We want the tank to, maybe a little

25
00:01:33.533 --> 00:01:37.533
less, maybe 30 meters away. We want the enemy

26
00:01:37.533 --> 00:01:41.533
tank to stop and start firing at us right, or at least just stop moving

27
00:01:41.533 --> 00:01:45.533
towards us, rather than crowding us. So I'm going to make a default AcceptanceRadius of

28
00:01:45.533 --> 00:01:49.533
30 meters, which is

29
00:01:49.533 --> 00:01:53.533
1,000 centimeters, but I don't know for sure that's in centimeters. In fact, let's

30
00:01:53.533 --> 00:01:57.533
check the documentation, I don't think it's going to be very helpful, "movetoactor

31
00:01:57.533 --> 00:02:01.533
unreal". I could use this one here. It tells us about the blueprint, but it doesn't tell you what the

32
00:02:01.533 --> 00:02:05.533
units of this AcceptanceRadius are, so that's not particularly helpful. So I'm

33
00:02:05.533 --> 00:02:09.533
going to do the following. I'm going to say "// TODO check

34
00:02:09.533 --> 00:02:13.533
radius is in" centimeters.

35
00:02:13.533 --> 00:02:17.533
I'm then going to, instead of actually just putting a value in here, I'm going to make a

36
00:02:17.533 --> 00:02:21.533
parameter which I can move in blueprint.

37
00:02:21.533 --> 00:02:25.533
AcceptanceRadius. I'm not going to worry about the rest of these parameters, this StopOnOverlap.

38
00:02:25.533 --> 00:02:29.533
Well it's default is to true, we'd want it to stop if we were to overlap

39
00:02:29.533 --> 00:02:33.533
with the AI tank. We want it to use pathfinding, this would all be a massive waste of

40
00:02:33.533 --> 00:02:37.533
time if we weren't. We probably don't want the tank to be able to strafe,

41
00:02:37.533 --> 00:02:41.533
but it doesn't really make any difference, because we're going to be forcing it to

42
00:02:41.533 --> 00:02:45.533
use our physics. And later on we're going to get rid of the ability to move sideways anyway, tanks don't

43
00:02:45.533 --> 00:02:49.533
move. So you can't strafe a tank fool. And

44
00:02:49.533 --> 00:02:53.533
the rest of it we're just going to ignore. It's all got default parameters, let's just go with the AcceptanceRadius.

45
00:02:53.533 --> 00:02:57.533
So on the tank AI Controller header file, of course, we need to make ourselves

46
00:02:57.533 --> 00:03:01.533
a private float called AcceptanceRadius, and I'm going to give it a default value

47
00:03:01.533 --> 00:03:05.533
of 3,000, which I'm going to assume is in centimeters.

48
00:03:05.533 --> 00:03:09.533
And why not say what it is? "How close can

49
00:03:09.533 --> 00:03:13.533
the AI tank get" to the player.

50
00:03:13.533 --> 00:03:17.533
Well that's it, just keep it simple. "How close can the AI tank

51
00:03:17.533 --> 00:03:21.533
get". Fantastic! So let's put the header file on the left, just for OCD purposes

52
00:03:21.533 --> 00:03:25.533
and Compile up! Now we're not going to see anything change here, because all we've done so far is

53
00:03:25.533 --> 00:03:29.533
just make this call into the Pathfinding Logic. We're not going to know that that's working,

54
00:03:29.533 --> 00:03:33.533
until we start intercepting the call into RequestDirect

55
00:03:33.533 --> 00:03:37.533
Move(), which I'm going to give you the satisfaction of doing. But I just want to check that the game still

56
00:03:37.533 --> 00:03:41.533
runs, we haven't done anything daft, and then, we can turn our attention to the right-hand

57
00:03:41.533 --> 00:03:45.533
side. So inside the TankMovementComponent.cpp

58
00:03:45.533 --> 00:03:49.533
file, we are going to need to create a

59
00:03:49.533 --> 00:03:53.533
method, which is in here somewhere. It's going to be the

60
00:03:53.533 --> 00:03:57.533
RequestDirectMove(), and of course, we'll have to declare it in the header file. We'll make it public to start

61
00:03:57.533 --> 00:04:01.533
with, but before we even start, I'm going to say "check

62
00:04:01.533 --> 00:04:05.533
best protection of this method, because we

63
00:04:05.533 --> 00:04:09.533
don't know for sure it has to be public, but let's start with public to get it working.

64
00:04:09.533 --> 00:04:13.533
And what I want you to do is go and find out what the signature of this RequestDirectMove() file is.

65
00:04:13.533 --> 00:04:17.533
Whether you're in VisualStudio or Xcode, you can go to the Engine,

66
00:04:17.533 --> 00:04:21.533
UE4, Source, Runtime, Engine, Classes,

67
00:04:21.533 --> 00:04:25.533
and I'll give you this path in your challenge slide. GameFramework and eventually you will get to

68
00:04:25.533 --> 00:04:29.533
the NavMovementComponent, which remember is what we are

69
00:04:29.533 --> 00:04:33.533
inheriting from. This is the code that we are actually inheriting from, good old open source engine!

70
00:04:33.533 --> 00:04:37.533
And in that NavMovementComponent, somewhere in this, you will find

71
00:04:37.533 --> 00:04:41.533
the RequestDirectMove() that you need. So you're diving into the engine code! Get

72
00:04:41.533 --> 00:04:45.533
RequestDirectMove() signature! Find the NaveMovementComponent.h header file. Copy the

73
00:04:45.533 --> 00:04:49.533
signature of RequestDirectMove(), override it in your TankMovementComponent.h, just like

74
00:04:49.533 --> 00:04:53.533
we override begin play. But there's no need to call Super this time, because we're completely

75
00:04:53.533 --> 00:04:57.533
replacing the functionality, as to what we do when we move, we're manually doing that.

76
00:04:57.533 --> 00:05:01.533
Log the tank name and the value of the MoveVelocity, and that is your path

77
00:05:01.533 --> 00:05:05.533
you're looking for to go and find that file. So go ahead pause the video, see if you can make this

78
00:05:05.533 --> 00:05:09.533
work now, and actually get some vector log values out that make sense, from

79
00:05:09.533 --> 00:05:13.533
AI tanks that are inside the Nav Mesh for you.

80
00:05:13.533 --> 00:05:17.533
OK

81
00:05:17.533 --> 00:05:21.533
guys, welcome back! This is exciting, I'm looking forward to this! So I'm going to do a find "Request

82
00:05:21.533 --> 00:05:25.533
Direct".

83
00:05:25.533 --> 00:05:29.533
I'm going to look in just the current document and I can't find it!

84
00:05:29.533 --> 00:05:33.533
So what have I done? I've missed an e! RequestDirectMove! There it

85
00:05:33.533 --> 00:05:37.533
is, virtual void RequestDirectMove! It's nearly exactly what we need!

86
00:05:37.533 --> 00:05:41.533
Let's go to the TankMovementComponent header file,

87
00:05:41.533 --> 00:05:45.533
under here, I'm going to put it in the public section to start with. I've already got a TODO,

88
00:05:45.533 --> 00:05:49.533
check that later; virtual void, I'm going to put the word override on the end, which makes

89
00:05:49.533 --> 00:05:53.533
the compiler check this is exactly the right signature. That's cool, so I've got that!

90
00:05:53.533 --> 00:05:57.533
Let's go into the .cpp, we need the class name in here,

91
00:05:57.533 --> 00:06:01.533
and, of course, when you do these overrides, like we've done before, we drop the

92
00:06:01.533 --> 00:06:05.533
word virtual. OK so there

93
00:06:05.533 --> 00:06:09.533
we go! Now we don't need to call Super. Let's put a reason why, "No need to call Super

94
00:06:09.533 --> 00:06:13.533
as we're replacing

95
00:06:13.533 --> 00:06:17.533
the functionality" here.

96
00:06:17.533 --> 00:06:21.533
We don't care what the functionality of this method is in the parent classes, I just care

97
00:06:21.533 --> 00:06:25.533
that the Pathfinding Logic is calling this method

98
00:06:25.533 --> 00:06:29.533
with a very useful piece of information, which is what velocity do I need the tank to

99
00:06:29.533 --> 00:06:33.533
move in this frame? That's the bit of gold I want to capture from this! So

100
00:06:33.533 --> 00:06:37.533
let's go capture it! Let's have a few things, I said we wanted the tank name, so the Tank

101
00:06:37.533 --> 00:06:41.533
Name. We're on a component here, so we need to GetOwner(), and we go through the Owner

102
00:06:41.533 --> 00:06:45.533
to the Name. It's already going to be a string, so that's done.

103
00:06:45.533 --> 00:06:49.533
We're also going to have the.. Ah, we want the MoveVelocity

104
00:06:49.533 --> 00:06:53.533
String.

105
00:06:53.533 --> 00:06:57.533
So that is just going to be the MoveVelocity

106
00:06:57.533 --> 00:07:01.533
.ToString() and that's good.

107
00:07:01.533 --> 00:07:05.533
So now let's do our UE_LOG. I really ought to setup a keyboard shortcut for this, I type if often enough.

108
00:07:05.533 --> 00:07:09.533
UE_LOG(LogTemp, Warning so it's yellow.

109
00:07:09.533 --> 00:07:13.533
Text()) so well it works. [laughs] And then, we're going to say the name of the

110
00:07:13.533 --> 00:07:17.533
tank, which is %s vectoring

111
00:07:17.533 --> 00:07:21.533
to and then another string

112
00:07:21.533 --> 00:07:25.533
and then we just say the TankName,

113
00:07:25.533 --> 00:07:29.533
and the MoveVelocityString). Remembering

114
00:07:29.533 --> 00:07:33.533
to put your stars in front, because we need to do that with strings in

115
00:07:33.533 --> 00:07:37.533
UE-LOGs. We should know that by now. And finally, I think we have the

116
00:07:37.533 --> 00:07:41.533
call that we need. Let's go ahead and see if it'll compile!

117
00:07:41.533 --> 00:07:45.533
I'll leave the code on the screen for you. That is the implementation code.

118
00:07:45.533 --> 00:07:49.533
The header file code was simply that.

119
00:07:49.533 --> 00:07:53.533
Now,

120
00:07:53.533 --> 00:07:57.533
about this... No now let's just get on with it, now that it's compiled so quickly! So ooh look at this!

121
00:07:57.533 --> 00:08:01.533
Tank_BP_569 vectoring! Let's just stop the game for a minute

122
00:08:01.533 --> 00:08:05.533
and have a little look. So it's only 569 that's vectoring

123
00:08:05.533 --> 00:08:09.533
and it's vectoring in a minus. Now this is not a normalized vector,

124
00:08:09.533 --> 00:08:13.533
and you could ignore the Z because it's value compared to the X

125
00:08:13.533 --> 00:08:17.533
and Y is tiny. So it is moving in like 700,000

126
00:08:17.533 --> 00:08:21.533
X and -700,000 X, 800,000 X coordinate,

127
00:08:21.533 --> 00:08:25.533
-400,000 Y. So in the compass terms,

128
00:08:25.533 --> 00:08:29.533
if X forward is north it's moving

129
00:08:29.533 --> 00:08:33.533
in a sort of south, southwest

130
00:08:33.533 --> 00:08:37.533
direction. So let's look from above and see if this is feasible.

131
00:08:37.533 --> 00:08:41.533
Here's positive X and north is to the right confusingly. The Player Start

132
00:08:41.533 --> 00:08:45.533
is there, so yeah that is a south southwest direction if this red arrow

133
00:08:45.533 --> 00:08:49.533
goes north, so that looks very feasible. Let's bring the other tank onto the

134
00:08:49.533 --> 00:08:53.533
play space, and let's put it say directly

135
00:08:53.533 --> 00:08:57.533
what I would call south of us. This thing should vector, pretty much directly, along the X

136
00:08:57.533 --> 00:09:01.533
axis. Let's try it! Now of course, you can't see it because

137
00:09:01.533 --> 00:09:05.533
the log is obfuscated. There's a good word! Now you've got two tanks!

138
00:09:05.533 --> 00:09:09.533
Let's check that the other one is the correct one. Yep, 183 is vectoring! Look

139
00:09:09.533 --> 00:09:13.533
perfect, 66,000 in the X direction

140
00:09:13.533 --> 00:09:17.533
and negligible in the others. Now it's got a pretty big Z, actually, on these.

141
00:09:17.533 --> 00:09:21.533
14,000 is not completely negligible, so it is trying to have a

142
00:09:21.533 --> 00:09:25.533
bit of a change in up, down, but we'll see whether that's a problem or whether it's working.

143
00:09:25.533 --> 00:09:29.533
It might just be because my tank's still up in the air, at this point, when I'm logging, and once it

144
00:09:29.533 --> 00:09:33.533
settles down, like now, that the Z yeah

145
00:09:33.533 --> 00:09:37.533
has dropped a bit. Not completely, but it does have a 3 dimensional direction, but that's OK,

146
00:09:37.533 --> 00:09:41.533
we're just going to look at the X and Y. But look, the triumph here is that if the AI

147
00:09:41.533 --> 00:09:45.533
tanks are in this Nav Mesh and we are in the Nav Mesh that we're actually getting a

148
00:09:45.533 --> 00:09:49.533
vector from them, as to the direction we should start moving. Now there's one final thing we should check here for

149
00:09:49.533 --> 00:09:53.533
fun. We should take this tank and this other AI tank

150
00:09:53.533 --> 00:09:57.533
and put it around the back of this place

151
00:09:57.533 --> 00:10:01.533
like this, say here, and then, let's put the Player Start, on the other

152
00:10:01.533 --> 00:10:05.533
side. Unless actually you just ditch the other tank out of the Nav Mesh area, just for

153
00:10:05.533 --> 00:10:09.533
simplicity. OK, so this means that this tank BP2 or better known as

154
00:10:09.533 --> 00:10:13.533
_183 is trying to get to the Player Start point, which is over here.

155
00:10:13.533 --> 00:10:17.533
Let's make it actually due north of us or due

156
00:10:17.533 --> 00:10:21.533
in the X direction of us, something like that. But the vector

157
00:10:21.533 --> 00:10:25.533
should not be that direction, it should be up here, it should be northwest,

158
00:10:25.533 --> 00:10:29.533
if you like, which should be positive X and a similar amount of negative

159
00:10:29.533 --> 00:10:33.533
Y. Let's see if that's the case! Positive

160
00:10:33.533 --> 00:10:37.533
X by 75, negative Y by hmm less than 75.

161
00:10:37.533 --> 00:10:41.533
That means it's going quite directly towards

162
00:10:41.533 --> 00:10:45.533
this hill and then it'll probably hug that hill. That's absolutely fine, but it looks about right.

163
00:10:45.533 --> 00:10:49.533
The key is it's not heading directly towards us. If I move it closer to this hill

164
00:10:49.533 --> 00:10:53.533
and further down here, this guy should now start trying to vector

165
00:10:53.533 --> 00:10:57.533
in a fairly negative Y direction, up here to get

166
00:10:57.533 --> 00:11:01.533
around the hill. Let's see! What's he doing? He's going X with

167
00:11:01.533 --> 00:11:05.533
20,000...

168
00:11:05.533 --> 00:11:09.533
You know what he's doing, I think he's trying to go around the other side of the hill! So what

169
00:11:09.533 --> 00:11:13.533
I'm going to do to just check this is, I'm going to get the Nav Mesh Bounds Volume, move it

170
00:11:13.533 --> 00:11:17.533
over the hill so it fully encompasses the hill, even if we need to make it

171
00:11:17.533 --> 00:11:21.533
bigger.

172
00:11:21.533 --> 00:11:25.533
Yeah, I'm just going to scale up my Nav Mesh

173
00:11:25.533 --> 00:11:29.533
Bounds Volume to 200 by 200.

174
00:11:29.533 --> 00:11:33.533
This is all good learning as to how this works. So it takes a little while to compute.

175
00:11:33.533 --> 00:11:37.533
There it is, perfect! Now let's say the AI

176
00:11:37.533 --> 00:11:41.533
tank is there and the Player Start position is here.

177
00:11:41.533 --> 00:11:45.533
Let's see what type of vectoring the AI tank tries to do now!

178
00:11:45.533 --> 00:11:49.533
Hey, let's look at this critically! It's 100 in the

179
00:11:49.533 --> 00:11:53.533
negative X, so it's going back this way, but more significantly, it's

180
00:11:53.533 --> 00:11:57.533
350,000 in the positive Y. So it's

181
00:11:57.533 --> 00:12:01.533
kind of going this way, probably because it's near the base of a hill and it doesn't want to

182
00:12:01.533 --> 00:12:05.533
go up that hill anymore. So we could put it somewhere else, like in this little alcove

183
00:12:05.533 --> 00:12:09.533
here. You can see from the camera roughly where it is. Let's see where it tries to vector now!

184
00:12:09.533 --> 00:12:13.533
OK and now let's look at that value. It's going -100 in the

185
00:12:13.533 --> 00:12:17.533
X, so it's going backwards a little bit, and 350,000 positive in

186
00:12:17.533 --> 00:12:21.533
the Y, so again it's probably just backing off that hill. So we're not going to really

187
00:12:21.533 --> 00:12:25.533
know if this is doing the job properly, until we have actually started making

188
00:12:25.533 --> 00:12:29.266
the move, which is going to be the subect of the next video!


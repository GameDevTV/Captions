
1
00:00:00,000 --> 00:00:04,000
So, welcome to

2
00:00:04,000 --> 00:00:08,000
Creating & Deleting Landscapes. In this video, we're going to be creating

3
00:00:08,000 --> 00:00:12,000
an Unreal project in an existing repo, which is a little bit different to what we've done

4
00:00:12,000 --> 00:00:16,000
before. We'll talk about what's good about landscapes in the Unreal Engine, straight after this

5
00:00:16,000 --> 00:00:20,000
slide. I'll show you how to add a landscape in Unreal, which is

6
00:00:20,000 --> 00:00:24,000
slightly trickier to find than you'd hope. I'll show you how to delete a landscape in Unreal.

7
00:00:24,000 --> 00:00:28,000
So, what's good about landscapes?

8
00:00:28,000 --> 00:00:32,000
Well, they use 1/6 or so of the storage of a Static Mesh.

9
00:00:32,000 --> 00:00:36,000
Another way of doing a landscape, you may think, would be to use Blender or Maya or 3D Studio or

10
00:00:36,000 --> 00:00:40,000
ZBrush or blah, to make a Static Mesh, and then, import that as a

11
00:00:40,000 --> 00:00:44,000
landscape. The problem is that a Static Mesh uses 24 to 28 bytes per

12
00:00:44,000 --> 00:00:48,000
vertex of data, whereas an Unreal landscape only uses 4. So, you

13
00:00:48,000 --> 00:00:52,000
end up with about 1/6 of the storage space, much better.

14
00:00:52,000 --> 00:00:56,000
It supports Level of Detail and level streaming, if done properly, so it can

15
00:00:56,000 --> 00:01:00,000
break the landscape up into parts and decide which of those parts to show at

16
00:01:00,000 --> 00:01:04,000
what level of detail and which to load when and which to not even try

17
00:01:04,000 --> 00:01:08,000
and render when. And we'll be talking about that in the next video, exactly with the details, but it's really good

18
00:01:08,000 --> 00:01:12,000
for this. It can support up to 8196 x 8196

19
00:01:12,000 --> 00:01:16,000
pixel heightmaps for import. Now, what's a heightmap? A heightmap is a black and white image

20
00:01:16,000 --> 00:01:20,000
that tells the system, for each part of the terrain, exactly what

21
00:01:20,000 --> 00:01:24,000
height it should be. Now, if you were to use a typical scale in Unreal of 1

22
00:01:24,000 --> 00:01:28,000
meter resolution on your terrain, then you could potentially

23
00:01:28,000 --> 00:01:32,000
specify up to 8 x 8 kilometer maps, and make

24
00:01:32,000 --> 00:01:36,000
them in an external program and then import them in to Unreal. So that's pretty cool, but it's also got

25
00:01:36,000 --> 00:01:40,000
very good built in tools for sculpting and manipulating terrain, and that's what we're going to be

26
00:01:40,000 --> 00:01:44,000
using. And the landscape or terrain system works very well with mini-maps.

27
00:01:44,000 --> 00:01:49,000
If you do want an example of an external tool that's great at making procedurally

28
00:01:49,000 --> 00:01:52,000
generated, very believable, terrains, then look at Terragen or World Machine.

29
00:01:52,000 --> 00:01:56,000
So, remembering our iterative Cycle. We're here in World.

30
00:01:56,000 --> 00:02:00,000
Then, we're going to move onto the Tank controls, Player 2, and then, back to the World. So, we're only going to

31
00:02:00,000 --> 00:02:04,000
make a first look at this world, this time. We're just going to make a very basic world,

32
00:02:04,000 --> 00:02:08,000
then get some type of a tank down and then go around and around this iterative cycle.

33
00:02:08,000 --> 00:02:12,000
OK, so let's take a look at how to do it! We need to go back a step,

34
00:02:12,000 --> 00:02:16,000
of course, because where were we? Well, I was busy adding these very boring files to Source

35
00:02:16,000 --> 00:02:20,000
Control, that were just documentation files, to show you how to use the readme. But what

36
00:02:20,000 --> 00:02:24,000
has this done on my disc? When I said Clone Stroke New, I had a

37
00:02:24,000 --> 00:02:28,000
Destination Path in here of my standard repo directory, which meant

38
00:02:28,000 --> 00:02:32,000
that SourceTree has kindly made me a directory called 04_BattleTank, which just has these

39
00:02:32,000 --> 00:02:36,000
three files in it. What we need to do now, just as we did back in Building Escape, is make

40
00:02:36,000 --> 00:02:40,000
a subdirectory that actually has our Unreal folder. And then, we need to talk about a subtlety,

41
00:02:40,000 --> 00:02:44,000
while it all loads with the .gitignore. So, let's open the Epic Games

42
00:02:44,000 --> 00:02:48,000
Launcher, and we're going to point it to our repos

43
00:02:48,000 --> 00:02:52,000
folder that we just made, where the repository already exists. The smoking

44
00:02:52,000 --> 00:02:56,000
gun for a repository is the .git file and the .gitignore file, but the

45
00:02:56,000 --> 00:03:00,000
.git file is the reliable one. So, here we are in

46
00:03:00,000 --> 00:03:04,000
the Epic Games Launcher. Let's launch the engine! I'm using 4.10.4

47
00:03:04,000 --> 00:03:08,000
Any 4.10 will do. You could even use a slightly later version, but I do recommend

48
00:03:08,000 --> 00:03:12,000
not going to far ahead of that, if you're watching this at some time in the distant future.

49
00:03:12,000 --> 00:03:16,000
So, we're going to make a new project! Let's think about how to make our decisions

50
00:03:16,000 --> 00:03:20,000
on the new project. Always a C++ project because we can derive Blueprint

51
00:03:20,000 --> 00:03:24,000
classes from C++, so we can always just have very thin

52
00:03:24,000 --> 00:03:28,000
C++ classes and extend in Blueprint later. So, I always go

53
00:03:28,000 --> 00:03:32,000
C++. Basic Code, we don't need any of the rest of this stuff. We can actually add any of this

54
00:03:32,000 --> 00:03:36,000
content later on, and I'll show you how. Desktop, Maximum Quality,

55
00:03:36,000 --> 00:03:40,000
No Starter Content, from the moment, that's cool! In the Battle Tank

56
00:03:40,000 --> 00:03:42,333
folder, let's make a subfolder called BattleTank.

57
00:03:42,333 --> 00:03:46,333
Now, just check the paths look right, and go ahead and Create

58
00:03:46,333 --> 00:03:50,333
Project. Fantastic! Now, it's going to spend a little bit of time creating the

59
00:03:50,333 --> 00:03:54,333
project, and then, eventually Unreal will open and Visual Studio will open. So meanwhile, let's go and

60
00:03:54,333 --> 00:03:58,333
look here in the File System. Of course, a BattleTank folder has

61
00:03:58,333 --> 00:04:02,333
been created, with all these files in it. That's great! Now, the .gitignore file. The

62
00:04:02,333 --> 00:04:06,333
difference with this one, we got from the GitHub website, is it has a different syntax. It

63
00:04:06,333 --> 00:04:10,333
says, all of these actually say Intermediate/*,

64
00:04:10,333 --> 00:04:14,333
which means ignore anything in an Intermediate/* folder that is in this directory that I'm in,

65
00:04:14,333 --> 00:04:18,333
in the .gitignore. And if you know there is no Intermediate/* folder, here in this

66
00:04:18,333 --> 00:04:22,333
directory, it lives here in the subfolder. So, Intermediate/*

67
00:04:22,333 --> 00:04:26,333
will actually not be ignored by this one. Hold on, it's just popping up

68
00:04:26,333 --> 00:04:30,333
in front of me. If we can trust this with the .gitignore we had back in Building Escape,

69
00:04:30,333 --> 00:04:34,333
we said */. Now, that means ignore Intermediate/*, including

70
00:04:34,333 --> 00:04:39,166
in any subfolders, so we have a slightly different .gitignore file  in this case.

71
00:04:39,166 --> 00:04:44,800
So the way to make sure that this operates properly, with this slightly different .gitignore, is

72
00:04:44,800 --> 00:04:48,800
to simply move the .gitignore into the BattleTank folder. Before I show that, let

73
00:04:48,800 --> 00:04:52,800
me just show you the problem and solution. Here, back at Source

74
00:04:52,800 --> 00:04:56,800
Tree, now that all of these files have existed, look at the un-staged files. They include tons of Intermediates,

75
00:04:56,800 --> 00:05:00,800
for the reason I've just explained right. So, what I'm going to do is move

76
00:05:00,800 --> 00:05:04,800
the .gitignore into BattleTank. The advantage is it will now work, provided

77
00:05:04,800 --> 00:05:08,800
that of course we stage our .gitignore file.

78
00:05:08,800 --> 00:05:12,800
So, find anything that refers to .gitignore, stage it, and then you'll see

79
00:05:12,800 --> 00:05:16,800
no mentions of Intermediate/*. Great, so that's working well! The disadvantage of this

80
00:05:16,800 --> 00:05:20,800
method, of course, is that if we put anything at this top-level of the folders that will

81
00:05:20,800 --> 00:05:24,800
be put under source control, but that's fine, we're doing everything inside of the BattleTank folder.

82
00:05:24,800 --> 00:05:28,800
So, that's a perfectly good solution for now, and let's crack on with the

83
00:05:28,800 --> 00:05:32,800
actual job of making a terrain. So, here we are in Unreal!

84
00:05:32,800 --> 00:05:36,800
What map are we in, for a start? Well, we're in an untitled map, so I'm going to save

85
00:05:36,800 --> 00:05:40,800
that, and I'm going to call it BattleGround.

86
00:05:40,800 --> 00:05:44,800


87
00:05:44,800 --> 00:05:48,800
OK, and of course what you always want to do, when you make your first map, is you go to your Maps & Modes

88
00:05:48,800 --> 00:05:52,800
under your Project Settings, and then, make sure that both your default game map

89
00:05:52,800 --> 00:05:56,800
and your default editor Map are the new thing, BattleGround. Cool! So, we

90
00:05:56,800 --> 00:06:00,800
have a nice skybox here, but we don't need this floor. So, delete

91
00:06:00,800 --> 00:06:04,800
the floor from the world, and you're in this situation now, where we just have

92
00:06:04,800 --> 00:06:08,800
pretty much nothing in the world apart from a Light Source, some Atmospheric Fog,

93
00:06:08,800 --> 00:06:12,800
and a Player Start point. So, what I want you to do, slightly strangely,

94
00:06:12,800 --> 00:06:16,800
as a challenge is I want for you to try and add your own landscape, without even telling you how.

95
00:06:16,800 --> 00:06:20,800
See if you can find where it is and how to add it. The reason is, it'll help you get familiar

96
00:06:20,800 --> 00:06:24,800
with the interface. I want you to start without using a web search or any documentation.

97
00:06:24,800 --> 00:06:28,800
Use any settings for the landscape. When you do find it, we'll delete

98
00:06:28,800 --> 00:06:32,800
it and re-add it later, because you need to have that skill, and then, share how long it

99
00:06:32,800 --> 00:06:36,800
took you to find it, with the rest of us, and whether you need it to go to the web. So go ahead, try

100
00:06:36,800 --> 00:06:40,800
and add any old landscape now!

101
00:06:40,800 --> 00:06:44,800
So welcome back, where is the landscape?

102
00:06:44,800 --> 00:06:48,800
Well, it's actually under Modes. Like a lot of things, when you first start, you're either going

103
00:06:48,800 --> 00:06:52,800
to get content like pre-existing assets from some starter pack, which we

104
00:06:52,800 --> 00:06:56,800
don't have right now, or you're going to Modes. Now in modes, you can do

105
00:06:56,800 --> 00:07:00,800
things like add Actors, Box Triggers, Lights, Visual Effects,

106
00:07:00,800 --> 00:07:04,800
BSP Binary Space Patricians, which can be useful for meshing out levels,

107
00:07:04,800 --> 00:07:08,800
Volumes all sorts of cool volumes, and then, All Classes.

108
00:07:08,800 --> 00:07:12,800
And under All Classes, if we

109
00:07:12,800 --> 00:07:16,800
scroll down, we'll find Landscape. So, one way of doing it is, you

110
00:07:16,800 --> 00:07:20,800
just drag a landscape in. Then, we do that and there it is!

111
00:07:20,800 --> 00:07:24,800
Now, it'll come in at a weird position, depending on where you let go of it,

112
00:07:24,800 --> 00:07:28,800
but this is a perfectly valid way of doing it. Note, by the way, that once you

113
00:07:28,800 --> 00:07:32,800
do that, it'll switch across to the Landscape tab, and then, you'll be on the Manage

114
00:07:32,800 --> 00:07:36,800
part of that. And it's basically saying to you, do you want to create a landcape

115
00:07:36,800 --> 00:07:40,800
here? So, I'm going to do it, because this is like you creating one in a rough way. It's the wrong

116
00:07:40,800 --> 00:07:44,800
size, etc., but at least we've got a landscape in. Now, notice

117
00:07:44,800 --> 00:07:48,800
that under Modes and then the Landscape tab, the Manage tab does something

118
00:07:48,800 --> 00:07:52,800
slightly different. It has different options on it. It doesn't have very many options.

119
00:07:52,800 --> 00:07:56,800
OK, so let me show you a second way, while

120
00:07:56,800 --> 00:08:00,800
showing you how to delete a landscape. Deleting is easy. You just find it in the World

121
00:08:00,800 --> 00:08:04,800
Outliner, right-click, Edit, and Delete.

122
00:08:04,800 --> 00:08:08,800
So that's why you can add a landscape with confidence, because it's pretty

123
00:08:08,800 --> 00:08:12,800
easy to delete it later. So, how else could you add a landscape? You could

124
00:08:12,800 --> 00:08:16,800
go to the Landscape tab, from the Start. Now, the Manage sub-tab

125
00:08:16,800 --> 00:08:20,800
will recognize there is not landscape in the scene and say, well, you obviously want to create one

126
00:08:20,800 --> 00:08:24,800
or import a Height Map from a file, but we're going to create a new one.

127
00:08:24,800 --> 00:08:28,800
And we're going to think about exactly the size that we create

128
00:08:28,800 --> 00:08:32,800
this at, in the next video, because we want to think a little bit carefully about

129
00:08:32,800 --> 00:08:36,800
where this is, i.e. at the origin or not,

130
00:08:36,800 --> 00:08:40,800
how it's rotated, how it's scaled, what this section

131
00:08:40,800 --> 00:08:44,800
size, the number of sections, and number of components. What does all this stuff mean? It's the topic

132
00:08:44,800 --> 00:08:48,800
of the whole video, because we want to get it right, and we want to understand our constraints on our landscape.

133
00:08:48,800 --> 00:08:52,800
So well done on getting this far! Hopefully you now know how to add a landscape

134
00:08:52,800 --> 00:08:56,800
and delete it and where to find everything, and your project source control is all setup ready

135
00:08:56,800 --> 00:09:00,800
to go. All that remains, of course, is to close everything.

136
00:09:00,800 --> 00:09:04,800
It doesn't matter whether you've got a landscape, not got a landscape, we know how to delete them now. We're going to be

137
00:09:04,800 --> 00:09:08,800
doing it in the next video. So with everything closed, I'm not going to stage everything. Now, I'm getting a warning

138
00:09:08,800 --> 00:09:12,800
that my BattleTank.VC.db is bigger than 10 MB.

139
00:09:12,800 --> 00:09:16,800
Well, we chose to ignore that before, so let's go ahead and edit the

140
00:09:16,800 --> 00:09:20,800
.gitignore. Find

141
00:09:20,800 --> 00:09:24,800
hmm generated by the engine. Where should be put it? Because we didn't write this, we need

142
00:09:24,800 --> 00:09:28,800
to think about where to put it. It's not under any of these, so I'm

143
00:09:28,800 --> 00:09:32,800
just going to put it at this top *.VC.db. This only

144
00:09:32,800 --> 00:09:36,800
applies, of course, to you Visual Studio users, and this is the database file,

145
00:09:36,800 --> 00:09:40,800
250 MB. That's the one we want to ignore. So save that.

146
00:09:40,800 --> 00:09:44,800
I'm going to cancel the staging, re-add the .gitignore,

147
00:09:44,800 --> 00:09:48,800
now stage everything, and now we're happy! We don't have any big files,

148
00:09:48,800 --> 00:09:52,800
OK. So, there's two approaches of getting to your .gitignore. You either build it up from the scratch

149
00:09:52,800 --> 00:09:56,800
yourself or you start with somebody else's and modify it, but you still need to know how it works,

150
00:09:56,800 --> 00:10:00,800
otherwise it becomes a weird black box. So go ahead, make your commit, and I'll see you in the

151
00:10:00,800 --> 00:10:03,400
next video!


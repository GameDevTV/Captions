<<<<<<< HEAD:Unreal/Section4/BT38 The C++ Compilation Process.srt
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
So. welcome to

2
00:00:04.000 --> 00:00:08.000
The C++ Compilation Process! In this video we're going to set the stage

3
00:00:08.000 --> 00:00:12.000
for the next video where we talk about forward declaration. And during the video. I'm going to be

4
00:00:12.000 --> 00:00:16.000
building up this diagram for you to help you understand how compilation works in

5
00:00:16.000 --> 00:00:19.500
C++. So let's dive in and take a look at it. step by step!

6
00:00:19.500 --> 00:00:23.500
So. before I even start this video. I want to thank Daniel Marshall for

7
00:00:23.500 --> 00:00:27.500
pointing out the shortcomings in the next video actually. which is the

8
00:00:27.500 --> 00:00:31.500
one about forward declarations. I have now come to retrospectively insert this

9
00:00:31.500 --> 00:00:35.500
declaration. this video rather. because it's going to help make things clearer as to

10
00:00:35.500 --> 00:00:39.500
how compilation works. So thanks. Daniel! Here we go! How

11
00:00:39.500 --> 00:00:43.500
does compilation work in Unreal? It's about time we knew. so

12
00:00:43.500 --> 00:00:47.500
when you have a header file and you #include it into a .cpp file.

13
00:00:47.500 --> 00:00:51.500
then the pre-processes... now I say pre-processors because

14
00:00:51.500 --> 00:00:55.500
in Unreal there are various things going on before compilation. One is that

15
00:00:55.500 --> 00:00:59.500
header files get included into .cpp files. One is that the

16
00:00:59.500 --> 00:01:03.500
Unreal header tool has an involvement and the other is that macros have an involvement. things like UE_LOG

17
00:01:03.500 --> 00:01:07.500
get expanded out to different C++ code. All of that. we're just going to for the moment lump

18
00:01:07.500 --> 00:01:11.500
together into the concept of pre-processing. But you'll remember from section 1 that

19
00:01:11.500 --> 00:01:15.500
.h files literally get cut and paste into the top of a .cpp file.

20
00:01:15.500 --> 00:01:19.500
at the Pre-Processors stage. Alright. so just remember that for now.

21
00:01:19.500 --> 00:01:23.500
So. if we #include Tank.h into the Controller

22
00:01:23.500 --> 00:01:27.500
C++ file. then at the top of the Controller C++ just before

23
00:01:27.500 --> 00:01:31.500
compilation you'll have all of the text of the Controller.h and all of the text of the Tank.h

24
00:01:31.500 --> 00:01:35.500
but none of the Tank's actual code. none of the Tank.cpp

25
00:01:35.500 --> 00:01:39.500
code. So at this stage. the compiler can turn this new .cpp file.

26
00:01:39.500 --> 00:01:43.500
that we never get to see but is a combination. as I say. of those two header files

27
00:01:43.500 --> 00:01:47.500
plus some macros that have been expanded plus possibly some other stuff

28
00:01:47.500 --> 00:01:51.500
the Unreal header tool has put in. and that gets compiled

29
00:01:51.500 --> 00:01:55.500
into a Controller.obj file. an object file. Now you can find these

30
00:01:55.500 --> 00:01:59.500
object files. by the way. in your project directory under Intermediate. Build.

31
00:01:59.500 --> 00:02:03.500
Win64. UE4Editor. Development.

32
00:02:03.500 --> 00:02:07.500
BattleTank. and you'll find it in a similar place in. on a Mac. and you'll

33
00:02:07.500 --> 00:02:11.500
have these .obj files. So there's the Tank Object and there's the Tank AI

34
00:02:11.500 --> 00:02:15.500
Controller Object. they're the ones we're talking about. I'm calling it Controller

35
00:02:15.500 --> 00:02:19.500
just because I want to group together the PlayerController and the AI Controller

36
00:02:19.500 --> 00:02:23.500
conceptually. just to keep this diagram simple. OK. so there are these object

37
00:02:23.500 --> 00:02:27.500
files. Now. they can't be run directly but they are there. so let's continue the story.

38
00:02:27.500 --> 00:02:31.500
In a very similar way the Tank.h gets pasted into

39
00:02:31.500 --> 00:02:35.500
the top of the .cpp. possibly including some other class

40
00:02:35.500 --> 00:02:39.500
let's say TankBarrel.h. That new .cpp file with all its

41
00:02:39.500 --> 00:02:43.500
nuances and changes gets compiled into an object file. Tank.obj.

42
00:02:43.500 --> 00:02:47.500
there it is right here. And then. what happens

43
00:02:47.500 --> 00:02:51.500
is something called linking. Well actually. this happens after all of the classes have been

44
00:02:51.500 --> 00:02:55.500
compiled but let me just tell you a bit early for the sake of argument. So.

45
00:02:55.500 --> 00:02:59.500
what this means is the Controller Object is expecting to be able to make

46
00:02:59.500 --> 00:03:03.500
some injections directly into the Tank Object. because it knows

47
00:03:03.500 --> 00:03:07.500
about the types of all of the public members of the Tank. the

48
00:03:07.500 --> 00:03:11.500
variables and the methods. Alright. so it's expecting that to be

49
00:03:11.500 --> 00:03:15.500
conforming to some sort of contract. but once all the linking has happened for all of the classes.

50
00:03:15.500 --> 00:03:19.500
that includes now on the right-hand side the Barrel. then you've actually got a workable

51
00:03:19.500 --> 00:03:23.500
.exe (Executable) file. The reason. by the way. you get linker errors some of the time is if.

52
00:03:23.500 --> 00:03:27.500
for example. you use a Tank.h and you declare a class.

53
00:03:27.500 --> 00:03:31.500
and then you import it into the Controller and talk about a Tank.

54
00:03:31.500 --> 00:03:35.500
Then. it will get this far it'll compile. but it won't link if you don't

55
00:03:35.500 --> 00:03:39.500
implement the Tank properly. because what'll happen

56
00:03:39.500 --> 00:03:43.500
is it'll go I'm trying to find a hook into the Tank here and I can't find it. So. when you get linker errors. it

57
00:03:43.500 --> 00:03:47.500
is normally a discrepancy between your header file and your .cpp file. Check your definitions

58
00:03:47.500 --> 00:03:51.500
with linker errors. and make sure you have the same signature between your header file and your C++.

59
00:03:51.500 --> 00:03:55.500
That's the typical cause of the problem there. So. I don't want you to change any

60
00:03:55.500 --> 00:03:59.500
code right now. I just want to show you something. and then. I've got your step by step process

61
00:03:59.500 --> 00:04:03.500
for you to show you how I want you to explore for yourself. And by

62
00:04:03.500 --> 00:04:07.500
the end of the video we won't have changed any code. we're going to put it all back to how it is now.

63
00:04:07.500 --> 00:04:11.500
because this video has been retrospectively inserted into the course. and I don't want to change the state of the next

64
00:04:11.500 --> 00:04:15.500
couple of videos. Alright. so here we go. I just want to show you a couple of things!

65
00:04:15.500 --> 00:04:19.500
Here's the TankPlayerController. we currently #include the header file.

66
00:04:19.500 --> 00:04:23.500
OK. we don't want to do that! I'll show you back on the diagram. What we don't want to

67
00:04:23.500 --> 00:04:27.500
do is this. #include header files. in header files like this. because if you do it once.

68
00:04:27.500 --> 00:04:31.500
the Tank into the Controller. then you may want to do it again the Barrel into

69
00:04:31.500 --> 00:04:35.500
the Tank. And that means that all of the Barrel's code and all of the Tank's code is

70
00:04:35.500 --> 00:04:39.500
included in the Controller. which is in turn pasted into the top of the C++

71
00:04:39.500 --> 00:04:43.500
of the Controller. which slows down compilation and also confuses

72
00:04:43.500 --> 00:04:47.500
things. you get these weird strings of dependancies. So. we don't want to do it like that.

73
00:04:47.500 --> 00:04:51.500
we want to do it like this. header files into C++ files only. Unless the only

74
00:04:51.500 --> 00:04:55.500
time you need to do a header file into a header file is when you're actually inheriting. So.

75
00:04:55.500 --> 00:04:59.500
a TankPlayerController is APlayerController. inherits right

76
00:04:59.500 --> 00:05:03.500
there. so therefore we do need to include the TankPlayerController there

77
00:05:03.500 --> 00:05:07.500
because it's inheriting. But the rest of the time. in general. you wouldn't do a

78
00:05:07.500 --> 00:05:11.500
#include. like I've already done. here in a header file. So if we took it out

79
00:05:11.500 --> 00:05:15.500
of a header file and we stick it in the PlayerController

80
00:05:15.500 --> 00:05:19.500
file. say here above the TankPlayerController. it will actually

81
00:05:19.500 --> 00:05:23.500
build right now. and the reason is. because when

82
00:05:23.500 --> 00:05:27.500
the pre-processing happens it's putting the tank header file

83
00:05:27.500 --> 00:05:31.500
content above the TankPlayerController content. which means that

84
00:05:31.500 --> 00:05:35.500
when we get to this bit here where it says ATank.

85
00:05:35.500 --> 00:05:39.500
in the header controller. it already knows what a tank is. Now go about

86
00:05:39.500 --> 00:05:43.500
into this in a bit more detail in the next video. but the problem with this

87
00:05:43.500 --> 00:05:47.500
is that if you were to put the tank somewhere else. which is below the PlayerController.

88
00:05:47.500 --> 00:05:51.500
it now won't compile. Let me just show you it not

89
00:05:51.500 --> 00:05:55.500
compiling. OK. and that's

90
00:05:55.500 --> 00:05:59.500
because when it gets to the bit in the Tank

91
00:05:59.500 --> 00:06:03.500
PlayerController that says ATank here. it doesn't know anything about the tank yet. Now. we don't want these

92
00:06:03.500 --> 00:06:07.500
type of dependencies. The only dependencies we want in our #includes. in terms of the

93
00:06:07.500 --> 00:06:11.500
order we write them. is this horrible Unreal thing that the generated .h has

94
00:06:11.500 --> 00:06:15.500
to go last. Alright. but we've got no control over that. we do have control over what

95
00:06:15.500 --> 00:06:19.500
we do here. So. what I'm going to be showing you in the next video is actually

96
00:06:19.500 --> 00:06:23.500
what to do so that this #include

97
00:06:23.500 --> 00:06:27.500
can still stay in the .cpp file but it can stay in here anywhere.

98
00:06:27.500 --> 00:06:31.500
And for now. I'm just going to put my code back exactly where it was. so I leave things

99
00:06:31.500 --> 00:06:35.500
exactly where they were. In fact. I'll use version control to do that. I'll close down

100
00:06:35.500 --> 00:06:39.500
my file. and there are no changes made now to my code. whatsoever.

101
00:06:39.500 --> 00:06:43.500
in this video. So. what I want you to do now.

102
00:06:43.500 --> 00:06:47.500
as a challenge. is to go ahead and try it for yourself. it'll make a lot more sense. Open your TankPlayer

103
00:06:47.500 --> 00:06:51.500
Controller.h. Move the #include "Tank.h" to the C++ file.

104
00:06:51.500 --> 00:06:55.500
Try it both above and below the TankPlayerController import

105
00:06:55.500 --> 00:06:59.500
and see what works and what doesn't for yourself. And then. when you're finished. put your code

106
00:06:59.500 --> 00:07:03.500
back to the original state. and that's it!

107
00:07:03.500 --> 00:07:07.500
I'm just going to leave you to do that. and I'm going to leave on the screen this slide here. because

108
00:07:07.500 --> 00:07:11.500
it explains how the compilation works and how we want to do our #include. So. have a good think about

109
00:07:11.500 --> 00:07:15.500
this. Have a quick play with it. see if it makes sense to you. Maybe go and share

110
00:07:15.500 --> 00:07:19.500
with us on Facebook or wherever you wish about

111
00:07:19.500 --> 00:07:23.500
your thoughts and confusions and clarity over this. and I will see you in the

112
00:07:23.500 --> 00:07:26.633
next video!

=======

1
00:00:00,000 --> 00:00:04,000
So, welcome to

2
00:00:04,000 --> 00:00:08,000
The C++ Compilation Process! In this video we're going to set the stage

3
00:00:08,000 --> 00:00:12,000
for the next video where we talk about forward declaration. And during the video, I'm going to be

4
00:00:12,000 --> 00:00:16,000
building up this diagram for you to help you understand how compilation works in

5
00:00:16,000 --> 00:00:19,500
C++. So let's dive in and take a look at it, step by step!

6
00:00:19,500 --> 00:00:23,500
So, before I even start this video, I want to thank Daniel Marshall for

7
00:00:23,500 --> 00:00:27,500
pointing out the shortcomings in the next video actually, which is the

8
00:00:27,500 --> 00:00:31,500
one about forward declarations. I have now come to retrospectively insert this

9
00:00:31,500 --> 00:00:35,500
declaration, this video rather, because it's going to help make things clearer as to

10
00:00:35,500 --> 00:00:39,500
how compilation works. So thanks, Daniel! Here we go! How

11
00:00:39,500 --> 00:00:43,500
does compilation work in Unreal? It's about time we knew, so

12
00:00:43,500 --> 00:00:47,500
when you have a header file and you #include it into a .cpp file,

13
00:00:47,500 --> 00:00:51,500
then the pre-processes... now I say pre-processors because

14
00:00:51,500 --> 00:00:55,500
in Unreal there are various things going on before compilation. One is that

15
00:00:55,500 --> 00:00:59,500
header files get included into .cpp files. One is that the

16
00:00:59,500 --> 00:01:03,500
Unreal header tool has an involvement and the other is that macros have an involvement, things like UE_LOG

17
00:01:03,500 --> 00:01:07,500
get expanded out to different C++ code. All of that, we're just going to for the moment lump

18
00:01:07,500 --> 00:01:11,500
together into the concept of pre-processing. But you'll remember from section 1 that

19
00:01:11,500 --> 00:01:15,500
.h files literally get cut and paste into the top of a .cpp file,

20
00:01:15,500 --> 00:01:19,500
at the Pre-Processors stage. Alright, so just remember that for now.

21
00:01:19,500 --> 00:01:23,500
So, if we #include Tank.h into the Controller

22
00:01:23,500 --> 00:01:27,500
C++ file, then at the top of the Controller C++ just before

23
00:01:27,500 --> 00:01:31,500
compilation you'll have all of the text of the Controller.h and all of the text of the Tank.h

24
00:01:31,500 --> 00:01:35,500
but none of the Tank's actual code, none of the Tank.cpp

25
00:01:35,500 --> 00:01:39,500
code. So at this stage, the compiler can turn this new .cpp file,

26
00:01:39,500 --> 00:01:43,500
that we never get to see but is a combination, as I say, of those two header files

27
00:01:43,500 --> 00:01:47,500
plus some macros that have been expanded plus possibly some other stuff

28
00:01:47,500 --> 00:01:51,500
the Unreal header tool has put in, and that gets compiled

29
00:01:51,500 --> 00:01:55,500
into a Controller.obj file, an object file. Now you can find these

30
00:01:55,500 --> 00:01:59,500
object files, by the way, in your project directory under Intermediate, Build,

31
00:01:59,500 --> 00:02:03,500
Win64, UE4Editor, Development,

32
00:02:03,500 --> 00:02:07,500
BattleTank, and you'll find it in a similar place in, on a Mac, and you'll

33
00:02:07,500 --> 00:02:11,500
have these .obj files. So there's the Tank Object and there's the Tank AI

34
00:02:11,500 --> 00:02:15,500
Controller Object, they're the ones we're talking about. I'm calling it Controller

35
00:02:15,500 --> 00:02:19,500
just because I want to group together the PlayerController and the AI Controller

36
00:02:19,500 --> 00:02:23,500
conceptually, just to keep this diagram simple. OK, so there are these object

37
00:02:23,500 --> 00:02:27,500
files. Now, they can't be run directly but they are there, so let's continue the story.

38
00:02:27,500 --> 00:02:31,500
In a very similar way the Tank.h gets pasted into

39
00:02:31,500 --> 00:02:35,500
the top of the .cpp, possibly including some other class

40
00:02:35,500 --> 00:02:39,500
let's say TankBarrel.h. That new .cpp file with all its

41
00:02:39,500 --> 00:02:43,500
nuances and changes gets compiled into an object file, Tank.obj,

42
00:02:43,500 --> 00:02:47,500
there it is right here. And then, what happens

43
00:02:47,500 --> 00:02:51,500
is something called linking. Well actually, this happens after all of the classes have been

44
00:02:51,500 --> 00:02:55,500
compiled but let me just tell you a bit early for the sake of argument. So,

45
00:02:55,500 --> 00:02:59,500
what this means is the Controller Object is expecting to be able to make

46
00:02:59,500 --> 00:03:03,500
some injections directly into the Tank Object, because it knows

47
00:03:03,500 --> 00:03:07,500
about the types of all of the public members of the Tank, the

48
00:03:07,500 --> 00:03:11,500
variables and the methods. Alright, so it's expecting that to be

49
00:03:11,500 --> 00:03:15,500
conforming to some sort of contract, but once all the linking has happened for all of the classes,

50
00:03:15,500 --> 00:03:19,500
that includes now on the right-hand side the Barrel, then you've actually got a workable

51
00:03:19,500 --> 00:03:23,500
.exe (Executable) file. The reason, by the way, you get linker errors some of the time is if,

52
00:03:23,500 --> 00:03:27,500
for example, you use a Tank.h and you declare a class,

53
00:03:27,500 --> 00:03:31,500
and then you import it into the Controller and talk about a Tank.

54
00:03:31,500 --> 00:03:35,500
Then, it will get this far it'll compile, but it won't link if you don't

55
00:03:35,500 --> 00:03:39,500
implement the Tank properly, because what'll happen

56
00:03:39,500 --> 00:03:43,500
is it'll go I'm trying to find a hook into the Tank here and I can't find it. So, when you get linker errors, it

57
00:03:43,500 --> 00:03:47,500
is normally a discrepancy between your header file and your .cpp file. Check your definitions

58
00:03:47,500 --> 00:03:51,500
with linker errors, and make sure you have the same signature between your header file and your C++.

59
00:03:51,500 --> 00:03:55,500
That's the typical cause of the problem there. So, I don't want you to change any

60
00:03:55,500 --> 00:03:59,500
code right now, I just want to show you something, and then, I've got your step by step process

61
00:03:59,500 --> 00:04:03,500
for you to show you how I want you to explore for yourself. And by

62
00:04:03,500 --> 00:04:07,500
the end of the video we won't have changed any code, we're going to put it all back to how it is now,

63
00:04:07,500 --> 00:04:11,500
because this video has been retrospectively inserted into the course, and I don't want to change the state of the next

64
00:04:11,500 --> 00:04:15,500
couple of videos. Alright, so here we go, I just want to show you a couple of things!

65
00:04:15,500 --> 00:04:19,500
Here's the TankPlayerController, we currently #include the header file.

66
00:04:19,500 --> 00:04:23,500
OK, we don't want to do that! I'll show you back on the diagram. What we don't want to

67
00:04:23,500 --> 00:04:27,500
do is this, #include header files, in header files like this, because if you do it once,

68
00:04:27,500 --> 00:04:31,500
the Tank into the Controller, then you may want to do it again the Barrel into

69
00:04:31,500 --> 00:04:35,500
the Tank. And that means that all of the Barrel's code and all of the Tank's code is

70
00:04:35,500 --> 00:04:39,500
included in the Controller, which is in turn pasted into the top of the C++

71
00:04:39,500 --> 00:04:43,500
of the Controller, which slows down compilation and also confuses

72
00:04:43,500 --> 00:04:47,500
things, you get these weird strings of dependancies. So, we don't want to do it like that,

73
00:04:47,500 --> 00:04:51,500
we want to do it like this, header files into C++ files only. Unless the only

74
00:04:51,500 --> 00:04:55,500
time you need to do a header file into a header file is when you're actually inheriting. So,

75
00:04:55,500 --> 00:04:59,500
a TankPlayerController is APlayerController, inherits right

76
00:04:59,500 --> 00:05:03,500
there, so therefore we do need to include the TankPlayerController there

77
00:05:03,500 --> 00:05:07,500
because it's inheriting. But the rest of the time, in general, you wouldn't do a

78
00:05:07,500 --> 00:05:11,500
#include, like I've already done, here in a header file. So if we took it out

79
00:05:11,500 --> 00:05:15,500
of a header file and we stick it in the PlayerController

80
00:05:15,500 --> 00:05:19,500
file, say here above the TankPlayerController, it will actually

81
00:05:19,500 --> 00:05:23,500
build right now, and the reason is, because when

82
00:05:23,500 --> 00:05:27,500
the pre-processing happens it's putting the tank header file

83
00:05:27,500 --> 00:05:31,500
content above the TankPlayerController content, which means that

84
00:05:31,500 --> 00:05:35,500
when we get to this bit here where it says ATank,

85
00:05:35,500 --> 00:05:39,500
in the header controller, it already knows what a tank is. Now go about

86
00:05:39,500 --> 00:05:43,500
into this in a bit more detail in the next video, but the problem with this

87
00:05:43,500 --> 00:05:47,500
is that if you were to put the tank somewhere else, which is below the PlayerController,

88
00:05:47,500 --> 00:05:51,500
it now won't compile. Let me just show you it not

89
00:05:51,500 --> 00:05:55,500
compiling. OK, and that's

90
00:05:55,500 --> 00:05:59,500
because when it gets to the bit in the Tank

91
00:05:59,500 --> 00:06:03,500
PlayerController that says ATank here, it doesn't know anything about the tank yet. Now, we don't want these

92
00:06:03,500 --> 00:06:07,500
type of dependencies. The only dependencies we want in our #includes, in terms of the

93
00:06:07,500 --> 00:06:11,500
order we write them, is this horrible Unreal thing that the generated .h has

94
00:06:11,500 --> 00:06:15,500
to go last. Alright, but we've got no control over that, we do have control over what

95
00:06:15,500 --> 00:06:19,500
we do here. So, what I'm going to be showing you in the next video is actually

96
00:06:19,500 --> 00:06:23,500
what to do so that this #include

97
00:06:23,500 --> 00:06:27,500
can still stay in the .cpp file but it can stay in here anywhere.

98
00:06:27,500 --> 00:06:31,500
And for now, I'm just going to put my code back exactly where it was, so I leave things

99
00:06:31,500 --> 00:06:35,500
exactly where they were. In fact, I'll use version control to do that. I'll close down

100
00:06:35,500 --> 00:06:39,500
my file, and there are no changes made now to my code, whatsoever,

101
00:06:39,500 --> 00:06:43,500
in this video. So, what I want you to do now,

102
00:06:43,500 --> 00:06:47,500
as a challenge, is to go ahead and try it for yourself, it'll make a lot more sense. Open your TankPlayer

103
00:06:47,500 --> 00:06:51,500
Controller.h. Move the #include "Tank.h" to the C++ file.

104
00:06:51,500 --> 00:06:55,500
Try it both above and below the TankPlayerController import

105
00:06:55,500 --> 00:06:59,500
and see what works and what doesn't for yourself. And then, when you're finished, put your code

106
00:06:59,500 --> 00:07:03,500
back to the original state, and that's it!

107
00:07:03,500 --> 00:07:07,500
I'm just going to leave you to do that, and I'm going to leave on the screen this slide here, because

108
00:07:07,500 --> 00:07:11,500
it explains how the compilation works and how we want to do our #include. So, have a good think about

109
00:07:11,500 --> 00:07:15,500
this. Have a quick play with it, see if it makes sense to you. Maybe go and share

110
00:07:15,500 --> 00:07:19,500
with us on Facebook or wherever you wish about

111
00:07:19,500 --> 00:07:23,500
your thoughts and confusions and clarity over this, and I will see you in the

112
00:07:23,500 --> 00:07:26,633
next video!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1:Unreal/Section4/BT38 The C++ Compilation Process.srt

WEBVTT

1
00:00:00.000 --> 00:00:04.000
So, welcome to

2
00:00:04.000 --> 00:00:08.000
SuggestProjectilVelocity()! In this video we're going to take a closer look

3
00:00:08.000 --> 00:00:12.000
at how projectile flight works, and by the end of it, you will have a modification

4
00:00:12.000 --> 00:00:16.000
to you tank, where you actually have a launch speed parameter that will be passed

5
00:00:16.000 --> 00:00:20.000
all the way from the Tank down to the Aiming Component, and then, ultimately printed

6
00:00:20.000 --> 00:00:24.000
out on the console. We will also be taking a look, and your homework will

7
00:00:24.000 --> 00:00:28.000
be to look carefully at this very useful method Unreal provides called Suggest

8
00:00:28.000 --> 00:00:31.933
ProjectileVelocity(). So let's take a look at how this works!

9
00:00:31.933 --> 00:00:35.933
So, let's talk about how we're actually going to get our projectile to its destination.

10
00:00:35.933 --> 00:00:39.933
What we need to do now is to start thinking about having this barrel move itself

11
00:00:39.933 --> 00:00:43.933
into the correct position, to end up hitting the world space

12
00:00:43.933 --> 00:00:47.933
aim, if possible. It may not be possible, of course, like it probably isn't possible.

13
00:00:47.933 --> 00:00:51.933
In this case, hitting the top of that hill might be unreasonable but I could certainly hit this tank, it depends on

14
00:00:51.933 --> 00:00:55.933
the launch speed. So let's talk about launch speed and launch velocity, make sure we understand that and

15
00:00:55.933 --> 00:00:59.933
then go from there. Just stop it running. I've got a couple of slides for you! OK,

16
00:00:59.933 --> 00:01:03.933
so let's talk about the difference between projectile speed and velocity! Sorry to those physics

17
00:01:03.933 --> 00:01:07.933
nuts out there who already know this but for everybody else, I think it's important. So, if that vector

18
00:01:07.933 --> 00:01:11.933
is some three dimensional vector, which is the launch velocity, basically

19
00:01:11.933 --> 00:01:15.933
it's the direction of the barrel. If it has a length of 5, that means our launch speed

20
00:01:15.933 --> 00:01:19.933
is 5. The Velocity Vector

21
00:01:19.933 --> 00:01:23.933
has a direction, which is the direction of the barrel, and a magnitude

22
00:01:23.933 --> 00:01:27.933
which is it's length, which tells you how fast you're launching it. Now 5 is a very slow launch; we're not going to

23
00:01:27.933 --> 00:01:31.933
be launching our projectile at 5 centimeters a second, it will kind of just flop out of the end of the barrel,

24
00:01:31.933 --> 00:01:35.933
but I just want to do it so this thing is vaguely to scale.

25
00:01:35.933 --> 00:01:39.933
So if that's the LaunchVelocity Vector, then there's another vector called the LaunchDirection

26
00:01:39.933 --> 00:01:43.933
Vector and it's a unit vector, which means it always has a length of 1 and that's

27
00:01:43.933 --> 00:01:47.933
what we're really interested in. We need a Launch Direction Vector to know the direction

28
00:01:47.933 --> 00:01:51.933
that we want to point our barrel in. We don't actually care,

29
00:01:51.933 --> 00:01:55.933
when we're pointing the barrel, who fast the projectile is going to launch. We have to know how fast

30
00:01:55.933 --> 00:01:59.933
it's going to launch to do the calculation. But all we need to actually point the barrel is just a

31
00:01:59.933 --> 00:02:03.933
360 degree location, somewhere on the surface of a sphere and that

32
00:02:03.933 --> 00:02:07.933
thing has a length of 1, that's called a Unit Vector. And so,

33
00:02:07.933 --> 00:02:11.933
the difference between those or the divider between those, 5 over 1, is 5. So the LaunchSpeed

34
00:02:11.933 --> 00:02:15.933
is 5, in this case. If the LaunchSpeed was 10,000, then the LaunchVelocity Vector would be

35
00:02:15.933 --> 00:02:19.933
10,000 times longer than the Direction Vector. It's called a Unit Vector, simple as that.

36
00:02:19.933 --> 00:02:23.933
Hopefully that makes sense, I wouldn't  worry about it too much; it'll just give you a bit of background for when

37
00:02:23.933 --> 00:02:27.933
we actually use the methods. So, there are two projectile arcs, which

38
00:02:27.933 --> 00:02:31.933
is kind of fun. If you launch something with a given LaunchVelocity, i.e.

39
00:02:31.933 --> 00:02:35.933
that same green arrow, then you fire it, off it goes

40
00:02:35.933 --> 00:02:39.933
along a parabolic path... OK, they'er not quite parabolic, as I said, but you get the idea. Then,

41
00:02:39.933 --> 00:02:43.933
it'll hit something in the distance, hopefully another tank if you're lucky. But there's also

42
00:02:43.933 --> 00:02:47.933
another angle that you can fire it at, for the same Launch

43
00:02:47.933 --> 00:02:51.933
Speed. So, a LaunchVelocity

44
00:02:51.933 --> 00:02:55.933
Vector that is in a different direction, it's going to

45
00:02:55.933 --> 00:02:59.933
be in the same left and right plane but it's going to be up,

46
00:02:59.933 --> 00:03:03.933
it's going to be a higher toss a higher lob, if you like, and

47
00:03:03.933 --> 00:03:07.933
it's going to have the same length. Both those green arrows are the same length. Well, they may not look it

48
00:03:07.933 --> 00:03:11.933
but they are. And what would happen then is, you'd end up

49
00:03:11.933 --> 00:03:15.933
in the same place. There's always two solutions to how you get to that other

50
00:03:15.933 --> 00:03:19.933
tank with your projectile. You either go by the high arc or the low arc, and that'll

51
00:03:19.933 --> 00:03:23.933
come up in our method as an option as to which we choose. We're going to choose the low arc.

52
00:03:23.933 --> 00:03:27.933
The reason is it's quicker, the projectile will get there much quicker along the low arc. Let's take a look,

53
00:03:27.933 --> 00:03:31.933
very briefly, at Wikipedia's page. This is all in the notes, but you can look at Trajectory

54
00:03:31.933 --> 00:03:35.933
of a Projectile. So, if we go there, scroll down to

55
00:03:35.933 --> 00:03:39.933
this bit, Conditions at the final position, or you can just click here.

56
00:03:39.933 --> 00:03:43.933
Ah, conditions of the final position... Where is that? I can't see it!

57
00:03:43.933 --> 00:03:47.933
Ah there! OK, then you've got this diagram, and this will give you an example. Let's

58
00:03:47.933 --> 00:03:51.933
focus on trying to hit something that's 5 meters away, which is this bit here. And what that's

59
00:03:51.933 --> 00:03:55.933
saying is you can either lob it at 15 degrees, it will get to 5 meters

60
00:03:55.933 --> 00:03:59.933
and it will only spend 1/2 a second in flight, or you could lob it at

61
00:03:59.933 --> 00:04:03.933
75 degrees. It would get to the same distance coming down

62
00:04:03.933 --> 00:04:07.933
much more sharply but it would take 1.93 seconds, nearly 4 times as long

63
00:04:07.933 --> 00:04:11.933
long in the air, much easier for the other tank to get out of the way, etc. So, you're much better off with using

64
00:04:11.933 --> 00:04:15.933
the low arc in these cases. OK, so you can read more about that

65
00:04:15.933 --> 00:04:18.900
if you want to, just bear in mind that there are two arcs.

66
00:04:18.900 --> 00:04:22.900
So, let's see how this means that we actually use the method in question.

67
00:04:22.900 --> 00:04:26.900
The method we're going to look at is SuggestProjectileVelocity(). I'm not just

68
00:04:26.900 --> 00:04:30.900
going to leave you to it unless you're really keen, but I'm just going to set you up,

69
00:04:30.900 --> 00:04:34.900
before we go ahead with that. So, where we going to set all this stuff? Well there's

70
00:04:34.900 --> 00:04:38.900
lots of ways of doing this, but what I'm going to do is suggest that on the tank we have

71
00:04:38.900 --> 00:04:42.900
ourselves a variable, which is a firing category variable, so

72
00:04:42.900 --> 00:04:46.900
it comes in here firing and it lets us set the launch speed. So, if you want a micro-

73
00:04:46.900 --> 00:04:50.900
challenge, setup a float called launch speed, put it in the firing category, make it available on the tank

74
00:04:50.900 --> 00:04:54.900
blueprint. And I'm just going to go ahead and do that now. It's not

75
00:04:54.900 --> 00:04:58.900
that complicated, hopefully. So, in order for it to be visible, it needs to be a UPROPERTY.

76
00:04:58.900 --> 00:05:02.900
It needs to be (EditAnywhere, that's the

77
00:05:02.900 --> 00:05:06.900
annotation we need. The Category = Firing)

78
00:05:06.900 --> 00:05:10.900
just to group things together nicely. Then, it's going to be a float because it's not whole numbers.

79
00:05:10.900 --> 00:05:14.900
LaunchSpeed because the speed is just a scaler, it doesn't have a

80
00:05:14.900 --> 00:05:18.900
direction, and I'm going to say 10,000 and this is a

81
00:05:18.900 --> 00:05:22.900
sensible starting value,  "starting

82
00:05:22.900 --> 00:05:26.900
value". In fact, let's use 100,000. I'm just trying to guess here, but we'll try and pick something

83
00:05:26.900 --> 00:05:30.900
as a vaguely sensible starting value of 100

84
00:05:30.900 --> 00:05:34.900
or is this 1,000 meters per second, because it's in centimeters a second.

85
00:05:34.900 --> 00:05:38.900
So there you go, strip off the centimeters, you get 1,000 meters a second. That's a few thousand

86
00:05:38.900 --> 00:05:42.900
mile an hour. Maybe 3,000 mile an hour? That's probably about right, it's a super sonic

87
00:05:42.900 --> 00:05:46.900
tank shells going like billio, it's probably not far off. But this is just a sensible

88
00:05:46.900 --> 00:05:50.900
default, and it'll of course be overridable in Blueprint. So there you go, we have a

89
00:05:50.900 --> 00:05:54.900
launch speed! Now, when the Tank.cpp calls

90
00:05:54.900 --> 00:05:58.900
the AimAt method, let's give ourselves some more space. Previously

91
00:05:58.900 --> 00:06:02.900
it's only said AimAt a particular location, but you can't solve that, you actually need

92
00:06:02.900 --> 00:06:06.900
to know the LaunchSpeed. It's no good trying to get to a particular location without

93
00:06:06.900 --> 00:06:10.900
knowing the speed, because there's a whole host of combinations of speeds and

94
00:06:10.900 --> 00:06:14.900
barrel angles that will get you to the other tank. So, from the outside of the tank, in

95
00:06:14.900 --> 00:06:18.900
terms of the tank's public interface, it's fine that we just say to

96
00:06:18.900 --> 00:06:22.900
the tank hey, aim at this thing! It's not my business, from the outside of the tank,

97
00:06:22.900 --> 00:06:26.900
what combination of projectile velocity and barrel angle you use,

98
00:06:26.900 --> 00:06:30.900
alright, but from inside the tank it's going to have a notion of LaunchSpeed and it's going to pass

99
00:06:30.900 --> 00:06:34.900
that notion of LaunchSpeed down to it's TankAimingComponent. So that's what

100
00:06:34.900 --> 00:06:38.900
I'm doing there, I've made a private member called that, passed it down. Let's just compile

101
00:06:38.900 --> 00:06:42.900
and make sure that's visible on the blueprint, as we'd expect it to. What I'm hoping will

102
00:06:42.900 --> 00:06:46.900
happen is, on the Tank_BP here in the right-hand side under details, when this

103
00:06:46.900 --> 00:06:50.900
compilation finishes a section should pop in called firing, and

104
00:06:50.900 --> 00:06:54.900
then, it'll have a LaunchSpeed and it'll say 10,000. If I do it right What have I done?

105
00:06:54.900 --> 00:06:58.900
"function does not take two arguments". OK, so what I've done, of course,

106
00:06:58.900 --> 00:07:02.900
is I've sent in a second argument here, which is why it was complaining, but I haven't

107
00:07:02.900 --> 00:07:06.900
modified the TankAimingComponent yet. So let's just do that, that's going to be

108
00:07:06.900 --> 00:07:10.900
quite simple. In the TankAimingComponent's AimAt method, let's take in

109
00:07:10.900 --> 00:07:14.900
a float called LaunchSpeed, because we're going to need

110
00:07:14.900 --> 00:07:18.900
to know that. And then in the implementation of it

111
00:07:18.900 --> 00:07:22.900
let's just go float LaunchSpeed). And while we're here, I'm going to get rid of

112
00:07:22.900 --> 00:07:26.900
all this stuff, all this logging, and I'm just going to say ("Firing at

113
00:07:26.900 --> 00:07:30.900
%f", because we've got a float directly.

114
00:07:30.900 --> 00:07:34.900
And then, all this rubbish can go away and we an just say LaunchSpeed.

115
00:07:34.900 --> 00:07:38.900
OK, so this will prove that this LaunchSpeed has made it all the way through

116
00:07:38.900 --> 00:07:42.900
to the component. Let's try now!

117
00:07:42.900 --> 00:07:46.900
Hopefully that all made sense. Relatively simple, I'm just setting a variable on the tank,

118
00:07:46.900 --> 00:07:50.900
delegating it down to the TankAimingComponent, which is in turn printing it out.

119
00:07:50.900 --> 00:07:54.900
So, we were saying that hopefully a firing section will appear in the

120
00:07:54.900 --> 00:07:58.900
Details tab of the Tank. It just did, it has a Launch Speed of 10,000!

121
00:07:58.900 --> 00:08:02.900
100,000 rather Let's play! You see it firing at 100,000! Now let's go

122
00:08:02.900 --> 00:08:06.900
ahead to the tank blueprint and change that to say 4,000

123
00:08:06.900 --> 00:08:10.900
and play. We have a crash. Now I

124
00:08:10.900 --> 00:08:14.900
think that, that crash is just Unreal being awkward, to be honest. I can't see

125
00:08:14.900 --> 00:08:18.900
any reason, we haven't used unprotected pointers or anything like that.

126
00:08:18.900 --> 00:08:22.900
So, let's just grin and bear it and say darn Unreal you

127
00:08:22.900 --> 00:08:26.900
crashed, but at least you're powerful, I kind of forgive you. Ah, let's go to 4,000,

128
00:08:26.900 --> 00:08:30.900
Save, Compile, run again. And

129
00:08:30.900 --> 00:08:34.900
there you go, the 4,000 is going through, so the blueprint value is overriding as we'd expect

130
00:08:34.900 --> 00:08:38.900
the C++ value. I have not idea what the sensible default is, so

131
00:08:38.900 --> 00:08:42.900
what we should do at this stage in our code is say to ourselves, admit that we no

132
00:08:42.900 --> 00:08:46.900
idea and say TODO.

133
00:08:46.900 --> 00:08:50.900
Instead of saying that, "Sensible starting value", we say "// TODO

134
00:08:50.900 --> 00:08:54.900
find sensible default". We have no idea until we start

135
00:08:54.900 --> 00:08:58.900
firing the projectiles whether this is reasonable, even in the right ball park. So we need to

136
00:08:58.900 --> 00:09:02.900
later find a sensible default, then leave it to the designer to tweak that value over

137
00:09:02.900 --> 00:09:06.900
here. OK, enough said on that bit! So we are

138
00:09:06.900 --> 00:09:10.900
pretty much ready to go on this. Let's just continue to build

139
00:09:10.900 --> 00:09:14.900
up the awareness of this method, and then I think we will leave the actual

140
00:09:14.900 --> 00:09:18.900
writing of this to the next lecture, because it's going to be too long

141
00:09:18.900 --> 00:09:22.900
otherwise. So, let's just start looking at this SuggestProjectileVelocity

142
00:09:22.900 --> 00:09:26.900
method. There's two ways to get a view on this. One is to look at the

143
00:09:26.900 --> 00:09:30.900
C++ documentation, which you can just do a Google search for, SuggestProjectile

144
00:09:30.900 --> 00:09:34.900
Velocity. And you get two answers! One is

145
00:09:34.900 --> 00:09:38.900
you'll see this one here, and if you go to that one, the one that doesn't

146
00:09:38.900 --> 00:09:42.900
say UGamePlayStatics, etc. then you'll find it's talking about the

147
00:09:42.900 --> 00:09:46.900
blueprint probably. Here you go! It's actually got much more interesting and useful information

148
00:09:46.900 --> 00:09:50.900
about what all these parameters do, so do have a look at those. In fact, that's going to be your

149
00:09:50.900 --> 00:09:54.900
homework before the next video, is to go and read about this. But also,

150
00:09:54.900 --> 00:09:58.900
keep a close eye on, pretty much keep them next to each other like this. Keep

151
00:09:58.900 --> 00:10:02.900
a close eye on the other documentation you'll find in Google, which is

152
00:10:02.900 --> 00:10:06.900
where it actually tells you about the C+ method, because you'll find that

153
00:10:06.900 --> 00:10:10.900
you don't, for example, have a WorldContextObject on the blueprint. You

154
00:10:10.900 --> 00:10:14.900
do have a StartLocation. You do have an EndLocation. It doesn't

155
00:10:14.900 --> 00:10:18.900
output at TossVelocity in the same way. You see the blueprint's a little bit difficult,

156
00:10:18.900 --> 00:10:22.900
different rather. It does have an OverrideGravity, etc. and there's more

157
00:10:22.900 --> 00:10:26.900
things, a few more in here. So basically, make sure that

158
00:10:26.900 --> 00:10:30.900
you've got some idea what this guy does. It's designed for

159
00:10:30.900 --> 00:10:34.900
First Person Shooters for giving affordances, we call it, when you say throw

160
00:10:34.900 --> 00:10:38.900
a grenade into the distance. It's like a grenade landing marker, that's the point of view

161
00:10:38.900 --> 00:10:42.900
using this. It's working out where your grenade would land if you fire. Now, and that's why they use the word

162
00:10:42.900 --> 00:10:46.900
Toss because you toss grenades. Well, we don't really toss tank shells, that sounds a bit

163
00:10:46.900 --> 00:10:50.900
wet, we fire them with gusto! So, we're going to

164
00:10:50.900 --> 00:10:54.900
call this LaunchSpeed but you get the idea. So, that's your homework. I want

165
00:10:54.900 --> 00:10:58.900
you to get to these two documents, by searching Google

166
00:10:58.900 --> 00:11:02.900
as I just did for SuggestProjectileVelocity, all one word.

167
00:11:02.900 --> 00:11:06.900
Look at these two results, the GameplayStatics and the other one which I have on the screen now.

168
00:11:06.900 --> 00:11:10.900
Make sure you've got some idea of how that works. Recap what I showed you back here,

169
00:11:10.900 --> 00:11:14.900
with regards to these arcs and the velocities, and just mentally prepare

170
00:11:14.900 --> 00:11:18.900
yourself that you understand what we're trying to do here. One gotcha is understand

171
00:11:18.900 --> 00:11:22.900
that TossVelocity is an out parameter

172
00:11:22.900 --> 00:11:26.900
and that it's a bit odd to give us the velocity out. I'd rather it give

173
00:11:26.900 --> 00:11:30.900
you the direction out because the size of this TossVelocity is constrained by the

174
00:11:30.900 --> 00:11:34.900
TossSpeed. So actually, the only information coming out of Toss

175
00:11:34.900 --> 00:11:38.900
Velocity is the direction of it, if that makes sense, because it's always

176
00:11:38.900 --> 00:11:42.900
going to have a length of TossSpeed but

177
00:11:42.900 --> 00:11:46.900
we can deal with that ourselves. So, make sure all of what I've just said makes sense, and I will

178
00:11:46.900 --> 00:11:50.900
see you in the next video, where we'll actually use this method in anger

179
00:11:50.900 --> 00:11:53.966
or joy! Anyway, see you there!


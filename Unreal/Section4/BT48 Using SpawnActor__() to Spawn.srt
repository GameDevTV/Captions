
1
00:00:00,000 --> 00:00:04,000
So welcome to using

2
00:00:04,000 --> 00:00:08,000
SpawnActor to Spawn! In this video we will be doing exactly what I

3
00:00:08,000 --> 00:00:12,000
just said, and by the end of it, you'll be able to point your tank barrel, click, and then

4
00:00:12,000 --> 00:00:17,433
spawn these 1 by 1 meter projectiles, at the end of the barrel. Pretty fun hey!

5
00:00:17,433 --> 00:00:21,433
So let's pick up where we left off! What we were trying to do

6
00:00:21,433 --> 00:00:25,433
is to get this projectile blueprint working, and it didn't work, so we had to go to

7
00:00:25,433 --> 00:00:29,433
4.12 and then we got an exasperation of our jitterbug and now we're

8
00:00:29,433 --> 00:00:33,433
back to where we were. So the projectile blueprint, let's take a look at it! We have a

9
00:00:33,433 --> 00:00:37,433
Projectile, a DefaultSceneRoot. That shouldn't have a Scale of 100! If yours has got

10
00:00:37,433 --> 00:00:41,433
a Scale of 100, set it back to 1, and then, add yourself a sphere

11
00:00:41,433 --> 00:00:45,433
so that we can actually see this guy. So I have a Projectile with a

12
00:00:45,433 --> 00:00:49,433
DefaultSceneRoot with a Scale of 1 and a Sphere with a Scale of 1. Let's

13
00:00:49,433 --> 00:00:53,433
compile and save that projectile. I'm going to delete the one that's already in the scene,

14
00:00:53,433 --> 00:00:57,433
and just try popping a new one in from the blueprint

15
00:00:57,433 --> 00:01:01,433
and play and there it is! It's a 1 meter sphere, all

16
00:01:01,433 --> 00:01:05,433
very nice! Good! So that's going to be big enough to see. I'm going to delete the instance in the

17
00:01:05,433 --> 00:01:09,433
world, in the World Outliner you can see there are no projectiles there right now. I'm just going to

18
00:01:09,433 --> 00:01:13,433
save everything, and this is a good starting point. So what we're going to want to do is be

19
00:01:13,433 --> 00:01:17,433
able to instantiate that projectile from code. So how are we going to go about

20
00:01:17,433 --> 00:01:21,433
that? Well let's go ahead and open up our C++ and think

21
00:01:21,433 --> 00:01:25,433
about it. One of the first things we're going to need is a reference to that projectile

22
00:01:25,433 --> 00:01:29,433
here in the C++ right. So the tank itself is going to need

23
00:01:29,433 --> 00:01:33,433
to know something about the projectile. So I'm going to make a UPROPERTY.

24
00:01:33,433 --> 00:01:37,433
I'm going to make it (EditAnywhere).

25
00:01:37,433 --> 00:01:41,433
That's pretty much the last time we're going to use a (EditAnywhere), because there's another option called EditDefaultsOnly, but

26
00:01:41,433 --> 00:01:45,433
I'm just not going to go into it right now, there's a bit too much else going on in this video.

27
00:01:45,433 --> 00:01:49,433
So Category = Setup. It's going to be about the setup of

28
00:01:49,433 --> 00:01:53,433
the tank. Then, we're going to have, we're going to start just with a

29
00:01:53,433 --> 00:01:57,433
UClass* pointer, and it's going to be called

30
00:01:57,433 --> 00:02:01,433
ProjectileBlueprint.

31
00:02:01,433 --> 00:02:05,433
Now there is an alternative to using a UClass* pointer here,

32
00:02:05,433 --> 00:02:09,433
and let me show you, it's in the resources of your notes. If you click resource number 2, which is both

33
00:02:09,433 --> 00:02:13,433
in the lectures, it should also be attached to this video, then you get here. And you can see

34
00:02:13,433 --> 00:02:17,433
we can do UClass* or we get the TSubclasOf.

35
00:02:17,433 --> 00:02:21,433
So what I'm going to do is, I'm just going to reference you to that in the code, and you can

36
00:02:21,433 --> 00:02:25,433
read that on your own time and decide which way you want to do it. I'm going to do it with a UClass*

37
00:02:25,433 --> 00:02:29,433
to start with, because it's just simpler and again it avoids me introducing too

38
00:02:29,433 --> 00:02:33,433
many concepts in one video. So

39
00:02:33,433 --> 00:02:37,433
I'm going to say "// Alternative"

40
00:02:37,433 --> 00:02:41,433
there and just paste it in the code OK.

41
00:02:41,433 --> 00:02:45,433
Fantastic! So we now have the ability to set a

42
00:02:45,433 --> 00:02:49,433
projectile blueprint on every single instance of

43
00:02:49,433 --> 00:02:53,433
the tank, actually, and we'll talk about the difference between EditAnywhere

44
00:02:53,433 --> 00:02:57,433
and EditDefaultsOnly, later. I'm having to hold myself back from talking about that

45
00:02:57,433 --> 00:03:01,433
now, because, as I said, there's enough to think about in this video, without worrying

46
00:03:01,433 --> 00:03:05,433
about that, but it's very much on the top of my agenda to start talking about that. It's a protection

47
00:03:05,433 --> 00:03:09,433
mechanism using the other one, basically. So

48
00:03:09,433 --> 00:03:13,433
now let's go have a look at this tank blueprint! And we should now on the tank

49
00:03:13,433 --> 00:03:17,433
itself, under the Setup, be able to choose the Projectile Blueprint.

50
00:03:17,433 --> 00:03:21,433
Now, this lets me choose absolutely

51
00:03:21,433 --> 00:03:25,433
anything, any class you see, because we said, in the

52
00:03:25,433 --> 00:03:29,433
code, I want a UClass* a pointer to any

53
00:03:29,433 --> 00:03:33,433
UClass. And that's fine but look, the designer can set anything, and most of these things

54
00:03:33,433 --> 00:03:37,433
aren't going to work. One of them, of course, is the projectile blueprint

55
00:03:37,433 --> 00:03:41,433
right down here, but let's do better than that.

56
00:03:41,433 --> 00:03:45,433
Let's go to the other option [laughs] And you see, if you choose the wrong thing the Editor

57
00:03:45,433 --> 00:03:49,433
crashes. So let's reopen, and now that I've shown you the reason let's go to the

58
00:03:49,433 --> 00:03:53,433
other option, instead of a UClass*. So let's just let the Editor

59
00:03:53,433 --> 00:03:57,433
reopen, assess the damage from it crashing.

60
00:03:57,433 --> 00:04:01,433
I don't think anything drastic has gone wrong, we can fix it if it has.

61
00:04:01,433 --> 00:04:05,433
Let's go back into our code. Instead of this UClass*, I'm going to go

62
00:04:05,433 --> 00:04:09,433
and look at that alternative. Here it is! It's TSubclassOf,

63
00:04:09,433 --> 00:04:13,433
and then the class would be a projectile, and then, we'd give it a name. OK,

64
00:04:13,433 --> 00:04:17,433
so let's go use that! TSubclass

65
00:04:17,433 --> 00:04:21,433
Of like that.

66
00:04:21,433 --> 00:04:25,433
Generic format, <AProjectile>

67
00:04:25,433 --> 00:04:29,433
just pinning down the exact class. Remember that the projectile

68
00:04:29,433 --> 00:04:33,433
bluepring is based upon the Projectile.h

69
00:04:33,433 --> 00:04:37,433
class or the <AProjectile> class, and then, it doesn't need to be a

70
00:04:37,433 --> 00:04:41,433
pointer now, because that's built into the way the TSubclssOf works. I can get rid of

71
00:04:41,433 --> 00:04:45,433
this alternative, because we're using it. We need to make sure that a projectile

72
00:04:45,433 --> 00:04:49,433
is available. Is it? No. We don't want to #include it, for reasons talked about

73
00:04:49,433 --> 00:04:53,433
before. So now let's just go straight in and do a forward declaration of a AProjectile;

74
00:04:53,433 --> 00:04:57,433
and then, now we should actually be able to set this.

75
00:04:57,433 --> 00:05:01,433
Let's try! So you'll see the difference,

76
00:05:01,433 --> 00:05:05,433
it'll all come together in a moment, when we get to the tank blueprint

77
00:05:05,433 --> 00:05:09,433
and we go to the Tank, the top tank.

78
00:05:09,433 --> 00:05:13,433
And then, where it says Projectile Blueprint, look at the magic when we click this dropdown now.

79
00:05:13,433 --> 00:05:17,433
Hah, you can only choose a Projectile C++ class or a Projectile

80
00:05:17,433 --> 00:05:21,433
blueprint. We want the blueprint, because we want all the modifications the designer may have

81
00:05:21,433 --> 00:05:25,433
made, on top of the C++ in this blueprint, like how this thing looks and any

82
00:05:25,433 --> 00:05:29,433
particle effects. Cool! So let's save everything! Run

83
00:05:29,433 --> 00:05:33,433
the game and nothing happens, of course, but we actually

84
00:05:33,433 --> 00:05:37,433
do have now available to us, in the C++, a

85
00:05:37,433 --> 00:05:41,433
concept of a projectile blueprint, which is one of the things

86
00:05:41,433 --> 00:05:45,433
you're going to need to do the spawning. The other thing you're going to need to do

87
00:05:45,433 --> 00:05:49,433
the spawning is the concept of a barrel. Now, we had a barrel reference that we

88
00:05:49,433 --> 00:05:53,433
pass straight through, if you remember, with this setter,

89
00:05:53,433 --> 00:05:57,433
all the way through to the TankAimingComponent I believe, under SetBarrel

90
00:05:57,433 --> 00:06:01,433
Reference. Yeah, but we're going to want a local barrel reference, so let's just make one

91
00:06:01,433 --> 00:06:05,433
of those under private. It's just going to be a simple... What's the

92
00:06:05,433 --> 00:06:09,433
class name? TankBarrel*

93
00:06:09,433 --> 00:06:13,433
pointer Barrel = nullptr null pointer.

94
00:06:13,433 --> 00:06:17,433
If you're not sure what it's for, make a comment. "// Local

95
00:06:17,433 --> 00:06:21,433
barrel reference for spawning projectile".

96
00:06:21,433 --> 00:06:25,433
It's commenting as to why you're keeping a reference here.

97
00:06:25,433 --> 00:06:29,433
OK, so in the .cpp, under the setter, we're not just passing the barrel reference down

98
00:06:29,433 --> 00:06:33,433
to the aiming component, but we can just say that Barrel =

99
00:06:33,433 --> 00:06:37,433
BarrelToSet, like so.

100
00:06:37,433 --> 00:06:41,433
So we're keeping a local reference to the barrel. If you want to, you can recompile.

101
00:06:41,433 --> 00:06:45,433
I would say that's over-recompiling at this stage, and then, what we need to do

102
00:06:45,433 --> 00:06:49,433
is we need to protect this pointer, if there's no barrel,

103
00:06:49,433 --> 00:06:53,433
then we're out of here.

104
00:06:53,433 --> 00:06:57,433
Otherwise... Now did that compile succeed or fail? It failed, let's just finish

105
00:06:57,433 --> 00:07:01,433
the code we're writing, otherwise "// Spawn a projectile",

106
00:07:01,433 --> 00:07:05,433
I'm inside the Fire() method here, "at the

107
00:07:05,433 --> 00:07:09,433
socket location on the barrel".

108
00:07:09,433 --> 00:07:13,433
OK, so that's what we're going to need to do. Let's fix up the compilation errors.

109
00:07:13,433 --> 00:07:17,433
So I'm missing, on line 50 here, a semicolon,

110
00:07:17,433 --> 00:07:21,433
and all it is, is that I've got TankBarrel* pointer when I need UTankBarrel* pointer. And it

111
00:07:21,433 --> 00:07:25,433
understands TankBarrel because we have done a forward declaration of it.

112
00:07:25,433 --> 00:07:29,433
OK, over in the C++, let's go ahead and recompile,

113
00:07:29,433 --> 00:07:33,433
and then, we'll be ready to

114
00:07:33,433 --> 00:07:37,433
discover the method you need to do the spawning. You can write the method, and we should be spawning projectiles

115
00:07:37,433 --> 00:07:41,433
on the end of our barrel. While we talk about that, let's go to the barrel, see where the socket

116
00:07:41,433 --> 00:07:45,433
location is. I'm going to move the socket just outside the end of the barrel, so we can definitely see it, and

117
00:07:45,433 --> 00:07:49,433
then, save that tank barrel mesh. The compile is complete!

118
00:07:49,433 --> 00:07:53,433
So we are pretty much good to go. Now look, this is the method you need, GetWorld().

119
00:07:53,433 --> 00:07:57,433
From your GetWorld() you Spawn an Actor. Now,

120
00:07:57,433 --> 00:08:01,433
that SpawnActor() method actually has a generic format, you can see in the

121
00:08:01,433 --> 00:08:05,433
chevrons here <T>. It's telling me what type do you want me to act

122
00:08:05,433 --> 00:08:09,433
on. Well we want you to act on a

123
00:08:09,433 --> 00:08:13,433
U, it's not U is it, it's <AProjectile>.

124
00:08:13,433 --> 00:08:17,433
So we're going to act on an <AProjectile>. Then, there are several

125
00:08:17,433 --> 00:08:21,433
signatures. Now, what I want you to do is use signature number 2 for this challenge.

126
00:08:21,433 --> 00:08:25,433
I want you to go and find the class of the thing you're going to spawn, it's the projectile blueprint we just

127
00:08:25,433 --> 00:08:29,433
setup, and then, the location and rotation only, you don't need this other parameter.

128
00:08:29,433 --> 00:08:33,433
And you're going to get those things by querying the

129
00:08:33,433 --> 00:08:37,433
socket. So you're going to go barrel and then you're going to do get something to do with the

130
00:08:37,433 --> 00:08:41,433
socket, pass in an F name, and make it work. So that's your challenge. I'm not

131
00:08:41,433 --> 00:08:45,433
going to hold your hand all the way through. I want you to fill in the rest of that method, and if I'd have

132
00:08:45,433 --> 00:08:49,433
spelled it right, we are nearly good to go! So here's your challenge, back to the slides!

133
00:08:49,433 --> 00:08:53,433
And spawn the projectile! Fill-in the SpawnActor() parameters

134
00:08:53,433 --> 00:08:57,433
and test that it works. Go ahead, pause the video, see if you can get it spawning now!

135
00:08:57,433 --> 00:09:01,433


136
00:09:01,433 --> 00:09:05,433
OK, let's see if we can make this spawning stuff happen! I'm going to spread this out onto a few different

137
00:09:05,433 --> 00:09:09,433
lines, just for clarity. So it is the Projectile

138
00:09:09,433 --> 00:09:13,433
Blueprint that we setup, is the thing that we're going to spawn.

139
00:09:13,433 --> 00:09:17,433
Now, where are we going to spawn it? We're going to go to the barrel, then

140
00:09:17,433 --> 00:09:21,433
we are going to say... Now hold on, does it have a

141
00:09:21,433 --> 00:09:25,433
concept of Barrel? It's complaining about Barrel. Let's see, we did a forward declaration, but

142
00:09:25,433 --> 00:09:29,433
no we haven't #included the barrel, so we better do that.

143
00:09:29,433 --> 00:09:33,433


144
00:09:33,433 --> 00:09:37,433
OK, so that should, when it catches up, stop it complaining about that. So we can do a Barrel->,

145
00:09:37,433 --> 00:09:41,433
and then, we can say GetSocket

146
00:09:41,433 --> 00:09:45,433
Location().

147
00:09:45,433 --> 00:09:49,433
And then, we need to pass that an F name. The auto-complete is not

148
00:09:49,433 --> 00:09:53,433
catching up right now, but you need to do it by name, so (FName InSocketLocation).

149
00:09:53,433 --> 00:09:57,433
So you construct the FName like this, and then, unfortunately we're now into string referencing.

150
00:09:57,433 --> 00:10:01,433
Because it's a string, I want to go to the Barrel, go to the Socket Manager,

151
00:10:01,433 --> 00:10:05,433
and go and actually copy the socket name and then

152
00:10:05,433 --> 00:10:09,433
paste it in. Great, so that should get the socket location!

153
00:10:09,433 --> 00:10:13,433
The next thing is to get the SocketRotation, which is almost the same

154
00:10:13,433 --> 00:10:17,433
with rotation. So if you did all that yourself, well done!

155
00:10:17,433 --> 00:10:21,433
That's really great news! I'm going to save that there. Think about whether

156
00:10:21,433 --> 00:10:25,433
anything else needs to be included. Are we doing anything on the projectile?

157
00:10:25,433 --> 00:10:29,433
Umm, we are using a projectile class here. We're

158
00:10:29,433 --> 00:10:33,433
using a ProjectileBlueprint. I think we are going to need to, yes

159
00:10:33,433 --> 00:10:37,433
we are going to need to include the projectile. Let's see the compilation error, if we don't.

160
00:10:37,433 --> 00:10:41,433
Save everything as we go, just so that you see that error.

161
00:10:41,433 --> 00:10:45,433
If the compilation fails, what

162
00:10:45,433 --> 00:10:49,433
do we get? It doesn't like Tank.h, it doesn't like the declaration of

163
00:10:49,433 --> 00:10:53,433
AProjectile, and then, Tank.h 47... It's

164
00:10:53,433 --> 00:10:57,433
giving us a pretty cryptic error here, actually, but I think what's going on is

165
00:10:57,433 --> 00:11:01,433
that we just need to be including the projectile.

166
00:11:01,433 --> 00:11:05,433


167
00:11:05,433 --> 00:11:09,433
So OK, let's try recompiling.

168
00:11:09,433 --> 00:11:13,433


169
00:11:13,433 --> 00:11:17,433
We'll just do that Save All as well, and it wanted me to save the battleground. There you go, that's good!

170
00:11:17,433 --> 00:11:21,433
No stars, that's always good in case something crashes. Let's play the game! Ah, look at

171
00:11:21,433 --> 00:11:25,433
that! How fun is that?! I can now spawn projectiles

172
00:11:25,433 --> 00:11:29,433
wherever the barrel is pointing! Very cool!

173
00:11:29,433 --> 00:11:33,433
Fantastic! That's great progress for this video! Let's save everything carefully, commit

174
00:11:33,433 --> 00:11:36,533
our work, and I'll see you soon!


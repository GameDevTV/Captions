WEBVTT

1
00:00:00.000 --> 00:00:04.000
Hey and welcome to Modular

2
00:00:04.000 --> 00:00:08.000
Arithmetic and Cycles! We're going to be talking about the modulus operator.

3
00:00:08.000 --> 00:00:12.000
and we're going to be writing ourselves a new Blueprint function here. which will allow our guy

4
00:00:12.000 --> 00:00:16.000
to finally cycle between more than just two points. In fact. an arbitrary

5
00:00:16.000 --> 00:00:20.000
number of targets points. waypoints. or any actors in the world.

6
00:00:20.000 --> 00:00:24.000
this guy will now run between. So he's truly patrolling. a little bit frantically because he's

7
00:00:24.000 --> 00:00:29.166
running. but he is patrolling in a very keen new employee sort of way. So I'll see you in there!

8
00:00:29.166 --> 00:00:33.166
OK. so we want to get this AI finally cycling between

9
00:00:33.166 --> 00:00:37.166
patrols. and he's going to need to cycle the waypoint index number.

10
00:00:37.166 --> 00:00:41.166
depending on how many waypoints this AI is supposed to be visiting...

11
00:00:41.166 --> 00:00:45.166
You know what. I'm fed up with turning this camera around. Give me a second. I'm going to grab the player.

12
00:00:45.166 --> 00:00:49.166
spin him around until... I need to grab the right thing though. let's go to the

13
00:00:49.166 --> 00:00:53.166
World Outliner. find the

14
00:00:53.166 --> 00:00:57.166
FirstPersonCharacter. rotate watching the camera preview. Now. when we

15
00:00:57.166 --> 00:01:01.166
go. we can see Harry or Steve or whatever his name is running without having to keep turning. Anyway.

16
00:01:01.166 --> 00:01:05.166
here he is. here's the dude. Harry. Steve... What's his name? Steve.

17
00:01:05.166 --> 00:01:09.166
that's him! And if we look at his patrol points then he's got a handful of them. and what we

18
00:01:09.166 --> 00:01:13.166
want is the patrol point index number to go 0. 1. 2. 3.

19
00:01:13.166 --> 00:01:17.166
0. 1. 2. 3. 0. 1. 2. 3. So that's what we want to achieve! How are we going to do it? We're going to

20
00:01:17.166 --> 00:01:21.166
use something called the Modulus Operator. Now. if you are an experienced developer

21
00:01:21.166 --> 00:01:25.166
and you think you know Modulus like the back of your hand. you probably do. and you can skip ahead to the challenge

22
00:01:25.166 --> 00:01:29.166
slide or just listen to me explaining it. if you wish. So what is Modulus?

23
00:01:29.166 --> 00:01:33.166
Its percent is the operator we use. it's a special kind of division which only spits out the

24
00:01:33.166 --> 00:01:37.166
remainder of the division. So let's take some examples! One Modulo

25
00:01:37.166 --> 00:01:41.166
3. like that. = 0 + 1/3. You'll

26
00:01:41.166 --> 00:01:45.166
see why I bother with a 0 in the front. but the important thing is that 1 Modulo 3 is

27
00:01:45.166 --> 00:01:49.166
a 1/3. so the Modulus is 1. it's the remainder of the division. It's a bit of a

28
00:01:49.166 --> 00:01:53.166
special case below. where the left-hand side is below the right-hand side. but it'll

29
00:01:53.166 --> 00:01:57.166
become clear in a pattern in a minute. Two mod 3 is 0 + 2/3.

30
00:01:57.166 --> 00:02:01.166
so the modulus is 2. the remainder is 2. Three mod 3 is the first time it's

31
00:02:01.166 --> 00:02:05.166
a little bit different. because 3 divided by 3 is 1 and we have no 1/3's left

32
00:02:05.166 --> 00:02:09.166
over. so the modulus becomes 0. We've gone all the way around the clock!

33
00:02:09.166 --> 00:02:13.166
Five mode 3 is 1 + 2/3. Remember you're all back to the

34
00:02:13.166 --> 00:02:17.166
school days of working out how to turn proper into improper fractions and stuff

35
00:02:17.166 --> 00:02:21.166
like that. So 1 + 2/3 so the mod becomes 2. And 7

36
00:02:21.166 --> 00:02:25.166
mod 3. well you've got 6. you've gone around twice. so 2 loads

37
00:02:25.166 --> 00:02:29.166
of 3 gives you the 6. and then. a 1/3 left over so the modulus is one. So if you're not

38
00:02:29.166 --> 00:02:33.166
sure then pause the video there. have a look at it. and make sure that those numbers make sense. You can wiki

39
00:02:33.166 --> 00:02:37.166
for mod. if you like. You can put it into Google. you can say 11 mod whatever.

40
00:02:37.166 --> 00:02:41.166
by just putting. literally. the percent sign into Google and its calculator will tell you.

41
00:02:41.166 --> 00:02:45.166
Whatever. play with it. make sure you understand it. but don't spend too long because on this slide

42
00:02:45.166 --> 00:02:49.166
I'm going to explain it a different way. Imagine we had 8 waypoints that we wanted to

43
00:02:49.166 --> 00:02:53.166
visit. then what we'd be wanting to do with the array index is going 0. 1. 2. 3. 4. 5. 6.

44
00:02:53.166 --> 00:02:57.166
7. 0. 1. 2. 3. 4. 5. 6. 7. in a circle like that! So the first time around.

45
00:02:57.166 --> 00:03:01.166
we use mod 8! This is a mod

46
00:03:01.166 --> 00:03:05.166
8 arithmetic that we're bringing ourselves into. so 0 mod

47
00:03:05.166 --> 00:03:09.166
8 is 0. 1 mod 8 is 1. 2 mod 8 is 2. it's very boring the first time around. you just

48
00:03:09.166 --> 00:03:13.166
get what you put in! And the second time around it does what we said before. 8 mod 8 is

49
00:03:13.166 --> 00:03:17.166
0. there's no remainder. Nine mod 9 is 1. 10 mod 8 is 2. and

50
00:03:17.166 --> 00:03:21.166
so on. So you can see. as we count up with this number. then the answer

51
00:03:21.166 --> 00:03:25.166
goes 0. 1. 2. 3. 4. 5. 6. 7. 0. 1. 2. 2. 4. 5. 6. 7 it just keeps

52
00:03:25.166 --> 00:03:29.166
going around this circle and that is fine! So that is Modulus Arithmetic.

53
00:03:29.166 --> 00:03:33.166
and it can be very useful to use this mod operator. to take a number of any size

54
00:03:33.166 --> 00:03:37.166
and say how many times around the circle have we gone. You know. once.

55
00:03:37.166 --> 00:03:41.166
1.3 times. whatever. that's what you're basically saying. But there is a

56
00:03:41.166 --> 00:03:45.166
bug in the closet. and the but in the closet is this. if we store that index value. i.e.

57
00:03:45.166 --> 00:03:49.166
the number on the left-hand side that keeps getting bigger. if we store that then

58
00:03:49.166 --> 00:03:53.166
eventually we'll go out of range. For example. if it's stored as a 32 bit integer then at 4

59
00:03:53.166 --> 00:03:57.166
billiionish. 2 to the 32. this thing is going to cycle back to 0. and

60
00:03:57.166 --> 00:04:01.166
when it cycles back to 0. the counter will go wrong and skip.

61
00:04:01.166 --> 00:04:05.166
probably. The chances it doesn't go wrong are very low. The chances are you're doing mod 5. mod

62
00:04:05.166 --> 00:04:09.166
7. mod something like that. and you'll be very lucky if you

63
00:04:09.166 --> 00:04:13.166
coincide. when your counter flips to 0. that you happen to be at the top of the

64
00:04:13.166 --> 00:04:17.166
circle. So we don't want to leave that to chance and we don't even need to be storing those big numbers. we just

65
00:04:17.166 --> 00:04:21.166
need to store the result. So all we actually need to store is what we get

66
00:04:21.166 --> 00:04:25.166
out of the mod. That's all we need to keep track of. 7. because if we go 7 + 1

67
00:04:25.166 --> 00:04:29.166
and mod the answer we get 8. which is 0 because 8 mod

68
00:04:29.166 --> 00:04:33.166
8 is 0. So we only actually need to store the answer. we don't store the thing on the left-

69
00:04:33.166 --> 00:04:37.166
hand side. So there's a got ya. that's the bug in the closet. if you like.

70
00:04:37.166 --> 00:04:41.166
So what I want you to do now. reminding ourselves where we are now we're in the Blueprint

71
00:04:41.166 --> 00:04:45.166
task. we're in our custom task that we've created... And

72
00:04:45.166 --> 00:04:49.166
what's it called? Let's remind ourselves even what that custom task is called! It's called ChooseNextWaypoint!

73
00:04:49.166 --> 00:04:53.166
Inside the definition of ChooseNextWaypoint. we've got the patrol points

74
00:04:53.166 --> 00:04:57.166
off of the ThirdPersonCharacter. We have set our next waypoint like this!

75
00:04:57.166 --> 00:05:01.166
So we've used things like Patrol Point arrays. Index numbers. Set Blackboard

76
00:05:01.166 --> 00:05:05.166
Value as Object. we've done all that. So what I want you to do now

77
00:05:05.166 --> 00:05:09.166
is to go ahead and write the contents of this Cycle Index function. write it out

78
00:05:09.166 --> 00:05:13.166
here. as we did before. make sure it works. collapse it down to a function. So here is

79
00:05:13.166 --> 00:05:17.166
your challenge slide! I want you to get the cycling working completely! Let's write

80
00:05:17.166 --> 00:05:21.166
our final Blueprint function. There's a new node you'll have to use. which is Set

81
00:05:21.166 --> 00:05:25.166
Blackboard Value as Int. whereas previously you Set Blackboard Value as Object

82
00:05:25.166 --> 00:05:29.166
but that's fine. I want you to test that the AI does indeed cycle between the

83
00:05:29.166 --> 00:05:33.166
waypoints. and then. celebrate! Seriously. why not stick your hands in the air and make a little whoop sound. because

84
00:05:33.166 --> 00:05:37.166
you've achieved something! And share your solution with us on the forums. because we'd

85
00:05:37.166 --> 00:05:41.166
like to see how you did it and how pretty your Blueprint is! So go ahead. pause the video.

86
00:05:41.166 --> 00:05:45.166
and get the cycling working now!

87
00:05:45.166 --> 00:05:49.166
OK. so here we are! Let's take a look! What are we going to do? I'm going to get the patrol points. for a

88
00:05:49.166 --> 00:05:53.166
start. and I'm going to find out the size of this array.

89
00:05:53.166 --> 00:05:57.166
So where is that? Length. there we go!

90
00:05:57.166 --> 00:06:01.166
So that tells me the thing I'm modding by. so however long I make that array of Patrol

91
00:06:01.166 --> 00:06:05.166
Points. I get out of here the size of the array. Do you want to prove that we

92
00:06:05.166 --> 00:06:09.166
do?  Let's just go ahead and do a print node! Often. the easiest thing to do is pop a Print

93
00:06:09.166 --> 00:06:13.166
node down. then drag into it. because it normally will do the conversion

94
00:06:13.166 --> 00:06:17.166
for you. that way around. OK. let's pull the execution through the print.

95
00:06:17.166 --> 00:06:21.166
and let's just play to ensure that we actually get the size of the array.

96
00:06:21.166 --> 00:06:25.166
You won't get it until he gets to his first point. and then. it says 4. 4. 4. 4. 4.

97
00:06:25.166 --> 00:06:29.166
and that is indeed how many we have! We have four items indexed 0 to 3.

98
00:06:29.166 --> 00:06:33.166
Great! So that bit is working. we can stop printing that now.

99
00:06:33.166 --> 00:06:37.166
So we have the length of the array. that's the thing that we're going to mod by. We're

100
00:06:37.166 --> 00:06:41.166
may as well go ahead and find the mod operator straight away.

101
00:06:41.166 --> 00:06:45.166
and I want to actually put it into the bottom. just because it reads better.

102
00:06:45.166 --> 00:06:49.166
Well actually. it matters which way around you to it. as well. We're going to be saying. what is the

103
00:06:49.166 --> 00:06:53.166
current index? So here's the Index! Mod. what is the length

104
00:06:53.166 --> 00:06:57.166
of the patrol point array? Now. you can just take the

105
00:06:57.166 --> 00:07:01.166
Index. which is of what type? If you hover over it. it'll tell you. It's a Blackboard Key Selector

106
00:07:01.166 --> 00:07:05.166
Structure. You can't just take that and feed it in. because we need to get the value off it.

107
00:07:05.166 --> 00:07:09.166
but we already did that in the previous step. If you remember. we

108
00:07:09.166 --> 00:07:13.166
got the value as an integer here. in the previous

109
00:07:13.166 --> 00:07:17.166
step. the value of the current Index. So if I just reorganize this

110
00:07:17.166 --> 00:07:21.166
a little bit. So there's no point in us re-getting that value. because that's kind of

111
00:07:21.166 --> 00:07:25.166
wasting our time. So what we'd like to be able to do is output that value in

112
00:07:25.166 --> 00:07:29.166
this step of the function. So how are we going to do that?

113
00:07:29.166 --> 00:07:33.166
Well what we have on the Set Next Waypoint. remember at the top.

114
00:07:33.166 --> 00:07:37.166
we have Set Next Waypoint here. we never actually had a Return Node. So if we explicitly put

115
00:07:37.166 --> 00:07:41.166
a Return Node in. like this. then on the Return Node we can

116
00:07:41.166 --> 00:07:45.166
add an output. and we can add that output as an integer and we

117
00:07:45.166 --> 00:07:49.166
can just call it Index. And then. what we can do is. we can pipe the Index that we've already got

118
00:07:49.166 --> 00:07:53.166
in the previous phase through to that Return Node. So that's a way of outputting

119
00:07:53.166 --> 00:07:57.166
from the function. If we compile that and go back to our top level.

120
00:07:57.166 --> 00:08:01.166
which is here. you'll see that this has an Index coming out of it now. Cool!

121
00:08:01.166 --> 00:08:05.166
So we can just use that Index number. so we know what the Index is. So once

122
00:08:05.166 --> 00:08:09.166
we've got the mod. all we need to do now is Set Blackboard Value as

123
00:08:09.166 --> 00:08:13.166
Int. so now we're setting the

124
00:08:13.166 --> 00:08:17.166
value of the Index. So we've determined what the new

125
00:08:17.166 --> 00:08:21.166
Index should be by doing our mod. There is the answer! What is the Key?

126
00:08:21.166 --> 00:08:25.166
Well the Key is the Index. which is here. and that's all we want to do.

127
00:08:25.166 --> 00:08:29.166
we want to set the Index and carry on the execution.

128
00:08:29.166 --> 00:08:33.166
So hopefully. if I zoom out. that makes a little bit of sense. what we've done there. And if

129
00:08:33.166 --> 00:08:37.166
you've managed to do this challenge. then congratulations. that's a good job to you! So

130
00:08:37.166 --> 00:08:41.166
take a look at that. make sure you're clear on how it works. I'll uncross my streams. Now. let's just

131
00:08:41.166 --> 00:08:45.166
test and see if it actually does work! So let's play the game. and watch Steve

132
00:08:45.166 --> 00:08:49.166
here run off to the first waypoint. And if we're lucky. it'll increment his Index and move

133
00:08:49.166 --> 00:08:53.166
to the next one. if it doesn't. then we just need to check and see what's happening.

134
00:08:53.166 --> 00:08:57.166
So check. firstly. in your Behavior Tree. make sure that you've got

135
00:08:57.166 --> 00:09:01.166
the Blackboard Keys set properly. and then. the next thing you want to do is play the

136
00:09:01.166 --> 00:09:05.166
game and then watch his Blackboard. NextWaypointIndex. upstairs he gets

137
00:09:05.166 --> 00:09:09.166
there. and he's not setting the next waypoint properly. so we have a little bit of a

138
00:09:09.166 --> 00:09:13.166
debugging to do on here. And the problem is that I took the

139
00:09:13.166 --> 00:09:17.166
Index from the previous iteration. we set where he's going but we never

140
00:09:17.166 --> 00:09:21.166
incremented. So what I need to do. of course. is put an add + in here. not Vector

141
00:09:21.166 --> 00:09:25.166
+ Vector but integer + integer. I increment

142
00:09:25.166 --> 00:09:29.166
here by 1. and then. that is where I actually

143
00:09:29.166 --> 00:09:33.166
move on. Without this. I'm not moving on. OK. let's try that!

144
00:09:33.166 --> 00:09:37.166
So if I play the game. firstly. watch his behavior. He gets

145
00:09:37.166 --> 00:09:41.166
there. runs to the next point. Now. let's tart inspecting his

146
00:09:41.166 --> 00:09:45.166
Blackboard! Hopefully he's gone to the cube off to the right here. Yeah. he has! And then. he's carrying

147
00:09:45.166 --> 00:09:49.166
on his merry way! OK. let's take a look at the patrol data itself!

148
00:09:49.166 --> 00:09:53.166
Watch his Blackboard values. and you can see the next waypoint Index is going 0 here.

149
00:09:53.166 --> 00:09:57.166
1 for UpStairs! he's already gone around the circle. so this proves the module

150
00:09:57.166 --> 00:10:01.166
is working. and then. it goes up to... When he gets there.

151
00:10:01.166 --> 00:10:05.166
it's taking its time. EditorCube21. which is waypoint 0

152
00:10:05.166 --> 00:10:09.166
and 1. So he's just cycling between waypoints 0 and

153
00:10:09.166 --> 00:10:13.166
1. at the moment. and the reason

154
00:10:13.166 --> 00:10:17.166
for that is if you look on Steve. you'll see that his TargetPoints are

155
00:10:17.166 --> 00:10:21.166
4 and 5. If you actually click them. are in ridiculous and unfeasible

156
00:10:21.166 --> 00:10:25.166
places. so let's just fix TargetPoints 4 and 5 and put them back

157
00:10:25.166 --> 00:10:29.166
inside the map. In fact. I'm going to delete all TargetPoints. actually.

158
00:10:29.166 --> 00:10:33.166
like so. I'm going to move the UpStairs

159
00:10:33.166 --> 00:10:37.166
under our Target Points folder. because that's the only one that's working right now.

160
00:10:37.166 --> 00:10:41.166
and I'm just going to put a couple of other Target Points. I won't have him going

161
00:10:41.166 --> 00:10:45.166
to the cube anymore. I'll use just Target points. and I'll bring a couple of Target Points

162
00:10:45.166 --> 00:10:49.166
into the world. One could go there. one could go there.

163
00:10:49.166 --> 00:10:53.166
The final thing I need to do is actually tell Steve that these are his new Target Points.

164
00:10:53.166 --> 00:10:57.166
So I'm going to just find these Target Points. Target Point

165
00:10:57.166 --> 00:11:01.166
there. Target Point... Oh. it's a bit fiddly!

166
00:11:01.166 --> 00:11:05.166
Come on. Steve. let me set your Target Point!

167
00:11:05.166 --> 00:11:09.166
It's not letting me do it. I'm just going to delete

168
00:11:09.166 --> 00:11:13.166
that Target Point and add a new one.

169
00:11:13.166 --> 00:11:17.166
You see. you may. in 13.0. have to be a little bit careful about

170
00:11:17.166 --> 00:11:21.166
how you use your mouse there. There you go. he has UpStairs. TargetPoint. and TargetPoint2! Let's see

171
00:11:21.166 --> 00:11:25.166
how he behaves now! So the reason he was failing is not

172
00:11:25.166 --> 00:11:29.166
because the module is failing but because the TargetPoints were out in space. from

173
00:11:29.166 --> 00:11:33.166
when I parented them to that parent. And now. you see he is actually cycling

174
00:11:33.166 --> 00:11:37.166
between three different points. and again. if we watch that here. these values will

175
00:11:37.166 --> 00:11:41.166
go 0. 1. 2 for the WaypointIndex. 0. 1. 2 and they will

176
00:11:41.166 --> 00:11:45.166
keep repeating with any luck! And there you go! Fantastic. so you have him cycling

177
00:11:45.166 --> 00:11:49.166
between waypoints. you've learned a little bit about Modular Arithmetic! All that remains

178
00:11:49.166 --> 00:11:53.166
to finish this off is to take all of what we just wrote here. select it

179
00:11:53.166 --> 00:11:57.166
all. Collapse it to a Function. and then. I'm going to give

180
00:11:57.166 --> 00:12:01.166
that the name Cycle Index. Why not use the string I've already written. there's no point in

181
00:12:01.166 --> 00:12:05.166
retyping. Cycle Index. there you go! Got to

182
00:12:05.166 --> 00:12:09.166
delete the comment. because it's no longer relevant. Just going to check that Cycle Index

183
00:12:09.166 --> 00:12:13.166
itself is reasonably clear! It is

184
00:12:13.166 --> 00:12:17.166
reasonably clear. no cross streams. And the other thing to do is. at the top level

185
00:12:17.166 --> 00:12:21.166
here you can see that we have this input is A. which is not that clear so I'm going to

186
00:12:21.166 --> 00:12:25.166
bring up the Details Panel.

187
00:12:25.166 --> 00:12:29.166
which is actually on my right-hand side. it's just very small. And I'm going to rename the Input to

188
00:12:29.166 --> 00:12:33.166
just Index. so we have Index to Index. Great!

189
00:12:33.166 --> 00:12:37.166
So now. we have a pretty clear top-level. and. we can dive into any of these and see that

190
00:12:37.166 --> 00:12:41.166
we have reasonably clear logic. which the next thing we want to do is talk about how we translate

191
00:12:41.166 --> 00:12:45.166
this blueprint. now that we've done it here. into C++!

192
00:12:45.166 --> 00:12:45.666



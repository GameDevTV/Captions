<<<<<<< HEAD
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
Hey. so time for a quick mid-section recap and

2
00:00:04.000 --> 00:00:08.000
congratulations! Firstly congratulations. you've almost learned enough C++ to write

3
00:00:08.000 --> 00:00:12.000
pretty much any program. But if you were just to use the structures that we've

4
00:00:12.000 --> 00:00:16.000
showed you so far. plus a little sprinkling of if or switch.

5
00:00:16.000 --> 00:00:20.000
which we'll meed soon. then your code would be almost impossible

6
00:00:20.000 --> 00:00:24.000
to read. for a complex project. And even this simple

7
00:00:24.000 --> 00:00:28.000
Bull Cows Game is getting sufficiently complex. So we need to introduce another tool in our

8
00:00:28.000 --> 00:00:32.000
armory and that tool is something called the class. Now. a class is called

9
00:00:32.000 --> 00:00:36.000
a class because mathematicians came up with the idea. These days. we'd probably call it

10
00:00:36.000 --> 00:00:40.000
a type. You've already used a class actually. you've used

11
00:00:40.000 --> 00:00:44.000
string and string is beyond the basic primitive

12
00:00:44.000 --> 00:00:48.000
types that we started with. We started with int. which is a primitive type. We've also seen

13
00:00:48.000 --> 00:00:52.000
bool. which is another primitive type. meaning you don't even need to import a library to use it.

14
00:00:52.000 --> 00:00:56.000
And then quite quickly. we wanted access to string. and that came somewhere

15
00:00:56.000 --> 00:01:00.000
because we introduced <iostream> as a library. and somewhere in there it had a standard

16
00:01:00.000 --> 00:01:04.000
namespace and somewhere in there was a string. A string is a user

17
00:01:04.000 --> 00:01:08.000
defined type. which is another way of saying a class. What a class does is it

18
00:01:08.000 --> 00:01:12.000
packages together functions and variables into

19
00:01:12.000 --> 00:01:16.000
a package that allows you to talk in a very consistent way to it. as if it's a black

20
00:01:16.000 --> 00:01:20.000
box. A class is a form of abstraction. it should represent something

21
00:01:20.000 --> 00:01:24.000
real or something conceptual. so in the case of bull cow game. of course.

22
00:01:24.000 --> 00:01:28.000
bull cow game is really a concept.... So. we're going to be building ourselves a class.

23
00:01:28.000 --> 00:01:32.000
that makes a black box that allows us to do things like say. OK. Bull Cow Game.

24
00:01:32.000 --> 00:01:36.000
make a new game. OK. Bull Cow Game. go and pick a seven letter word. and don't tell me

25
00:01:36.000 --> 00:01:40.000
what it is. OK. Bull Cow Game. here's my guess; tell me how many bulls and cows

26
00:01:40.000 --> 00:01:44.000
it's got in it. OK. Bull Cow Game. tell me if the game is won! OK. Bull Cow Game.

27
00:01:44.000 --> 00:01:48.000
tell me how many turns I've got left. That sort of stuff! Put all that logic over

28
00:01:48.000 --> 00:01:52.000
in a separate class called Bull Cow Game. We're actually going to prefix it with f. because

29
00:01:52.000 --> 00:01:56.000
that's the way that Unreal does things. f Bull Cow Game. And we're going to

30
00:01:56.000 --> 00:02:00.000
only talk to this using methods. We're not going to directly access

31
00:02:00.000 --> 00:02:04.000
any of its data. any of its variables. any of its own integers and

32
00:02:04.000 --> 00:02:08.000
bulls and stuff. that's all it's business. We just need to create a really clear

33
00:02:08.000 --> 00:02:12.000
and simple interface to it. so that in this Console game we can call

34
00:02:12.000 --> 00:02:16.000
it and it gives us what we need and does what we need it to do. And in the future. we can take the same

35
00:02:16.000 --> 00:02:20.000
class and not modify it very much. in the next section. when we actually build this

36
00:02:20.000 --> 00:02:24.000
into a 3D game in the Unreal Engine. So that's the idea!

37
00:02:24.000 --> 00:02:28.000
That's what we're striving for! We're making a black box. it's another tool to allow ourselves to

38
00:02:28.000 --> 00:02:32.000
work at a higher level of abstraction and hints to keep a limited number of things

39
00:02:32.000 --> 00:02:36.000
in our mind a one point. As the problem gets more big and more complex.

40
00:02:36.000 --> 00:02:40.000
the way to make sure it doesn't occupy more than five to ten

41
00:02:40.000 --> 00:02:44.000
slots in our mind is that you just make the slots

42
00:02:44.000 --> 00:02:48.000
represent bigger things. and therefore. we need higher level tools such as classes.

43
00:02:48.000 --> 00:02:52.000
Apart from anything. if you don't understand classes you've got no change when we hit the Unreal Engine. So

44
00:02:52.000 --> 00:02:56.000
let's dive in. learn about classes. learn about a whole lot of other exciting programming tools.

45
00:02:56.000 --> 00:02:59.033
and I'll see you at the end of the section.

=======

1
00:00:00,000 --> 00:00:04,000
Hey, so time for a quick mid-section recap and

2
00:00:04,000 --> 00:00:08,000
congratulations! Firstly congratulations, you've almost learned enough C++ to write

3
00:00:08,000 --> 00:00:12,000
pretty much any program. But if you were just to use the structures that we've

4
00:00:12,000 --> 00:00:16,000
showed you so far, plus a little sprinkling of if or switch,

5
00:00:16,000 --> 00:00:20,000
which we'll meed soon, then your code would be almost impossible

6
00:00:20,000 --> 00:00:24,000
to read, for a complex project. And even this simple

7
00:00:24,000 --> 00:00:28,000
Bull Cows Game is getting sufficiently complex. So we need to introduce another tool in our

8
00:00:28,000 --> 00:00:32,000
armory and that tool is something called the class. Now, a class is called

9
00:00:32,000 --> 00:00:36,000
a class because mathematicians came up with the idea. These days, we'd probably call it

10
00:00:36,000 --> 00:00:40,000
a type. You've already used a class actually, you've used

11
00:00:40,000 --> 00:00:44,000
string and string is beyond the basic primitive

12
00:00:44,000 --> 00:00:48,000
types that we started with. We started with int, which is a primitive type. We've also seen

13
00:00:48,000 --> 00:00:52,000
bool, which is another primitive type, meaning you don't even need to import a library to use it.

14
00:00:52,000 --> 00:00:56,000
And then quite quickly, we wanted access to string, and that came somewhere

15
00:00:56,000 --> 00:01:00,000
because we introduced <iostream> as a library, and somewhere in there it had a standard

16
00:01:00,000 --> 00:01:04,000
namespace and somewhere in there was a string. A string is a user

17
00:01:04,000 --> 00:01:08,000
defined type, which is another way of saying a class. What a class does is it

18
00:01:08,000 --> 00:01:12,000
packages together functions and variables into

19
00:01:12,000 --> 00:01:16,000
a package that allows you to talk in a very consistent way to it, as if it's a black

20
00:01:16,000 --> 00:01:20,000
box. A class is a form of abstraction, it should represent something

21
00:01:20,000 --> 00:01:24,000
real or something conceptual, so in the case of bull cow game, of course,

22
00:01:24,000 --> 00:01:28,000
bull cow game is really a concept.... So, we're going to be building ourselves a class,

23
00:01:28,000 --> 00:01:32,000
that makes a black box that allows us to do things like say, OK, Bull Cow Game,

24
00:01:32,000 --> 00:01:36,000
make a new game. OK, Bull Cow Game, go and pick a seven letter word, and don't tell me

25
00:01:36,000 --> 00:01:40,000
what it is. OK, Bull Cow Game, here's my guess; tell me how many bulls and cows

26
00:01:40,000 --> 00:01:44,000
it's got in it. OK, Bull Cow Game, tell me if the game is won! OK, Bull Cow Game,

27
00:01:44,000 --> 00:01:48,000
tell me how many turns I've got left. That sort of stuff! Put all that logic over

28
00:01:48,000 --> 00:01:52,000
in a separate class called Bull Cow Game. We're actually going to prefix it with f, because

29
00:01:52,000 --> 00:01:56,000
that's the way that Unreal does things, f Bull Cow Game. And we're going to

30
00:01:56,000 --> 00:02:00,000
only talk to this using methods. We're not going to directly access

31
00:02:00,000 --> 00:02:04,000
any of its data, any of its variables, any of its own integers and

32
00:02:04,000 --> 00:02:08,000
bulls and stuff, that's all it's business. We just need to create a really clear

33
00:02:08,000 --> 00:02:12,000
and simple interface to it, so that in this Console game we can call

34
00:02:12,000 --> 00:02:16,000
it and it gives us what we need and does what we need it to do. And in the future, we can take the same

35
00:02:16,000 --> 00:02:20,000
class and not modify it very much, in the next section, when we actually build this

36
00:02:20,000 --> 00:02:24,000
into a 3D game in the Unreal Engine. So that's the idea!

37
00:02:24,000 --> 00:02:28,000
That's what we're striving for! We're making a black box, it's another tool to allow ourselves to

38
00:02:28,000 --> 00:02:32,000
work at a higher level of abstraction and hints to keep a limited number of things

39
00:02:32,000 --> 00:02:36,000
in our mind a one point. As the problem gets more big and more complex,

40
00:02:36,000 --> 00:02:40,000
the way to make sure it doesn't occupy more than five to ten

41
00:02:40,000 --> 00:02:44,000
slots in our mind is that you just make the slots

42
00:02:44,000 --> 00:02:48,000
represent bigger things, and therefore, we need higher level tools such as classes.

43
00:02:48,000 --> 00:02:52,000
Apart from anything, if you don't understand classes you've got no change when we hit the Unreal Engine. So

44
00:02:52,000 --> 00:02:56,000
let's dive in, learn about classes, learn about a whole lot of other exciting programming tools,

45
00:02:56,000 --> 00:02:59,033
and I'll see you at the end of the section.

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1

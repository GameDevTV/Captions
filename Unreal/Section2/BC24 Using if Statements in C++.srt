1
00:00:00,000 --> 00:00:01,833


2
00:00:01,833 --> 00:00:05,833
So, Using if Statements in C++!

3
00:00:05,833 --> 00:00:09,833
We'll talk about why we need conditionals for selection. We'll tell you when to use

4
00:00:09,833 --> 00:00:13,833
if verses switch, basically use if when it reads better, and then, we'll show you

5
00:00:13,833 --> 00:00:17,833
the syntax and we will write the bulls and cows calculating thing a ma

6
00:00:17,833 --> 00:00:20,899
jig. So, let's dive in and make it work!

7
00:00:20,900 --> 00:00:24,900
So, I'm pretty excited right now, because we're about to make our code actually do something useful.

8
00:00:24,900 --> 00:00:28,900
Before we carry on, thank you to those people who pointed out that, according to the Unreal coding

9
00:00:28,900 --> 00:00:32,900
standards I really should have called this BullCowCount struct FBullCow

10
00:00:32,900 --> 00:00:36,900
Count, naming structs just like classes. So, I'm going to go ahead and fix that now,

11
00:00:36,900 --> 00:00:40,900
by highlighting, clicking Control R for refactor twice,

12
00:00:40,900 --> 00:00:44,900
and then, putting an F prefix in front. That also helps

13
00:00:44,900 --> 00:00:48,900
us right here, when we see FBullCowCount

14
00:00:48,900 --> 00:00:52,900
BullCowCount, it should be. So of course, the actual name of the variable shouldn't

15
00:00:52,900 --> 00:00:56,900
change, so that was a slightly overzealous Find and Replace. OK, let

16
00:00:56,900 --> 00:01:00,900
me recompile to prove that, that works, and

17
00:01:00,900 --> 00:01:04,900
fantastic! Alright, so now we need to make this algorithm actually work, so before

18
00:01:04,900 --> 00:01:08,900
we dive into the algorithm let's go a little bit further and introduce you to an if

19
00:01:08,900 --> 00:01:12,900
statement. That's because you're going to need that in the algorithm, and then, we will write the algorithm in pseudocode

20
00:01:12,900 --> 00:01:16,900
and then actually make it happen. So, this is an if statement. It basically says if

21
00:01:16,900 --> 00:01:20,900
condition one, here in brackets, then execute a bunch of statements.

22
00:01:20,900 --> 00:01:24,900
Optionally. Whoops, excuse me! Optionally we have an else if,

23
00:01:24,900 --> 00:01:28,900
with another condition and some statements. And optionally, although I suggest you always put it

24
00:01:28,900 --> 00:01:32,900
in, you have an else and some statements. If nothing else... Excuse the pun! [Laughs]

25
00:01:32,900 --> 00:01:36,900
You should be putting else in, so that this condition here that you

26
00:01:36,900 --> 00:01:40,900
think never should happen, well that's the point you want to alert the

27
00:01:40,900 --> 00:01:44,900
developer that we should have never got here. Alright, so basically you're going to

28
00:01:44,900 --> 00:01:48,900
be using if and else and sometimes else if. Now, I should say

29
00:01:48,900 --> 00:01:52,900
that if you get to more than a handful of statements like this, then we want to be going to something called

30
00:01:52,900 --> 00:01:56,900
a switch statement, which we'll see later. Basically, use if statements when the conditions

31
00:01:56,900 --> 00:02:00,900
are slightly more complex than a switch statement, i.e. we may have different logic

32
00:02:00,900 --> 00:02:04,900
in condition one and condition two, rather than just a value like,

33
00:02:04,900 --> 00:02:08,900
you know, if it's one do this, if it's two do that, if it's three do the other. That seems like

34
00:02:08,900 --> 00:02:12,900
a switch statement, but if statements, you know, if some logic then do something and if

35
00:02:12,900 --> 00:02:16,900
some other logic do something else. That's setup for an if. So,

36
00:02:16,900 --> 00:02:20,900
we're going to look through all letters in the guess, and then, we're going to compare against letters in the hidden word.

37
00:02:20,900 --> 00:02:24,900
Then, if they match, then

38
00:02:24,900 --> 00:02:28,900
we're going to say "increment

39
00:02:28,900 --> 00:02:32,900
bulls if they're in the same place"

40
00:02:32,900 --> 00:02:36,900
and "increment cows

41
00:02:36,900 --> 00:02:40,900
if they're not".

42
00:02:40,900 --> 00:02:44,900
OK, so let's make sure we're clear on that! We go through each letter of the word. So, let's

43
00:02:44,900 --> 00:02:48,900
just write out the word ant, for example, and then, let's imagine that we've

44
00:02:48,900 --> 00:02:52,900
guessed the word and. What do we do? We start with a here,

45
00:02:52,900 --> 00:02:56,900
and we go through a. Ooh, they're the same, so that's a hit! And then, we compare that a

46
00:02:56,900 --> 00:03:00,900
to an n, looking for cows and there's no match. No match! OK, then

47
00:03:00,900 --> 00:03:04,900
we move on to the n and we compare it to the a. No match! Now, there's a

48
00:03:04,900 --> 00:03:08,900
match and it's in the same place, so that's a bull! And then, the n to the d.

49
00:03:08,900 --> 00:03:12,900
No match OK! And then, you do the same with a t. So, that the algorithm it's going through, pretty simple!

50
00:03:12,900 --> 00:03:16,900
And now what we need to do is actually start writing the loops and the if statements!

51
00:03:16,900 --> 00:03:20,900
Now, this is four levels of indentation. 1, 2, 3,

52
00:03:20,900 --> 00:03:24,900
and then, the code that'll actually be inside here is the

53
00:03:24,900 --> 00:03:28,900
fourth. You could actually say, if they're in the same place,

54
00:03:28,900 --> 00:03:32,900
"increment bulls". And this would be pseudo code that's even closer to the actual code.

55
00:03:32,900 --> 00:03:36,900
Can I spell increment? I think that's OK. And if not, or we could say

56
00:03:36,900 --> 00:03:40,900
"else increment cows".

57
00:03:40,900 --> 00:03:44,900
Now, be careful of writing code in comments, though,

58
00:03:44,900 --> 00:03:48,900
OK. So, stay away from code. This is OK here,

59
00:03:48,900 --> 00:03:52,900
just about, because it's still kind of English. So, make sure the algorithm works in

60
00:03:52,900 --> 00:03:56,900
words like this, and then, we go through and start fleshing it out.

61
00:03:56,900 --> 00:04:00,900
Now, let me do the first couple of bits of the... I'll do the outer loop for you,

62
00:04:00,900 --> 00:04:04,900
and then, I'll ask you to do the rest, OK, because I want to give you a couple of tips.

63
00:04:04,900 --> 00:04:08,900
For int32 is the name of the iterator. Now, you

64
00:04:08,900 --> 00:04:12,900
may be tempted or you may have seen i. We're going to use i here,

65
00:04:12,900 --> 00:04:16,900
and I'm going to change it later and I'm going to allow us to create a bug, so bear with me. You'll see

66
00:04:16,900 --> 00:04:20,900
i and j a lot, so I want to use it so you're exposed to it. So, for i

67
00:04:20,900 --> 00:04:24,900
starting at 0 let's go up to

68
00:04:24,900 --> 00:04:28,900
but not including the length of the hidden word.

69
00:04:28,900 --> 00:04:32,900
Now, we don't have the length of the hidden word, at the moment. So,

70
00:04:32,900 --> 00:04:36,900
right here right above the loop, we need the things that we need to

71
00:04:36,900 --> 00:04:40,900
support the loop, So, we have an int32 HiddenWord

72
00:04:40,900 --> 00:04:44,900
Length equals

73
00:04:44,900 --> 00:04:48,900
MyHiddenWord. Now, it's a string, so when you hit dot

74
00:04:48,900 --> 00:04:52,900
and access its functions, you'll find that you have a length

75
00:04:52,900 --> 00:04:56,900
option. It's a method, so you need to call it with braces. So, we're putting

76
00:04:56,900 --> 00:05:00,900
the result of looking at the hidden word's length into this variable. OK.

77
00:05:00,900 --> 00:05:04,900
So now, we can say we want to go up to the hidden word length, but not

78
00:05:04,900 --> 00:05:08,900
including it. Now, that's because when we're going to use

79
00:05:08,900 --> 00:05:12,900
this i, we're going to access the inside of a string and they start counting at

80
00:05:12,900 --> 00:05:16,900
0, remember? So, this will go from 0 to one less than

81
00:05:16,900 --> 00:05:20,900
the hidden word length, which is exactly what we want. We'll see that in a minute. Then, I'm going to put my ++,

82
00:05:20,900 --> 00:05:24,900
which means increment i, and then, I'm going to put my braces, OK. Although I'm

83
00:05:24,900 --> 00:05:28,900
going to put that second brace down at the bottom here, in the right place to

84
00:05:28,900 --> 00:05:32,900
start with. I'm doing this very slowly for now, as it's our first time with an if statement.

85
00:05:32,900 --> 00:05:36,900
It's only our second time with a for statement. So, there's our for loop, it's going to go around this!

86
00:05:36,900 --> 00:05:40,900
It's looping through all letters in the guess. Now what we want to do is compare

87
00:05:40,900 --> 00:05:44,900
that to the letters in the hidden word, so we're going to need another for statement.

88
00:05:44,900 --> 00:05:48,900
And what's quite common is that people start doing stuff

89
00:05:48,900 --> 00:05:52,900
like this. For j equals 0, because they use the next letter up.

90
00:05:52,900 --> 00:05:56,900
J is less than hidden word length, because we're going to compare all the letters to all

91
00:05:56,900 --> 00:06:00,900
the other letters, j++. Now, by the way, you might see ++

92
00:06:00,900 --> 00:06:04,900
j and that works fine as well! There's a little bit of argument as to whether there's any performance difference.

93
00:06:04,900 --> 00:06:08,900
Frankly, at this stage, we don't care whether we increment before or after, because we're not

94
00:06:08,900 --> 00:06:12,900
returning the value, alright. So, we don't want to worry about that optimization

95
00:06:12,900 --> 00:06:16,900
performance now at all. You'll also see sometimes rather than less than, you might say not

96
00:06:16,900 --> 00:06:20,900
equal to, and you might see that, that is an optimization. But again, let's not

97
00:06:20,900 --> 00:06:24,900
worry about optimization right now. Let's worry about getting the code running. If later, when

98
00:06:24,900 --> 00:06:28,800
we do performance profiling, we find out there's a problem with the speed, we will fix it then.

99
00:06:28,800 --> 00:06:32,800
You'll also notice I've used HiddenWordLength twice here. You might be asking why am I

100
00:06:32,800 --> 00:06:36,800
using guess length or maybe just WORD_LENGTH to

101
00:06:36,800 --> 00:06:40,800
illustrate the fact that the length of both the guess and the hidden word must be the same for

102
00:06:40,800 --> 00:06:44,800
this whole algorithm to make sense? Well, we're going to create a bug, and we're going to be dealing with

103
00:06:44,800 --> 00:06:47,300
it a little bit later on. You've got to learn debugging somehow!

104
00:06:47,300 --> 00:06:51,300
OK, so before handing it over to you to complete this pseudo code, I want to check a couple of things.

105
00:06:51,300 --> 00:06:55,300
Firstly, let's check our brackets match. I'm getting an error here, so the problem

106
00:06:55,300 --> 00:06:59,300
is, if we click on this bracket you'll see that's its matching bracket. Therefore, this guy

107
00:06:59,300 --> 00:07:03,300
here, if we scroll up, is matching the start of the definition of the function,

108
00:07:03,300 --> 00:07:07,300
which is why it thinks the function is finished there, so let's just sort that bracket out there.

109
00:07:07,300 --> 00:07:11,300
And then, we have some outdenting to do,

110
00:07:11,300 --> 00:07:15,300
so that hopefully now it's clear that, that goes with that! When you click on this one it goes with that!

111
00:07:15,300 --> 00:07:19,300
Alright, so that gets the flow of that. Right now also, we have to, in main.cpp,

112
00:07:19,300 --> 00:07:23,300
actually output some of this stuff. So, I back in main.cpp

113
00:07:23,300 --> 00:07:27,300
under PlayGame(),

114
00:07:27,300 --> 00:07:31,300
we're going to submit a valid guess to the game alright, so we can actually do that.

115
00:07:31,300 --> 00:07:35,300
Now, we can say BCGame.SubmitGuess

116
00:07:35,300 --> 00:07:39,300
and we send the (Guess) in as a string.

117
00:07:39,300 --> 00:07:43,300
Great! Now, we want to capture what comes back from that. So, what is it that comes back from that? Well, it's

118
00:07:43,300 --> 00:07:47,300
an FBullCowCount. Remember we've changed the type to have a prefix F.

119
00:07:47,300 --> 00:07:51,300
Just call it BullCowCount. Why not just call a thing a thing?

120
00:07:51,300 --> 00:07:55,300
Alright, so then we get it back, that's fantastic! So, we "submit valid guess to the game",

121
00:07:55,300 --> 00:07:59,300
"and receive counts".

122
00:07:59,300 --> 00:08:03,300
And then, we print the number of bulls and cows. So, I'm going to

123
00:08:03,300 --> 00:08:07,300
get rid of this, you're guess was, because it's quite useless, and we can actually say,

124
00:08:07,300 --> 00:08:11,300
cout. And then, we're going to go, now

125
00:08:11,300 --> 00:08:15,300
we need standard on the cout, of course.

126
00:08:15,300 --> 00:08:19,300
Then, we're going to go Bulls equals

127
00:08:19,300 --> 00:08:23,300
and then output BullCowCount. Now, the way we access

128
00:08:23,300 --> 00:08:27,300
the member is, .Bulls. I'm going to go onto another line,

129
00:08:27,300 --> 00:08:31,300
just to keep things simple to read in the code but without putting a new line on the end there.

130
00:08:31,300 --> 00:08:35,300
Put a space and then cows equals,

131
00:08:35,300 --> 00:08:39,300
and then, put the cows on. And then, I will

132
00:08:39,300 --> 00:08:43,300
now put an end line. Remember, we need the standard.

133
00:08:43,300 --> 00:08:47,300
Fantastic! There we go! Let's just run the code,

134
00:08:47,300 --> 00:08:51,300
and make sure that it's going to run apart from... There you go, it's going to say bulls and cows equals

135
00:08:51,300 --> 00:08:55,300
0, but your job is going to be to finish that! So, let's put you into the

136
00:08:55,300 --> 00:08:59,300
challenge! This is the code I want you

137
00:08:59,300 --> 00:09:03,300
to write, and what I want you to do is

138
00:09:03,300 --> 00:09:07,300
finish SubmitGuess() and test, finish the function, test it works, and celebrate your coding ninja skills!

139
00:09:07,300 --> 00:09:11,300
Go ahead! Have a go at that challenge, on your own now, but before I leave you to it I just wanna

140
00:09:11,300 --> 00:09:15,300
point out that you are going to need a variable name for Guess, so

141
00:09:15,300 --> 00:09:19,300
when defined the function SubmitGuess(FString), we didn't put the word

142
00:09:19,300 --> 00:09:23,300
Guess on the end, so therefore the FString coming does not have a name

143
00:09:23,300 --> 00:09:27,300
so let's add that name as part of the challenge. The other thing to say is I know this a little bit of a

144
00:09:27,300 --> 00:09:31,300
tough challenge. We've got if statements within loops etc so

145
00:09:31,300 --> 00:09:35,300
just take it slowly, take a read around about if statements and see if

146
00:09:35,300 --> 00:09:39,300
you can get it done. If you can't don't beat yourself up, this challenge is a little bit hard for beginners at this stage

147
00:09:39,300 --> 00:09:41,500
in the course.

148
00:09:41,500 --> 00:09:45,500
...

149
00:09:45,500 --> 00:09:49,500
So, welcome back! Let's get this working! So, what do we mean by if they match?

150
00:09:49,500 --> 00:09:53,500
Well, we want to say something like... And I'm going to put all my braces in, and there are better ways

151
00:09:53,500 --> 00:09:57,500
matching braces, by the way. Just for now, for the beginners, I want to get

152
00:09:57,500 --> 00:10:01,500
into manually do it. There's plenty of ways of making blocks into braces simpler,

153
00:10:01,500 --> 00:10:05,500
we're going to do that now! So, we're going to say, if the (Guess

154
00:10:05,500 --> 00:10:09,500
at position [ i ]

155
00:10:09,500 --> 00:10:13,500
...

156
00:10:13,500 --> 00:10:17,500
equals, remember equals equals, the hidden word,

157
00:10:17,500 --> 00:10:21,500
or in my case MyHiddenWord at position[ i ]).

158
00:10:21,500 --> 00:10:25,500
Then, we're going to go and

159
00:10:25,500 --> 00:10:29,500
start to do some more conditionals. So, why is guess

160
00:10:29,500 --> 00:10:33,500
unidentified? Because when we wrote this declaration,

161
00:10:33,500 --> 00:10:37,500
sorry this definition from the declaration, we never actually said what the variable name for

162
00:10:37,500 --> 00:10:41,500
FGuess was going to be, so I'm going to call it Guess, very simply. Now, we have a handle to refer to

163
00:10:41,500 --> 00:10:45,500
that thing. There it is! Now, there is a deliberate error on this line, but don't deliberate on it

164
00:10:45,500 --> 00:10:49,500
too long. It may be fun if you write exactly what I've written, and then, we will use the debugger

165
00:10:49,500 --> 00:10:53,500
in the next video to fix it, that's part of the point. OK, so if they're in the same place,

166
00:10:53,500 --> 00:10:57,500
the way you say that is if (i -- j), if the indices are the same.

167
00:10:57,500 --> 00:11:01,500
Then, we do something. What do we do? We just say

168
00:11:01,500 --> 00:11:05,500
increment the bulls, so BullCowCount

169
00:11:05,500 --> 00:11:09,500
dot Bulls

170
00:11:09,500 --> 00:11:13,500
++; simple, worth incrementing.

171
00:11:13,500 --> 00:11:17,500
And then, we're going to say... And I can put that comment on the end, by the way, leave the comments with

172
00:11:17,500 --> 00:11:21,500
the code. And then, else... No point in deleting the comments, you see, you may as well leave them there. The proper

173
00:11:21,500 --> 00:11:25,500
scaffolding that stays in there. They're like the stitches those dissolve. I can get rid of that.

174
00:11:25,500 --> 00:11:29,500
I can get rid of that. Or don't dissolve, in this case, and just stay in place. [Laughs]

175
00:11:29,500 --> 00:11:33,500
So then, what we're going to of if,

176
00:11:33,500 --> 00:11:37,500
otherwise then the characters have matched... One second,

177
00:11:37,500 --> 00:11:41,500
I've got an insert problem. The characters have

178
00:11:41,500 --> 00:11:45,500
matched, and then, what we're doing is we're saying well they've matched and they're not in the same place,

179
00:11:45,500 --> 00:11:49,500
therefore it must be a cow. OK,

180
00:11:49,500 --> 00:11:53,500
I'll say that! So, if they're in the

181
00:11:53,500 --> 00:11:57,500
same place, increment the bulls, we could even qualify here.

182
00:11:57,500 --> 00:12:01,500
No this is the if they're in the same place. Let's take that, pop it on the end there,

183
00:12:01,500 --> 00:12:05,500
and then, it reads quite well. Now, this is as complex as you're ever

184
00:12:05,500 --> 00:12:09,500
going to get in any of your coding. That's a bold statement, but I don't want you ever indenting

185
00:12:09,500 --> 00:12:13,500
more than four levels like this. This is as much as you're ever going to need to hold

186
00:12:13,500 --> 00:12:17,500
in your mind. I'm showing this more as an exercise. Let's just try this.

187
00:12:17,500 --> 00:12:21,500
Actually, let's start with a short word, I'm going to change my word from planet, to say ant.

188
00:12:21,500 --> 00:12:25,500
And let's just try it!

189
00:12:25,500 --> 00:12:29,500
I think I've gone back onto Overwrite? I have, look down on the bottom, Overwrite!

190
00:12:29,500 --> 00:12:33,500
If you're having that problem remember to hit Insert. OK, let's try!

191
00:12:33,500 --> 00:12:37,500
So, if I put and, what do I get? Two bulls, which is correct, the a and the d, and four

192
00:12:37,500 --> 00:12:41,500
cows. That's wrong! If I put ant I get three bulls and six cows. Great! Perfect

193
00:12:41,500 --> 00:12:45,500
setup, we have a bug. So, what we're going to do in the next video is find

194
00:12:45,500 --> 00:12:49,500
and squash that bug, using the debugger. See you soon!

195
00:12:49,500 --> 00:12:50,433



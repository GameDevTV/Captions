<<<<<<< HEAD
WEBVTT

1
00:00:00.000 --> 00:00:04.000
So.

2
00:00:04.000 --> 00:00:08.000
we're going to be writing our first error checking code! I do warn you. by the way. in real code

3
00:00:08.000 --> 00:00:12.000
quite a lot of it can end up being error checking code. Some estimates have been up to over

4
00:00:12.000 --> 00:00:16.000
75%. so it's quite normal that there are quite a lot of lines

5
00:00:16.000 --> 00:00:20.000
of code to do with error checking. We can't trust them. they're users to be putting sensible

6
00:00:20.000 --> 00:00:24.000
input in. So. by the end of the video. we will have a situation

7
00:00:24.000 --> 00:00:28.000
like this. where if we put in a word that's too short like "plan". when we're looking

8
00:00:28.000 --> 00:00:32.000
for six letters. then our debugger is going to notice that our

9
00:00:32.000 --> 00:00:36.000
status is coming back as wrong length. and it will catch that just

10
00:00:36.000 --> 00:00:41.000
before the whole thing crashes. So. let's dive in and see how to catch this error!

11
00:00:41.366 --> 00:00:45.366
Welcome back! Let's get this CheckGuessValidity() method actually

12
00:00:45.366 --> 00:00:49.366
working! Because I'm focusing on it. I'm just going to give myself a little more space. so I can see it

13
00:00:49.366 --> 00:00:53.366
there! Delete what's in there for now. Let's start pseudo-coding what its going to do.

14
00:00:53.366 --> 00:00:57.366
So. we're going to say that "// if the guess

15
00:00:57.366 --> 00:01:01.366
isn't an isogram. then

16
00:01:01.366 --> 00:01:05.366
return an error". And we've got the error status

17
00:01:05.366 --> 00:01:09.366
ready. "// if the guess isn't all

18
00:01:09.366 --> 00:01:13.366
lowercase. return an error".

19
00:01:13.366 --> 00:01:17.366
Now. you could start to just.

20
00:01:17.366 --> 00:01:21.366
you know. use indentation here. That's slightly better than comma return

21
00:01:21.366 --> 00:01:25.366
error. So. you can indent your pseudocode. that's

22
00:01:25.366 --> 00:01:29.366
fine. and then. we could just say "if the

23
00:01:29.366 --> 00:01:33.366
guess length is wrong"

24
00:01:33.366 --> 00:01:37.366
then "// return an error". And then. we're just

25
00:01:37.366 --> 00:01:41.366
going to say else. "// otherwise... Let's just use otherwise. just to get away from the

26
00:01:41.366 --> 00:01:45.366
habit of kind of writing code in pseudocode. "// otherwise"

27
00:01:45.366 --> 00:01:49.366
"// return OK". That's the structure! That is it!

28
00:01:49.366 --> 00:01:53.366
It's as simple as that! So. let's start coding this up!

29
00:01:53.366 --> 00:01:57.366
We're going to need a couple of supporting methods. by the way. which we don't have and we'll do in a

30
00:01:57.366 --> 00:02:01.366
separate video. We don't have methods for isogram and lowercase.

31
00:02:01.366 --> 00:02:05.366
but for now. to get this code working. let's just say if (false).

32
00:02:05.366 --> 00:02:09.366
So. this condition will never happen. The fact that it isn't

33
00:02:09.366 --> 00:02:13.366
a isogram isn't going to happen. for now. So. if false. then we can

34
00:02:13.366 --> 00:02:17.366
come here and go squiggle. What do we do? Well. we return an error! How do we do

35
00:02:17.366 --> 00:02:21.366
that? Well. we go BC...

36
00:02:21.366 --> 00:02:25.366
We go return. rather sorry. return. It's an enumeration

37
00:02:25.366 --> 00:02:29.366
and it's now called... What do we call it? EWordStatus.

38
00:02:29.366 --> 00:02:33.366
I'm actually a bit uncomfortable with EWordStatus. I would rather it was GuessStatus. I'll change that

39
00:02:33.366 --> 00:02:37.366
in a second. But if the guess isn't an isogram. return not isogram.

40
00:02:37.366 --> 00:02:41.366
and that's the general pattern there. OK. now we don't

41
00:02:41.366 --> 00:02:45.366
need "// return an error" as a comment. I don't think that's particularly useful. So.

42
00:02:45.366 --> 00:02:49.366
EWordStatus. I just want to rename it! Highlight. Control. R. Control. R. and let's go

43
00:02:49.366 --> 00:02:53.366
to EGuessStatus. I just feel more comfortable. So. if you think you're going to feel more comfortable with

44
00:02:53.366 --> 00:02:57.366
a different name. try it on. OK. so now what do we do? Now we do.

45
00:02:57.366 --> 00:03:01.366
for the first time. and else if! And the condition is. we're going to say the

46
00:03:01.366 --> 00:03:05.366
condition is false. i.e. we're not going to detect the error now. til we have written the method.

47
00:03:05.366 --> 00:03:09.366
But we're going to say. if the guess isn't all lowercase.

48
00:03:09.366 --> 00:03:13.366
what are we going to do? And then. well. we're going

49
00:03:13.366 --> 00:03:17.366
to return some enumeration.

50
00:03:17.366 --> 00:03:21.366
It's called EGuessStatus. a bit easier to find now. and then. we're going to use

51
00:03:21.366 --> 00:03:25.366
colon colon because we're accessing a member. like this is accessing a member here. And a

52
00:03:25.366 --> 00:03:29.366
member. Not_Lowercase. alright. So. that's your else if! Now. don't

53
00:03:29.366 --> 00:03:33.366
worry. I'm going to leave some of this to you. In fact. you're going to do the next else if condition.

54
00:03:33.366 --> 00:03:37.366
The next else if condition is going to be false. for now. but

55
00:03:37.366 --> 00:03:41.366
you're going to change it into actual logic in a second. For the if the guess

56
00:03:41.366 --> 00:03:45.366
length is wrong. OK. Then. you'd return another error. and I'll

57
00:03:45.366 --> 00:03:49.366
leave you to even return the error.

58
00:03:49.366 --> 00:03:53.366
And that's going to go there!

59
00:03:53.366 --> 00:03:57.366
And then. we're going to have one more thing. which is the else that catches the

60
00:03:57.366 --> 00:04:01.366
final case. which is that we then go ahead and just

61
00:04:01.366 --> 00:04:05.366
return EGuessStatus::OK;

62
00:04:05.366 --> 00:04:09.366
I want you to be able to see the general pattern. We don't need any of these comments.

63
00:04:09.366 --> 00:04:13.366
The whole thing fits on the screen.

64
00:04:13.366 --> 00:04:17.366
If it's not an isogram then later we'll have the supporting methods in here and here.

65
00:04:17.366 --> 00:04:21.366
So. we check isogram. lowercase. length. and then. we say OK. if we

66
00:04:21.366 --> 00:04:26.100
can't find any of these things wrong with it. It doesn't mean its OK. it just means we can't find anything wrong with it. right.

67
00:04:26.100 --> 00:04:30.100
I'm actually just going to pop in a return value here.

68
00:04:30.100 --> 00:04:34.100
because I want this code to be

69
00:04:34.100 --> 00:04:38.100
compilable. So. there's the return length error! Great! Alright!

70
00:04:38.100 --> 00:04:42.100
So. now we have all of our conditions and all of our errors. These falses are going to need to be

71
00:04:42.100 --> 00:04:46.100
replaced. Let's make sure that this actually gets called. at some point. Let's go to

72
00:04:46.100 --> 00:04:50.100
main. and have a look inside PlayGame(). Now. ooof. I'm not really

73
00:04:50.100 --> 00:04:54.100
liking the look of this PlayGame(). I'm going to just

74
00:04:54.100 --> 00:04:58.100
do a bit of tidying up. I'm going to put the TODO on the end

75
00:04:58.100 --> 00:05:02.100
here. to reduce the number of lines.

76
00:05:02.100 --> 00:05:06.100
and I'm going to make loop checking

77
00:05:06.100 --> 00:05:10.100
valid. GetGuess() is what we're saying

78
00:05:10.100 --> 00:05:14.100
is. we want to change to GetValidGuess() or something later. So. I'm

79
00:05:14.100 --> 00:05:18.100
going to put that down here and say.

80
00:05:18.100 --> 00:05:22.100
make something like this. "// TODO

81
00:05:22.100 --> 00:05:26.100
change

82
00:05:26.100 --> 00:05:30.100
to GetValidGuess".

83
00:05:30.100 --> 00:05:34.100
And that will loop asking for a guess. So.

84
00:05:34.100 --> 00:05:38.100
that's a bit clearer! So it goes and gets a guess. submits a valid

85
00:05:38.100 --> 00:05:42.100
guess to the game. and receives the count. prints the number of bulls and cows. and we don't need a

86
00:05:42.100 --> 00:05:46.100
space before that end line. Alright. that's good! So. what I had there is a little panic. that I hit

87
00:05:46.100 --> 00:05:50.100
PlayGame(). and it just looked too ugly to understand where I even need to put

88
00:05:50.100 --> 00:05:54.100
my line. Great! So. we go get the guess! Now. let's just go check the

89
00:05:54.100 --> 00:05:58.100
guess is valid. So. how are we going to do that? Well. I'm going to make myself an enum. which is

90
00:05:58.100 --> 00:06:02.100
an EGuessStatus now. I'm going to call it Status =

91
00:06:02.100 --> 00:06:06.100
and then I'm going to call BCGame

92
00:06:06.100 --> 00:06:10.100
.CheckGuessValidity with the (Guess) that we

93
00:06:10.100 --> 00:06:14.100
just got in the line above here. alright. And I don't think we really need to comment

94
00:06:14.100 --> 00:06:18.100
that. it's quite clear. So. this is how we use the debugger to see the value of status. the value

95
00:06:18.100 --> 00:06:22.100
that's coming back from this. We could put a watch on this. or you can

96
00:06:22.100 --> 00:06:26.100
store it in a variable called status and pop yourself a break point. any time after that line.

97
00:06:26.100 --> 00:06:30.100
Let's have a look! Let's run the Windows Debugger. put

98
00:06:30.100 --> 00:06:34.100
anything in. like I don't know. Let's put in "planes". which is close to planet.

99
00:06:34.100 --> 00:06:38.100
and then. the debugger comes back here. stops. and it says "Status OK". So. that

100
00:06:38.100 --> 00:06:42.100
proves that OK has come out. and it will have done because we've gone through all of

101
00:06:42.100 --> 00:06:46.100
these falses. until we've got down to the OK. Great! So.

102
00:06:46.100 --> 00:06:50.100
now you have everything you need to be able to write the simple logic in here.

103
00:06:50.100 --> 00:06:54.100
to finish this off. So. write the word length check.

104
00:06:54.100 --> 00:06:58.100
No need to call any helper methods. at the moment. Use that syntax.

105
00:06:58.100 --> 00:07:02.100
!= for not equals. Call GetHiddenWordLength(). as we've got it. rather

106
00:07:02.100 --> 00:07:06.100
than interrogating HiddenWord.Length. and

107
00:07:06.100 --> 00:07:10.100
test the value using the debugger. as I just showed you. Pause the video. have a go.

108
00:07:10.100 --> 00:07:14.100
get this finished off. and actually try putting some guesses in that are the wrong length. and

109
00:07:14.100 --> 00:07:18.100
the debugger should tell you that the error status is coming back.

110
00:07:18.100 --> 00:07:22.100
Cool welcome back! So. this is hopefully pretty

111
00:07:22.100 --> 00:07:26.100
simple. What we're doing is we're saying put your machine

112
00:07:26.100 --> 00:07:30.100
into insert mode. Ben. We're saying (Guess

113
00:07:30.100 --> 00:07:34.100
.length()). Now. we don't

114
00:07:34.100 --> 00:07:38.100
have Guess. and that's because I never made a

115
00:07:38.100 --> 00:07:42.100
handle for the incoming parameter. When we declare a method like this.

116
00:07:42.100 --> 00:07:46.100
we don't have to give ourselves a variable name. alright. We don't have to get a handle to hold onto this.

117
00:07:46.100 --> 00:07:50.100
but when we implement we do need a handle. so there's Guess! Now. (Guess.length())

118
00:07:50.100 --> 00:07:54.100
will work. and if (Guess.length()) is not equal to

119
00:07:54.100 --> 00:07:58.100
Get). now. we can call it directly. != GetHiddenWordLength())

120
00:07:58.100 --> 00:08:02.100
because we're inside the class here. If it's not able to GetHiddenWordLength(). now

121
00:08:02.100 --> 00:08:06.100
why not just compare it to the word length? You could but I prefer to

122
00:08:06.100 --> 00:08:10.100
call the method if we've got a method. in case GetHiddenWordLength() does something different later.

123
00:08:10.100 --> 00:08:14.100
then we know that this is the one place we call it. OK. even though we've

124
00:08:14.100 --> 00:08:18.100
got access to the hidden word directly. why not use the method that we've

125
00:08:18.100 --> 00:08:22.100
got that does it. It's just a bit safer for modified code. Alright. so

126
00:08:22.100 --> 00:08:26.100
now we should get an error coming back about the wrong length. if we have the wrong length. We have

127
00:08:26.100 --> 00:08:30.100
our breakpoint in place. let's try it! Firstly. let's see that we still get

128
00:08:30.100 --> 00:08:34.100
OK. "planes". What do we get? Guess status

129
00:08:34.100 --> 00:08:38.100
OK. Fantastic! So. I'm going to continue the debugger! Now. let's

130
00:08:38.100 --> 00:08:42.100
try "plan". Return. Ah hah! Look at this!

131
00:08:42.100 --> 00:08:46.233
We've got all sorts of problems. and we know that our code is about to crash.

132
00:08:46.233 --> 00:08:50.100
but the most important thing is that we've caught it. because the status has come back

133
00:08:50.100 --> 00:08:54.100
Wrong_Length. If we allowed it to continue running now. we'd get a horrible error. but

134
00:08:54.100 --> 00:08:58.100
the cool thing is that we've got a load of red in our debugger

135
00:08:58.100 --> 00:09:02.100
and we got an error status back before! Let's try that again!

136
00:09:02.100 --> 00:09:06.100
Before it actually crashed. "plan". it's gone red. it's got some problems. but we've

137
00:09:06.100 --> 00:09:10.100
got Wrong_Length and we can intercept it now. Awesome. so we have done our

138
00:09:10.100 --> 00:09:14.100
first bit of proper error checking! So. congratulations on that and

139
00:09:14.100 --> 00:09:17.200
I'll see you soon!

=======

1
00:00:00,000 --> 00:00:04,000
So,

2
00:00:04,000 --> 00:00:08,000
we're going to be writing our first error checking code! I do warn you, by the way, in real code

3
00:00:08,000 --> 00:00:12,000
quite a lot of it can end up being error checking code. Some estimates have been up to over

4
00:00:12,000 --> 00:00:16,000
75%, so it's quite normal that there are quite a lot of lines

5
00:00:16,000 --> 00:00:20,000
of code to do with error checking. We can't trust them, they're users to be putting sensible

6
00:00:20,000 --> 00:00:24,000
input in. So, by the end of the video, we will have a situation

7
00:00:24,000 --> 00:00:28,000
like this, where if we put in a word that's too short like "plan", when we're looking

8
00:00:28,000 --> 00:00:32,000
for six letters, then our debugger is going to notice that our

9
00:00:32,000 --> 00:00:36,000
status is coming back as wrong length, and it will catch that just

10
00:00:36,000 --> 00:00:41,000
before the whole thing crashes. So, let's dive in and see how to catch this error!

11
00:00:41,366 --> 00:00:45,366
Welcome back! Let's get this CheckGuessValidity() method actually

12
00:00:45,366 --> 00:00:49,366
working! Because I'm focusing on it, I'm just going to give myself a little more space, so I can see it

13
00:00:49,366 --> 00:00:53,366
there! Delete what's in there for now. Let's start pseudo-coding what its going to do.

14
00:00:53,366 --> 00:00:57,366
So, we're going to say that "// if the guess

15
00:00:57,366 --> 00:01:01,366
isn't an isogram, then

16
00:01:01,366 --> 00:01:05,366
return an error". And we've got the error status

17
00:01:05,366 --> 00:01:09,366
ready. "// if the guess isn't all

18
00:01:09,366 --> 00:01:13,366
lowercase, return an error".

19
00:01:13,366 --> 00:01:17,366
Now, you could start to just,

20
00:01:17,366 --> 00:01:21,366
you know, use indentation here. That's slightly better than comma return

21
00:01:21,366 --> 00:01:25,366
error. So, you can indent your pseudocode, that's

22
00:01:25,366 --> 00:01:29,366
fine, and then, we could just say "if the

23
00:01:29,366 --> 00:01:33,366
guess length is wrong"

24
00:01:33,366 --> 00:01:37,366
then "// return an error". And then, we're just

25
00:01:37,366 --> 00:01:41,366
going to say else, "// otherwise... Let's just use otherwise, just to get away from the

26
00:01:41,366 --> 00:01:45,366
habit of kind of writing code in pseudocode. "// otherwise"

27
00:01:45,366 --> 00:01:49,366
"// return OK". That's the structure! That is it!

28
00:01:49,366 --> 00:01:53,366
It's as simple as that! So, let's start coding this up!

29
00:01:53,366 --> 00:01:57,366
We're going to need a couple of supporting methods, by the way, which we don't have and we'll do in a

30
00:01:57,366 --> 00:02:01,366
separate video. We don't have methods for isogram and lowercase,

31
00:02:01,366 --> 00:02:05,366
but for now, to get this code working, let's just say if (false).

32
00:02:05,366 --> 00:02:09,366
So, this condition will never happen. The fact that it isn't

33
00:02:09,366 --> 00:02:13,366
a isogram isn't going to happen, for now. So, if false, then we can

34
00:02:13,366 --> 00:02:17,366
come here and go squiggle. What do we do? Well, we return an error! How do we do

35
00:02:17,366 --> 00:02:21,366
that? Well, we go BC...

36
00:02:21,366 --> 00:02:25,366
We go return, rather sorry, return. It's an enumeration

37
00:02:25,366 --> 00:02:29,366
and it's now called... What do we call it? EWordStatus.

38
00:02:29,366 --> 00:02:33,366
I'm actually a bit uncomfortable with EWordStatus, I would rather it was GuessStatus. I'll change that

39
00:02:33,366 --> 00:02:37,366
in a second. But if the guess isn't an isogram, return not isogram,

40
00:02:37,366 --> 00:02:41,366
and that's the general pattern there. OK, now we don't

41
00:02:41,366 --> 00:02:45,366
need "// return an error" as a comment, I don't think that's particularly useful. So,

42
00:02:45,366 --> 00:02:49,366
EWordStatus, I just want to rename it! Highlight, Control, R, Control, R, and let's go

43
00:02:49,366 --> 00:02:53,366
to EGuessStatus. I just feel more comfortable. So, if you think you're going to feel more comfortable with

44
00:02:53,366 --> 00:02:57,366
a different name, try it on. OK, so now what do we do? Now we do,

45
00:02:57,366 --> 00:03:01,366
for the first time, and else if! And the condition is, we're going to say the

46
00:03:01,366 --> 00:03:05,366
condition is false, i.e. we're not going to detect the error now, til we have written the method.

47
00:03:05,366 --> 00:03:09,366
But we're going to say, if the guess isn't all lowercase,

48
00:03:09,366 --> 00:03:13,366
what are we going to do? And then, well, we're going

49
00:03:13,366 --> 00:03:17,366
to return some enumeration.

50
00:03:17,366 --> 00:03:21,366
It's called EGuessStatus, a bit easier to find now, and then, we're going to use

51
00:03:21,366 --> 00:03:25,366
colon colon because we're accessing a member, like this is accessing a member here. And a

52
00:03:25,366 --> 00:03:29,366
member, Not_Lowercase, alright. So, that's your else if! Now, don't

53
00:03:29,366 --> 00:03:33,366
worry, I'm going to leave some of this to you. In fact, you're going to do the next else if condition.

54
00:03:33,366 --> 00:03:37,366
The next else if condition is going to be false, for now, but

55
00:03:37,366 --> 00:03:41,366
you're going to change it into actual logic in a second. For the if the guess

56
00:03:41,366 --> 00:03:45,366
length is wrong, OK. Then, you'd return another error, and I'll

57
00:03:45,366 --> 00:03:49,366
leave you to even return the error.

58
00:03:49,366 --> 00:03:53,366
And that's going to go there!

59
00:03:53,366 --> 00:03:57,366
And then, we're going to have one more thing, which is the else that catches the

60
00:03:57,366 --> 00:04:01,366
final case, which is that we then go ahead and just

61
00:04:01,366 --> 00:04:05,366
return EGuessStatus::OK;

62
00:04:05,366 --> 00:04:09,366
I want you to be able to see the general pattern. We don't need any of these comments.

63
00:04:09,366 --> 00:04:13,366
The whole thing fits on the screen.

64
00:04:13,366 --> 00:04:17,366
If it's not an isogram then later we'll have the supporting methods in here and here.

65
00:04:17,366 --> 00:04:21,366
So, we check isogram, lowercase, length, and then, we say OK, if we

66
00:04:21,366 --> 00:04:26,100
can't find any of these things wrong with it. It doesn't mean its OK, it just means we can't find anything wrong with it, right.

67
00:04:26,100 --> 00:04:30,100
I'm actually just going to pop in a return value here,

68
00:04:30,100 --> 00:04:34,100
because I want this code to be

69
00:04:34,100 --> 00:04:38,100
compilable. So, there's the return length error! Great! Alright!

70
00:04:38,100 --> 00:04:42,100
So, now we have all of our conditions and all of our errors. These falses are going to need to be

71
00:04:42,100 --> 00:04:46,100
replaced. Let's make sure that this actually gets called, at some point. Let's go to

72
00:04:46,100 --> 00:04:50,100
main, and have a look inside PlayGame(). Now, ooof, I'm not really

73
00:04:50,100 --> 00:04:54,100
liking the look of this PlayGame(). I'm going to just

74
00:04:54,100 --> 00:04:58,100
do a bit of tidying up. I'm going to put the TODO on the end

75
00:04:58,100 --> 00:05:02,100
here, to reduce the number of lines,

76
00:05:02,100 --> 00:05:06,100
and I'm going to make loop checking

77
00:05:06,100 --> 00:05:10,100
valid. GetGuess() is what we're saying

78
00:05:10,100 --> 00:05:14,100
is, we want to change to GetValidGuess() or something later. So, I'm

79
00:05:14,100 --> 00:05:18,100
going to put that down here and say,

80
00:05:18,100 --> 00:05:22,100
make something like this. "// TODO

81
00:05:22,100 --> 00:05:26,100
change

82
00:05:26,100 --> 00:05:30,100
to GetValidGuess".

83
00:05:30,100 --> 00:05:34,100
And that will loop asking for a guess. So,

84
00:05:34,100 --> 00:05:38,100
that's a bit clearer! So it goes and gets a guess, submits a valid

85
00:05:38,100 --> 00:05:42,100
guess to the game, and receives the count, prints the number of bulls and cows, and we don't need a

86
00:05:42,100 --> 00:05:46,100
space before that end line. Alright, that's good! So, what I had there is a little panic, that I hit

87
00:05:46,100 --> 00:05:50,100
PlayGame(), and it just looked too ugly to understand where I even need to put

88
00:05:50,100 --> 00:05:54,100
my line. Great! So, we go get the guess! Now, let's just go check the

89
00:05:54,100 --> 00:05:58,100
guess is valid. So, how are we going to do that? Well, I'm going to make myself an enum, which is

90
00:05:58,100 --> 00:06:02,100
an EGuessStatus now. I'm going to call it Status =

91
00:06:02,100 --> 00:06:06,100
and then I'm going to call BCGame

92
00:06:06,100 --> 00:06:10,100
.CheckGuessValidity with the (Guess) that we

93
00:06:10,100 --> 00:06:14,100
just got in the line above here, alright. And I don't think we really need to comment

94
00:06:14,100 --> 00:06:18,100
that, it's quite clear. So, this is how we use the debugger to see the value of status, the value

95
00:06:18,100 --> 00:06:22,100
that's coming back from this. We could put a watch on this, or you can

96
00:06:22,100 --> 00:06:26,100
store it in a variable called status and pop yourself a break point, any time after that line.

97
00:06:26,100 --> 00:06:30,100
Let's have a look! Let's run the Windows Debugger, put

98
00:06:30,100 --> 00:06:34,100
anything in, like I don't know. Let's put in "planes", which is close to planet,

99
00:06:34,100 --> 00:06:38,100
and then, the debugger comes back here, stops, and it says "Status OK". So, that

100
00:06:38,100 --> 00:06:42,100
proves that OK has come out, and it will have done because we've gone through all of

101
00:06:42,100 --> 00:06:46,100
these falses, until we've got down to the OK. Great! So,

102
00:06:46,100 --> 00:06:50,100
now you have everything you need to be able to write the simple logic in here,

103
00:06:50,100 --> 00:06:54,100
to finish this off. So, write the word length check.

104
00:06:54,100 --> 00:06:58,100
No need to call any helper methods, at the moment. Use that syntax,

105
00:06:58,100 --> 00:07:02,100
!= for not equals. Call GetHiddenWordLength(), as we've got it, rather

106
00:07:02,100 --> 00:07:06,100
than interrogating HiddenWord.Length, and

107
00:07:06,100 --> 00:07:10,100
test the value using the debugger, as I just showed you. Pause the video, have a go,

108
00:07:10,100 --> 00:07:14,100
get this finished off, and actually try putting some guesses in that are the wrong length, and

109
00:07:14,100 --> 00:07:18,100
the debugger should tell you that the error status is coming back.

110
00:07:18,100 --> 00:07:22,100
Cool welcome back! So, this is hopefully pretty

111
00:07:22,100 --> 00:07:26,100
simple. What we're doing is we're saying put your machine

112
00:07:26,100 --> 00:07:30,100
into insert mode, Ben. We're saying (Guess

113
00:07:30,100 --> 00:07:34,100
.length()). Now, we don't

114
00:07:34,100 --> 00:07:38,100
have Guess, and that's because I never made a

115
00:07:38,100 --> 00:07:42,100
handle for the incoming parameter. When we declare a method like this,

116
00:07:42,100 --> 00:07:46,100
we don't have to give ourselves a variable name, alright. We don't have to get a handle to hold onto this,

117
00:07:46,100 --> 00:07:50,100
but when we implement we do need a handle, so there's Guess! Now, (Guess.length())

118
00:07:50,100 --> 00:07:54,100
will work, and if (Guess.length()) is not equal to

119
00:07:54,100 --> 00:07:58,100
Get), now, we can call it directly, != GetHiddenWordLength())

120
00:07:58,100 --> 00:08:02,100
because we're inside the class here. If it's not able to GetHiddenWordLength(), now

121
00:08:02,100 --> 00:08:06,100
why not just compare it to the word length? You could but I prefer to

122
00:08:06,100 --> 00:08:10,100
call the method if we've got a method, in case GetHiddenWordLength() does something different later,

123
00:08:10,100 --> 00:08:14,100
then we know that this is the one place we call it. OK, even though we've

124
00:08:14,100 --> 00:08:18,100
got access to the hidden word directly, why not use the method that we've

125
00:08:18,100 --> 00:08:22,100
got that does it. It's just a bit safer for modified code. Alright, so

126
00:08:22,100 --> 00:08:26,100
now we should get an error coming back about the wrong length, if we have the wrong length. We have

127
00:08:26,100 --> 00:08:30,100
our breakpoint in place, let's try it! Firstly, let's see that we still get

128
00:08:30,100 --> 00:08:34,100
OK, "planes". What do we get? Guess status

129
00:08:34,100 --> 00:08:38,100
OK. Fantastic! So, I'm going to continue the debugger! Now, let's

130
00:08:38,100 --> 00:08:42,100
try "plan", Return. Ah hah! Look at this!

131
00:08:42,100 --> 00:08:46,233
We've got all sorts of problems, and we know that our code is about to crash,

132
00:08:46,233 --> 00:08:50,100
but the most important thing is that we've caught it, because the status has come back

133
00:08:50,100 --> 00:08:54,100
Wrong_Length. If we allowed it to continue running now, we'd get a horrible error, but

134
00:08:54,100 --> 00:08:58,100
the cool thing is that we've got a load of red in our debugger

135
00:08:58,100 --> 00:09:02,100
and we got an error status back before! Let's try that again!

136
00:09:02,100 --> 00:09:06,100
Before it actually crashed, "plan", it's gone red, it's got some problems, but we've

137
00:09:06,100 --> 00:09:10,100
got Wrong_Length and we can intercept it now. Awesome, so we have done our

138
00:09:10,100 --> 00:09:14,100
first bit of proper error checking! So, congratulations on that and

139
00:09:14,100 --> 00:09:17,200
I'll see you soon!

>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1

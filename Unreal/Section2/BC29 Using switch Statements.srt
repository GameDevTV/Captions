<<<<<<< HEAD
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:01.266
...

2
00:00:01.266 --> 00:00:04.000
In this video.

3
00:00:04.000 --> 00:00:08.000
we're going to use something called a switch statement. which is a bit like an if statement but different.

4
00:00:08.000 --> 00:00:12.000
to work with our error checking code. And we can now finally.

5
00:00:12.000 --> 00:00:16.000
if the user puts in the wrong length word. we're going to keep on

6
00:00:16.000 --> 00:00:20.000
asking them for the right length word. until they finally put the right length

7
00:00:20.000 --> 00:00:23.566
in. then we increment the turn number in the game. OK cool!

8
00:00:23.566 --> 00:00:27.566
So. focusing our attention on the PlayGame() method. this is where we're going to

9
00:00:27.566 --> 00:00:31.566
write the code for now. Firstly. there's too much of it. I want to reduce

10
00:00:31.566 --> 00:00:35.566
it. so we don't need to have the comment "// print number of bulls and cows". It's very obvious from what it

11
00:00:35.566 --> 00:00:39.566
says. Also. this lot here is a lot of text for

12
00:00:39.566 --> 00:00:43.566
just outputting two new lines. ins't it. So. let's do it a different way. let's just go backslash

13
00:00:43.566 --> 00:00:47.566
n backslash n. And that reduces the code. Less code is

14
00:00:47.566 --> 00:00:51.566
generally better. less to reason about. Great! So. now we go

15
00:00:51.566 --> 00:00:55.566
get a guess and we check the guess validity. and then we're not really doing anything

16
00:00:55.566 --> 00:00:59.566
with the result of that check on the guess validity.

17
00:00:59.566 --> 00:01:03.566
So. let's use a switch statement. It's going to go in here. this is the anatomy

18
00:01:03.566 --> 00:01:07.566
of it. It goes like this. switch on some expression. that's what we're going to switch based on.

19
00:01:07.566 --> 00:01:11.566
and then you put some curlies. and you go. in the case of some

20
00:01:11.566 --> 00:01:15.566
constant. like I've received my error code wrong word length.

21
00:01:15.566 --> 00:01:19.566
then write some statements like talk to you user and break. come out of the

22
00:01:19.566 --> 00:01:23.566
switch statement. In another case. maybe it's not an isogram.

23
00:01:23.566 --> 00:01:27.566
say something to the user and break out of the switch statement. And then. you always have a default

24
00:01:27.566 --> 00:01:31.566
that says. well. if none of the cases above occur. what do we need to do?

25
00:01:31.566 --> 00:01:35.566
Then. you end your curlies! OK. so let's just make a really simple

26
00:01:35.566 --> 00:01:39.566
switch statement here! Let's say switch

27
00:01:39.566 --> 00:01:43.566
based on (Status). and then. let's put our curlies

28
00:01:43.566 --> 00:01:47.566
in. Alright. so now what are we going to

29
00:01:47.566 --> 00:01:51.566
do? You go case and then we're going to say. for example. that if the enumerator

30
00:01:51.566 --> 00:01:55.566
is coming back out of status. so this is what status equals.

31
00:01:55.566 --> 00:01:59.566
If EGuessStatus:: is Wrong_

32
00:01:59.566 --> 00:02:03.566
Length: it's just the syntax. Check over on the slide. it's

33
00:02:03.566 --> 00:02:07.566
this colon on the end of the constant. Then. what do we do? Well. we say something.

34
00:02:07.566 --> 00:02:11.566
So. we're going to go cout. and then. we're going to go... Well.

35
00:02:11.566 --> 00:02:15.566
let's tell then exactly what we want. << "Please enter a " and then. we may as well go find

36
00:02:15.566 --> 00:02:19.566
the length of the word. which is BCGame

37
00:02:19.566 --> 00:02:23.566
.GetHiddenWordLength()

38
00:02:23.566 --> 00:02:27.566
<< And then. we may as well say space "  letter

39
00:02:27.566 --> 00:02:31.566
word and then a bit of a full stop and a backslash

40
00:02:31.566 --> 00:02:35.566
n and end the line with a semicolon. So. that's it! We switched on status...

41
00:02:35.566 --> 00:02:39.566
Oh. we need standard in front of the cout. of course. and if

42
00:02:39.566 --> 00:02:43.566
the status is Wrong_Length. then we're going to output something. And then. at this

43
00:02:43.566 --> 00:02:47.566
point. remember that we must have a break statement. so we come out of

44
00:02:47.566 --> 00:02:51.566
the case. the switch. You'll see why this is important. when we have more cases.

45
00:02:51.566 --> 00:02:55.566
It's to make sure that all the code under all the cases doesn't run. Let's see if this

46
00:02:55.566 --> 00:02:59.566
works. What I'm hoping is. that when we put in a wrong length. that this case will

47
00:02:59.566 --> 00:03:03.566
trigger and it will get some feedback. just before the game crashes.

48
00:03:03.566 --> 00:03:07.566
"ksa". There you go. we get the

49
00:03:07.566 --> 00:03:11.566
bug but we also see "Please enter a 6 letter word". just beforehand.

50
00:03:11.566 --> 00:03:15.566
Great. so the user has had a little bit of feedback! So.

51
00:03:15.566 --> 00:03:19.566
that's good news! Now. we're not going to flesh out the rest of this case

52
00:03:19.566 --> 00:03:23.566
statement here. because we're in the wrong place. aren't we? This whole lot of

53
00:03:23.566 --> 00:03:27.566
code here is all about getting valid guesses right? It's about going and getting

54
00:03:27.566 --> 00:03:31.566
a guess. checking it's status. switching. and giving feedback to the user. And we ought to

55
00:03:31.566 --> 00:03:35.566
tenaciously go around a loop doing this. until the user gives us a valid guess.

56
00:03:35.566 --> 00:03:39.566
Then. we come back and start submitting the guess to the engine down here. So. all of this lot

57
00:03:39.566 --> 00:03:43.566
should be to do with getting a valid guess. So. let's go ahead and do this refactor.

58
00:03:43.566 --> 00:03:47.566
Remember when we named GetGuess(). we've got a TODO here saying. well. it's...

59
00:03:47.566 --> 00:03:51.566
Actually. we're talking about getting a valid guess. so let's rename GetGuess() to GetValidGuess()

60
00:03:51.566 --> 00:03:55.566
now. OK. and then. we don't need the comment anymore.

61
00:03:55.566 --> 00:03:59.566
It's job is to continually loop. and we can comment more at a higher level.

62
00:03:59.566 --> 00:04:03.566
"// loop continually until

63
00:04:03.566 --> 00:04:07.566
the user gives a valid guess".

64
00:04:07.566 --> 00:04:11.566
That's this thing's job. Now. we won't put the loop in just yet.

65
00:04:11.566 --> 00:04:15.566
but we will move some of this code down so that it's clearer. So. we're going to

66
00:04:15.566 --> 00:04:19.566
go and get a valid guess. All of this switchy stuff can come down

67
00:04:19.566 --> 00:04:23.566
here now. So. you go and

68
00:04:23.566 --> 00:04:27.566
get the guess. and then. we check the guess validity and check

69
00:04:27.566 --> 00:04:31.566
that one condition. Now. what's better about this is. our PlayGame() method is now

70
00:04:31.566 --> 00:04:35.566
shorter again. We get a valid guess looping until we

71
00:04:35.566 --> 00:04:39.566
do. And if you hover over it. because we put that comment in. it now comes through here. "loop continually until the

72
00:04:39.566 --> 00:04:43.566
user" gets "a valid guess". Ah hah! OK. then. submit the valid guess. then print

73
00:04:43.566 --> 00:04:47.566
some feedback. And then. we look and GetValidGuess(). and we ask

74
00:04:47.566 --> 00:04:51.566
them for the... I guess we could actually move this comment up. couldn't we. above

75
00:04:51.566 --> 00:04:55.566
here and group all of this together. because it's all to do with just asking them for their

76
00:04:55.566 --> 00:04:58.966
guess. Then. we CheckGuessValidity().

77
00:04:58.966 --> 00:05:02.966
So. what we're going to do is. make the default case that we return the

78
00:05:02.966 --> 00:05:06.966
guess. So. default: like

79
00:05:06.966 --> 00:05:10.966
that. and then. we're going to put the return Guess; into the default:.

80
00:05:10.966 --> 00:05:14.966
So. if none of the errors above happen. then we return the guess. Again. let's test the

81
00:05:14.966 --> 00:05:20.066
code! If we go say "planes" it's fine. If we go "pla" we get the error.

82
00:05:20.066 --> 00:05:24.066
So. focusing on this repeating unit. I want you

83
00:05:24.066 --> 00:05:28.066
to write the rest of the case statements. which will be very much like this. in this gap here.

84
00:05:28.066 --> 00:05:32.066
So. the challenge is write the rest of the errors! Write a message to the user.

85
00:05:32.066 --> 00:05:36.066
for each error. tell them how to get it right next time. Remember. your break statements.

86
00:05:36.066 --> 00:05:40.066
and test the Console output for the wrong

87
00:05:40.066 --> 00:05:44.066
word length. for yourself as I just did for myself. OK.

88
00:05:44.066 --> 00:05:48.066
pause the video. go ahead and write the error messages. and I'll see you in a moment!

89
00:05:48.066 --> 00:05:52.066
OK. welcome back! So. let's

90
00:05:52.066 --> 00:05:56.066
think about what these other cases could be. Well. we can pretty much just go through the enumerators.

91
00:05:56.066 --> 00:06:00.066
There's another good thing about enumerators. if we just go colon colon. we've got Not_Isogram.

92
00:06:00.066 --> 00:06:04.066
So. let's just deal with that one. the order doesn't really matter. Standard cout.

93
00:06:04.066 --> 00:06:08.066
Please enter an isogram or "Please enter

94
00:06:08.066 --> 00:06:12.066
a word without repeating

95
00:06:12.066 --> 00:06:16.066
letters.  full stop. \n

96
00:06:16.066 --> 00:06:20.066
OK. so then it will go ahead and ask them for their

97
00:06:20.066 --> 00:06:24.066
guess. again. after that. but we'll sort the loop out in a minute. Let's just

98
00:06:24.066 --> 00:06:28.066
get with all the error cases. Ah. break! Remember your break!

99
00:06:28.066 --> 00:06:32.066
Cool! OK. so we have another case!

100
00:06:32.066 --> 00:06:36.066
What's the other case? Well. the great thing about these enumerators is. we can just have a look inside it and see.

101
00:06:36.066 --> 00:06:40.066
well what have we not dealt with? We've not dealt with all lowercase. Cool!

102
00:06:40.066 --> 00:06:44.066
So. let's just give them a message. Again. make it a message that they can action.

103
00:06:44.066 --> 00:06:48.066
they can deal with. << "Please

104
00:06:48.066 --> 00:06:52.066
enter all lowercase letters

105
00:06:52.066 --> 00:06:56.066
full stop \n". So. they're helpful! Alright. these are

106
00:06:56.066 --> 00:07:00.066
helpful error messages. hopefully. Now. we can't preview any of these yet. because

107
00:07:00.066 --> 00:07:04.066
none of these statuses are going to be triggering. but what I do want to do. before I leave this video.

108
00:07:04.066 --> 00:07:08.066
is wrap all of this in a loop. What I want to do is

109
00:07:08.066 --> 00:07:12.066
go around and around and around. until the user eventually gives us a correct

110
00:07:12.066 --> 00:07:16.066
guess. So. the way to do that is literally to wrap the whole

111
00:07:16.066 --> 00:07:20.066
lot in a do while loop. So. we go do and then open

112
00:07:20.066 --> 00:07:24.066
chevrons. OK. Now. I'm going to delete the closed chevrons

113
00:07:24.066 --> 00:07:28.066
and in this case. highlight everything. and then. down to here apart from the...

114
00:07:28.066 --> 00:07:32.066
We don't want a last closing bracket. because that closes the whole method definition. the function definition.

115
00:07:32.066 --> 00:07:36.066
Tab in to bring it all in one. and then.

116
00:07:36.066 --> 00:07:40.066
close your brackets and then we can say while. Now. what is the while

117
00:07:40.066 --> 00:07:44.066
condition here? So. we're going to do this all the time that status...

118
00:07:44.066 --> 00:07:48.066
Now. that's not helping us! Status. it's not there! Why

119
00:07:48.066 --> 00:07:52.066
is Status not here? The reason (Status) is an undeclared identifier.

120
00:07:52.066 --> 00:07:56.066
at this point. and that's what it'll say. It says

121
00:07:56.066 --> 00:08:00.066
if we try and compile identify status is undefined. Is because

122
00:08:00.066 --> 00:08:04.066
we're now outside. By being here. at this curly brace. we're

123
00:08:04.066 --> 00:08:08.066
outside of the do loop. and therefore. this status

124
00:08:08.066 --> 00:08:12.066
here is what we call out of scope. It's not available right? It's just not available

125
00:08:12.066 --> 00:08:16.066
to this while statement. because it's outside of this loop. so what we need

126
00:08:16.066 --> 00:08:20.066
to do is declare this thing first. So. instead of saying

127
00:08:20.066 --> 00:08:24.066
EGuessStatus Status. at the top here. I'm just going to take away

128
00:08:24.066 --> 00:08:28.066
the word EGuessStatus. Before we enter the loop I'm going to say

129
00:08:28.066 --> 00:08:32.066
EGuessStatus Status. Now. I want to give it a

130
00:08:32.066 --> 00:08:36.066
default value. so we're going to go EGuessStatus::

131
00:08:36.066 --> 00:08:40.066
Now. what would be a good one to give it? I think we ought to

132
00:08:40.066 --> 00:08:44.066
have an Invalid_Status status

133
00:08:44.066 --> 00:08:48.066
right. because it's invalid until we've actually set a value. So. let's go and

134
00:08:48.066 --> 00:08:52.066
do that! Let's go into the header file. and let's make our first value

135
00:08:52.066 --> 00:08:56.066
invalid. It's actually quite a good practice. for a variety of reasons I won't bore you with now.

136
00:08:56.066 --> 00:09:00.066
But if we put Invalid_Status

137
00:09:00.066 --> 00:09:04.066
as the first value. in here. it doesn't change anything else

138
00:09:04.066 --> 00:09:08.066
that we've done. by the way.

139
00:09:08.066 --> 00:09:12.066
And then. we come down here. we go ::Invalid_

140
00:09:12.066 --> 00:09:16.066
Status; so we're initializing it to an invalid status.

141
00:09:16.066 --> 00:09:20.066
By declaring it here. we now can access Status

142
00:09:20.066 --> 00:09:24.066
inside. and that means that the while loop should be able to access

143
00:09:24.066 --> 00:09:28.066
(Status). Now. it needs a boolean

144
00:09:28.066 --> 00:09:32.066
type. because we haven't finished. We need to compare that to

145
00:09:32.066 --> 00:09:36.066
EGuessStatus:: member

146
00:09:36.066 --> 00:09:40.066
OK. And is it = or not =?

147
00:09:40.066 --> 00:09:44.066
So. we keep looping. Let's put it in English. "// keep

148
00:09:44.066 --> 00:09:48.066
looping until we get

149
00:09:48.066 --> 00:09:52.066
valid input" or "no errors". This is slightly more accurate!

150
00:09:52.066 --> 00:09:56.066
"// keep looping until we get no errors". You see what's going on? If we

151
00:09:56.066 --> 00:10:00.066
zoom out... Let me actually literally turn the font size down a little bit. This is the whole of

152
00:10:00.066 --> 00:10:04.066
GetValidGuess(). We get a guess from the player. we ask them

153
00:10:04.066 --> 00:10:08.066
for their try. we check the status and get some feedback.

154
00:10:08.066 --> 00:10:11.566
and we keep going until we get no errors OK. So. let's see if we can make

155
00:10:11.566 --> 00:10:16.266
this work! Now. we're getting a warning: "not all

156
00:10:16.266 --> 00:10:20.066
control paths return a value"! That's because the compiler doesn't like the fact

157
00:10:20.066 --> 00:10:24.066
that we may never get out of this loop. Well. I'm going to

158
00:10:24.066 --> 00:10:28.066
live with that now. We wouldn't generally ignore warnings. but we're doing this with volition. We do

159
00:10:28.066 --> 00:10:32.066
want to keep looping until the user gives us a valid value. So. if I just put a few letters in.

160
00:10:32.066 --> 00:10:36.066
Ah! "Please enter a 6 letter word." OK. well. there's six letters! Great!

161
00:10:36.066 --> 00:10:40.066
I'll count them for you. And then. that's the only error it's going to detect. but you get the

162
00:10:40.066 --> 00:10:44.066
idea! And look. the try number is not incrementing.. until I put in a

163
00:10:44.066 --> 00:10:48.066
six letter word.

164
00:10:48.066 --> 00:10:52.066
and then. our try number goes up and it counts. The only thing I want to do is put an extra line in. after

165
00:10:52.066 --> 00:10:56.066
the instruction. So. where it say. please enter a blah

166
00:10:56.066 --> 00:11:00.066
letter word. I just want to make sure we've got two backslash n's

167
00:11:00.066 --> 00:11:04.066
on the end. Now. we could do that on all of these but that's a bit weird.

168
00:11:04.066 --> 00:11:08.066
And also. I forgot my break statement. so let's put that break in!

169
00:11:08.066 --> 00:11:12.066
So. rather than putting a new line on the end of all of these. what I want to do

170
00:11:12.066 --> 00:11:16.066
is just do it at the end of the switch statement.

171
00:11:16.066 --> 00:11:20.066
So. I'm just going to say here. cout end line.

172
00:11:20.066 --> 00:11:24.066
Of course. standard cout

173
00:11:24.066 --> 00:11:28.066
and standard end line. Because then. it's in a single

174
00:11:28.066 --> 00:11:32.066
place. by making that format change in one place. Now. let's put in a

175
00:11:32.066 --> 00:11:36.066
"planes". No problem. if I now put in too few letters... Ah. "Please enter a 6

176
00:11:36.066 --> 00:11:40.066
letter word." This is looking much better! Fantastic! Great

177
00:11:40.066 --> 00:11:44.066
job! Take a good look at that. make sure you understand how that method works.

178
00:11:44.066 --> 00:11:48.066
and we will work on making it a little bit more compact. as we refactor moving

179
00:11:48.066 --> 00:11:52.933
forward. OK. so this is what I would suggest is on the limit of how long a method wants to be.

180
00:11:52.933 --> 00:11:57.833
because it becomes quite hard to reason about. Great! See you soon!
=======

1
00:00:00,000 --> 00:00:01,266
...

2
00:00:01,266 --> 00:00:04,000
In this video,

3
00:00:04,000 --> 00:00:08,000
we're going to use something called a switch statement, which is a bit like an if statement but different,

4
00:00:08,000 --> 00:00:12,000
to work with our error checking code. And we can now finally,

5
00:00:12,000 --> 00:00:16,000
if the user puts in the wrong length word, we're going to keep on

6
00:00:16,000 --> 00:00:20,000
asking them for the right length word, until they finally put the right length

7
00:00:20,000 --> 00:00:23,566
in, then we increment the turn number in the game. OK cool!

8
00:00:23,566 --> 00:00:27,566
So, focusing our attention on the PlayGame() method, this is where we're going to

9
00:00:27,566 --> 00:00:31,566
write the code for now. Firstly, there's too much of it, I want to reduce

10
00:00:31,566 --> 00:00:35,566
it, so we don't need to have the comment "// print number of bulls and cows". It's very obvious from what it

11
00:00:35,566 --> 00:00:39,566
says. Also, this lot here is a lot of text for

12
00:00:39,566 --> 00:00:43,566
just outputting two new lines, ins't it. So, let's do it a different way, let's just go backslash

13
00:00:43,566 --> 00:00:47,566
n backslash n. And that reduces the code. Less code is

14
00:00:47,566 --> 00:00:51,566
generally better, less to reason about. Great! So, now we go

15
00:00:51,566 --> 00:00:55,566
get a guess and we check the guess validity, and then we're not really doing anything

16
00:00:55,566 --> 00:00:59,566
with the result of that check on the guess validity.

17
00:00:59,566 --> 00:01:03,566
So, let's use a switch statement. It's going to go in here, this is the anatomy

18
00:01:03,566 --> 00:01:07,566
of it. It goes like this, switch on some expression, that's what we're going to switch based on,

19
00:01:07,566 --> 00:01:11,566
and then you put some curlies, and you go, in the case of some

20
00:01:11,566 --> 00:01:15,566
constant, like I've received my error code wrong word length,

21
00:01:15,566 --> 00:01:19,566
then write some statements like talk to you user and break, come out of the

22
00:01:19,566 --> 00:01:23,566
switch statement. In another case, maybe it's not an isogram,

23
00:01:23,566 --> 00:01:27,566
say something to the user and break out of the switch statement. And then, you always have a default

24
00:01:27,566 --> 00:01:31,566
that says, well, if none of the cases above occur, what do we need to do?

25
00:01:31,566 --> 00:01:35,566
Then, you end your curlies! OK, so let's just make a really simple

26
00:01:35,566 --> 00:01:39,566
switch statement here! Let's say switch

27
00:01:39,566 --> 00:01:43,566
based on (Status), and then, let's put our curlies

28
00:01:43,566 --> 00:01:47,566
in. Alright, so now what are we going to

29
00:01:47,566 --> 00:01:51,566
do? You go case and then we're going to say, for example, that if the enumerator

30
00:01:51,566 --> 00:01:55,566
is coming back out of status, so this is what status equals.

31
00:01:55,566 --> 00:01:59,566
If EGuessStatus:: is Wrong_

32
00:01:59,566 --> 00:02:03,566
Length: it's just the syntax. Check over on the slide, it's

33
00:02:03,566 --> 00:02:07,566
this colon on the end of the constant. Then, what do we do? Well, we say something.

34
00:02:07,566 --> 00:02:11,566
So, we're going to go cout, and then, we're going to go... Well,

35
00:02:11,566 --> 00:02:15,566
let's tell then exactly what we want. << "Please enter a " and then, we may as well go find

36
00:02:15,566 --> 00:02:19,566
the length of the word, which is BCGame

37
00:02:19,566 --> 00:02:23,566
.GetHiddenWordLength()

38
00:02:23,566 --> 00:02:27,566
<< And then, we may as well say space "  letter

39
00:02:27,566 --> 00:02:31,566
word and then a bit of a full stop and a backslash

40
00:02:31,566 --> 00:02:35,566
n and end the line with a semicolon. So, that's it! We switched on status...

41
00:02:35,566 --> 00:02:39,566
Oh, we need standard in front of the cout, of course, and if

42
00:02:39,566 --> 00:02:43,566
the status is Wrong_Length, then we're going to output something. And then, at this

43
00:02:43,566 --> 00:02:47,566
point, remember that we must have a break statement, so we come out of

44
00:02:47,566 --> 00:02:51,566
the case, the switch. You'll see why this is important, when we have more cases.

45
00:02:51,566 --> 00:02:55,566
It's to make sure that all the code under all the cases doesn't run. Let's see if this

46
00:02:55,566 --> 00:02:59,566
works. What I'm hoping is, that when we put in a wrong length, that this case will

47
00:02:59,566 --> 00:03:03,566
trigger and it will get some feedback, just before the game crashes.

48
00:03:03,566 --> 00:03:07,566
"ksa". There you go, we get the

49
00:03:07,566 --> 00:03:11,566
bug but we also see "Please enter a 6 letter word", just beforehand.

50
00:03:11,566 --> 00:03:15,566
Great, so the user has had a little bit of feedback! So,

51
00:03:15,566 --> 00:03:19,566
that's good news! Now, we're not going to flesh out the rest of this case

52
00:03:19,566 --> 00:03:23,566
statement here, because we're in the wrong place, aren't we? This whole lot of

53
00:03:23,566 --> 00:03:27,566
code here is all about getting valid guesses right? It's about going and getting

54
00:03:27,566 --> 00:03:31,566
a guess, checking it's status, switching, and giving feedback to the user. And we ought to

55
00:03:31,566 --> 00:03:35,566
tenaciously go around a loop doing this, until the user gives us a valid guess.

56
00:03:35,566 --> 00:03:39,566
Then, we come back and start submitting the guess to the engine down here. So, all of this lot

57
00:03:39,566 --> 00:03:43,566
should be to do with getting a valid guess. So, let's go ahead and do this refactor.

58
00:03:43,566 --> 00:03:47,566
Remember when we named GetGuess(), we've got a TODO here saying, well, it's...

59
00:03:47,566 --> 00:03:51,566
Actually, we're talking about getting a valid guess, so let's rename GetGuess() to GetValidGuess()

60
00:03:51,566 --> 00:03:55,566
now. OK, and then, we don't need the comment anymore.

61
00:03:55,566 --> 00:03:59,566
It's job is to continually loop, and we can comment more at a higher level.

62
00:03:59,566 --> 00:04:03,566
"// loop continually until

63
00:04:03,566 --> 00:04:07,566
the user gives a valid guess".

64
00:04:07,566 --> 00:04:11,566
That's this thing's job. Now, we won't put the loop in just yet,

65
00:04:11,566 --> 00:04:15,566
but we will move some of this code down so that it's clearer. So, we're going to

66
00:04:15,566 --> 00:04:19,566
go and get a valid guess. All of this switchy stuff can come down

67
00:04:19,566 --> 00:04:23,566
here now. So, you go and

68
00:04:23,566 --> 00:04:27,566
get the guess, and then, we check the guess validity and check

69
00:04:27,566 --> 00:04:31,566
that one condition. Now, what's better about this is, our PlayGame() method is now

70
00:04:31,566 --> 00:04:35,566
shorter again. We get a valid guess looping until we

71
00:04:35,566 --> 00:04:39,566
do. And if you hover over it, because we put that comment in, it now comes through here, "loop continually until the

72
00:04:39,566 --> 00:04:43,566
user" gets "a valid guess". Ah hah! OK, then, submit the valid guess, then print

73
00:04:43,566 --> 00:04:47,566
some feedback. And then, we look and GetValidGuess(), and we ask

74
00:04:47,566 --> 00:04:51,566
them for the... I guess we could actually move this comment up, couldn't we, above

75
00:04:51,566 --> 00:04:55,566
here and group all of this together, because it's all to do with just asking them for their

76
00:04:55,566 --> 00:04:58,966
guess. Then, we CheckGuessValidity().

77
00:04:58,966 --> 00:05:02,966
So, what we're going to do is, make the default case that we return the

78
00:05:02,966 --> 00:05:06,966
guess. So, default: like

79
00:05:06,966 --> 00:05:10,966
that, and then, we're going to put the return Guess; into the default:.

80
00:05:10,966 --> 00:05:14,966
So, if none of the errors above happen, then we return the guess. Again, let's test the

81
00:05:14,966 --> 00:05:20,066
code! If we go say "planes" it's fine. If we go "pla" we get the error.

82
00:05:20,066 --> 00:05:24,066
So, focusing on this repeating unit, I want you

83
00:05:24,066 --> 00:05:28,066
to write the rest of the case statements, which will be very much like this, in this gap here.

84
00:05:28,066 --> 00:05:32,066
So, the challenge is write the rest of the errors! Write a message to the user,

85
00:05:32,066 --> 00:05:36,066
for each error, tell them how to get it right next time. Remember, your break statements,

86
00:05:36,066 --> 00:05:40,066
and test the Console output for the wrong

87
00:05:40,066 --> 00:05:44,066
word length, for yourself as I just did for myself. OK,

88
00:05:44,066 --> 00:05:48,066
pause the video, go ahead and write the error messages, and I'll see you in a moment!

89
00:05:48,066 --> 00:05:52,066
OK, welcome back! So, let's

90
00:05:52,066 --> 00:05:56,066
think about what these other cases could be. Well, we can pretty much just go through the enumerators.

91
00:05:56,066 --> 00:06:00,066
There's another good thing about enumerators, if we just go colon colon, we've got Not_Isogram.

92
00:06:00,066 --> 00:06:04,066
So, let's just deal with that one, the order doesn't really matter. Standard cout,

93
00:06:04,066 --> 00:06:08,066
Please enter an isogram or "Please enter

94
00:06:08,066 --> 00:06:12,066
a word without repeating

95
00:06:12,066 --> 00:06:16,066
letters.  full stop. \n

96
00:06:16,066 --> 00:06:20,066
OK, so then it will go ahead and ask them for their

97
00:06:20,066 --> 00:06:24,066
guess, again, after that, but we'll sort the loop out in a minute. Let's just

98
00:06:24,066 --> 00:06:28,066
get with all the error cases. Ah, break! Remember your break!

99
00:06:28,066 --> 00:06:32,066
Cool! OK, so we have another case!

100
00:06:32,066 --> 00:06:36,066
What's the other case? Well, the great thing about these enumerators is, we can just have a look inside it and see,

101
00:06:36,066 --> 00:06:40,066
well what have we not dealt with? We've not dealt with all lowercase. Cool!

102
00:06:40,066 --> 00:06:44,066
So, let's just give them a message. Again, make it a message that they can action,

103
00:06:44,066 --> 00:06:48,066
they can deal with. << "Please

104
00:06:48,066 --> 00:06:52,066
enter all lowercase letters

105
00:06:52,066 --> 00:06:56,066
full stop \n". So, they're helpful! Alright, these are

106
00:06:56,066 --> 00:07:00,066
helpful error messages, hopefully. Now, we can't preview any of these yet, because

107
00:07:00,066 --> 00:07:04,066
none of these statuses are going to be triggering, but what I do want to do, before I leave this video,

108
00:07:04,066 --> 00:07:08,066
is wrap all of this in a loop. What I want to do is

109
00:07:08,066 --> 00:07:12,066
go around and around and around, until the user eventually gives us a correct

110
00:07:12,066 --> 00:07:16,066
guess. So, the way to do that is literally to wrap the whole

111
00:07:16,066 --> 00:07:20,066
lot in a do while loop. So, we go do and then open

112
00:07:20,066 --> 00:07:24,066
chevrons. OK. Now, I'm going to delete the closed chevrons

113
00:07:24,066 --> 00:07:28,066
and in this case, highlight everything, and then, down to here apart from the...

114
00:07:28,066 --> 00:07:32,066
We don't want a last closing bracket, because that closes the whole method definition, the function definition.

115
00:07:32,066 --> 00:07:36,066
Tab in to bring it all in one, and then,

116
00:07:36,066 --> 00:07:40,066
close your brackets and then we can say while. Now, what is the while

117
00:07:40,066 --> 00:07:44,066
condition here? So, we're going to do this all the time that status...

118
00:07:44,066 --> 00:07:48,066
Now, that's not helping us! Status, it's not there! Why

119
00:07:48,066 --> 00:07:52,066
is Status not here? The reason (Status) is an undeclared identifier,

120
00:07:52,066 --> 00:07:56,066
at this point, and that's what it'll say. It says

121
00:07:56,066 --> 00:08:00,066
if we try and compile identify status is undefined. Is because

122
00:08:00,066 --> 00:08:04,066
we're now outside. By being here, at this curly brace, we're

123
00:08:04,066 --> 00:08:08,066
outside of the do loop, and therefore, this status

124
00:08:08,066 --> 00:08:12,066
here is what we call out of scope. It's not available right? It's just not available

125
00:08:12,066 --> 00:08:16,066
to this while statement, because it's outside of this loop, so what we need

126
00:08:16,066 --> 00:08:20,066
to do is declare this thing first. So, instead of saying

127
00:08:20,066 --> 00:08:24,066
EGuessStatus Status, at the top here, I'm just going to take away

128
00:08:24,066 --> 00:08:28,066
the word EGuessStatus. Before we enter the loop I'm going to say

129
00:08:28,066 --> 00:08:32,066
EGuessStatus Status. Now, I want to give it a

130
00:08:32,066 --> 00:08:36,066
default value, so we're going to go EGuessStatus::

131
00:08:36,066 --> 00:08:40,066
Now, what would be a good one to give it? I think we ought to

132
00:08:40,066 --> 00:08:44,066
have an Invalid_Status status

133
00:08:44,066 --> 00:08:48,066
right, because it's invalid until we've actually set a value. So, let's go and

134
00:08:48,066 --> 00:08:52,066
do that! Let's go into the header file, and let's make our first value

135
00:08:52,066 --> 00:08:56,066
invalid. It's actually quite a good practice, for a variety of reasons I won't bore you with now.

136
00:08:56,066 --> 00:09:00,066
But if we put Invalid_Status

137
00:09:00,066 --> 00:09:04,066
as the first value, in here, it doesn't change anything else

138
00:09:04,066 --> 00:09:08,066
that we've done, by the way.

139
00:09:08,066 --> 00:09:12,066
And then, we come down here, we go ::Invalid_

140
00:09:12,066 --> 00:09:16,066
Status; so we're initializing it to an invalid status.

141
00:09:16,066 --> 00:09:20,066
By declaring it here, we now can access Status

142
00:09:20,066 --> 00:09:24,066
inside, and that means that the while loop should be able to access

143
00:09:24,066 --> 00:09:28,066
(Status). Now, it needs a boolean

144
00:09:28,066 --> 00:09:32,066
type, because we haven't finished. We need to compare that to

145
00:09:32,066 --> 00:09:36,066
EGuessStatus:: member

146
00:09:36,066 --> 00:09:40,066
OK. And is it = or not =?

147
00:09:40,066 --> 00:09:44,066
So, we keep looping. Let's put it in English. "// keep

148
00:09:44,066 --> 00:09:48,066
looping until we get

149
00:09:48,066 --> 00:09:52,066
valid input" or "no errors". This is slightly more accurate!

150
00:09:52,066 --> 00:09:56,066
"// keep looping until we get no errors". You see what's going on? If we

151
00:09:56,066 --> 00:10:00,066
zoom out... Let me actually literally turn the font size down a little bit. This is the whole of

152
00:10:00,066 --> 00:10:04,066
GetValidGuess(). We get a guess from the player, we ask them

153
00:10:04,066 --> 00:10:08,066
for their try, we check the status and get some feedback,

154
00:10:08,066 --> 00:10:11,566
and we keep going until we get no errors OK. So, let's see if we can make

155
00:10:11,566 --> 00:10:16,266
this work! Now, we're getting a warning: "not all

156
00:10:16,266 --> 00:10:20,066
control paths return a value"! That's because the compiler doesn't like the fact

157
00:10:20,066 --> 00:10:24,066
that we may never get out of this loop. Well, I'm going to

158
00:10:24,066 --> 00:10:28,066
live with that now. We wouldn't generally ignore warnings, but we're doing this with volition. We do

159
00:10:28,066 --> 00:10:32,066
want to keep looping until the user gives us a valid value. So, if I just put a few letters in,

160
00:10:32,066 --> 00:10:36,066
Ah! "Please enter a 6 letter word." OK, well, there's six letters! Great!

161
00:10:36,066 --> 00:10:40,066
I'll count them for you. And then, that's the only error it's going to detect, but you get the

162
00:10:40,066 --> 00:10:44,066
idea! And look, the try number is not incrementing,. until I put in a

163
00:10:44,066 --> 00:10:48,066
six letter word,

164
00:10:48,066 --> 00:10:52,066
and then, our try number goes up and it counts. The only thing I want to do is put an extra line in, after

165
00:10:52,066 --> 00:10:56,066
the instruction. So, where it say, please enter a blah

166
00:10:56,066 --> 00:11:00,066
letter word, I just want to make sure we've got two backslash n's

167
00:11:00,066 --> 00:11:04,066
on the end. Now, we could do that on all of these but that's a bit weird.

168
00:11:04,066 --> 00:11:08,066
And also, I forgot my break statement, so let's put that break in!

169
00:11:08,066 --> 00:11:12,066
So, rather than putting a new line on the end of all of these, what I want to do

170
00:11:12,066 --> 00:11:16,066
is just do it at the end of the switch statement.

171
00:11:16,066 --> 00:11:20,066
So, I'm just going to say here, cout end line.

172
00:11:20,066 --> 00:11:24,066
Of course, standard cout

173
00:11:24,066 --> 00:11:28,066
and standard end line. Because then, it's in a single

174
00:11:28,066 --> 00:11:32,066
place, by making that format change in one place. Now, let's put in a

175
00:11:32,066 --> 00:11:36,066
"planes". No problem, if I now put in too few letters... Ah, "Please enter a 6

176
00:11:36,066 --> 00:11:40,066
letter word." This is looking much better! Fantastic! Great

177
00:11:40,066 --> 00:11:44,066
job! Take a good look at that, make sure you understand how that method works,

178
00:11:44,066 --> 00:11:48,066
and we will work on making it a little bit more compact, as we refactor moving

179
00:11:48,066 --> 00:11:52,933
forward. OK, so this is what I would suggest is on the limit of how long a method wants to be,

180
00:11:52,933 --> 00:11:57,833
because it becomes quite hard to reason about. Great! See you soon!
>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1

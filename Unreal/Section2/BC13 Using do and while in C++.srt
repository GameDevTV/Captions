
1
00:00:00,000 --> 00:00:04,000
Hey, welcome

2
00:00:04,000 --> 00:00:08,000
back! So, in this video we're going to introduce you to a useful structure called a do while loop,

3
00:00:08,000 --> 00:00:12,000
and that's going to allow us to play the game one or more times, depending on what

4
00:00:12,000 --> 00:00:16,000
the user responds, when you ask them do they want to play again.

5
00:00:16,000 --> 00:00:16,533
...

6
00:00:16,533 --> 00:00:20,533
So, here we are back at our code! The great thing about this video is it's pretty

7
00:00:20,533 --> 00:00:24,533
much the last thing we need to do to complete the top level loop of our game,

8
00:00:24,533 --> 00:00:28,533
and it'll stay pretty much like this, however much more we add later on to make the

9
00:00:28,533 --> 00:00:32,533
rest of it run. So, let's get in and use a do while loop.

10
00:00:32,533 --> 00:00:36,533
So, let's show you a slide, "The syntax of a do while loop". So,

11
00:00:36,533 --> 00:00:40,533
how this thing works is like this. You say do and then you open some

12
00:00:40,533 --> 00:00:44,533
curly braces and you put some code that you want to repeat and you

13
00:00:44,533 --> 00:00:48,533
close the curly braces. Now, strictly speaking as we said, a pair of curly braces

14
00:00:48,533 --> 00:00:52,533
is a statement. So, you could just say do and then a single simple statement, and then,

15
00:00:52,533 --> 00:00:56,533
while but let's always use the curly braces. You know why? If another developer

16
00:00:56,533 --> 00:01:00,533
comes along or you come along later on and try to add a second thing inside

17
00:01:00,533 --> 00:01:04,533
the loop, then it won't work right unless you have these curly braces.

18
00:01:04,533 --> 00:01:08,533
Just use the curly braces, they're free! They don't take a lot of time to

19
00:01:08,533 --> 00:01:12,533
write! So do something, while (condition); that's just how it works.

20
00:01:12,533 --> 00:01:16,533
This looks a bit odd, I think, but do loaded lines of code while some (condition)

21
00:01:16,533 --> 00:01:20,533
holds. Now, the thing about a do while loop is that the code gets executed once,

22
00:01:20,533 --> 00:01:24,533
before the check ever even happens. So, you use a do while loop

23
00:01:24,533 --> 00:01:28,533
when you know that you want to do something at least once, so we know that we want to play the game at least once. It

24
00:01:28,533 --> 00:01:32,533
doesn't make sense to ask the user, "Do you want to play again?", until they've played once. So, this is a perfect

25
00:01:32,533 --> 00:01:36,533
structure for it. We do something, i.e. we print the intro and we play the game and then stuff like

26
00:01:36,533 --> 00:01:40,533
that, and then, we check. Did they want to play again or not? OK so, that's the

27
00:01:40,533 --> 00:01:44,533
logic of it. Where do you find out more about it? Well, that's www.cplusplus.com, I've been recommending. The other

28
00:01:44,533 --> 00:01:48,533
good reliable source of information about C++ syntax, especially from a

29
00:01:48,533 --> 00:01:52,533
Visual Studio perspective is Microsoft documentation. They don't make the prettiest URL,

30
00:01:52,533 --> 00:01:56,533
so let me just show you how you would find it.

31
00:01:56,533 --> 00:02:00,533
You'd do something like do while C++,

32
00:02:00,533 --> 00:02:04,533
and what you'd get back is various things. And the ones I would

33
00:02:04,533 --> 00:02:08,533
go to really and trust initially is I would probably go for the www.cplusplus.com link

34
00:02:08,533 --> 00:02:12,533
I gave you, and also here, do-while loop MSDM reference.

35
00:02:12,533 --> 00:02:16,533
So, if you get into that...

36
00:02:16,533 --> 00:02:20,533
I'm not saying there's anything wrong with the other things, by the way, this is just these are the ones that you know are pretty reliable.

37
00:02:20,533 --> 00:02:24,533
You may want to change your Visual Studio version but it's generally going to be 2015,

38
00:02:24,533 --> 00:02:28,533
and then, it'll tell you about the do while loops. OK, so that's that! Let's

39
00:02:28,533 --> 00:02:32,533
get in and make it happen! Oh, uh oh! I'm not going to be doing it though!

40
00:02:32,533 --> 00:02:36,533
Guess who's got the job of making this work? It's going to be you. So, there's the syntax! You've got that on

41
00:02:36,533 --> 00:02:40,533
the slide. You've got your links to your references. Here's your challenge. Make the game play multiple times. Put a do while

42
00:02:40,533 --> 00:02:44,533
loop in main(). Refer to the example on the previous slide for the syntax, and

43
00:02:44,533 --> 00:02:48,533
test you can play as many times as you like. OK, pause the video and

44
00:02:48,533 --> 00:02:52,533
wrap that stuff up in a do while loop!

45
00:02:52,533 --> 00:02:56,533
Cool welcome back! So, let's just do it! It's pretty simple,

46
00:02:56,533 --> 00:03:00,533
it's going to be a nice short, concise video this one, I think. We do

47
00:03:00,533 --> 00:03:04,533
some stuff, oops, open curly

48
00:03:04,533 --> 00:03:08,533
brace. Then, we're going to put the bottom curly brace where?

49
00:03:08,533 --> 00:03:12,533
Here, because we don't want to exit the application

50
00:03:12,533 --> 00:03:16,533
each time we play. So why is return complaining? Because we haven't got our while statement. While

51
00:03:16,533 --> 00:03:20,533
what? Now, I wonder how you used your initiative here? You could just say

52
00:03:20,533 --> 00:03:24,533
while (true), which means that we would be able to do

53
00:03:24,533 --> 00:03:28,533
this forever. This would be playing forever; while (true) is a way of making an infinite

54
00:03:28,533 --> 00:03:31,466
loop. You need, by the way, a semicolon on the end.

55
00:03:31,466 --> 00:03:35,466
So, let's just try this! while (true) should simply keep playing

56
00:03:35,466 --> 00:03:39,466
the game again and again and again. So we play once. We say we want to play again.

57
00:03:39,466 --> 00:03:43,466
Even if we say no, because we're not even testing it, then it just plays again. So, it's an inescapable

58
00:03:43,466 --> 00:03:47,466
game, that doesn't even work. Oh what a nightmare! So we don't want that, but it

59
00:03:47,466 --> 00:03:51,466
just proves that while (true) is going to happen. So, how are we going to

60
00:03:51,466 --> 00:03:55,466
actually respond to this? Well, we're going to need a boolean,

61
00:03:55,466 --> 00:03:59,466
and this is the format I want us to use for boolean, because it's in C++

62
00:03:59,466 --> 00:04:03,466
coding standards. We're going to go bool wants to play again, so bool b.

63
00:04:03,466 --> 00:04:07,466
We're going to prefix booleans with a small b. Weird hey!

64
00:04:07,466 --> 00:04:11,466
But why not? That's what C++ coding

65
00:04:11,466 --> 00:04:15,466
standards says. That's what we're going to see in a lot of C++ boiler play code. Why not use it?

66
00:04:15,466 --> 00:04:19,466
OK, so we're going to initialize it to false, right. We're going to assume they don't want to play again,

67
00:04:19,466 --> 00:04:23,466
to start with, unless we know any different. Then, I'm going to grab the value coming back to

68
00:04:23,466 --> 00:04:27,466
AskToPlayAgain(). Remember it's a boolean. Now, we shouldn't need to look down at it. By the way, if you

69
00:04:27,466 --> 00:04:31,466
feel you need to look down at a method, then it's not clear enough what it does. So, it's pretty

70
00:04:31,466 --> 00:04:35,466
clear. AskToPlayAgain() and what comes out is true, if they want to

71
00:04:35,466 --> 00:04:39,466
play again. See what I mean? It's just on the limit of what you can assume.

72
00:04:39,466 --> 00:04:43,466
If it was any more obscure than this, then you'd have to look down

73
00:04:43,466 --> 00:04:47,466
to AskToPlayAgain(), and if you have to look to AskToPlayAgain(), see how that matters? We're

74
00:04:47,466 --> 00:04:51,466
working at different levels of abstraction and hence we're breaking

75
00:04:51,466 --> 00:04:55,466
encapsulation and hence we're not making programming simple, OK. But anyway, in this case I

76
00:04:55,466 --> 00:04:59,466
think it's pretty clear. So, b wants to play again. bw

77
00:04:59,466 --> 00:05:03,466
= the result of calling that function

78
00:05:03,466 --> 00:05:07,466
OK. Now, this is just OK, but because

79
00:05:07,466 --> 00:05:11,466
we say Ask here, and there's a verb, and there should always be a verb in your method

80
00:05:11,466 --> 00:05:15,466
names. We can see pretty much at a glance that AskToPlayAgain() is

81
00:05:15,466 --> 00:05:19,466
actually going to print to the Console, OK.

82
00:05:19,466 --> 00:05:23,466
I think that actually pushing it all the way out to the right here

83
00:05:23,466 --> 00:05:27,466
though, may obscure the fact that we're printing to the Console, so we could potentially

84
00:05:27,466 --> 00:05:31,466
help that by just making bWantsToPlayAgain a shorter method name.

85
00:05:31,466 --> 00:05:35,466
It could just be bPlayAgain.

86
00:05:35,466 --> 00:05:39,466
OK, I think that's a little bit better! But whatever we do,

87
00:05:39,466 --> 00:05:43,466
we have to be aware that this thing almost has a side effect. It

88
00:05:43,466 --> 00:05:47,466
does something that's not 100% clear, when you read this really quickly, but we have to live

89
00:05:47,466 --> 00:05:51,466
with that. I can't think of another simple structure that's going to make this

90
00:05:51,466 --> 00:05:55,466
as readable as it is, so let's go with that! So, you grab

91
00:05:55,466 --> 00:05:59,466
that boolean, and then, you look at bPlayAgain here. So, the

92
00:05:59,466 --> 00:06:03,466
job of working out what why and no and all that means is all inside AskToPlayAgain(). We don't need to

93
00:06:03,466 --> 00:06:07,466
look at it. We can just go OK, print the intro, play the game, ask

94
00:06:07,466 --> 00:06:11,466
if they want to play again, and then, loop depending on whether they want to play again. Let's try it!

95
00:06:11,466 --> 00:06:15,466
Play again...

96
00:06:15,466 --> 00:06:19,466
No. "Press any key to continue". Good! Now, before we move on there's a problem.

97
00:06:19,466 --> 00:06:23,466
AskToPlayAgain(), it should tell us what we can put in right? y/n

98
00:06:23,466 --> 00:06:27,466
so let's try again!

99
00:06:27,466 --> 00:06:31,466
Play again, yes! Ah

100
00:06:31,466 --> 00:06:35,466
cool! Yes! So, we can loop or we can

101
00:06:35,466 --> 00:06:40,066
not loop. Perfect, I love it! We've done it! We've used do

102
00:06:40,066 --> 00:06:43,466
while loops! Pat yourself on the back and we'll see you in a moment!

103
00:06:43,466 --> 00:06:44,166

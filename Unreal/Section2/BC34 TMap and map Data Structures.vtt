WEBVTT

1
00:00:00.000 --> 00:00:01.100


2
00:00:01.100 --> 00:00:08.000
Ah, that's a very code rich slide title, isn't it, or lecture title, but

3
00:00:08.000 --> 00:00:12.000
it'll all come clear in a moment. So, in this video, we're going to talk about the importance

4
00:00:12.000 --> 00:00:16.000
of knowing your data types. Here you go, it's important you know your data types.

5
00:00:16.000 --> 00:00:20.000
[Laughs] We'll be introducing the standard map data type. We will

6
00:00:20.000 --> 00:00:24.000
immediately substitute TMap for that, so that we keep things Unreal.

7
00:00:24.000 --> 00:00:28.000
We're going to write things how Unreal wants us to. They have a structure called TMap.

8
00:00:28.000 --> 00:00:32.000
We'll talk about how we'll be using the map. Basically,

9
00:00:32.000 --> 00:00:36.000
like that is how you declare the map. You say that I want a

10
00:00:36.000 --> 00:00:39.966
map, which is just a table of characters against booleans.

11
00:00:39.966 --> 00:00:43.933
So, this is have I seen a letter? Letter A, yes! Letter C, yes,

12
00:00:43.933 --> 00:00:47.900
etc. And then, we'll tell you how to use it, basically like that. Letter

13
00:00:47.900 --> 00:00:51.933
Seen[Letter] will access the letter and return a boolean. So, have I seen

14
00:00:51.933 --> 00:00:56.000
A? Have I seen B? So, this simply allows you to say things like, I've seen letter

15
00:00:56.000 --> 00:01:00.000
A, I've seen letter B. Have I seen letter A before? Have I seen letter B before? And then,

16
00:01:00.000 --> 00:01:05.800
we'll be wiring up and pseudo-coding IsIsogram. So, see you in a moment!

17
00:01:05.800 --> 00:01:09.800
So, just before we start, if you do a Google search for

18
00:01:09.800 --> 00:01:13.800
"ue4 libraries" you should find this blog post from April 2014,

19
00:01:13.800 --> 00:01:17.800
by By Billy Bramer, that just overviews Unreal's data

20
00:01:17.800 --> 00:01:21.800
types that we have access to. Containers are things that contain multiple

21
00:01:21.800 --> 00:01:25.800
items, of course, like an array which we'll deal with shortly. A TSET, which

22
00:01:25.800 --> 00:01:29.800
would be a perfectly valid alternative, by the way, for this video. We could use a

23
00:01:29.800 --> 00:01:33.800
TSET. I'm going to be using a map, which is very similar to a set,

24
00:01:33.800 --> 00:01:37.800
a little bit more complex but a little bit more general, which is why I'm going to teach it here.

25
00:01:37.800 --> 00:01:41.800
And then, it talks about a couple of other things, including strings that we've

26
00:01:41.800 --> 00:01:45.800
seen before, FString, FText, etc. So, worth a quick look at that,

27
00:01:45.800 --> 00:01:49.800
and let's dive in! We're going to do ours based on map, as I said, it's more general.

28
00:01:49.800 --> 00:01:51.033


29
00:01:51.033 --> 00:01:55.033
So, let's show you what a map is, by example of how we're

30
00:01:55.033 --> 00:01:59.033
going to use it. So, we're going to use the word hApPy. I've purposefully made the A and

31
00:01:59.033 --> 00:02:03.033
one of the P's upper case, because we want to be able to handle this type of mixed case.

32
00:02:03.033 --> 00:02:07.033
Follow me through one line at a time. So, a map is a Key

33
00:02:07.033 --> 00:02:11.033
with a Value. We're going to have the Keys as Characters and the Values as Booleans, and we're going to

34
00:02:11.033 --> 00:02:15.033
translate all our Characters from upper case to lower case. So, we're going to store just lowercase.

35
00:02:15.033 --> 00:02:19.033
So, this is what we do! We get to h, we store an h, and we say value, we've seen it,

36
00:02:19.033 --> 00:02:23.033
true. We have an a, we translate it down from the capital A to the small

37
00:02:23.033 --> 00:02:27.033
a, and put an a in the table, just saying we've seen an a. Then, we put a

38
00:02:27.033 --> 00:02:31.033
lowercase p, because we've got a lowercase p we've seen a p. When you get to the

39
00:02:31.033 --> 00:02:35.033
second p you translate it from uppercase to lowercase, and we already have a value

40
00:02:35.033 --> 00:02:39.033
of true, so our algorithm is just going to say well, we've already seen this letter, let's dive out

41
00:02:39.033 --> 00:02:43.033
of here. Let's just leave the function. OK, so it's as simple as that! You

42
00:02:43.033 --> 00:02:47.033
literally are keeping track of which letters you have

43
00:02:47.033 --> 00:02:51.033
seen. It's as easy as that! OK, so if you want to find out more

44
00:02:51.033 --> 00:02:55.033
about maps, you can do it in two places. If you want to find out about the standard

45
00:02:55.033 --> 00:02:59.033
maps, that of course we're using here, because we're not inside Unreal yet,

46
00:02:59.033 --> 00:03:03.033
then, it's "std::map" and you can go and have a look on www.cplusplus.com.

47
00:03:03.033 --> 00:03:07.033
You've got a couple of different articles here, and it will show you how to use it.

48
00:03:07.033 --> 00:03:11.033
It looks a little bit cryptic, you're probably better off finding some example code somewhere.

49
00:03:11.033 --> 00:03:15.033
In here, for example, you see some example code. So, this

50
00:03:15.033 --> 00:03:19.033
is defining a map of a character and an integer, very similar to us but we're going

51
00:03:19.033 --> 00:03:23.033
to be having a boolean here. Their calling it first, we're going to call it letter seen. And then,

52
00:03:23.033 --> 00:03:27.033
they're assigning things to it like this, so they're saying first, the letter,

53
00:03:27.033 --> 00:03:31.033
equals 10. So, that's a map, it's just a pair of values. OK, there's also the

54
00:03:31.033 --> 00:03:35.033
Unreal map and that's called a TMap, and we're going to make a substitution so that

55
00:03:35.033 --> 00:03:39.033
we use the word TMap. And here is one example of finding out about

56
00:03:39.033 --> 00:03:43.033
TMaps. TMap there and they tell you all about it. Now, you add

57
00:03:43.033 --> 00:03:47.033
the things in Unreal, a little bit different than using .Add. We're just going to use the previous

58
00:03:47.033 --> 00:03:51.033
syntax we saw over here, for now, and we'll adjust our strategy in Unreal.

59
00:03:51.033 --> 00:03:55.033
OK, so that's an overview of maps, they are relatively simple! Let's dive in

60
00:03:55.033 --> 00:03:59.033
and start getting that working! The first thing you're going to need to do is make

61
00:03:59.033 --> 00:04:03.033
the map library available. So, we need to do a #include

62
00:04:03.033 --> 00:04:07.033
of something called <map>. Now, I'm going to

63
00:04:07.033 --> 00:04:11.033
put it here underneath, because I immediately want to do a define, a #define.

64
00:04:11.033 --> 00:04:15.033
Now, a #define is literally a pre-process or directive like

65
00:04:15.033 --> 00:04:19.033
#include, for Cut and Paste. #include basically goes to an external

66
00:04:19.033 --> 00:04:23.033
file, like a standard library map or this thing we've written, #define is even

67
00:04:23.033 --> 00:04:27.033
simpler than that. #define, let's just look up the syntax.

68
00:04:27.033 --> 00:04:31.033
"#define C++".

69
00:04:31.033 --> 00:04:35.033
www.cplusplus.com will do! The identifier and the replacement, and it's

70
00:04:35.033 --> 00:04:39.033
a textual replacement. OK, so the identifier we

71
00:04:39.033 --> 00:04:43.033
want to use is TMap, because that's the Unreal way of doing things.

72
00:04:43.033 --> 00:04:47.033
And what we want to replace... The replacement is std::

73
00:04:47.033 --> 00:04:51.033
map, which will now be available because we've included #include

74
00:04:51.033 --> 00:04:55.033
::map. So, these two lines I think go together, OK.

75
00:04:55.033 --> 00:04:59.033
So, we're going to use TMap, because we're writing Unreal standard C++. Unreal has its

76
00:04:59.033 --> 00:05:03.033
own data types that override the standard libraries, because they're more suited to the sort of

77
00:05:03.033 --> 00:05:07.033
platforms that we're going to deploy on, when we make games in Unreal.

78
00:05:07.033 --> 00:05:10.100
So, we make that substitution #define TMap standard map. Great!

79
00:05:10.100 --> 00:05:14.100
Now, you may be wondering why they're not using, using, like we did a couple of lines below.

80
00:05:14.100 --> 00:05:18.100
The reason is two fold. Number one, I want to introduce you to more things. In this

81
00:05:18.100 --> 00:05:22.100
case #define, which is simply a Cut and Paste, and you'll be seeing that in Unreal.

82
00:05:22.100 --> 00:05:26.100
And the other thing is that using a using would actually be more complicated,

83
00:05:26.100 --> 00:05:30.100
in this case, because we'd need to get involved in parameters and we just don't need that

84
00:05:30.100 --> 00:05:34.600
complication right now. So, it's simply an alternative and I want to widen your knowledge base.

85
00:05:34.600 --> 00:05:38.600
Alright, so let's now start laying the foundations for doing this. Let's give you your first

86
00:05:38.600 --> 00:05:42.600
challenge of this video! I want you to wire up these isograms. Create yourself a

87
00:05:42.600 --> 00:05:46.600
private function, inside the class. Decide if it should be constant

88
00:05:46.600 --> 00:05:50.600
or not, call it from CheckGuessValidity(), and simply return

89
00:05:50.600 --> 00:05:54.600
true, for now, inside IsIsogram(). IsSiogram() is going to be an empty function,

90
00:05:54.600 --> 00:05:58.600
OK, and your game should behave exactly as it does now,

91
00:05:58.600 --> 00:06:02.600
It's just that it's calling these empty IsIsogram() functions. Go ahead, pause the video, and wire up

92
00:06:02.600 --> 00:06:06.600
IsIsogram() right now.

93
00:06:06.600 --> 00:06:10.600
OK, welcome back! So, let's start in our header file. We're making a

94
00:06:10.600 --> 00:06:14.600
supporting function, for the first time. It's exactly the same as these variables, but this time, it's a

95
00:06:14.600 --> 00:06:18.600
function. What's it going to return? A boolean. What's it going to be called? Is

96
00:06:18.600 --> 00:06:22.600
Isogram(). What's it going to take in? An (FString),

97
00:06:22.600 --> 00:06:26.600
because we're not dealing with User Interface Text. And is it constant? Yes, if I asked the

98
00:06:26.600 --> 00:06:30.600
word IsIsogram(), I don't want to be changing any data

99
00:06:30.600 --> 00:06:34.600
or fields or member variables of this class, do I? I'm just asking a simple

100
00:06:34.600 --> 00:06:38.600
question. Space this out a little. So, bool IsIsogram! Let's go ahead and

101
00:06:38.600 --> 00:06:42.600
implement it! This is all revision for us. So, that's in the C++ file.

102
00:06:42.600 --> 00:06:46.600
IsIsogram(), I said I wanted it to return true in the challenge slide,

103
00:06:46.600 --> 00:06:50.600
so let's do that! And the reason is, that where we call it up here,

104
00:06:50.600 --> 00:06:54.600
we're going to say if not (!IsIsogram)

105
00:06:54.600 --> 00:06:58.600
passing in the (Guess)) "// if

106
00:06:58.600 --> 00:07:02.600
the guess isn't an isogram". Yes, it matches the comment! That's fantastic! Alright, so

107
00:07:02.600 --> 00:07:06.600
if not (!IsIsogram(Guess)) then we can get

108
00:07:06.600 --> 00:07:10.600
rid of this TODO, because we are in the process of writing IsIsogram().

109
00:07:10.600 --> 00:07:14.600
Let's check that our code runs as it used to! If I put in "aa" it

110
00:07:14.600 --> 00:07:18.600
says, "enter a 6 letter word". If I put "ab", 6 letter word. Boom!

111
00:07:18.600 --> 00:07:22.600
OK, so it's running as it did before! I have a

112
00:07:22.600 --> 00:07:26.600
second challenge for you, focusing our attention on the IsIsogram() method! By the way,

113
00:07:26.600 --> 00:07:30.600
one way of jumping around your code is to, click the name of the method and hit F12,

114
00:07:30.600 --> 00:07:34.600
or if you right-click you can see that shortcut there, Go To Definition. A useful one for jumping

115
00:07:34.600 --> 00:07:38.600
around your code. So, what we're going to be doing in here is asking you to

116
00:07:38.600 --> 00:07:42.600
pseudocode IsIsogram(). Only write comments,

117
00:07:42.600 --> 00:07:46.600
indent the comments as they're needed, avoid code in the comments working at a high level,

118
00:07:46.600 --> 00:07:50.600
and run through mentally with some examples. Now, we're going to be using the

119
00:07:50.600 --> 00:07:54.600
#table solution to this, as you may have guessed, with map. This is

120
00:07:54.600 --> 00:07:58.600
as I said in the table example, we're just going to go through the word, keeping track of the letters we've

121
00:07:58.600 --> 00:08:02.600
already seen. Very natural, very much as a human does it. So, pause the video and

122
00:08:02.600 --> 00:08:09.466
pseudocode only IsIsogram() now!

123
00:08:09.466 --> 00:08:13.466
So, welcome back! Let's pseudocode this! Well firstly, I want to think about the extreme cases

124
00:08:13.466 --> 00:08:17.466
What happens if they send in a blank string or a string of just length 1?

125
00:08:17.466 --> 00:08:21.466
We need to make a decision on what that would do. If we're running a

126
00:08:21.466 --> 00:08:25.466
game and I put in nothing, what do we want it to say? Something like "Enter a 6 letter

127
00:08:25.466 --> 00:08:29.466
word.", even if I put in a single letter. How about if I put in forward-slash

128
00:08:29.466 --> 00:08:33.466
0. Hmm? [Laughs] Anyway, we'll worry about that in a bit! So,

129
00:08:33.466 --> 00:08:37.466
a single letter or an empty string I think should be

130
00:08:37.466 --> 00:08:41.466
considered an isogram, so that it falls through to the enter

131
00:08:41.466 --> 00:08:45.466
the correct word length, because you can't have repeating letters

132
00:08:45.466 --> 00:08:49.466
in a 0 or 1 letter word. So, consider or treat.

133
00:08:49.466 --> 00:08:53.466
Yeah, "// treat

134
00:08:53.466 --> 00:08:57.466
0 and 1 letter

135
00:08:57.466 --> 00:09:01.466
strings" or "words" let's call it...

136
00:09:01.466 --> 00:09:05.466
..."as isograms", which is probably going to mean return

137
00:09:05.466 --> 00:09:09.466
true. I may as well have something here to hang onto, a variable name called Word. Then,

138
00:09:09.466 --> 00:09:13.466
what are we going to do? We're going to "// loop through all the

139
00:09:13.466 --> 00:09:17.466
letters of the word", and then, for each letter we're going to say

140
00:09:17.466 --> 00:09:21.466
"// if the letter is in the dictionary"

141
00:09:21.466 --> 00:09:25.466
or "in the map" we are just going to... Well, then "// we

142
00:09:25.466 --> 00:09:29.466
do NOT have an isogram",

143
00:09:29.466 --> 00:09:33.466
which is probably going to mean return false, but I don't want to write code here. "// otherwise"

144
00:09:33.466 --> 00:09:37.466
we're going to "// add the

145
00:09:37.466 --> 00:09:41.466
letter to the map

146
00:09:41.466 --> 00:09:45.466
as seen". So, we're going to add the letter with true. Then,

147
00:09:45.466 --> 00:09:49.466
what are we going to do, if we do get down to the bottom here? We should never really get to the bottom here,

148
00:09:49.466 --> 00:09:53.466
because one of these two things should end up happening. But the compiler will complain if

149
00:09:53.466 --> 00:09:57.466
we don't leave something like return true; at the bottom, because it won't realize that all of these code

150
00:09:57.466 --> 00:10:01.466
paths are jointly exhausted. So actually, if the user

151
00:10:01.466 --> 00:10:05.466
entered forward-slash 0, that's the escape character, say that's the end of

152
00:10:05.466 --> 00:10:09.466
a string. And what would actually happen, depending on how you implement your loop

153
00:10:09.466 --> 00:10:13.466
here, is it would probably not go through this loop at all.

154
00:10:13.466 --> 00:10:17.466
And it would probably end up getting down here, because if you're depending on

155
00:10:17.466 --> 00:10:21.466
also how you implement this, you might here say if Word.Length

156
00:10:21.466 --> 00:10:25.466
is less than or equal to 1 or something. Well, if you put in forward-slash 0, it'll

157
00:10:25.466 --> 00:10:29.466
probably jump through both of these. So, I think it's a reasonable thing to actually say that, if we make it to the

158
00:10:29.466 --> 00:10:33.466
bottom, we return true. "// for example in

159
00:10:33.466 --> 00:10:37.466
cases where /0 is entered".

160
00:10:37.466 --> 00:10:41.466
It's a very esoteric case, we do need to think about the fact that we could end

161
00:10:41.466 --> 00:10:45.466
up there. So, I'm going to return true and just leave that there. So, that's my

162
00:10:45.466 --> 00:10:49.466
pseudocode, and it's as, I say, simple as that really but it's a simple

163
00:10:49.466 --> 00:10:53.466
loop! Now, in the next video, we're going to talk about how you loop through all of the letters of the word, because we've

164
00:10:53.466 --> 00:10:57.466
showed you how to do it, kind of brute force, where you use your own iterators and stuff,

165
00:10:57.466 --> 00:11:01.466
but common, there's got to be a better way! And there is a better way and that's called a ranged for loop,

166
00:11:01.466 --> 00:11:05.466
which is going to automatically go through all the letters, without us worrying about all the details of

167
00:11:05.466 --> 00:11:09.466
how many letters there are. So, that's what we're going to look at next!

168
00:11:09.466 --> 00:11:09.832



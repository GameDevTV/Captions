
1
00:00:00,000 --> 00:00:04,000
So, Introducing the Const

2
00:00:04,000 --> 00:00:08,000
Keyword. In this video we will be

3
00:00:08,000 --> 00:00:12,000
talking about const's meaning and how it depends on context. Generally

4
00:00:12,000 --> 00:00:16,000
it means I promise not to change this.

5
00:00:16,000 --> 00:00:20,000
What this is, depends on exactly where it appears in a piece of

6
00:00:20,000 --> 00:00:24,000
code. At the end of a member function,

7
00:00:24,000 --> 00:00:28,000
for example int GetCurrentTry() const; It prevents the function from modifying

8
00:00:28,000 --> 00:00:32,000
any member variables, and this is a good safety feature.

9
00:00:32,000 --> 00:00:35,333
So let's dive in and take a look at it in action.

10
00:00:35,333 --> 00:00:39,333
So, let's see how this useful protection mechanism actually works.

11
00:00:39,333 --> 00:00:43,333
So, for example, here in this getter GetMaxTries(), you really hope that doesn't

12
00:00:43,333 --> 00:00:47,333
change anything, it just returns a number right, but what I'm concerned about

13
00:00:47,333 --> 00:00:51,333
is, at the moment, it can change things. You don't need to reformat you code like I'm doing, because I'm going to put

14
00:00:51,333 --> 00:00:55,333
it back in a minute. I just want to show you we can go MyMaxTries, for example, in here

15
00:00:55,333 --> 00:00:59,333
=, I don't know 12.

16
00:00:59,333 --> 00:01:03,333
Not very nice, because that would be a horrible side effect, and the fact that it compiles

17
00:01:03,333 --> 00:01:07,333
and lets us do that concerns me. So,

18
00:01:07,333 --> 00:01:11,333
what we can do is use something called const, where we declare GetMaxTries(),

19
00:01:11,333 --> 00:01:15,333
whenever you write a constructor in the future, I want you to write the word

20
00:01:15,333 --> 00:01:19,333
const after it, and then, of course, in your definition you're going to have to write const for it

21
00:01:19,333 --> 00:01:23,333
to match. And that const, in this position, it depends where you put

22
00:01:23,333 --> 00:01:27,333
const as to what it does. It has a different meaning in different positions.

23
00:01:27,333 --> 00:01:31,333
We're only talking about it on the end of a member function, right now. So, on the

24
00:01:31,333 --> 00:01:35,333
end of a member function, look what it does when we try to compile. Look at the errors!

25
00:01:35,333 --> 00:01:39,333
"Expression must be modifiable". MyMaxTries, we're

26
00:01:39,333 --> 00:01:43,333
not allowed to change MyMaxTries. In fact, we're not allowed to change any of these

27
00:01:43,333 --> 00:01:47,333
member variables. Let's try changing MyCurrentTry. it doesn't let us

28
00:01:47,333 --> 00:01:51,333
change it, OK. = 23, it's going to complain!

29
00:01:51,333 --> 00:01:55,333
Even if these things were public, MyCurrentTry, which they shouldn't be because we want

30
00:01:55,333 --> 00:01:59,333
access to them through our nice methods, but if they were public we still couldn't

31
00:01:59,333 --> 00:02:03,333
change it, which is absolutely good! OK, so this is

32
00:02:03,333 --> 00:02:07,333
just protecting ourselves from ourselves and from other people.

33
00:02:07,333 --> 00:02:11,333
So, let's go back to where we were. I've got const on the end there. I'm going to just get

34
00:02:11,333 --> 00:02:15,333
rid of this nasty code and prove that const, in this position in

35
00:02:15,333 --> 00:02:19,333
the declaration, has had the effect of making sure

36
00:02:19,333 --> 00:02:23,333
that this function, a member function... It has to be a member

37
00:02:23,333 --> 00:02:27,333
as part of a class and I'll explain that in a second, if I explain that now. Let's go to main.

38
00:02:27,333 --> 00:02:31,333
And if we try to make, for example, PlayGame() const or

39
00:02:31,333 --> 00:02:35,333
let's try something else actually, PrintIntro(). OK, so here's PrintIntro(). It turns

40
00:02:35,333 --> 00:02:39,333
out... Don;'t do this, just watch for a second. It turns out, you need to put it above, so

41
00:02:39,333 --> 00:02:43,333
there's PrintIntro(). If I go const here, look I'm going to get another error.

42
00:02:43,333 --> 00:02:47,333
A type qualifier is

43
00:02:47,333 --> 00:02:51,333
not allowed on a non-member function. This is a non-member function because it's not

44
00:02:51,333 --> 00:02:55,333
inside a class declaration. OK, these methods are all

45
00:02:55,333 --> 00:02:59,333
inside a class, this isn't. So, this only works on class functions, if you like,

46
00:02:59,333 --> 00:03:03,333
or member functions is another way of calling it. You have to be careful

47
00:03:03,333 --> 00:03:07,333
with these terms, because strictly speaking, in the C++ standards they just talk about

48
00:03:07,333 --> 00:03:11,333
functions, but anyway... So over here,

49
00:03:11,333 --> 00:03:15,333
we've said const and it prevents this method from changing

50
00:03:15,333 --> 00:03:19,333
any properties or

51
00:03:19,333 --> 00:03:23,333
variables of the object, which is really powerful. OK, it's pretty simple!

52
00:03:23,333 --> 00:03:27,333
That's all I want to say in this is, the next level of strength down from const

53
00:03:27,333 --> 00:03:31,333
expression, which means you have to know it at compile time. const says, well we don't necessarily

54
00:03:31,333 --> 00:03:35,333
know what this thing is at compile time, but I want to make sure this method doesn't change anything at

55
00:03:35,333 --> 00:03:39,333
runtime. So, I've got a challenge for you! So, your challenge it to

56
00:03:39,333 --> 00:03:43,333
apply const to all your other getters. Make

57
00:03:43,333 --> 00:03:47,333
all the getter methods constant, check it still runs, and I want you to answer this question

58
00:03:47,333 --> 00:03:51,333
in the discussions. Are any of the other functions, that we've written so far, candidates

59
00:03:51,333 --> 00:03:55,333
for the use of const. If so, suggest which if any in the discussions,

60
00:03:55,333 --> 00:03:59,333
just because I want you to get used to putting your ideas out there and to thinking. Now, some of you may not

61
00:03:59,333 --> 00:04:03,333
feel comfortable with that, but I'd encourage you to do things you're a little bit uncomfortable with. So,

62
00:04:03,333 --> 00:04:07,333
think with any of the others, discuss with the other students, could we make

63
00:04:07,333 --> 00:04:11,333
one of these other methods that we've got already declared here,

64
00:04:11,333 --> 00:04:15,333
could one of these other be const, one of the three

65
00:04:15,333 --> 00:04:19,333
that I've highlighted? OK, go ahead, pause the video,

66
00:04:19,333 --> 00:04:23,333
and do that challenge now!

67
00:04:23,333 --> 00:04:27,333
Cool! So welcome back! Obviously we're going to make GetCurrentTry()

68
00:04:27,333 --> 00:04:31,333
const. Because it's a pure getter, it's called const,

69
00:04:31,333 --> 00:04:35,333
and it's called get rather. It starts with get, we want to make it const. Now, there's another, of course,

70
00:04:35,333 --> 00:04:39,333
which is the IsGameWon(). We haven't implemented this yet,

71
00:04:39,333 --> 00:04:43,333
but from now on, I want you to start thinking about, if we're just asking a

72
00:04:43,333 --> 00:04:47,333
question, is the game won even though there is no definition

73
00:04:47,333 --> 00:04:51,333
of that yet, I want this to be constant, right; because

74
00:04:51,333 --> 00:04:55,333
I know just contractually that looking at this I don't

75
00:04:55,333 --> 00:04:59,333
want IsGameWon() to be changing anything. That would be bad, wouldn't it! I think

76
00:04:59,333 --> 00:05:03,333
it would be bad. OK, so that's fine! I'm just going to more reset

77
00:05:03,333 --> 00:05:07,333
down, because it's kind of a different class of method. This actually does stuff, so I'm going to move that down

78
00:05:07,333 --> 00:05:11,333
one, leave all these guys there and the constant ones at the top.

79
00:05:11,333 --> 00:05:15,333
I'm going to leave space here, because I want you to stop looking at the private parts

80
00:05:15,333 --> 00:05:19,333
of the code. OK, focus

81
00:05:19,333 --> 00:05:23,333
on the interface, which is getting clearer and clearer. OK, these things don't change

82
00:05:23,333 --> 00:05:27,333
anything and now can't change anything, which is great and we can reset the game and check validity.

83
00:05:27,333 --> 00:05:31,333
which we'll implement later. OK, let's compile, always compile, make sure things

84
00:05:31,333 --> 00:05:35,333
work, and nice simple video. See you soon!

85
00:05:35,333 --> 00:05:37,266
...

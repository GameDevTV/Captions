  ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
Welcome to

2
00:00:04.000 --> 00:00:08.000
Debugging 101! I'm going to give you a very brief into to Visual Studio's Debugger,

3
00:00:08.000 --> 00:00:12.000
and the principles will apply over to Xcode and others. I'm going to show you

4
00:00:12.000 --> 00:00:16.000
how to set a break point and to watch values and then how to use

5
00:00:16.000 --> 00:00:20.000
continue to look around your code and see what it does in between

6
00:00:20.000 --> 00:00:24.000
your watches and break points. That'll all make sense in a sec, when we dive in and see

7
00:00:24.000 --> 00:00:24.900
it work.

8
00:00:24.900 --> 00:00:28.900
OK, so here we are with our slightly problematic loop! Now, I know that some

9
00:00:28.900 --> 00:00:32.900
of you may have spotted the bug in this straight away, but

10
00:00:32.900 --> 00:00:36.900
for those who haven't, I'm going to show you the systematic process of trying to find out

11
00:00:36.900 --> 00:00:40.900
what on earth is going on. So firstly, let's just remind ourselves what the symptom is. I've got a

12
00:00:40.900 --> 00:00:44.900
hidden word of ant, and if I type and, I get correctly 2 bulls.

13
00:00:44.900 --> 00:00:48.900
If I put ape, then I get 1 bull for the a, but

14
00:00:48.900 --> 00:00:52.900
in both cases, I'm getting too many cows. And the question is, why am I getting

15
00:00:52.900 --> 00:00:56.900
too many cows? So, that's what we need to try and

16
00:00:56.900 --> 00:01:00.900
work out. So, here's our logic

17
00:01:00.900 --> 00:01:04.900
and it seems find. Now, a couple of things on style, firstly.

18
00:01:04.900 --> 00:01:08.900
And star sometimes can fix it alone. This for loop

19
00:01:08.900 --> 00:01:12.900
and the if statement, we're both not putting our braces on

20
00:01:12.900 --> 00:01:16.900
new lines. Unreal would have us do this and this, and you may choose

21
00:01:16.900 --> 00:01:20.900
to do that for the for loops. And then again, Unreal's coding standards

22
00:01:20.900 --> 00:01:24.900
would have us do this and this

23
00:01:24.900 --> 00:01:28.900
and this, for the if statements. Now, you may want to do that. Personally, I find that means

24
00:01:28.900 --> 00:01:32.900
I need to go out to a small font, which is going to be harder for you to see. And also, I don't

25
00:01:32.900 --> 00:01:36.900
find it quite as easy to take in. So, I prefer to not do

26
00:01:36.900 --> 00:01:40.900
that and to revert all those changes and to have the code just a little bit tighter.

27
00:01:40.900 --> 00:01:44.900
Certainly my if statements, I'm happy for the fors to be spread out a little bit,

28
00:01:44.900 --> 00:01:48.900
but certainly these ifs in here, I like them to be tight. Now, if this offends you and you want a

29
00:01:48.900 --> 00:01:52.900
consistent style, then you can draw things,

30
00:01:52.900 --> 00:01:56.900
write things how you like right. Bracket wars are pretty vile.

31
00:01:56.900 --> 00:02:00.900
It's irrelevant, the important thing is that you read code like a compiler reads code.

32
00:02:00.900 --> 00:02:04.900
Some people love their brackets there, some love them there. Who cares! I'm going for

33
00:02:04.900 --> 00:02:08.900
this, for now, so that's deviating a little bit from Unreal standards, so don't flame me for that. Now,

34
00:02:08.900 --> 00:02:12.900
the other thing is that, we have used this i and j which is pretty common, but actually,

35
00:02:12.900 --> 00:02:16.900
this may be contributing to our problem. What is i here? Let's be more explicit about what

36
00:02:16.900 --> 00:02:20.900
i is. Firstly, it's in lower case, and we'd normally use upper case. What i is, is it's the

37
00:02:20.900 --> 00:02:24.900
hidden word character or something like that. So, I'm going to call

38
00:02:24.900 --> 00:02:28.900
it hidden word character, or even my hidden word,

39
00:02:28.900 --> 00:02:32.900
MHWCharacter. So, the my hidden

40
00:02:32.900 --> 00:02:36.900
word character is 0 and iterates up. And then, this j thing, what is explicitly

41
00:02:36.900 --> 00:02:40.900
Control, R, Control, R, is the guess

42
00:02:40.900 --> 00:02:44.900
character. Now, I'm making them shorter than full my

43
00:02:44.900 --> 00:02:48.900
hidden word character and guess character, in this case, because otherwise they're going to

44
00:02:48.900 --> 00:02:52.900
split up these statements and make this whole lump of code even harder to read

45
00:02:52.900 --> 00:02:56.900
but I think that this is better. OK, so

46
00:02:56.900 --> 00:03:00.900
now we're being explicit about what our iterators are and what they need to do. We need to think

47
00:03:00.900 --> 00:03:04.900
about what's going wrong. Clearly what's going wrong, in some respects,

48
00:03:04.900 --> 00:03:08.900
is that this BullCowCount.Cows is being incremented too often. This

49
00:03:08.900 --> 00:03:12.900
is the thing that's happening too often, it's the only place that it gets incremented.

50
00:03:12.900 --> 00:03:16.900
So, one way to deal with this is to put in the margins something called a break point. If you

51
00:03:16.900 --> 00:03:20.900
click over on the left here, that will put something called a break point. Put it on the line that's causing the problem,

52
00:03:20.900 --> 00:03:24.900
to start with, and then when you run, instead of Start Without Debugging, let's just

53
00:03:24.900 --> 00:03:28.900
Start Debugging, which is F5 by default. Start Debugging.

54
00:03:28.900 --> 00:03:32.900
Similar tools are available in Xcode and other IDE's, you just have to have a play to get to them.

55
00:03:32.900 --> 00:03:36.900
So, if we Start Debugging now, with this break point in place, what it'll do is it'll

56
00:03:36.900 --> 00:03:40.900
start playing the game. Now, imagine I put in... Don't even imagine, I'm going to

57
00:03:40.900 --> 00:03:44.900
put an and, a n d. You see it doesn't give me a result yet. What Visual Studio

58
00:03:44.900 --> 00:03:48.900
has done is, it's got as far as this break point and stopped, and then, it started

59
00:03:48.900 --> 00:03:52.900
to show me here, under these tabs Auto, Locals, and Watch...

60
00:03:52.900 --> 00:03:56.900
It started to show me, in fact the watches are things I've put in between videos,

61
00:03:56.900 --> 00:04:00.900
which is naughty, so I'm going to clear those. So, you will have Autos, Locals, and

62
00:04:00.900 --> 00:04:04.900
nothing in Watch at the moment. Now the Autos, you can start to see  some of these

63
00:04:04.900 --> 00:04:08.900
values and you can click continue, for it to go all the way through the loop again and start to see

64
00:04:08.900 --> 00:04:12.900
what happens. You can see the cow count getting too high, really early here.

65
00:04:12.900 --> 00:04:16.900
OK, and then it goes back to the running game and we can try ant

66
00:04:16.900 --> 00:04:20.900
again, and now, it'll go and break here. Visual Studio is flashing, you can go back to it.

67
00:04:20.900 --> 00:04:24.900
OK, now you might suggest that if it's getting here too often

68
00:04:24.900 --> 00:04:28.900
and it's getting this bit right, that maybe it's doing this if

69
00:04:28.900 --> 00:04:32.900
statement too often. Because this line here with the bull

70
00:04:32.900 --> 00:04:36.900
increment is working right, but it must be falling through to the cows to often and

71
00:04:36.900 --> 00:04:40.900
to get to the cows it must be doing this if statement too often. So, is there a problem in

72
00:04:40.900 --> 00:04:44.900
this if statement? One thing you can do at this point, once the debugger is running is this.

73
00:04:44.900 --> 00:04:48.900
You can highlight the logic, right-click and say

74
00:04:48.900 --> 00:04:52.900
Add Watch. OK. And what that'll do over on the

75
00:04:52.900 --> 00:04:56.900
Watch list here is, it'll tell you the value of this statement. Now,

76
00:04:56.900 --> 00:05:00.900
if this is working properly and I put the word

77
00:05:00.900 --> 00:05:04.900
abc in, for example, then you would expect

78
00:05:04.900 --> 00:05:08.900
this to go false, some of the time, as it compares the characters right. Because abc

79
00:05:08.900 --> 00:05:12.900
and ant aren't the same, and you would expect to see a mixture of trues and falses. Let's

80
00:05:12.900 --> 00:05:16.900
see if that's what happens! Let's just quit the game, for a moment,

81
00:05:16.900 --> 00:05:20.900
which you can do by saying Stop Debug. There's a little red button. I'll show you that again in a moment.

82
00:05:20.900 --> 00:05:24.900
So, let's run again, put abc, Return,

83
00:05:24.900 --> 00:05:28.900
go over to the Debugger, look here at the Watch list, and just keep clicking

84
00:05:28.900 --> 00:05:32.900
Continue and watch this value. And it

85
00:05:32.900 --> 00:05:36.633
stayed true all the time, the value never deviated from true.

86
00:05:36.633 --> 00:05:37.000
...

87
00:05:37.000 --> 00:05:40.066
So, what I want you to do is squash that bug, using

88
00:05:40.066 --> 00:05:44.633
the little you know of the Debugger. See if you can use either the Debugger or just your

89
00:05:44.633 --> 00:05:48.633
wit and knowledge to work out what the problem is. See if you can fix it, it's pretty

90
00:05:48.633 --> 00:05:52.633
simple. I've steered you in close to where it is, and then, proved

91
00:05:52.633 --> 00:05:57.166
that it now counts bulls and cows correctly. And I'll see you when you're done!

92
00:05:57.166 --> 00:06:01.166
So, hopefully by now you've seen what's going wrong. Let's stop the Debuggers. The

93
00:06:01.166 --> 00:06:05.166
button is there, Shift, F5. Stop Debugging or Debug and Stop

94
00:06:05.166 --> 00:06:09.166
Debugging. So, there's a very very brief intro to the Debugger. What I want you

95
00:06:09.166 --> 00:06:13.166
to do is play with the Debugger a little bit. Really, it's a question of getting a feel for it,

96
00:06:13.166 --> 00:06:17.166
and understand that you can put break points in to stop it executing. If you debug without a

97
00:06:17.166 --> 00:06:21.166
break point, then what it's going to do is just run, and you're not going to see

98
00:06:21.166 --> 00:06:25.166
anything in the Debugger, because it's all going to go past too quick. So, you need to click in the margin to put in a break

99
00:06:25.166 --> 00:06:29.166
point, and just have a play with it. It's a pretty handy tool, and we'll revisit it as need

100
00:06:29.166 --> 00:06:33.166
to. So, what's happening here? I think it's quite clear now that I've changed these

101
00:06:33.166 --> 00:06:37.166
prefixes. I'm looking at the my hidden word character of the Guess, but I'm also

102
00:06:37.166 --> 00:06:41.166
looking at the my hidden word character of the hidden word. Of course, I

103
00:06:41.166 --> 00:06:45.166
should be looking at the Guess character, here,

104
00:06:45.166 --> 00:06:49.166
GChar and the my hidden word character there.

105
00:06:49.166 --> 00:06:53.166
And so, what was happening is we were using the wrong index.

106
00:06:53.166 --> 00:06:57.166
OK, so let's test that hypothesis and put ant,

107
00:06:57.166 --> 00:07:01.166
and we get 3, 0. And if I put and we should get 2, because the a and the d match

108
00:07:01.166 --> 00:07:05.166
ant but the d doesn't. Ah hah! Great!

109
00:07:05.166 --> 00:07:09.166
OK, and that's working! And if I put abc, how many should we get? Well, we

110
00:07:09.166 --> 00:07:13.166
should get a single bull and no cows. And if I put abt

111
00:07:13.166 --> 00:07:17.166
or atn, for instance which is ant backwards, I should get

112
00:07:17.166 --> 00:07:21.166
one bull and two cows and I do. So, it looks like that has

113
00:07:21.166 --> 00:07:25.166
fixed the logic, which is great news! So, there's a brief

114
00:07:25.166 --> 00:07:29.166
introduction to the Debugger, and I hope you will find it useful. Do use it

115
00:07:29.166 --> 00:07:33.166
and try and use it and just explore it and play with it, and we will revisit the Debugger

116
00:07:33.166 --> 00:07:39.299
as we need to, in the future, when we come up with other inevitable bugs. See you soon!

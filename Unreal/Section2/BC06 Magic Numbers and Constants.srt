1
00:00:00,000 --> 00:00:02,700
...

2
00:00:02,700 --> 00:00:06,700
Welcome to magic numbers and constants! So, we're going to talk about what a magic

3
00:00:06,700 --> 00:00:10,700
number is, why it's a good idea to avoid them. We're going to use something called const

4
00:00:10,700 --> 00:00:14,700
expr, constant expression, and I'll explain how that works,

5
00:00:14,700 --> 00:00:18,700
briefly introduce you to coding standards, and then, if you want to link,

6
00:00:18,700 --> 00:00:22,700
by the way, to the Unreal Engine coding standards it's in the slides but also just Google

7
00:00:22,700 --> 00:00:26,700
for Unreal Engine coding standards. Then, we're actually going to use one of these

8
00:00:26,700 --> 00:00:30,700
constant expressions for our word length. And at the end of it, what will happen is

9
00:00:30,700 --> 00:00:34,700
you'll have a bit in our code like this that says WORLD_LENGTH =, and whatever we put

10
00:00:34,700 --> 00:00:38,700
will be taken through to the code, so that we have a single place in our code,

11
00:00:38,700 --> 00:00:42,700
where we constantly refer to this word length but we can change it in just one place.

12
00:00:42,700 --> 00:00:46,400
OK cool, so let's dive in and make this happen!

13
00:00:46,400 --> 00:00:50,400
OK, so I want to finish introducing this game! So, I'm going to say "Welcome

14
00:00:50,400 --> 00:00:54,400
to Bulls and Cows, a fun word game."

15
00:00:54,400 --> 00:00:58,400
Fantastic! Alright now, next line! You can put what you like here, but I'm

16
00:00:58,400 --> 00:01:02,400
going to say something along the lines of, "Can you guess the

17
00:01:02,400 --> 00:01:06,400
X letter isogram"... We'll come back to the X in a minute.

18
00:01:06,400 --> 00:01:10,400
..."I'm thinking of

19
00:01:10,400 --> 00:01:14,400
?" and then maybe a backslash n this time,

20
00:01:14,400 --> 00:01:18,400
just to show that you can use either. OK,

21
00:01:18,400 --> 00:01:22,400
so what does that give us? Well, let's run it and see! It's very simple!

22
00:01:22,400 --> 00:01:26,400
It just says, "Can you guess the X letter isogram"? Now, X isn't very helpful. It's

23
00:01:26,400 --> 00:01:30,400
tempting to come in here and just hard code, because this version of the game is going to have a single word in the dictionary.

24
00:01:30,400 --> 00:01:34,400
Hard code five or six, but I want alarm bells to ring in your mind, whenever you write

25
00:01:34,400 --> 00:01:38,400
a number that's higher than one. So, 0 and 1 can be OK in a program.

26
00:01:38,400 --> 00:01:42,400
Anything higher than 1, like 2 and above, generally unless you're

27
00:01:42,400 --> 00:01:46,400
using something literal like route

28
00:01:46,400 --> 00:01:50,400
66 or you know A14, a road name

29
00:01:50,400 --> 00:01:54,400
in the UK. Unless it's actually kind of literally, in the world, part of the name

30
00:01:54,400 --> 00:01:58,400
of something, try and avoid magic numbers, just numbers that you've plucked

31
00:01:58,400 --> 00:02:02,400
out of the air and popped into your program, because it can be very hard to change. What we want is a

32
00:02:02,400 --> 00:02:06,400
mechanism to change the length of this word, anywhere in the

33
00:02:06,400 --> 00:02:10,400
program, and that mechanism is going to be using something called a constant expression.

34
00:02:10,400 --> 00:02:14,400
OK, const...

35
00:02:14,400 --> 00:02:18,400
constexpr, that's a constant expression.

36
00:02:18,400 --> 00:02:22,400
Now, there's something else called a constant right above it, and we'll talk about those later,

37
00:02:22,400 --> 00:02:26,400
but we want to make heavy use in Unreal and C++ of things like constants and constant

38
00:02:26,400 --> 00:02:30,400
expressions. Whenever something doesn't change, we're going to use one of these two. So, now we're

39
00:02:30,400 --> 00:02:34,400
focused on constant expression, and constant expression means that this

40
00:02:34,400 --> 00:02:38,400
thing can be evaluated, right now, at compile time. We know

41
00:02:38,400 --> 00:02:42,400
the expression from the very beginning, so the syntax is like this. Const expression, then our

42
00:02:42,400 --> 00:02:46,400
name. Now, I'm going to give it a name of WORLD_LENGTH for now,

43
00:02:46,400 --> 00:02:50,400
WORLD_LENGTH. Underscore is a safe way to

44
00:02:50,400 --> 00:02:54,400
separate things. Constant expression WORLD _LENGTH. Now, you need to immediately, and

45
00:02:54,400 --> 00:02:58,400
it's a generally good habit, whenever you declare something like this, when you say

46
00:02:58,400 --> 00:03:02,400
I've got a constant expression, it's called WORLD_LENGTH, let's give it a value,

47
00:03:02,400 --> 00:03:06,400
and let's say 5. Ooops! OK, that's great!

48
00:03:06,400 --> 00:03:10,400
Alright now, why have I done all of this in uppercase, and what is it

49
00:03:10,400 --> 00:03:14,400
complaining about? Well firstly, it's complaining because I haven't given it a type. You need to

50
00:03:14,400 --> 00:03:18,400
say what the type of this thing is. Constant expressions integer WORLD_

51
00:03:18,400 --> 00:03:22,400
LENGTH = 5. A normal declaration would not have this

52
00:03:22,400 --> 00:03:26,400
constant expression but we want constant expression here. So, what this is

53
00:03:26,400 --> 00:03:30,400
saying is, I've got something. I'm calling WORLD_LENTHG, why all upper case, by the way? Well,

54
00:03:30,400 --> 00:03:34,400
I've looked in Unreal's Engine coding standards, and they don't seem to say anything about

55
00:03:34,400 --> 00:03:38,400
using constants, so I'm just going to go with all upper case, because it's a pretty common

56
00:03:38,400 --> 00:03:42,400
practice. We may change that later, once we get in Unreal, but for now, this is representing.

57
00:03:42,400 --> 00:03:46,400
This thing does not change. It's got a value of 5. It's an integer, which means you can count it on your fingers,

58
00:03:46,400 --> 00:03:50,400
basically if you've got a lot of fingers. And it's a constant

59
00:03:50,400 --> 00:03:54,400
expression. So, it's going to be determinable right now, as soon as I've written the

60
00:03:54,400 --> 00:03:58,400
code, and the compiler will be able to know what it's value is, right at the start.

61
00:03:58,400 --> 00:04:02,400
It cannot change once the program is running. Alright, that's what const expression

62
00:04:02,400 --> 00:04:06,400
does, and we want to use it here. So, I've got a simple

63
00:04:06,400 --> 00:04:10,400
challenge of you. I want you to include this constant expression into

64
00:04:10,400 --> 00:04:14,400
your code. So, I want you to include the

65
00:04:14,400 --> 00:04:18,400
WORLD_LENGTH in the intro text, and make sure it prints

66
00:04:18,400 --> 00:04:22,400
with spaces properly. You're just going to have to try and work out how

67
00:04:22,400 --> 00:04:26,400
that goes in there. It's using only syntax that

68
00:04:26,400 --> 00:04:30,400
you've used before. You're going to have to pop the expression WORLD_LENGTH into

69
00:04:30,400 --> 00:04:34,400
your code and maybe adjust things, so everything fits on one line. So, have a go at

70
00:04:34,400 --> 00:04:38,400
that! Make a bit of a mess, play with it, see if you can get it printing out using WORLD_LENGTH, so if you

71
00:04:38,400 --> 00:04:42,400
change that WORLD_LENGTH, the text changes.

72
00:04:42,400 --> 00:04:46,400
So welcome back! Let's see how I'm going to do that! So, when I get

73
00:04:46,400 --> 00:04:50,400
to the X in the X letter isogram, I'm going to close my quotes like that,

74
00:04:50,400 --> 00:04:54,400
and then, I'm going to put another double chevron operator

75
00:04:54,400 --> 00:04:58,400
and then I'm going to use WORLD_LENGTH. Notice how it populates for me. And I'm actually going to

76
00:04:58,400 --> 00:05:02,400
end the line there, i.e. the statement, and

77
00:05:02,400 --> 00:05:06,400
I'm going to go on to a new line, because I want to keep my code concise and then I'm going to start again.

78
00:05:06,400 --> 00:05:10,400
Alright now, why does this work? It works

79
00:05:10,400 --> 00:05:14,400
because... Let's see if it does work first, and then, I'll talk you through why it works. [Laughs]

80
00:05:14,400 --> 00:05:18,400
Well, it doesn't, I've got my spaces wrong! Common error here! So, I missed a

81
00:05:18,400 --> 00:05:22,400
space here. Now, what' going on? It prints out, "Can you guess the"

82
00:05:22,400 --> 00:05:26,400
and then a space, and then these spaces don't matter because

83
00:05:26,400 --> 00:05:30,400
the compiler ignores white space but it doesn't ignore it when it's inside

84
00:05:30,400 --> 00:05:34,400
a quote. So, I could get rid of these spaces, I'll do that as an example.

85
00:05:34,400 --> 00:05:38,400
Then, it puts on the WORLD_LENGTH, and luckily for us, it converts from this integer

86
00:05:38,400 --> 00:05:42,400
thing here into a string. We're kind of taking that for granted

87
00:05:42,400 --> 00:05:46,400
but it naturally does that for us. Then, the statement ends, but it comes right along here

88
00:05:46,400 --> 00:05:50,400
and does another cout. And because we never ended the line

89
00:05:50,400 --> 00:05:54,400
with a new line, we immediately start to print. We put a space,

90
00:05:54,400 --> 00:05:58,400
which is the correction I just made, and then, we carry on and put another new line. So, let's just look

91
00:05:58,400 --> 00:06:02,400
at that working! There you go! "Welcome to Bulls and Cows, can you

92
00:06:02,400 --> 00:06:06,400
guess the 5 letter isogram?" Now, if I change this constant here to sasy 9,

93
00:06:06,400 --> 00:06:10,400
you see it changes 9 fantastic!

94
00:06:10,400 --> 00:06:14,400
A small thing but you'll see later why this really matters, because WORLD_LENGTH

95
00:06:14,400 --> 00:06:18,400
is going to be used throughout our code, and there's going to be a load of stuff here,

96
00:06:18,400 --> 00:06:22,400
eventually. And we're going to want to refer to WORLD_LENGTH right down here,

97
00:06:22,400 --> 00:06:26,400
and there could be lots of references, so that we know if we only ever refer to

98
00:06:26,400 --> 00:06:30,400
WORLD_LENGTH, like this, that if we change it we can always change it in one

99
00:06:30,400 --> 00:06:34,400
place. You want to generally strive for having information in one place and one place

100
00:06:34,400 --> 00:06:38,400
only. I'm going to put my spaces back in here, because they're ignored by the compiler.

101
00:06:38,400 --> 00:06:42,400
Only spaces within strings like this actually make any sense.

102
00:06:42,400 --> 00:06:46,400
Also, other places that spaces make a difference are like using space

103
00:06:46,400 --> 00:06:50,400
namespace. We have to separate out these keywords. I can't just go usingnamespace, it doesn't

104
00:06:50,400 --> 00:06:54,400
know where one word starts and the other finishes, right. But I can go using

105
00:06:54,400 --> 00:06:58,400
namepsace standard, if I really want to make my code ugly. I could put all

106
00:06:58,400 --> 00:07:02,400
sorts of weird spaces in here, and it would still compile

107
00:07:02,400 --> 00:07:06,400
but it would just look really horrible. Generally, never hit the Spacebar more than once, is a good

108
00:07:06,400 --> 00:07:10,400
rule of thumb. OK, so I'm going to tidy up my code and we are

109
00:07:10,400 --> 00:07:14,400
done! We have learned a little bit about constant expressions. Now, the

110
00:07:14,400 --> 00:07:18,400
strongest form of constant in C++, and you want to use it when

111
00:07:18,400 --> 00:07:21,000
you can.


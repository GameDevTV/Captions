
1
00:00:00,000 --> 00:00:04,000
So, welcome to Range Based

2
00:00:04,000 --> 00:00:08,000
for Loops! In this video, we're going to be introducing containers and iterators

3
00:00:08,000 --> 00:00:12,000
very briefly, using a range based for loop in Unreal,

4
00:00:12,000 --> 00:00:16,000
gently introducing the auto keyword, and

5
00:00:16,000 --> 00:00:20,000
finishing our IsIsogram() method. By the way, you can read more about range based

6
00:00:20,000 --> 00:00:24,000
for loops, from the Unreal stand point, using that URL there.

7
00:00:24,566 --> 00:00:28,800
So, just before we deal with our fancy ranged based for loop, a couple of

8
00:00:28,800 --> 00:00:32,566
other things to do. We need to deal with this "treat 0 and 1 letter word

9
00:00:32,566 --> 00:00:36,566
as isograms", but we also need to setup our map, which we'll do in a

10
00:00:36,566 --> 00:00:40,566
moment. So, why do we treat 0 and 1 letter words as isograms? Well,

11
00:00:40,566 --> 00:00:44,566
a word with only 0 or 1 letters cannot have repeating letters, so we

12
00:00:44,566 --> 00:00:48,566
should declare it as an isogram. It is very meaningful, but it will also give us

13
00:00:48,566 --> 00:00:52,566
the useful behavior, that when we run our game and put in a single character

14
00:00:52,566 --> 00:00:56,566
like this, that it will go straight through the IsIsogram

15
00:00:56,566 --> 00:01:00,566
test and go onto the next one, which in this case the word length is wrong,

16
00:01:00,566 --> 00:01:04,566
which is useful guidance. So, let's simply say, if

17
00:01:04,566 --> 00:01:08,566
(Word.length() ) remembering it's a method so it needs curly braces, is less than or equal

18
00:01:08,566 --> 00:01:12,566
to 1, or you could say is less than 2 without the equals.

19
00:01:12,566 --> 00:01:16,566
Then, I'm just going to end line, return true.

20
00:01:16,566 --> 00:01:20,566
Very simple! So, treating 0 and 1 letter words as isograms! OK!

21
00:01:20,566 --> 00:01:24,566
How do we setup our map? Well, we already declared a substitution up here using

22
00:01:24,566 --> 00:01:28,566
#define. We said #define TMap as std::map,

23
00:01:28,566 --> 00:01:32,566
because this is the Unreal syntax. So, let's use the word TMap

24
00:01:32,566 --> 00:01:36,566
and come down to our implementation of IsIsogram

25
00:01:36,566 --> 00:01:40,566
and think about how we're going to set it up. Let me show you the syntax! This is the standard

26
00:01:40,566 --> 00:01:44,566
map syntax, the same obviously for TMap, because we've just made a

27
00:01:44,566 --> 00:01:48,566
straight swap of this to this. It's literally textual replacement. So, we're saying we're making a

28
00:01:48,566 --> 00:01:52,566
map of a character to a boolean. And we're going to call that map Letter

29
00:01:52,566 --> 00:01:56,566
Seen, or you could call it SeenLetters or something else but we're going to declare it like that!

30
00:01:56,566 --> 00:02:00,566
We're going to use the syntax, using LetterSeen{Letter]

31
00:02:00,566 --> 00:02:04,566
a bit like accessing characters of a string, to access members of that map.

32
00:02:04,566 --> 00:02:08,566
You can assign to a map element in the same way, but the same syntax.

33
00:02:08,566 --> 00:02:12,566
For example, LetterSeen[Letter] = true; now, some people,

34
00:02:12,566 --> 00:02:16,566
if you're more experienced, may say why don't you use an unordered set or an Unreal

35
00:02:16,566 --> 00:02:20,566
T set. Absolutely perfectly valid alternative, I'm simply using a map here because it's more

36
00:02:20,566 --> 00:02:24,566
versatile. We can reuse it later in the section, and it can be used for more things than

37
00:02:24,566 --> 00:02:28,566
just this. But yes it's true to say that there is another data type called TSet,

38
00:02:28,566 --> 00:02:32,566
that you can use when you're only setting elements to true or false, you just fill it with

39
00:02:32,566 --> 00:02:36,566
letters in this case. But we're going to go with the mapping of the letter, to whether or

40
00:02:36,566 --> 00:02:40,566
not we've seen it true or false. In fact, we're only go?ing to use true, so we're just going to have a table of

41
00:02:40,566 --> 00:02:44,566
letter and true, letter and true, when we see them.

42
00:02:44,566 --> 00:02:48,566
So, back in our code let's actually go ahead and set that map up

43
00:02:48,566 --> 00:02:52,566
right now. So, TMap is the keyword we're going to be using. I'll substitute a keyword of

44
00:02:52,566 --> 00:02:56,566
character and a boolean of true or false, and we're going to call it

45
00:02:56,566 --> 00:03:00,566
LetterSeen. So, that is how we setup our map! Now,

46
00:03:00,566 --> 00:03:04,566
the main subject of this lecture, of course, how do we do a range

47
00:03:04,566 --> 00:03:08,566
based for loop? And what indeed even is a range based for loop? Well, if you do a Google search

48
00:03:08,566 --> 00:03:12,566
for standard string in C++, you'll get to a page like this, which will explain that a

49
00:03:12,566 --> 00:03:16,566
string provides an interface here, similar to that...

50
00:03:16,566 --> 00:03:20,566
[Whispers] Highlight the right thing. [Laughs] "an interface similar to that of a standard container",

51
00:03:20,566 --> 00:03:24,566
and a container is something that contains many elements. A string contains many

52
00:03:24,566 --> 00:03:28,566
characters, and because we have an interface similar to a standard

53
00:03:28,566 --> 00:03:32,566
container interface, the system basically knows how to step through the elements of

54
00:03:32,566 --> 00:03:36,566
the string for you. That's very handy! It's called in iterator and it's really

55
00:03:36,566 --> 00:03:40,566
useful! So, this is how we do it! We say for, and then we say

56
00:03:40,566 --> 00:03:44,566
OK we need a type and we could say char. We'll deal with that in a second. And we could

57
00:03:44,566 --> 00:03:48,566
call it Letter, so this is just the variable name that we're going to be able to access, inside the loop.

58
00:03:48,566 --> 00:03:53,566
Four letter, now colon is the word for in, you just have to remember that for a

59
00:03:55,600 --> 00:03:56,566
range based for. : Word) OK. So,

60
00:03:56,566 --> 00:04:00,566
what this is doing, as a comment here, is it's saying "for all

61
00:04:00,566 --> 00:04:04,566
letters of the word...

62
00:04:04,566 --> 00:04:08,566
Ooh, can't type. OK, so "for all letters

63
00:04:08,566 --> 00:04:12,566
of the word" is what we're doing there. Now, of course, we're going to have a

64
00:04:12,566 --> 00:04:16,566
block of statements, so I'm going to put some curly braces. By the way, if you want to put your curly braces around

65
00:04:16,566 --> 00:04:20,566
all these comments, rather than having to mess around, just highlight them and just open a curly brace.

66
00:04:20,566 --> 00:04:24,566
And in Visual Studio, at least with my settings which are the default, if I change anything, by the way,

67
00:04:24,566 --> 00:04:28,566
I will show you the changes of settings. So, I haven't changed anything without showing. It does this for me,

68
00:04:28,566 --> 00:04:32,566
it indents for me, which is cool! Alright, so for (char Letter :

69
00:04:32,566 --> 00:04:36,566
Word). Now, I want to introduce you to one more concept! We don't really care what the

70
00:04:36,566 --> 00:04:40,566
elements of Word are; we can let go of that implementation detail and use the word

71
00:04:40,566 --> 00:04:44,566
auto. I would never suggest using auto up

72
00:04:44,566 --> 00:04:48,566
here, in the public declaration of a class, because we really want to know at this point

73
00:04:48,566 --> 00:04:52,566
what's coming back, but when we get down at the bottom here and anything do to with the

74
00:04:52,566 --> 00:04:56,566
implementation, we can start to think about maybe we could use auto. It means that the

75
00:04:56,566 --> 00:05:00,533
compiler decides the type for us. In this case, if we hover over the

76
00:05:00,533 --> 00:05:04,566
word auto here, we can see that it's work out "typedef char" and then some other

77
00:05:04,566 --> 00:05:08,566
blurb. It's worked out that this is a character, so just trust me

78
00:05:08,566 --> 00:05:12,566
for now. Let's start gently introducing auto. You may see it in other peoples' code, and I actually think it makes

79
00:05:12,566 --> 00:05:16,566
a lot of sense. The compiler has to do a lot of good checking, to make sure that this type is

80
00:05:16,566 --> 00:05:20,566
completely deducible and that's a good thing! So, just before I throw

81
00:05:20,566 --> 00:05:24,566
you into a challenge, I want to help you out by doing this! I'm going to make a quick substitution, where I'm going to

82
00:05:24,566 --> 00:05:28,566
change, actually, Letter for tolower

83
00:05:28,566 --> 00:05:32,566
(Letter). Now, why am I making the letter lowercase? I'm changing

84
00:05:32,566 --> 00:05:36,566
its value, and I'm doing this because I want to be able to

85
00:05:36,566 --> 00:05:40,566
"handle mixed case". I

86
00:05:40,566 --> 00:05:44,566
want to store and retrieve only lowercase letters, and that way,

87
00:05:44,566 --> 00:05:48,566
the system will work case insensitively. OK, let's take a look

88
00:05:48,566 --> 00:05:52,566
at a challenge! Finish IsIsogram()! I want you to finish the function, test it thoroughly,

89
00:05:52,566 --> 00:05:56,566
try entering backslash 0, that null character, as a guess, and make sure it works for that!

90
00:05:56,566 --> 00:06:00,566
Try a bland string and try mixed case. For example, Aa

91
00:06:00,566 --> 00:06:04,566
like that. And share your implementation, in the discussions, before go?ing on.

92
00:06:04,566 --> 00:06:08,566
Go on, be brave! OK,

93
00:06:08,566 --> 00:06:12,566
welcome back! So, let's see how I'm going to implement it. So, we're going to loop through

94
00:06:12,566 --> 00:06:16,566
all the letters in the word. We've already got that

95
00:06:16,566 --> 00:06:20,566
comment, so I'm going to remove it. So, we're saying, if the letter is in the

96
00:06:20,566 --> 00:06:24,566
map, how do we implement that? Well, it's simply a case of

97
00:06:24,566 --> 00:06:28,566
saying, if (LetterSeen

98
00:06:28,566 --> 00:06:32,566
[Letter]). So, that's the

99
00:06:32,566 --> 00:06:36,566
list of letters that have been seen. And if this letter has been seen,

100
00:06:36,566 --> 00:06:40,566
then what do we do? Well, I'm going to use a compact if notation

101
00:06:40,566 --> 00:06:44,566
here, I'm going to go curly braces there, and then, I'm going to

102
00:06:44,566 --> 00:06:48,566
force it to all be on one line, because I just want to keep things,

103
00:06:48,566 --> 00:06:52,566
in this instance, compact, and I'm going to return false.

104
00:06:52,566 --> 00:06:56,566
OK. And "we do NOT have

105
00:06:56,566 --> 00:07:00,566
an isogram" at this stage. Alright,

106
00:07:00,566 --> 00:07:04,566
so now I'm going to do a compact else, it's exactly the same. Remember, you need to read code like the

107
00:07:04,566 --> 00:07:08,566
compiler does, so I do apologize to complete beginners that I'm being inconsistent with my spacing.

108
00:07:08,566 --> 00:07:12,566
I'm doing it on purpose, because you must learn where spacing matters and

109
00:07:12,566 --> 00:07:16,566
where it doesn't. Look the IDE has changed it to this. This is the same as this,

110
00:07:16,566 --> 00:07:20,566
this is the same as this. That white space doesn't matter, you need your eye in for where

111
00:07:20,566 --> 00:07:24,566
white space matters and where it doesn't. It matters between auto and letter. It wouldn't

112
00:07:24,566 --> 00:07:28,566
understand autoLetter. It does not matter, for example, out here

113
00:07:28,566 --> 00:07:32,566
in the e... [Laughs] It's like being out in space, you didn't know how much gap

114
00:07:32,566 --> 00:07:36,566
you got between you. OK, so now what do we need to say? So,

115
00:07:36,566 --> 00:07:40,566
I've already duplicated that, "we do NOT have an isogram" method. So, otherwise

116
00:07:40,566 --> 00:07:44,566
what we need to do is add a letter to the map seen. The comment says it

117
00:07:44,566 --> 00:07:48,566
there. We don't need otherwise, of course, because else is pretty obvious. So, I'm

118
00:07:48,566 --> 00:07:52,566
going to write here, say LetterSeen

119
00:07:52,566 --> 00:07:56,566
[Letter} = true. And this is the bit where

120
00:07:56,566 --> 00:08:00,566
that simplification using a set would just be a little

121
00:08:00,566 --> 00:08:04,566
simpler, but this is absolutely fine and very clear what it's doing! Let's

122
00:08:04,566 --> 00:08:08,566
make sure that this works! Let's run with

123
00:08:08,566 --> 00:08:12,566
backslash 0, for example. That works! And empty string works!

124
00:08:12,566 --> 00:08:16,566
"Aa", complains about repeating letters. "aa", complains about repeating

125
00:08:16,566 --> 00:08:20,566
letters. "planet", and I win! Play

126
00:08:20,566 --> 00:08:24,566
again? No! Great news! We've done everything that we need to do

127
00:08:24,566 --> 00:08:28,566
in this video, in terms of getting the isogram finished. We've used this very useful and

128
00:08:28,566 --> 00:08:32,566
versatile Map Tool, and congratulations on getting this far!


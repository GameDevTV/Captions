
1
00:00:00,000 --> 00:00:04,000
...

2
00:00:04,000 --> 00:00:08,000
Welcome to C++ Function Syntax! In this video, we're going to talk about briefly the difference

3
00:00:08,000 --> 00:00:12,000
between an Engine and a Library and how this relates to our Console application.

4
00:00:12,000 --> 00:00:16,000
We will be looking at how the Console

5
00:00:16,000 --> 00:00:20,000
knows where to find our code. That's an important point.

6
00:00:20,000 --> 00:00:24,000
And then, we will look at what is called the syntax of a function in C++, how it's laid out.

7
00:00:24,000 --> 00:00:28,000
We'll write the minimum C++ program to remove an error

8
00:00:28,000 --> 00:00:32,000
and end up running our code, so that it just says this. Just nothing,

9
00:00:32,000 --> 00:00:36,000
but the Console has no errors and says "Press any key to continue..."

10
00:00:36,000 --> 00:00:40,000
It's a very very simple few lines, but it's important that you understand why we're

11
00:00:40,000 --> 00:00:44,000
writing those lines. In the first section, we just wrote them. Don't look back there and cheat, by the way! But in the first

12
00:00:44,000 --> 00:00:48,000
section, we just wrote these lines. Now, that you understand the anatomy

13
00:00:48,000 --> 00:00:52,000
of a function, once you understand that, you'll be able to actually

14
00:00:52,000 --> 00:00:56,000
write it yourself and have a much better ownership of what's going on. So, let's dive in and get this done!

15
00:00:56,000 --> 00:00:57,300
...

16
00:00:57,300 --> 00:01:01,300
OK, so here we are in our project. What we need to understand is that

17
00:01:01,300 --> 00:01:05,300
to even write any code, we need to know where the system is looking for

18
00:01:05,300 --> 00:01:09,300
our code. So, in the case of an engine like Unreal Engine it's an engine, which means that

19
00:01:09,300 --> 00:01:13,300
it calls our code. In a library, you may have heard people talk about using libraries.

20
00:01:13,300 --> 00:01:17,300
The difference there is that we write code that calls out to the library, but we're

21
00:01:17,300 --> 00:01:21,300
in an environment, both here in the Console and in Unreal, where in an engine

22
00:01:21,300 --> 00:01:25,300
effectively, and that means that something is calling into our code, at least

23
00:01:25,300 --> 00:01:29,300
to get started. And right now, this will not run. Anything we write

24
00:01:29,300 --> 00:01:33,300
will not run, because the system does not know where

25
00:01:33,300 --> 00:01:37,300
to find our code, it's missing something. Now, if you're on Xcode, by the way, before we

26
00:01:37,300 --> 00:01:41,300
do anything it has already solved this problem for you. So, I suggest you watch this video

27
00:01:41,300 --> 00:01:45,300
until I show you about the anatomy of functions, and then, once I've

28
00:01:45,300 --> 00:01:49,300
explained the anatomy of functions, you'll know what's already written on your screen and you'll be good to move on.

29
00:01:49,300 --> 00:01:53,300
Alright, so let's just try running this! Debug, Start Without Debugging. Now, a couple of

30
00:01:53,300 --> 00:01:57,300
things. Now, one of a couple of things may happen. You may get these horrible errors down here,

31
00:01:57,300 --> 00:02:01,300
and if you're lucky you'll get, would you like to run the last successful build? Or

32
00:02:01,300 --> 00:02:05,300
maybe you'll just come straight to this but regardless it's not working right. Why? Because we

33
00:02:05,300 --> 00:02:09,300
have errors. Whenever we've got errors down here in our error list that's bad!

34
00:02:09,300 --> 00:02:13,300
And this is running but it's immediately giving us an error!

35
00:02:13,300 --> 00:02:17,300
It's saying, This is not recognized as an internal or external command,

36
00:02:17,300 --> 00:02:21,300
operable program or batch file." right, so it doesn't like our code!

37
00:02:21,300 --> 00:02:25,300
That's what we need to set out to solve, and you could get a very similar problem inside

38
00:02:25,300 --> 00:02:29,300
Unreal, where it just doesn't know where to find your code. Alright,

39
00:02:29,300 --> 00:02:33,300
so I'm going to tell you firstly how a function is

40
00:02:33,300 --> 00:02:37,300
setup, inside C++, and then, I'm going to tell

41
00:02:37,300 --> 00:02:41,300
you the anatomy of the function that we need to write. And then, I'm going to challenge

42
00:02:41,300 --> 00:02:42,000
you to write it.

43
00:02:42,000 --> 00:02:46,000
So, the syntax of a function in C++! What's syntax,

44
00:02:46,000 --> 00:02:50,000
firstly? Syntax is the structure of the statements that we write, so it's telling us

45
00:02:50,000 --> 00:02:54,000
how to write in such a way that the Compiler understands what we're saying.

46
00:02:54,000 --> 00:02:58,000
What's a function? A function is something that does something. Here's a very trivial and simple function,

47
00:02:58,000 --> 00:03:02,000
called DoubleMe. You send in a number, as an

48
00:03:02,000 --> 00:03:06,000
integer, which is a whole number that you can count on your fingers, and it returns

49
00:03:06,000 --> 00:03:10,000
another integer and we call it DoubleMe,

50
00:03:10,000 --> 00:03:14,000
just to prevent any confusion with reserved words like double, which are also another

51
00:03:14,000 --> 00:03:18,000
type of number. So, what's the syntax? Firstly, we have

52
00:03:18,000 --> 00:03:22,000
the return type. That's the first thing we need to put in. It could be an integer? It could be

53
00:03:22,000 --> 00:03:26,000
a void, which means nothing comes back? It could be a character or

54
00:03:26,000 --> 00:03:30,000
string, all sorts of things, but in our case, it's an integer coming back. Then, we must have a space here

55
00:03:30,000 --> 00:03:34,000
that's indicated by this underscore. It must have a space, then it's the name.

56
00:03:34,000 --> 00:03:38,000
Now, our coding standard says that we're going to use upper case, and I'm actually going to use

57
00:03:38,000 --> 00:03:42,000
separate uppercase letters, in the middle of my word, just to distinguish where the

58
00:03:42,000 --> 00:03:46,000
second word starts at DoubleMe. Then, there may or there may not be a space here. I

59
00:03:46,000 --> 00:03:50,000
have used an inconsistency on purpose, just to show you that you need to be able to see what the

60
00:03:50,000 --> 00:03:54,000
compiler sees, which it ignores this type of white space. Generally

61
00:03:54,000 --> 00:03:58,000
we won't put a space, but there may be a space. Then, int

62
00:03:58,000 --> 00:04:02,000
or whatever the type of the thing coming in is, and then, you give

63
00:04:02,000 --> 00:04:06,000
the thing coming in a name, and we're going to give it the name number in this

64
00:04:06,000 --> 00:04:10,000
case. And this is something called a variable, or actually it's being used as a

65
00:04:10,000 --> 00:04:14,000
parameter in a method. It's another way of describing what this number is and it

66
00:04:14,000 --> 00:04:18,000
only exists inside DoubleMe. Once we get outside this curly brace, this

67
00:04:18,000 --> 00:04:22,000
number no longer exists. And generally, it's bad

68
00:04:22,000 --> 00:04:26,000
practice to actually modify this thing, but we'll talk about that later.

69
00:04:26,000 --> 00:04:30,000
So, number comes in and it gets doubled, multiplied by 2, and then,

70
00:04:30,000 --> 00:04:34,000
returned out of the function as integer type.

71
00:04:34,000 --> 00:04:38,000
OK, so that's what comes in! An integer comes in, gets doubled, goes out, and

72
00:04:38,000 --> 00:04:42,000
that's the general pattern. And the reason I'm telling you all this is because,

73
00:04:42,000 --> 00:04:46,000
in a moment, I'm going to challenge you to write your own method, that's going to allow

74
00:04:46,000 --> 00:04:48,500
our code to actually run properly.

75
00:04:48,500 --> 00:04:52,500
So, here's your challenge! Write the minimal C++ program! The return type is int,

76
00:04:52,500 --> 00:04:56,500
short for integer. The function name we want is main, lower case like that.

77
00:04:56,500 --> 00:05:00,500
It takes no parameters and for extra credit make it return

78
00:05:00,500 --> 00:05:04,500
0. Test this by running and seeing if the error goes away, when you

79
00:05:04,500 --> 00:05:08,500
try and go Control, F 5, for Debug,

80
00:05:08,500 --> 00:05:12,500
and run without debugging.

81
00:05:12,500 --> 00:05:16,500
OK, go ahead, pause the video, and do this challenge now!

82
00:05:16,500 --> 00:05:20,500
Welcome back! So, take a look at what we need to do!

83
00:05:20,500 --> 00:05:24,500
Int is the return type. It's come up in blue, that's good! It's in a list, that's

84
00:05:24,500 --> 00:05:28,500
good! That means that the intelli-sense or the system knows what we're typing.

85
00:05:28,500 --> 00:05:32,500
Now by the way, as I said if you're in Xcode you can stop watching now,

86
00:05:32,500 --> 00:05:36,500
because it's already solved this problem for you. You can move on to the next video. There's nothing

87
00:05:36,500 --> 00:05:40,500
more to learn, we're just go?ing to type out the method that's already on your screen. So, main is the name.

88
00:05:40,500 --> 00:05:44,500
Now, I'm going to not have a space. I'm going to use lowercase, because that's what the system is

89
00:05:44,500 --> 00:05:48,500
expecting here OK, and then, I'm going to put in some curly

90
00:05:48,500 --> 00:05:52,500
braces. Now, you can put them on this line, like this, but a good idea with any

91
00:05:52,500 --> 00:05:56,500
braces is to open them and close them, open them and close them. Now, actually the system is doing

92
00:05:56,500 --> 00:06:00,500
it for me. Visual Studio is closing them for me, which is good. So, I can just come straight in there

93
00:06:00,500 --> 00:06:04,500
and put a return like that. Now, you'll sometimes see the brace there. It doesn't make any difference actually,

94
00:06:04,500 --> 00:06:08,500
none of this white space makes a difference. What does make a difference to me

95
00:06:08,500 --> 00:06:12,500
is that we have an indentation. So I'm going to come down, but I do want a tab,

96
00:06:12,500 --> 00:06:16,500
not four spaces. Its the same as four spaces, but I want a tab before I do anything else,

97
00:06:16,500 --> 00:06:20,500
and for the extra credit I want to return. It's a good sign that it's filling this in.

98
00:06:20,500 --> 00:06:24,500
By the way, as soon as you see it's got the right thing, you can hit Tab.

99
00:06:24,500 --> 00:06:28,500
OK, it's gone blue, it's recognized the statement. 0 and then remember

100
00:06:28,500 --> 00:06:32,500
I said that all statements need a semicolon on the end. Ah cool!

101
00:06:32,500 --> 00:06:36,500
Alright, now before by the way, I would put my semicolon on the end. Look, there's a little red dot here.

102
00:06:36,500 --> 00:06:40,500
Start to get used to this. This is the Integrated Development Environment saying that it doesn't understand

103
00:06:40,500 --> 00:06:44,500
what's going on at this close bracket, and that's saying, I expect a semicolon. So, put a

104
00:06:44,500 --> 00:06:48,500
semicolon. OK cool! Let's go Debug,

105
00:06:48,500 --> 00:06:52,500
Start Without Debugging, or Control, F 5. Ah

106
00:06:52,500 --> 00:06:56,500
this is it! We have the Console coming up and just saying, "Press any key to continue..."

107
00:06:56,500 --> 00:07:00,500
It is running and it's not complaining. The return 0 just means that when the

108
00:07:00,500 --> 00:07:04,500
Console App finishes, it returns a status of 0 and is exited normally.

109
00:07:04,500 --> 00:07:08,500
That's it! You have done it! I want you to save everything now, and

110
00:07:08,500 --> 00:07:12,500
congratulate yourself! It's even more minimum what we did in the setup section, right,

111
00:07:12,500 --> 00:07:16,500
but I hope that you understand a little bit more about what's going on. The system is

112
00:07:16,500 --> 00:07:20,500
looking for one of the files in my project,

113
00:07:20,500 --> 00:07:24,500
and it's looking through the files and saying, do any of these contain a method called main?

114
00:07:24,500 --> 00:07:28,500
Ah here's the one called main! Now, in that method let's go

115
00:07:28,500 --> 00:07:32,500
ahead and do what it says. Well, it says do nothing actually! It just says return, I leave

116
00:07:32,500 --> 00:07:36,500
with a status code of 0, but at least you know

117
00:07:36,500 --> 00:07:40,500
pretty much why we got here. What we're going to do next, by the way, is come above this

118
00:07:40,500 --> 00:07:44,500
return and start actually writing our game at last. So, if you have been

119
00:07:44,500 --> 00:07:48,500
fiddling, you'll notice a star. The star means the file has changed. Again you can

120
00:07:48,500 --> 00:07:52,500
Save All and we're good to go! See you in the next video!

121
00:07:52,500 --> 00:07:53,366

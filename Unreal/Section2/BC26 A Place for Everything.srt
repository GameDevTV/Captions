
1
00:00:00,000 --> 00:00:04,000
...

2
00:00:04,000 --> 00:00:08,000
So, welcome to a place for everything! In this video, we are going to

3
00:00:08,000 --> 00:00:12,000
implement this GetHiddenWordLength() method, so that when we actually

4
00:00:12,000 --> 00:00:16,000
change our HIDDEN_WORD length, up here in the Reset(), then when we run the

5
00:00:16,000 --> 00:00:20,000
game the WORD_LENGTH updates. It's a simple thing but it has a useful moral

6
00:00:20,000 --> 00:00:23,200
in it about storing data! So let's crack on!

7
00:00:23,200 --> 00:00:27,200
OK, so just before we start playing around with the HIDDEN_WORD length,

8
00:00:27,200 --> 00:00:31,200
let's talk about a place for everything, one of my favorite expressions that I don't quite live up

9
00:00:31,200 --> 00:00:35,200
to, which is that you should have a place for everything, everything

10
00:00:35,200 --> 00:00:39,200
in its place. I wish my house was like that, but that's the theory. It's a good idea in

11
00:00:39,200 --> 00:00:43,200
programming in general. So, basically I'm saying think carefully about

12
00:00:43,200 --> 00:00:47,200
what data you store. This is a general issue of bandwidth

13
00:00:47,200 --> 00:00:51,200
vs. storage or another example would be CPU vs. RAM.

14
00:00:51,200 --> 00:00:55,200
Or typically on a machine, you're talking about access to

15
00:00:55,200 --> 00:00:59,200
data, data locality, these types of things. So

16
00:00:59,200 --> 00:01:03,200
for example, a concrete example is storing a birthday

17
00:01:03,200 --> 00:01:07,200
vs. storing your age. You would want to

18
00:01:07,200 --> 00:01:11,200
think carefully before, in a database or in a computer system, storing someone's age when it's so quick

19
00:01:11,200 --> 00:01:15,200
and easy to calculate their current age from their birthday.

20
00:01:15,200 --> 00:01:19,200
And even if you wanted to say, well I want another age at a particular date, well why not just store

21
00:01:19,200 --> 00:01:23,200
that date, the date they signed up for the policy. The date they did this, you get the idea. That's

22
00:01:23,200 --> 00:01:27,200
a very simple example. So basically, until proven otherwise, don't store

23
00:01:27,200 --> 00:01:31,200
results. It tends to make your code harder to read, adding data. So,

24
00:01:31,200 --> 00:01:35,200
for this WORD_LENGTH, this hidden WORD_LENGTH, we're not going to create a new member variable, a new

25
00:01:35,200 --> 00:01:39,200
integer for the hidden WORD_LENGTH. We;re just going to calculate it as we go. You can read more around this in

26
00:01:39,200 --> 00:01:43,200
a fantastic but slightly more advanced than we need book, "Game Programming

27
00:01:43,200 --> 00:01:47,200
Patterns". Now, the whole book is available for free at www.gameprogrammingpatterns.com.

28
00:01:47,200 --> 00:01:51,200
Data locality is one of the topics that touches on this. And

29
00:01:51,200 --> 00:01:55,200
if you like the book, buy the physical copy and read it through, and then, maybe read it again

30
00:01:55,200 --> 00:01:59,200
and again and again, until eventually we understand it all. So that's the idea, So, let's dive in

31
00:01:59,200 --> 00:02:03,200
and make GetHiddenWordLength() available. Over in our main() method, we

32
00:02:03,200 --> 00:02:07,200
currently have a hard coded  hidden WORD_LENGTH. Let's look at the game running! You see it says "9

33
00:02:07,200 --> 00:02:11,200
letter isogram", but we don't want 9 letter isogram, do we? We want the number of

34
00:02:11,200 --> 00:02:15,200
letters to depend on the currently set word.

35
00:02:15,200 --> 00:02:19,200
So, we're going to get rid of this constant in here

36
00:02:19,200 --> 00:02:23,200
and make a call to a new method, that we don't have yet, called

37
00:02:23,200 --> 00:02:27,200
GetHiddenWordLength(), so let's write the signature for that! int32 using

38
00:02:27,200 --> 00:02:31,200
the new Unreal syntax.

39
00:02:31,200 --> 00:02:35,200
GetHiddenWordLength() is going to be constant, of course, because getting the hidden

40
00:02:35,200 --> 00:02:39,200
word length, we wouldn't want to check anything. Oh, and by the way, while we're here thinking about

41
00:02:39,200 --> 00:02:43,200
constants, CheckGuessValidity() is also pretty much

42
00:02:43,200 --> 00:02:47,200
a getter isn't it? It's just going to get a status, some sort of status back later.

43
00:02:47,200 --> 00:02:51,200
So, while we're here, we might as well think that should be constant, and if it should be

44
00:02:51,200 --> 00:02:55,200
constant, I quite fancy moving it up along with all of the other constant getters.

45
00:02:55,200 --> 00:02:59,200
It's not quite a getter, because it's going to return something a little richer but it's

46
00:02:59,200 --> 00:03:03,200
close. We haven't, of course, implemented that method yet. Anyway, back to GetHidden

47
00:03:03,200 --> 00:03:07,200
WordLength(). That's a constant method that just reads back the hidden word length.

48
00:03:07,200 --> 00:03:11,200
So, let's go and implement it! But I'm not that kind, I'm not going to

49
00:03:11,200 --> 00:03:15,200
implement it for you, I'm going to let you implement it. Just don't create a new private member, we don't need

50
00:03:15,200 --> 00:03:19,200
it, of course. You can just calculate the hidden word length by using the dot length method.

51
00:03:19,200 --> 00:03:23,200
So that's your challenge, basically!

52
00:03:23,200 --> 00:03:27,200
It is to replace WORD_LENGTH completely, in that main() method,

53
00:03:27,200 --> 00:03:31,200
in that main.cpp file. What we want to do is write Get

54
00:03:31,200 --> 00:03:35,200
HiddenWordLength() getter. Just finish writing the declaration, define the declaration I've just written.

55
00:03:35,200 --> 00:03:39,200
Make it read from the current WORD_LENGTH, don't create another member variable,

56
00:03:39,200 --> 00:03:43,200
replcae WORD_LENGTH in the PrintIntro method, and test it with different

57
00:03:43,200 --> 00:03:47,200
hidden word length. And make sure that is says, in the intro, the correct length

58
00:03:47,200 --> 00:03:51,200
of the word. OK, go ahead! Pause the video and make this slightly different type of getter that,

59
00:03:51,200 --> 00:03:55,200
rather than just reading from a member variable, it actually does a quick calculation

60
00:03:55,200 --> 00:03:59,200
for you.

61
00:03:59,200 --> 00:04:03,200
OK, welcome back! So, we've got GetHiddenWordLength() here. I

62
00:04:03,200 --> 00:04:07,200
am going to put a space in, because these are all the guys that start with the word get.

63
00:04:07,200 --> 00:04:11,200
That conceptually just says, look here are my getters right, and then, these are some other constant methods and

64
00:04:11,200 --> 00:04:15,200
these are some methods that do stuff. Alright, let's go ahead and quick

65
00:04:15,200 --> 00:04:19,200
actions, create a definition and look at our .cpp file.

66
00:04:19,200 --> 00:04:23,200
So, what's it going to do? It's not going to return, you know, int32.

67
00:04:23,200 --> 00:04:27,200
That doesn't even really make sense! What it's going to do is return

68
00:04:27,200 --> 00:04:31,200
MyHiddenWord.Length(), which is a method.

69
00:04:31,200 --> 00:04:35,200
OK. And because it's a getter and because

70
00:04:35,200 --> 00:04:39,200
the logic of that getter is very short, it's on a single line, I'm going to go back to this

71
00:04:39,200 --> 00:04:43,200
single line syntax! That's it! It's as simple as that! Now, we need to

72
00:04:43,200 --> 00:04:47,200
call it OK. So, oh by the way,

73
00:04:47,200 --> 00:04:51,200
just before we leave this, if you're concerned about resetting the game,

74
00:04:51,200 --> 00:04:55,200
and saying well is this going to work, when we reset the game? Well, it will because it's always going to read from

75
00:04:55,200 --> 00:04:59,200
the current HIDDEN_WORD. So, whenever we change the Hidden_WORD, this is the

76
00:04:59,200 --> 00:05:03,200
last minute, when you call this method. It's going to look at the current HIDDEN_WORD and say, how

77
00:05:03,200 --> 00:05:07,200
long it is. That's fine! That's late binding, that's answering the question,

78
00:05:07,200 --> 00:05:11,200
as late as possible. I like it! One thing I'd like to do, just down here, is quickly rearrange

79
00:05:11,200 --> 00:05:15,200
these constants. I'd like to get my constants together,

80
00:05:15,200 --> 00:05:19,200
like so, and then, I'd like to do my actual resets like that. It's just being finickity. [Laughs]

81
00:05:19,200 --> 00:05:23,200
OK, it's really not that important. OK, let's dive over

82
00:05:23,200 --> 00:05:27,200
to the actual main.cpp, down in PlayGame(), and let's

83
00:05:27,200 --> 00:05:31,200
ditch this WORD_LENGTH here altogether. And what we can actually do is

84
00:05:31,200 --> 00:05:35,200
just, straight away, call the BCGame instance. Dot

85
00:05:35,200 --> 00:05:39,200
GetHiddenWordLength(), which is a new method, and let's test it works!

86
00:05:39,200 --> 00:05:43,200
No it doesn't.

87
00:05:43,200 --> 00:05:47,200
What's wrong? Now, this is the type of error you may end up with! "Check

88
00:05:47,200 --> 00:05:51,200
GuessValidity", "member function is not found". OK.

89
00:05:51,200 --> 00:05:55,200
So, it's saying that it's not happy with CheckGuessValidity(). That's because I,

90
00:05:55,200 --> 00:05:59,200
in my header file, while I was messing around decided to add const on the end, but I didn't

91
00:05:59,200 --> 00:06:03,200
add const over here, in the declaration. So, that's absolutely fine!

92
00:06:03,200 --> 00:06:07,200
You just have to add const there, so that the two headers match. Now, three letter isogram.

93
00:06:07,200 --> 00:06:11,200
It works! Now, let's go back to our Reset() method, change it to

94
00:06:11,200 --> 00:06:15,200
donkey, because I like the word donkey, and we should get five. We get six, d o

95
00:06:15,200 --> 00:06:19,200
n k e y. Yep, that's fine! I can't count! Let's try one of the

96
00:06:19,200 --> 00:06:23,200
extremes, which is a blank string, it should get 0. Can you guess the 0? That's an isogram I'm thinking

97
00:06:23,200 --> 00:06:27,200
of! Well, is it nothing? I think it is. How about a long word, like pneumono-

98
00:06:27,200 --> 00:06:31,200
ultramicrosopic...? p n e u m o

99
00:06:31,200 --> 00:06:35,200
n o. No, let's not spell it all out. Well, anyway you get the idea! If you put a long word in,

100
00:06:35,200 --> 00:06:39,200
then I'm hoping it will also get the string length back. I don't think we need to worry about

101
00:06:39,200 --> 00:06:43,200
the limits of this string length, because there aren't any isograms that are so long

102
00:06:43,200 --> 00:06:47,200
that they're going to break this. OK, so I'm going to reset this to say planet.

103
00:06:47,200 --> 00:06:51,200
And we are pretty much there! That's good!

104
00:06:51,200 --> 00:06:55,200
So, the moral of this one is, strive for a place for everything, and everything in its

105
00:06:55,200 --> 00:06:59,200
place, and only store data when you really need to, when performance profiling

106
00:06:59,200 --> 00:07:03,200
later tells you that that's necessary. So congratulations, and we'll see you

107
00:07:03,200 --> 00:07:06,033
in the next video!

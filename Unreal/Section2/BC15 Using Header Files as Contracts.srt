<<<<<<< HEAD
ï»¿WEBVTT

1
00:00:00.000 --> 00:00:04.000
...

2
00:00:04.000 --> 00:00:08.000
So welcome to Using Header Files as Contracts! We're going to focus

3
00:00:08.000 --> 00:00:12.000
purely on the interface to our new class. And by the end of the video.

4
00:00:12.000 --> 00:00:16.000
we will have a whole new file called FBullCowGame.h.

5
00:00:16.000 --> 00:00:20.000
and in the case of you Xcode people. it will have created you a full .cpp file. too.

6
00:00:20.000 --> 00:00:24.000
And we'll have written class FBullCowGame like this and public.

7
00:00:24.000 --> 00:00:28.000
and we will have written some methods that are blurred out here. because I don't want to ruin

8
00:00:28.000 --> 00:00:32.000
the challenge. And there's no right or wrong answer anyway. but these are going to define the

9
00:00:32.000 --> 00:00:36.000
interface to the class. what we're allowed to do. It's a black box we're building right now.

10
00:00:36.000 --> 00:00:40.000
There will also be a private section. which will be things that it will use in order to do its

11
00:00:40.000 --> 00:00:44.000
work. but we shouldn't concern ourselves too much with that right now. we want to focus on

12
00:00:44.000 --> 00:00:48.000
what work it's going to be doing. not how it's going to be doing the work. So

13
00:00:48.000 --> 00:00:52.000
let's dive in and explore the exciting world of clases!

14
00:00:52.000 --> 00:00:56.000
So let's make our own

15
00:00:56.000 --> 00:01:00.000
class for the very first time! The way to do that. the way to add a new file. is to click on the project

16
00:01:00.000 --> 00:01:04.000
name here. So we have the solution and inside the solution we have a single project. Right-click.

17
00:01:04.000 --> 00:01:08.000
Add. and then New Item. OK so that's what we're doing on the screen.

18
00:01:08.000 --> 00:01:12.000
And then. in the case of VisualStudio here. I'm just going to add a header file

19
00:01:12.000 --> 00:01:16.000
to start with. We're just going to start with a header file here in VisualStudio. we'll add a C++ file

20
00:01:16.000 --> 00:01:20.000
later. so that we can focus on one thing at a time.

21
00:01:20.000 --> 00:01:24.000
I'm going to call it FBullCowGame. Why am I prefixing with F?

22
00:01:24.000 --> 00:01:28.000
Well if you look in the Unreal coding standard. I'll show you where to find that. We've seen it before.

23
00:01:28.000 --> 00:01:32.000
Then. they suggest prefixing.

24
00:01:32.000 --> 00:01:36.000
If you go to the naming conventions. you see "Most other classes are prefixed by F".

25
00:01:36.000 --> 00:01:40.000
so I'm going to do that so that things start to feel familiar. So there we go. FBullCowGame.h.

26
00:01:40.000 --> 00:01:44.000
Even though it's a bit weird. at least it will be familiar later.

27
00:01:44.000 --> 00:01:48.000
Hi I'm Sam and I'm helping Ben out with some of the Mac content on this course.

28
00:01:48.000 --> 00:01:52.000
So I just want to briefly show you how to create that class in Xcode

29
00:01:52.000 --> 00:01:56.000
now. So you probably want to go and right-click on the BullCow folder.

30
00:01:56.000 --> 00:02:00.000
that's this one under the project. So you've got the project here and then you've got this

31
00:02:00.000 --> 00:02:04.000
folder or as Xcode likes to call it a group. Right-click on

32
00:02:04.000 --> 00:02:08.000
this and then we want to go down to new file

33
00:02:08.000 --> 00:02:12.000
and we want to go down to OS X.

34
00:02:12.000 --> 00:02:16.000
Source. and select the .cpp file

35
00:02:16.000 --> 00:02:20.000
here. Now don't worry. we don't want the header file we actually want the

36
00:02:20.000 --> 00:02:24.000
.cpp. And hit Next. we can create our

37
00:02:24.000 --> 00:02:28.000
FBullCowGame. as Ben said.

38
00:02:28.000 --> 00:02:32.000
And we also want to create a header file. so we will

39
00:02:32.000 --> 00:02:36.000
save that. And now that there's a distinction between folders and groups

40
00:02:36.000 --> 00:02:40.000
in Xcode. so we're putting it in the BullCow group. which only

41
00:02:40.000 --> 00:02:44.000
exists inside of Xcode. We could also arrange things in different folders.

42
00:02:44.000 --> 00:02:48.000
We're not going to here. but just so you're aware. that is a distinction

43
00:02:48.000 --> 00:02:52.000
in Xcode. So I'm going to create that and as you can see

44
00:02:52.000 --> 00:02:56.000
it has created two files here. the .cpp and the

45
00:02:56.000 --> 00:03:00.000
.hpp. which is slightly different to what you'll see

46
00:03:00.000 --> 00:03:04.000
on VisualStudio. OK back to Ben! So there it is sitting under header

47
00:03:04.000 --> 00:03:08.000
files. What is this thing? It is. as I said before. something that would

48
00:03:08.000 --> 00:03:12.000
just be cut and paste onto the top of whatever we include it in.

49
00:03:12.000 --> 00:03:16.000
OK and we're going to be including it in Main.cpp. it's one

50
00:03:16.000 --> 00:03:20.000
of the things we're going to include it in. and the other thing we're going to include it in is our file. that we'll make

51
00:03:20.000 --> 00:03:24.000
in a little while. called FBullCowGame.cpp. So it lets us

52
00:03:24.000 --> 00:03:28.000
put the same text in multiple places. literally a cut and paste. So #pragma

53
00:03:28.000 --> 00:03:32.000
once. what's that about? Well it's actually not completely standard. it's not in the standards for C++

54
00:03:32.000 --> 00:03:36.000
but it's very very widely supported. and it's a way of making sure that

55
00:03:36.000 --> 00:03:40.000
anything that is imported is only imported once. It's an optimization. we may as well leave it

56
00:03:40.000 --> 00:03:44.000
there. So do we need to import any namespaces? No not at the moment. let's just

57
00:03:44.000 --> 00:03:48.000
get on and write our class. The way you do that is you say class. you give it a name.

58
00:03:48.000 --> 00:03:52.000
So what are we going to call the class? Well the same as the file in this case. it doesn't have to be. by the way.

59
00:03:52.000 --> 00:03:56.000
One thing here in C++ is that you

60
00:03:56.000 --> 00:04:00.000
can write as many classes in a single file as you want. but for simplicity. especially at the moment.

61
00:04:00.000 --> 00:04:04.000
let's just have a file and one class per file.

62
00:04:04.000 --> 00:04:08.000
One file per class. it's just going to be a lot easier. Then you put your chevrons.

63
00:04:08.000 --> 00:04:12.000
So that's your structure class. alright! Now what we want to focus on.

64
00:04:12.000 --> 00:04:16.000
here in this video. is the public interface to this class. What our class is going to consist

65
00:04:16.000 --> 00:04:20.000
of is two things. public: and private:. By the way.

66
00:04:20.000 --> 00:04:24.000
look at the way that it indents that. it indents it across here. That's a bit weird

67
00:04:24.000 --> 00:04:28.000
in my opinion. because normally you'd expect everything that's inside braces

68
00:04:28.000 --> 00:04:32.000
like this to be indented. But I allow the

69
00:04:32.000 --> 00:04:36.000
default here. because it's pretty standard across the industry. and I just treat these things

70
00:04:36.000 --> 00:04:40.000
slightly differently to normal keywords. These are just like bookmarks.

71
00:04:40.000 --> 00:04:44.000
just to say which part of the class definition you're in. So let's live with that. Anyway.

72
00:04:44.000 --> 00:04:48.000
what's this class thing about? Well look. it's going to have in general. the pattern we're going to go for is this.

73
00:04:48.000 --> 00:04:52.000
we're going to have public methods. Let me write the first public method.

74
00:04:52.000 --> 00:04:56.000
The first public method could be Reset. OK so let's just pretend it

75
00:04:56.000 --> 00:05:00.000
exists. and we declare it here. Now. we need something to come back from Reset().

76
00:05:00.000 --> 00:05:04.000
What would we have come back from Reset()? For now nothing

77
00:05:04.000 --> 00:05:08.000
but. later on. we're going to want something richer to come back. so I might put

78
00:05:08.000 --> 00:05:12.000
comment "// TODO make a more rich return

79
00:05:12.000 --> 00:05:16.000
value." What I mean by that is something that tells us a bit of a

80
00:05:16.000 --> 00:05:20.000
status about what actually came back OK. but. for now. we're going to go void

81
00:05:20.000 --> 00:05:24.000
just to flesh out the idea. I'm going to write one more method. and then. your challenge is going to be to write

82
00:05:24.000 --> 00:05:28.000
all the others. once I've given you the overview. So once you've reset the game.

83
00:05:28.000 --> 00:05:32.000
another thing you might want to be doing is saying. well

84
00:05:32.000 --> 00:05:36.000
let's get the hidden... Oh by the way. by the way before we move on. resetting the game

85
00:05:36.000 --> 00:05:40.000
in future may take in. for instance. an integer as to

86
00:05:40.000 --> 00:05:44.000
the size of the WordLength.

87
00:05:44.000 --> 00:05:48.000
OK. But for this whole section. we're just going to have a

88
00:05:48.000 --> 00:05:52.000
single word hard coded in. so we can leave that out. Alright. so

89
00:05:52.000 --> 00:05:56.000
what else might we want to do to a Bull Cow game? Well. for example. once

90
00:05:56.000 --> 00:06:00.000
we've reset the game. we might want to get the number of

91
00:06:00.000 --> 00:06:04.000
tries. So we'd get an integer back. and we could call this something like

92
00:06:04.000 --> 00:06:08.000
GetMaxTries() OK and it would return us an integer.

93
00:06:08.000 --> 00:06:12.000
So GetMaxTries. it's quite obvious what it does. I'm going to leave you to fill out the rest of these public

94
00:06:12.000 --> 00:06:16.000
methods. in a moment. after a bit more priming. Now private. what would be in private?

95
00:06:16.000 --> 00:06:20.000
Basically we don't want to concern ourselves too much with this. we want

96
00:06:20.000 --> 00:06:24.000
to concern ourselves with the public interface to this. But you are going to have

97
00:06:24.000 --> 00:06:28.000
both private functions which are helper functions. which

98
00:06:28.000 --> 00:06:32.000
allow these things to happen behind the scenes. but you are also going to have private variables.

99
00:06:32.000 --> 00:06:36.000
called member variables. and these things would be things

100
00:06:36.000 --> 00:06:40.000
like... I don't know. we may have an int MyCurrent

101
00:06:40.000 --> 00:06:44.000
Try. would be an example. and we may have an int MyMax

102
00:06:44.000 --> 00:06:48.000
Tries. Now I'll explain why I'm prefixing everything with My. later on.

103
00:06:48.000 --> 00:06:52.000
Well what I'm trying to say is. that there's a certain amount of stuff... Let me suggest another method.

104
00:06:52.000 --> 00:06:56.000
by the way. It could be something like bool Is

105
00:06:56.000 --> 00:07:00.000
Isogram().

106
00:07:00.000 --> 00:07:04.000
i.e. is a particular (string) an isogram? that would be

107
00:07:04.000 --> 00:07:08.000
examples of private methods we could imagine we want. Now. of course.

108
00:07:08.000 --> 00:07:12.000
(string) is not imported. so I'll take this away for clarity. So

109
00:07:12.000 --> 00:07:16.000
the general pattern with Object Oriented Programming is that we

110
00:07:16.000 --> 00:07:20.000
don't expose any variables publicly. we do all of the getting

111
00:07:20.000 --> 00:07:24.000
and setting of variables. however simple it is. through methods.

112
00:07:24.000 --> 00:07:28.000
The variables stay private like this. this is pure Object Oriented Programming like that and

113
00:07:28.000 --> 00:07:32.000
there's a lot to be said for it. So certainly for now this is how we're going to do things. Let's learn the rules

114
00:07:32.000 --> 00:07:36.000
before we break the rules. So I want you to kind of ignore the private members for now.

115
00:07:36.000 --> 00:07:40.000
and. in fact. I'm even going to put a comment that says something like "// Please

116
00:07:40.000 --> 00:07:44.000
try and

117
00:07:44.000 --> 00:07:48.000
ignore this and focus on the

118
00:07:48.000 --> 00:07:52.000
interface above". And spread it out.

119
00:07:52.000 --> 00:07:56.000
you could even put some chevrons to say. look upwards don't get

120
00:07:56.000 --> 00:08:00.000
concerned in the implementation details. So I'll leave a big space. Alright. let's focus right

121
00:08:00.000 --> 00:08:04.000
here on what BullCowGame is going to do as an interface. What I want you to do now is have a

122
00:08:04.000 --> 00:08:08.000
go at writing the rest of the interface. It's going to change but I just want you to think about

123
00:08:08.000 --> 00:08:12.000
how would you talk to this BullCowGame thing. if you wanted to?

124
00:08:12.000 --> 00:08:16.000
This is top down design now. we're thinking. we don't know how to make it work yet

125
00:08:16.000 --> 00:08:20.000
and it doesn't do anything. but how would we talk to it if it we wanted to? So here's your challenge! Write all the methods you

126
00:08:20.000 --> 00:08:24.000
can. I want you to write as many simple signatures as you can.

127
00:08:24.000 --> 00:08:28.000
Don't worry about getting it right. there's no right way anyway. the point is to

128
00:08:28.000 --> 00:08:32.000
think about it at this stage. and enjoy working at a higher level of thinking and abstraction.

129
00:08:32.000 --> 00:08:36.000
Go and pause the video. just write in a couple more helper methods. things that you think you might need

130
00:08:36.000 --> 00:08:40.000
in this game. OK welcome back! Before you watch

131
00:08:40.000 --> 00:08:44.000
my solution. why not share what you've got? Just share your public interface. preferably

132
00:08:44.000 --> 00:08:48.000
take a nice close in screenshot just of class

133
00:08:48.000 --> 00:08:52.000
FBullCowGame and just this bit here. As a hint for you. by the way. for taking these screenshots. there's lots

134
00:08:52.000 --> 00:08:56.000
and lots of tools but one free one is called Jing by TechSmith

135
00:08:56.000 --> 00:09:00.000
and there's also I think there's lots of others. OK but there's just a tip. Jing. J i n g.

136
00:09:00.000 --> 00:09:04.000
Cool! So let me just get you a couple of others that I think we may need. We may

137
00:09:04.000 --> 00:09:08.000
need to get back. from this game system. the current try so

138
00:09:08.000 --> 00:09:12.000
int GetCurrentTry. And we

139
00:09:12.000 --> 00:09:16.000
may want to get from this. what else? We may want to know if the game is won. so

140
00:09:16.000 --> 00:09:20.000
bool IsGameWon(). Yeah we don't let

141
00:09:20.000 --> 00:09:24.000
our main code worry about this. Our view code. i.e. the stuff

142
00:09:24.000 --> 00:09:28.000
that we've got over here in main .cpp. we let the game engine worry about that.

143
00:09:28.000 --> 00:09:32.000
What else do we want? We may want to know

144
00:09:32.000 --> 00:09:36.000
whether a guess is valid. For now we'll have bool coming back and

145
00:09:36.000 --> 00:09:40.000
CheckGuessValidity

146
00:09:40.000 --> 00:09:44.000
and incoming may be a (string). so we send

147
00:09:44.000 --> 00:09:48.000
in a (string). Again. let's make a richer

148
00:09:48.000 --> 00:09:52.000
return value for that later. What else?

149
00:09:52.000 --> 00:09:56.000
We may want to actually submit a guess. Now what's going to come back from submitting a guess?

150
00:09:56.000 --> 00:10:00.000
It's complicated because we need bulls and cows together and you can't put that in a

151
00:10:00.000 --> 00:10:04.000
single thing like an integer. so we're going to have to create something called a struct. which we'll see shortly.

152
00:10:04.000 --> 00:10:08.000
And that struct is beyond the scope of this video. it'll be in a very short future

153
00:10:08.000 --> 00:10:12.000
video. So I think we've got enough methods. If you've got something vaguely looking

154
00:10:12.000 --> 00:10:16.000
like this. you've done very well. So we've got a good few methods. you may have come up with some

155
00:10:16.000 --> 00:10:20.000
others. It really doesn't matter what's in the private interface right now. that's just messy

156
00:10:20.000 --> 00:10:24.000
implementation details. I'm not actually going to #include

157
00:10:24.000 --> 00:10:28.000
string just yet. because I want to talk about a couple of consequences

158
00:10:28.000 --> 00:10:32.000
here. What I certainly do not want you doing is using namespace

159
00:10:32.000 --> 00:10:36.000
up at the top here. Using namespace is

160
00:10:36.000 --> 00:10:40.000
considered. by some developers. a very naughty thing to do anywhere but you never ever do it in a

161
00:10:40.000 --> 00:10:44.000
header file. and that's because you can just completely lose track of what's going

162
00:10:44.000 --> 00:10:48.000
on. if you start including header files that use namespaces. So we do not

163
00:10:48.000 --> 00:10:52.000
use using namespace. And I will. in the next video. start talking about

164
00:10:52.000 --> 00:10:56.000
two things. one about how #includes and #including files that have

165
00:10:56.000 --> 00:11:00.000
#include that others works. And also. we'll talk a little bit about using namespace and

166
00:11:00.000 --> 00:11:04.000
how we don't use it here and do various other things to tidy this header file

167
00:11:04.000 --> 00:11:08.000
up. But hopefully you get the idea that this is basically just a contract.

168
00:11:08.000 --> 00:11:12.000
The most important bit of it is here and we are defining it at top level

169
00:11:12.000 --> 00:11:16.000
what we want this thing to do. without worrying about how we're going to do it. Indeed somebody else could write the code potentially.

170
00:11:16.000 --> 00:11:20.000
OK congratulations on this! I look forward to seeing your

171
00:11:20.000 --> 00:11:24.000
suggested public interfaces to your class. I know some of this.

172
00:11:24.000 --> 00:11:28.000
if you're a complete beginner. may all sound a little bit bamboozling but don't worry about it. just trust

173
00:11:28.000 --> 00:11:32.000
in the process that it's OK to write these wishful methods that don't exist yet. and that

174
00:11:32.000 --> 00:11:35.066
we can keep adding flesh to the bone as we go through it!
=======

1
00:00:00,000 --> 00:00:04,000
...

2
00:00:04,000 --> 00:00:08,000
So welcome to Using Header Files as Contracts! We're going to focus

3
00:00:08,000 --> 00:00:12,000
purely on the interface to our new class. And by the end of the video,

4
00:00:12,000 --> 00:00:16,000
we will have a whole new file called FBullCowGame.h,

5
00:00:16,000 --> 00:00:20,000
and in the case of you Xcode people, it will have created you a full .cpp file, too.

6
00:00:20,000 --> 00:00:24,000
And we'll have written class FBullCowGame like this and public,

7
00:00:24,000 --> 00:00:28,000
and we will have written some methods that are blurred out here, because I don't want to ruin

8
00:00:28,000 --> 00:00:32,000
the challenge. And there's no right or wrong answer anyway, but these are going to define the

9
00:00:32,000 --> 00:00:36,000
interface to the class, what we're allowed to do. It's a black box we're building right now.

10
00:00:36,000 --> 00:00:40,000
There will also be a private section, which will be things that it will use in order to do its

11
00:00:40,000 --> 00:00:44,000
work, but we shouldn't concern ourselves too much with that right now, we want to focus on

12
00:00:44,000 --> 00:00:48,000
what work it's going to be doing, not how it's going to be doing the work. So

13
00:00:48,000 --> 00:00:52,000
let's dive in and explore the exciting world of clases!

14
00:00:52,000 --> 00:00:56,000
So let's make our own

15
00:00:56,000 --> 00:01:00,000
class for the very first time! The way to do that, the way to add a new file, is to click on the project

16
00:01:00,000 --> 00:01:04,000
name here. So we have the solution and inside the solution we have a single project. Right-click,

17
00:01:04,000 --> 00:01:08,000
Add, and then New Item. OK so that's what we're doing on the screen.

18
00:01:08,000 --> 00:01:12,000
And then, in the case of VisualStudio here, I'm just going to add a header file

19
00:01:12,000 --> 00:01:16,000
to start with. We're just going to start with a header file here in VisualStudio, we'll add a C++ file

20
00:01:16,000 --> 00:01:20,000
later, so that we can focus on one thing at a time.

21
00:01:20,000 --> 00:01:24,000
I'm going to call it FBullCowGame. Why am I prefixing with F?

22
00:01:24,000 --> 00:01:28,000
Well if you look in the Unreal coding standard, I'll show you where to find that. We've seen it before.

23
00:01:28,000 --> 00:01:32,000
Then, they suggest prefixing.

24
00:01:32,000 --> 00:01:36,000
If you go to the naming conventions, you see "Most other classes are prefixed by F",

25
00:01:36,000 --> 00:01:40,000
so I'm going to do that so that things start to feel familiar. So there we go, FBullCowGame.h.

26
00:01:40,000 --> 00:01:44,000
Even though it's a bit weird, at least it will be familiar later.

27
00:01:44,000 --> 00:01:48,000
Hi I'm Sam and I'm helping Ben out with some of the Mac content on this course.

28
00:01:48,000 --> 00:01:52,000
So I just want to briefly show you how to create that class in Xcode

29
00:01:52,000 --> 00:01:56,000
now. So you probably want to go and right-click on the BullCow folder,

30
00:01:56,000 --> 00:02:00,000
that's this one under the project. So you've got the project here and then you've got this

31
00:02:00,000 --> 00:02:04,000
folder or as Xcode likes to call it a group. Right-click on

32
00:02:04,000 --> 00:02:08,000
this and then we want to go down to new file

33
00:02:08,000 --> 00:02:12,000
and we want to go down to OS X,

34
00:02:12,000 --> 00:02:16,000
Source, and select the .cpp file

35
00:02:16,000 --> 00:02:20,000
here. Now don't worry, we don't want the header file we actually want the

36
00:02:20,000 --> 00:02:24,000
.cpp. And hit Next, we can create our

37
00:02:24,000 --> 00:02:28,000
FBullCowGame, as Ben said.

38
00:02:28,000 --> 00:02:32,000
And we also want to create a header file, so we will

39
00:02:32,000 --> 00:02:36,000
save that. And now that there's a distinction between folders and groups

40
00:02:36,000 --> 00:02:40,000
in Xcode, so we're putting it in the BullCow group, which only

41
00:02:40,000 --> 00:02:44,000
exists inside of Xcode. We could also arrange things in different folders.

42
00:02:44,000 --> 00:02:48,000
We're not going to here, but just so you're aware, that is a distinction

43
00:02:48,000 --> 00:02:52,000
in Xcode. So I'm going to create that and as you can see

44
00:02:52,000 --> 00:02:56,000
it has created two files here, the .cpp and the

45
00:02:56,000 --> 00:03:00,000
.hpp, which is slightly different to what you'll see

46
00:03:00,000 --> 00:03:04,000
on VisualStudio. OK back to Ben! So there it is sitting under header

47
00:03:04,000 --> 00:03:08,000
files. What is this thing? It is, as I said before, something that would

48
00:03:08,000 --> 00:03:12,000
just be cut and paste onto the top of whatever we include it in.

49
00:03:12,000 --> 00:03:16,000
OK and we're going to be including it in Main.cpp, it's one

50
00:03:16,000 --> 00:03:20,000
of the things we're going to include it in, and the other thing we're going to include it in is our file, that we'll make

51
00:03:20,000 --> 00:03:24,000
in a little while, called FBullCowGame.cpp. So it lets us

52
00:03:24,000 --> 00:03:28,000
put the same text in multiple places, literally a cut and paste. So #pragma

53
00:03:28,000 --> 00:03:32,000
once, what's that about? Well it's actually not completely standard, it's not in the standards for C++

54
00:03:32,000 --> 00:03:36,000
but it's very very widely supported, and it's a way of making sure that

55
00:03:36,000 --> 00:03:40,000
anything that is imported is only imported once. It's an optimization, we may as well leave it

56
00:03:40,000 --> 00:03:44,000
there. So do we need to import any namespaces? No not at the moment, let's just

57
00:03:44,000 --> 00:03:48,000
get on and write our class. The way you do that is you say class, you give it a name.

58
00:03:48,000 --> 00:03:52,000
So what are we going to call the class? Well the same as the file in this case, it doesn't have to be, by the way.

59
00:03:52,000 --> 00:03:56,000
One thing here in C++ is that you

60
00:03:56,000 --> 00:04:00,000
can write as many classes in a single file as you want, but for simplicity, especially at the moment,

61
00:04:00,000 --> 00:04:04,000
let's just have a file and one class per file.

62
00:04:04,000 --> 00:04:08,000
One file per class, it's just going to be a lot easier. Then you put your chevrons.

63
00:04:08,000 --> 00:04:12,000
So that's your structure class, alright! Now what we want to focus on,

64
00:04:12,000 --> 00:04:16,000
here in this video, is the public interface to this class. What our class is going to consist

65
00:04:16,000 --> 00:04:20,000
of is two things, public: and private:. By the way,

66
00:04:20,000 --> 00:04:24,000
look at the way that it indents that, it indents it across here. That's a bit weird

67
00:04:24,000 --> 00:04:28,000
in my opinion, because normally you'd expect everything that's inside braces

68
00:04:28,000 --> 00:04:32,000
like this to be indented. But I allow the

69
00:04:32,000 --> 00:04:36,000
default here, because it's pretty standard across the industry, and I just treat these things

70
00:04:36,000 --> 00:04:40,000
slightly differently to normal keywords. These are just like bookmarks,

71
00:04:40,000 --> 00:04:44,000
just to say which part of the class definition you're in. So let's live with that. Anyway,

72
00:04:44,000 --> 00:04:48,000
what's this class thing about? Well look, it's going to have in general, the pattern we're going to go for is this,

73
00:04:48,000 --> 00:04:52,000
we're going to have public methods. Let me write the first public method.

74
00:04:52,000 --> 00:04:56,000
The first public method could be Reset. OK so let's just pretend it

75
00:04:56,000 --> 00:05:00,000
exists, and we declare it here. Now, we need something to come back from Reset().

76
00:05:00,000 --> 00:05:04,000
What would we have come back from Reset()? For now nothing

77
00:05:04,000 --> 00:05:08,000
but, later on, we're going to want something richer to come back, so I might put

78
00:05:08,000 --> 00:05:12,000
comment "// TODO make a more rich return

79
00:05:12,000 --> 00:05:16,000
value." What I mean by that is something that tells us a bit of a

80
00:05:16,000 --> 00:05:20,000
status about what actually came back OK, but, for now, we're going to go void

81
00:05:20,000 --> 00:05:24,000
just to flesh out the idea. I'm going to write one more method, and then, your challenge is going to be to write

82
00:05:24,000 --> 00:05:28,000
all the others, once I've given you the overview. So once you've reset the game,

83
00:05:28,000 --> 00:05:32,000
another thing you might want to be doing is saying, well

84
00:05:32,000 --> 00:05:36,000
let's get the hidden... Oh by the way, by the way before we move on, resetting the game

85
00:05:36,000 --> 00:05:40,000
in future may take in, for instance, an integer as to

86
00:05:40,000 --> 00:05:44,000
the size of the WordLength.

87
00:05:44,000 --> 00:05:48,000
OK. But for this whole section, we're just going to have a

88
00:05:48,000 --> 00:05:52,000
single word hard coded in, so we can leave that out. Alright, so

89
00:05:52,000 --> 00:05:56,000
what else might we want to do to a Bull Cow game? Well, for example, once

90
00:05:56,000 --> 00:06:00,000
we've reset the game, we might want to get the number of

91
00:06:00,000 --> 00:06:04,000
tries. So we'd get an integer back, and we could call this something like

92
00:06:04,000 --> 00:06:08,000
GetMaxTries() OK and it would return us an integer.

93
00:06:08,000 --> 00:06:12,000
So GetMaxTries, it's quite obvious what it does. I'm going to leave you to fill out the rest of these public

94
00:06:12,000 --> 00:06:16,000
methods, in a moment, after a bit more priming. Now private, what would be in private?

95
00:06:16,000 --> 00:06:20,000
Basically we don't want to concern ourselves too much with this, we want

96
00:06:20,000 --> 00:06:24,000
to concern ourselves with the public interface to this. But you are going to have

97
00:06:24,000 --> 00:06:28,000
both private functions which are helper functions, which

98
00:06:28,000 --> 00:06:32,000
allow these things to happen behind the scenes, but you are also going to have private variables,

99
00:06:32,000 --> 00:06:36,000
called member variables, and these things would be things

100
00:06:36,000 --> 00:06:40,000
like... I don't know, we may have an int MyCurrent

101
00:06:40,000 --> 00:06:44,000
Try, would be an example, and we may have an int MyMax

102
00:06:44,000 --> 00:06:48,000
Tries. Now I'll explain why I'm prefixing everything with My, later on.

103
00:06:48,000 --> 00:06:52,000
Well what I'm trying to say is, that there's a certain amount of stuff... Let me suggest another method,

104
00:06:52,000 --> 00:06:56,000
by the way. It could be something like bool Is

105
00:06:56,000 --> 00:07:00,000
Isogram().

106
00:07:00,000 --> 00:07:04,000
i.e. is a particular (string) an isogram? that would be

107
00:07:04,000 --> 00:07:08,000
examples of private methods we could imagine we want. Now, of course,

108
00:07:08,000 --> 00:07:12,000
(string) is not imported, so I'll take this away for clarity. So

109
00:07:12,000 --> 00:07:16,000
the general pattern with Object Oriented Programming is that we

110
00:07:16,000 --> 00:07:20,000
don't expose any variables publicly, we do all of the getting

111
00:07:20,000 --> 00:07:24,000
and setting of variables, however simple it is, through methods.

112
00:07:24,000 --> 00:07:28,000
The variables stay private like this, this is pure Object Oriented Programming like that and

113
00:07:28,000 --> 00:07:32,000
there's a lot to be said for it. So certainly for now this is how we're going to do things. Let's learn the rules

114
00:07:32,000 --> 00:07:36,000
before we break the rules. So I want you to kind of ignore the private members for now,

115
00:07:36,000 --> 00:07:40,000
and, in fact, I'm even going to put a comment that says something like "// Please

116
00:07:40,000 --> 00:07:44,000
try and

117
00:07:44,000 --> 00:07:48,000
ignore this and focus on the

118
00:07:48,000 --> 00:07:52,000
interface above". And spread it out,

119
00:07:52,000 --> 00:07:56,000
you could even put some chevrons to say, look upwards don't get

120
00:07:56,000 --> 00:08:00,000
concerned in the implementation details. So I'll leave a big space. Alright, let's focus right

121
00:08:00,000 --> 00:08:04,000
here on what BullCowGame is going to do as an interface. What I want you to do now is have a

122
00:08:04,000 --> 00:08:08,000
go at writing the rest of the interface. It's going to change but I just want you to think about

123
00:08:08,000 --> 00:08:12,000
how would you talk to this BullCowGame thing, if you wanted to?

124
00:08:12,000 --> 00:08:16,000
This is top down design now, we're thinking, we don't know how to make it work yet

125
00:08:16,000 --> 00:08:20,000
and it doesn't do anything, but how would we talk to it if it we wanted to? So here's your challenge! Write all the methods you

126
00:08:20,000 --> 00:08:24,000
can. I want you to write as many simple signatures as you can.

127
00:08:24,000 --> 00:08:28,000
Don't worry about getting it right, there's no right way anyway, the point is to

128
00:08:28,000 --> 00:08:32,000
think about it at this stage, and enjoy working at a higher level of thinking and abstraction.

129
00:08:32,000 --> 00:08:36,000
Go and pause the video, just write in a couple more helper methods, things that you think you might need

130
00:08:36,000 --> 00:08:40,000
in this game. OK welcome back! Before you watch

131
00:08:40,000 --> 00:08:44,000
my solution, why not share what you've got? Just share your public interface, preferably

132
00:08:44,000 --> 00:08:48,000
take a nice close in screenshot just of class

133
00:08:48,000 --> 00:08:52,000
FBullCowGame and just this bit here. As a hint for you, by the way, for taking these screenshots, there's lots

134
00:08:52,000 --> 00:08:56,000
and lots of tools but one free one is called Jing by TechSmith

135
00:08:56,000 --> 00:09:00,000
and there's also I think there's lots of others. OK but there's just a tip, Jing, J i n g.

136
00:09:00,000 --> 00:09:04,000
Cool! So let me just get you a couple of others that I think we may need. We may

137
00:09:04,000 --> 00:09:08,000
need to get back, from this game system, the current try so

138
00:09:08,000 --> 00:09:12,000
int GetCurrentTry. And we

139
00:09:12,000 --> 00:09:16,000
may want to get from this, what else? We may want to know if the game is won, so

140
00:09:16,000 --> 00:09:20,000
bool IsGameWon(). Yeah we don't let

141
00:09:20,000 --> 00:09:24,000
our main code worry about this. Our view code, i.e. the stuff

142
00:09:24,000 --> 00:09:28,000
that we've got over here in main .cpp, we let the game engine worry about that.

143
00:09:28,000 --> 00:09:32,000
What else do we want? We may want to know

144
00:09:32,000 --> 00:09:36,000
whether a guess is valid. For now we'll have bool coming back and

145
00:09:36,000 --> 00:09:40,000
CheckGuessValidity

146
00:09:40,000 --> 00:09:44,000
and incoming may be a (string), so we send

147
00:09:44,000 --> 00:09:48,000
in a (string). Again, let's make a richer

148
00:09:48,000 --> 00:09:52,000
return value for that later. What else?

149
00:09:52,000 --> 00:09:56,000
We may want to actually submit a guess. Now what's going to come back from submitting a guess?

150
00:09:56,000 --> 00:10:00,000
It's complicated because we need bulls and cows together and you can't put that in a

151
00:10:00,000 --> 00:10:04,000
single thing like an integer, so we're going to have to create something called a struct, which we'll see shortly.

152
00:10:04,000 --> 00:10:08,000
And that struct is beyond the scope of this video, it'll be in a very short future

153
00:10:08,000 --> 00:10:12,000
video. So I think we've got enough methods. If you've got something vaguely looking

154
00:10:12,000 --> 00:10:16,000
like this, you've done very well. So we've got a good few methods, you may have come up with some

155
00:10:16,000 --> 00:10:20,000
others. It really doesn't matter what's in the private interface right now, that's just messy

156
00:10:20,000 --> 00:10:24,000
implementation details. I'm not actually going to #include

157
00:10:24,000 --> 00:10:28,000
string just yet, because I want to talk about a couple of consequences

158
00:10:28,000 --> 00:10:32,000
here. What I certainly do not want you doing is using namespace

159
00:10:32,000 --> 00:10:36,000
up at the top here. Using namespace is

160
00:10:36,000 --> 00:10:40,000
considered, by some developers, a very naughty thing to do anywhere but you never ever do it in a

161
00:10:40,000 --> 00:10:44,000
header file, and that's because you can just completely lose track of what's going

162
00:10:44,000 --> 00:10:48,000
on, if you start including header files that use namespaces. So we do not

163
00:10:48,000 --> 00:10:52,000
use using namespace. And I will, in the next video, start talking about

164
00:10:52,000 --> 00:10:56,000
two things, one about how #includes and #including files that have

165
00:10:56,000 --> 00:11:00,000
#include that others works. And also, we'll talk a little bit about using namespace and

166
00:11:00,000 --> 00:11:04,000
how we don't use it here and do various other things to tidy this header file

167
00:11:04,000 --> 00:11:08,000
up. But hopefully you get the idea that this is basically just a contract.

168
00:11:08,000 --> 00:11:12,000
The most important bit of it is here and we are defining it at top level

169
00:11:12,000 --> 00:11:16,000
what we want this thing to do, without worrying about how we're going to do it. Indeed somebody else could write the code potentially.

170
00:11:16,000 --> 00:11:20,000
OK congratulations on this! I look forward to seeing your

171
00:11:20,000 --> 00:11:24,000
suggested public interfaces to your class. I know some of this,

172
00:11:24,000 --> 00:11:28,000
if you're a complete beginner, may all sound a little bit bamboozling but don't worry about it, just trust

173
00:11:28,000 --> 00:11:32,000
in the process that it's OK to write these wishful methods that don't exist yet, and that

174
00:11:32,000 --> 00:11:35,066
we can keep adding flesh to the bone as we go through it!
>>>>>>> 1d882d5df15102d9c45644c583da4ffc34bcfea1

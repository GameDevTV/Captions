WEBVTT

1
00:00:00.000 --> 00:00:04.000
So, welcome to a relatively

2
00:00:04.000 --> 00:00:08.000
short and sweet video, Handling Game Win Condition. We're

3
00:00:08.000 --> 00:00:12.000
simply going to get ourselves to a state where, should the player win the game by,

4
00:00:12.000 --> 00:00:16.000
for example, typing the right

5
00:00:16.000 --> 00:00:20.000
word, which is planet in my case then it says "WELL DONE - YOU WIN!".

6
00:00:20.000 --> 00:00:24.000
And of course, if they fail to put the right word in enough times,

7
00:00:24.000 --> 00:00:28.000
planes planes planes. In this case, I've set my

8
00:00:28.000 --> 00:00:32.000
variable to 3 rather than 8, just to make it happen quicker. Then,

9
00:00:32.000 --> 00:00:35.333
we get a "Better luck next time!" So, that's what we're doing in this video!

10
00:00:35.333 --> 00:00:39.333
So, let's take a look at this! We're inside PlayGame(), and it's

11
00:00:39.333 --> 00:00:43.333
at the end of PlayGame(), once the game has finished and we've exited this while loop that we

12
00:00:43.333 --> 00:00:47.333
want to summarize the game, like you won you lost etc.

13
00:00:47.333 --> 00:00:51.333
and give them some instructions. Now, I've just noticed that we do not return anything from

14
00:00:51.333 --> 00:00:55.333
this void method. Whether you should or shouldn't is a moot point,

15
00:00:55.333 --> 00:00:59.333
really. Is there any point in saying return? Nothing from a void method. Well,

16
00:00:59.333 --> 00:01:03.333
if you look back at the lecture, simplifying with functions, I

17
00:01:03.333 --> 00:01:07.333
suggested we do always do that there. And also, if you look at the slide for

18
00:01:07.333 --> 00:01:11.333
simplifying with functions, around about slide number 35 in this

19
00:01:11.333 --> 00:01:15.333
deck, then you'll see a couple of suggestions as to why you should or shouldn't return. But I'm going to

20
00:01:15.333 --> 00:01:19.333
suggest you do say return, it's no big deal either way. OK, so summarize

21
00:01:19.333 --> 00:01:23.333
the game. How are we going to do that? Well, I'm going to write a method to do that, so...

22
00:01:23.333 --> 00:01:27.333
Or am I? Ha ha ha, I think you're going to write a method to do

23
00:01:27.333 --> 00:01:31.333
that, because it's going to be good practice and you have everything you need to do it. So,

24
00:01:31.333 --> 00:01:35.333
I want you to define PrintGameSummary(). Arrange for

25
00:01:35.333 --> 00:01:39.333
a "You won / bad luck" better luck next time, type of message. Decide where in the program

26
00:01:39.333 --> 00:01:43.333
it goes, write a function for it, and test that it works. So,

27
00:01:43.333 --> 00:01:47.333
go ahead, do that, write that message out based on whether they've won or now,

28
00:01:47.333 --> 00:01:51.333
and I'll see you in a moment!.

29
00:01:51.333 --> 00:01:55.333
Welcome back! So, we're going to call this thing a print game summary. So, we're outside of a

30
00:01:55.333 --> 00:01:59.333
class here, and even if we're in a class, we would still have had to prototype this. It's

31
00:01:59.333 --> 00:02:03.333
just that if we're in a class the header file provides these prototypes

32
00:02:03.333 --> 00:02:07.333
and then come through this cut and past in the include. And if we're outside

33
00:02:07.333 --> 00:02:11.333
a class like this, then we just need to write a prototype at the top. So,

34
00:02:11.333 --> 00:02:15.333
the prototype is going to be void, because we don't need anything to come back.

35
00:02:15.333 --> 00:02:19.333
PringGameSummary();

36
00:02:19.333 --> 00:02:23.333
taking in no arguments. Cool! So, let's take this

37
00:02:23.333 --> 00:02:27.333
PrintGameSummary() and actually define it down here. PlayGame(), GetValidGuess(),

38
00:02:27.333 --> 00:02:31.333
AskToPlayAgain(), PrintGameSummary(). Cool! What are we going to say and how is this going to

39
00:02:31.333 --> 00:02:35.333
work? Well, it's going to depend whether they won or not, right? So, we're going to want to say something

40
00:02:35.333 --> 00:02:39.333
like if get is game

41
00:02:39.333 --> 00:02:43.333
1, so (BCGame.IsGame1()).

42
00:02:43.333 --> 00:02:47.333
Well, if it's 1 then we're going to say this.

43
00:02:47.333 --> 00:02:51.333
We're going to say something like... What shall we say?

44
00:02:51.333 --> 00:02:55.333
cout << "WELL Done

45
00:02:55.333 --> 00:02:59.333
- YOU WIN!"

46
00:02:59.333 --> 00:03:03.333
OK, so "WELL DONE - YOU WIN!"

47
00:03:03.333 --> 00:03:07.333
And then, probably a backslash n, and we'll try that in a minute.

48
00:03:07.333 --> 00:03:11.333
And if the game isn't won, otherwise the game must be not won, in which case

49
00:03:11.333 --> 00:03:15.333
we'll say something simple like...

50
00:03:15.333 --> 00:03:19.333
Of course, it's standard cout. Look at my underlines there telling me off! Standard

51
00:03:19.333 --> 00:03:23.333
cout. We're

52
00:03:23.333 --> 00:03:27.333
going to say something like, "Better luck

53
00:03:27.333 --> 00:03:31.333
next time!\n". Hmm, do you want to play

54
00:03:31.333 --> 00:03:35.333
again, by the way? We better let them know it's with the same

55
00:03:35.333 --> 00:03:39.333
word, hidden word.

56
00:03:39.333 --> 00:03:43.333
Because some people ask, you know, is it the same hidden word? So, let's

57
00:03:43.333 --> 00:03:47.333
try this! Are we there? Not quite! We? have

58
00:03:47.333 --> 00:03:51.333
PrintGameSummary() but we're never called it, so I just need to call it, at the bottom

59
00:03:51.333 --> 00:03:55.333
of my PlayGame() method.

60
00:03:55.333 --> 00:03:59.333
PrintGameSummary(), OK let's see if this works! So, we

61
00:03:59.333 --> 00:04:03.333
get to the end of the PlayGame(), we PrintGameSummary(), and we just

62
00:04:03.333 --> 00:04:07.333
print based on a simple condition. Conditional code

63
00:04:07.333 --> 00:04:11.333
and you've got to love it! So, if I go planes, then it says oh you're nearly there! If I

64
00:04:11.333 --> 00:04:15.333
go planet it goes, ooh you're there! "WELL DONE - YOU WIN!" "Do you want to play again with the same hidden

65
00:04:15.333 --> 00:04:19.333
word?" No! Bye bye! And if I say yes, let's just check

66
00:04:19.333 --> 00:04:23.333
that works. Cool, and we'll

67
00:04:23.333 --> 00:04:27.200
try again! OK fantastic, so that's a useful improvement!

68
00:04:27.200 --> 00:04:31.200
Let's move on! Let's get some more stuff that we need to do done. Let's go to our to do's,

69
00:04:31.200 --> 00:04:35.200
see what else we need to do. Now, I happen to know there's a couple of things we

70
00:04:35.200 --> 00:04:39.200
didn't put in a task list but this one we did.

71
00:04:39.200 --> 00:04:43.200
Reset() needs to return a more rich return value.

72
00:04:43.200 --> 00:04:47.200
Why would it want to do that? Well, the idea there is that perhaps the

73
00:04:47.200 --> 00:04:51.200
hidden word, that we've set in Reset(), is not an isogram, it is

74
00:04:51.200 --> 00:04:55.200
in some other way not valid. But we don't yet

75
00:04:55.200 --> 00:04:59.200
have methods for not isogram or is isogram or

76
00:04:59.200 --> 00:05:03.200
all lowercase, so that's what we should turn our attention to. Now, where do we need to do

77
00:05:03.200 --> 00:05:07.200
that? It was inside the method that talks about

78
00:05:07.200 --> 00:05:11.200
whether the guess is valid or not. Remember where it says guess check, check validity? Let's go to the

79
00:05:11.200 --> 00:05:15.200
definition of CheckGuessValidity(). Really, I should have put TODO's

80
00:05:15.200 --> 00:05:19.200
here. We should have had, and I'll do it right now, a couple of TODO's saying

81
00:05:19.200 --> 00:05:23.200
TODO write

82
00:05:23.200 --> 00:05:27.200
method or function, because we need a

83
00:05:27.200 --> 00:05:31.200
function for whether or not it's all lowercase, and

84
00:05:31.200 --> 00:05:35.200
in fact, let's put it here in the TODO. And we need

85
00:05:35.200 --> 00:05:39.200
one here.  "TODO write function". OK, so our

86
00:05:39.200 --> 00:05:43.200
task lists really should have been looking more like

87
00:05:43.200 --> 00:05:47.200
this. You don't have to manage your task lists but it's a useful thing, and this is for something

88
00:05:47.200 --> 00:05:53.300
we needed to do. So, a couple of methods we need. One is not lowercase and the other is not isogram.

89
00:05:53.300 --> 00:05:57.300
So, we'll make implementing the not isogram method the subject

90
00:05:57.300 --> 00:06:01.300
of the next video, which will unlock a load of potential to get this game

91
00:06:01.300 --> 00:06:07.333
completely finished. So, well done getting this far, and I'll see you soon!


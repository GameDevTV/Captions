
1
00:00:00,000 --> 00:00:04,000
Welcome to

2
00:00:04,000 --> 00:00:08,000
Introducing Input Binding! A little note on these slides, I've changed the version

3
00:00:08,000 --> 00:00:12,000
number of Unreal that I'm using, to the top-right of the slides because it was

4
00:00:12,000 --> 00:00:16,000
conflicting with Udemy's new overlay, that they put down at the bottom right. I've also removed

5
00:00:16,000 --> 00:00:20,000
the last digit, because changes in the last digit in 4.10.2

6
00:00:20,000 --> 00:00:24,000
4.10.3 don't really matter. So, you just need to make sure,

7
00:00:24,000 --> 00:00:28,000
if you're watching this well after 4.10 is out,

8
00:00:28,000 --> 00:00:32,000
that you're aware the I'm on 4.10 and that may change things. You can always

9
00:00:32,000 --> 00:00:36,000
install previous versions in the Epic Games Launcher. So, in this video,

10
00:00:36,000 --> 00:00:40,000
we are going to look into Settings > Project Settings > Engine > Input.

11
00:00:40,000 --> 00:00:44,000
We're going to explain that action mappings are used for on / off actions, and that axis

12
00:00:44,000 --> 00:00:48,000
mappings are used for analog values like sticks or

13
00:00:48,000 --> 00:00:52,000
steering wheels or rudder pedals,

14
00:00:52,000 --> 00:00:56,000
that you can give players a way of re-mapping their keys. We're not going to show you how to do that right now,

15
00:00:56,000 --> 00:01:00,000
but I just want you to bear in mind it can be player re-mappable, just like when you reconfigure your controls in a game.

16
00:01:00,000 --> 00:01:04,000
A many keys combined to one action, which is useful, and

17
00:01:04,000 --> 00:01:08,000
how to call a function on a key press or release. So that's it! By the end

18
00:01:08,000 --> 00:01:12,000
of it, we're going to be in a very simple situation, where you can click say the Right

19
00:01:12,000 --> 00:01:17,233
Mouse Button, and you'll see grab pressed like that coming up in the output log. OK, let's dive in!

20
00:01:17,233 --> 00:01:21,233
So, let's take a look at this input component issue then. Firstly,

21
00:01:21,233 --> 00:01:25,233
what is this input component and where is it? Well, firstly I'll ask

22
00:01:25,233 --> 00:01:29,233
the first question first, I think. If we go to the Class Viewer... Sorry to those Mac users who currently can't

23
00:01:29,233 --> 00:01:33,233
get to things that aren't in the Actors class, but if we look for input component, you can see here

24
00:01:33,233 --> 00:01:37,233
that we have ActorComponent. InputComponent

25
00:01:37,233 --> 00:01:41,233
is inherited from ActorComponent. OK, so it's just another Actor

26
00:01:41,233 --> 00:01:45,233
Component. And if we play the game and then inspect the

27
00:01:45,233 --> 00:01:49,233
DefaultPawn that comes up, you'll find that at runtime we have this thing here. Pawn

28
00:01:49,233 --> 00:01:53,233
InputComponent. You can hover over it, in the Details Tab, and you can read all about it. You can also

29
00:01:53,233 --> 00:01:57,233
do Control and Alt and it'll tell you more stuff, so do have a little read of that.

30
00:01:57,233 --> 00:02:01,233
You're welcome to pause the video now and do that, if you like. It may not all make sense

31
00:02:01,233 --> 00:02:05,233
to you, but if we stop it playing and then have a look at the...

32
00:02:05,233 --> 00:02:09,233
Well, you can't stop it playing and look at the DefaultPawn because he's not there, but what you can do is look at

33
00:02:09,233 --> 00:02:13,233
the DefaultPawn blueprint. You'll notice it's actually not here. This

34
00:02:13,233 --> 00:02:17,233
input component comes into play at runtime. OK,

35
00:02:17,233 --> 00:02:21,233
so we need to go find that. It's going to end up

36
00:02:21,233 --> 00:02:25,233
against the pawn, just like the PhysicsHandle or the Grabber. Look let's see again and runtime! We run,

37
00:02:25,233 --> 00:02:29,233
we inspect the DefaultPawn that's instantiated... Whoops, we

38
00:02:29,233 --> 00:02:33,233
don't click on Marketplace! [Laughs}] And then, you go to Details and you can see that you've got

39
00:02:33,233 --> 00:02:37,233
the Grabber and the PhysicsHandle, but you've got this new PawnInputComponent, which is just of type

40
00:02:37,233 --> 00:02:41,233
UInputComponent. So, what I want you to do before we go any further is go

41
00:02:41,233 --> 00:02:45,233
ahead and find that component, just like we did previously with the PhysicsHandle. Find the

42
00:02:45,233 --> 00:02:49,233
input component. Create an appropriate private member. Check for the

43
00:02:49,233 --> 00:02:53,233
component, as we did with the Physics Handle. Log a similarly helpful

44
00:02:53,233 --> 00:02:57,233
error, if it's not attached. By the way, you could be using assert here, rather than errors.

45
00:02:57,233 --> 00:03:01,233
We'll cover assert shortly in the course, probably in the next section just to keep the number of concepts

46
00:03:01,233 --> 00:03:05,233
down, but yes, assert, if you're more advanced, is another way of doing things.

47
00:03:05,233 --> 00:03:09,233
Don't bother trying to remove the test, remove the component

48
00:03:09,233 --> 00:03:13,233
the test this time. It's not easy to stop that input component, coming on the Pawn at

49
00:03:13,233 --> 00:03:17,233
runtime. So, don't bother trying to remove it, but just make sure that you've got all your error code

50
00:03:17,233 --> 00:03:21,233
there. And when it actually does find the

51
00:03:21,233 --> 00:03:25,233
input component, we are going to write code in that top part of the if statement. You know in the PhysicsHandle

52
00:03:25,233 --> 00:03:29,233
we just wrote the comment saying, well, you know, we've got the PhysicsHandle! Yippee, we don't need to do anything right now!

53
00:03:29,233 --> 00:03:33,233
Well, in this case, with the input component just pop me another log entry and perhaps just a

54
00:03:33,233 --> 00:03:37,233
say physics input component found, and then, we'll replace that later on

55
00:03:37,233 --> 00:03:41,233
with the actual input code. So, go ahead, pause the video, at least find the input component for me.

56
00:03:41,233 --> 00:03:45,233
Cool!

57
00:03:45,233 --> 00:03:49,233
Welcome back! So, let's go take a little look at this thing, over in Visual

58
00:03:49,233 --> 00:03:53,233
Studio! We're going to do something almost identical to what we did before with the

59
00:03:53,233 --> 00:03:57,233
PhysicsHandle. We're going to say U because that's the name of classes that are component

60
00:03:57,233 --> 00:04:01,233
types. Then, we're going to start looking for something like input, and we find UInputComponent.

61
00:04:01,233 --> 00:04:05,233
Wicked! It's a pointer again!

62
00:04:05,233 --> 00:04:09,233
InputComponent = null pointer.

63
00:04:09,233 --> 00:04:13,233
OK, so we don't need to comment that,again I don't think, because look it couldn't be...

64
00:04:13,233 --> 00:04:17,233
It's self commenting, self documenting. It's just

65
00:04:17,233 --> 00:04:21,233
don't comment it. [Laughs] So, what next? Now, we're going to go

66
00:04:21,233 --> 00:04:25,233
into the actual implementation file and go ahead, not in the engine,

67
00:04:25,233 --> 00:04:29,233
in the Games, and go ahead and actually do some stuff with it! Find it! We're going to do it

68
00:04:29,233 --> 00:04:33,233
in the Start again, and we're going to have code that is very similar to this. So, I'm actually

69
00:04:33,233 --> 00:04:37,233
going to copy the "// Look for attached PhysicsHandle", and I'm going to say "// Look for attached

70
00:04:37,233 --> 00:04:41,233
Input Component".

71
00:04:41,233 --> 00:04:45,233
"(only appears at run time)". OK, so we're going to

72
00:04:45,233 --> 00:04:49,233
say InputComponent = GetOwner()->FindComponentBy

73
00:04:49,233 --> 00:04:53,233
Class but <UInputComponent>();

74
00:04:53,233 --> 00:04:57,233
OK, so if (InputComponent).

75
00:04:57,233 --> 00:05:01,233
That's why this is hopefully a good exercise, because it's just like the last one.

76
00:05:01,233 --> 00:05:05,233
Then, we do something. Well, we're going to log to say that we've got

77
00:05:05,233 --> 00:05:09,233
it. We're going to

78
00:05:09,233 --> 00:05:13,233
get rid of most of this stuff at the end, and just simply say

79
00:05:13,233 --> 00:05:17,233
("input component found") that'll do!

80
00:05:17,233 --> 00:05:21,233
And it's not an error. We can put it as a warning, just so we can see it. We'll, start

81
00:05:21,233 --> 00:05:25,233
using other types of log, at some point, just to make life clearer, but this is working

82
00:05:25,233 --> 00:05:29,233
for now. It's just re-enforcing the way we're using logs, but as soon as it gets boring,

83
00:05:29,233 --> 00:05:33,233
don't worry, I'll change the logs on you and make it different again. So, what are we missing?

84
00:05:33,233 --> 00:05:37,233
We're not missing the PhysicsHandle component, we're missing the Input Component. So,

85
00:05:37,233 --> 00:05:41,233
that's all we need to do, is very very similar to what's above. It's just modified for

86
00:05:41,233 --> 00:05:45,233
the input component. Let's just test this! So, over in Unreal, let's just

87
00:05:45,233 --> 00:05:49,233
compile and run and we should see a yellow log

88
00:05:49,233 --> 00:05:53,233
saying input component found, if all is well. Let's see what happens!

89
00:05:53,233 --> 00:05:57,233
Compiling, compiling, compiling! Taking a little longer than usual, because I've actually,

90
00:05:57,233 --> 00:06:01,233
between videos, done a clear out just because I wanted

91
00:06:01,233 --> 00:06:05,233
to practice something. OK, so let's take a little look! It says

92
00:06:05,233 --> 00:06:09,233
here... I don't know why I'm moving the screen around. It says, "Input component found" there, which is

93
00:06:09,233 --> 00:06:13,233
great news! So, with the Input Component found, it's time to start processing the input.

94
00:06:13,233 --> 00:06:17,233
Let's start by going to Settings and Project Settings and then

95
00:06:17,233 --> 00:06:21,233
Input, under Engine. So, Settings, Project Settings, and then, under the Engine Section

96
00:06:21,233 --> 00:06:25,233
you go to Input. So, new stuff! We have Action Mappings and Axis

97
00:06:25,233 --> 00:06:29,233
Mappings. Actions are binary on or off buttons, mouse clicks, etc. Axis are

98
00:06:29,233 --> 00:06:33,233
analog like sticks or rudders or joysticks or steering wheels or whatever.

99
00:06:33,233 --> 00:06:37,233
We won't bother with the advanced stuff. So, we're going to have a new action. So, you click the

100
00:06:37,233 --> 00:06:41,233
plus and then a dropdown appears, and we're just going to call it grab, because that is

101
00:06:41,233 --> 00:06:45,233
the action. Now, next to grab I'm going to bind two keys. One is going to be,

102
00:06:45,233 --> 00:06:49,233
just to show that we can do more than two, one is going to be say the Left Shift. Now, you might

103
00:06:49,233 --> 00:06:53,233
as well just search for it. Oops, that was very unfortunate!

104
00:06:53,233 --> 00:06:57,233
OK, Left Shift, there we go! And then we will also look for the

105
00:06:57,233 --> 00:07:01,233
mouse button and the Right Mouse Button.

106
00:07:01,233 --> 00:07:05,233
So, either Right Mouse Button or Left Shift will map to an Action

107
00:07:05,233 --> 00:07:09,233
that we're calling Grab, and you need to spell it in the code exactly like this.

108
00:07:09,233 --> 00:07:13,233
So, that's it! And this is the type of stuff that the player can control, if you give them access

109
00:07:13,233 --> 00:07:17,233
to it in a Menu System, for example. By the way, this is where you remap your keys.

110
00:07:17,233 --> 00:07:21,233
So, two mappings to one action. OK, so just come out of there once your binding is setup,

111
00:07:21,233 --> 00:07:24,466
like that, or use whatever keys you want.

112
00:07:24,466 --> 00:07:28,466
So, over in our BeginPlay() we already have the code that goes

113
00:07:28,466 --> 00:07:32,466
and looks for the attached InputComponent. What we want to do next, instead of logging out or

114
00:07:32,466 --> 00:07:36,466
as well as logging out, we can "// Bind

115
00:07:36,466 --> 00:07:40,466
the input axis". Now, what does that mean? Well, let me show you! We go

116
00:07:40,466 --> 00:07:44,466
InputComponent, which is the component we found. Now, what is that? It's a pointer right,

117
00:07:44,466 --> 00:07:48,466
so we use our arrow operator .BindAction.

118
00:07:48,466 --> 00:07:52,466
I'm sorry if I said axis, BindAction. We're going to bind an action to

119
00:07:52,466 --> 00:07:56,466
a method, so let's look at this function. One thing

120
00:07:56,466 --> 00:08:00,466
at a time. Constant FName ActionName. What is that?

121
00:08:00,466 --> 00:08:04,466
Well, it's just ("Grab"). That's what we used, it's got to be spelled

122
00:08:04,466 --> 00:08:08,466
exactly the same as we said up in the InputPanel. OK, what next? Well,

123
00:08:08,466 --> 00:08:12,466
next we need an Input Event. It's an enumerator and we want to be able to

124
00:08:12,466 --> 00:08:16,466
press. It's about pressing the button, you've got IE_

125
00:08:16,466 --> 00:08:20,466
input event Pressed). OK, there's another one for released as well, by the way.

126
00:08:20,466 --> 00:08:24,466
So up next is the object that this is going to operate on. We're going to use this,

127
00:08:24,466 --> 00:08:28,466
which is a reference to the component itself, the Grabber component.

128
00:08:28,466 --> 00:08:32,466
OK, so when we push a key that is mapped to ("grab"), so

129
00:08:32,466 --> 00:08:36,466
when we push highlighting the words as I go, the key that

130
00:08:36,466 --> 00:08:40,466
is mapped to ("Grab") or either of the keys in this case, then

131
00:08:40,466 --> 00:08:44,466
we look for a method on this which is the grabber. And then, finally what's

132
00:08:44,466 --> 00:08:48,466
the method name? Now, the signature of this is horrible. Look at it! It's a horrible

133
00:08:48,466 --> 00:08:52,466
complicated signature, so I'm not going to go into detail about what all these generic

134
00:08:52,466 --> 00:08:56,466
syntax means right now. Well, what you do need here, is you need

135
00:08:56,466 --> 00:09:00,466
to point to a function, which doesn't exist yet. So, the function

136
00:09:00,466 --> 00:09:04,466
is going to be just simply called grab. So, how do we specify it? That's the

137
00:09:04,466 --> 00:09:08,466
question. Well, what I'm going to do is I'm just going to specify it, and then, in the next

138
00:09:08,466 --> 00:09:12,466
lecture, I'm going to talk a little bit about why we specified it

139
00:09:12,466 --> 00:09:16,466
that way and then we'll go on to use it. So, the way that you do it is, you need a reference,

140
00:09:16,466 --> 00:09:20,466
and then, we fully qualify i.e. UGrabber as the

141
00:09:20,466 --> 00:09:24,466
class and then the method name is Grab. And you just leave

142
00:09:24,466 --> 00:09:28,466
it like that, without any brackets around it.

143
00:09:28,466 --> 00:09:32,466
That is just qualifying the method name. So, it's just complaining because &UGrabber::Grab) doesn't exist.

144
00:09:32,466 --> 00:09:36,466
Let's make Grab, and I think for now, it needs to be private.

145
00:09:36,466 --> 00:09:40,466
It can be private, that's fine. It can be void Grab()

146
00:09:40,466 --> 00:09:44,466
and it's a method, so that's all there is. And I will actually comment this one. It's

147
00:09:44,466 --> 00:09:48,466
"// Ray-cast

148
00:09:48,466 --> 00:09:52,466
and grab what's in reach" is what Grab is actually going to do.

149
00:09:52,466 --> 00:09:56,466
So, void Grab(); OK! And then we actually define Grab

150
00:09:56,466 --> 00:10:00,466
over here. so, void UGrabber because that's the class name, just

151
00:10:00,466 --> 00:10:04,466
like any method we've defined here. Grab() OK

152
00:10:04,466 --> 00:10:08,466
and then it's going to do something, and what it's going to do is define

153
00:10:08,466 --> 00:10:12,466
what was commented over here in the header file, "// Ray-cast and grab what's in reach".

154
00:10:12,466 --> 00:10:16,466
So, this method will get called. That's

155
00:10:16,466 --> 00:10:20,466
what we're doing here. We are providing the address of,

156
00:10:20,466 --> 00:10:24,466
which is the address of operator the Grabber OK. So, we're going into that in a little

157
00:10:24,466 --> 00:10:28,466
bit more detail in the next video, to keep this one at a reasonable length, but that's

158
00:10:28,466 --> 00:10:32,466
how you bind the Grab component. OK,

159
00:10:32,466 --> 00:10:36,466
let's just see it in action! Let's do a quick log and

160
00:10:36,466 --> 00:10:40,466
then we'll leave this video and we will challenge you to do the other bit! Let's copy this log

161
00:10:40,466 --> 00:10:44,466
file here, and just say it's a Warning just

162
00:10:44,466 --> 00:10:48,466
so it's yellow. TEXT

163
00:10:48,466 --> 00:10:52,466
("Grab pressed").

164
00:10:52,466 --> 00:10:56,466
OK, so let's see this in action with the final closing

165
00:10:56,466 --> 00:11:00,466
bracket. Let's go to Unreal, check it compiles,

166
00:11:00,466 --> 00:11:04,466
play it! Now, let's click the Right-Hand

167
00:11:04,466 --> 00:11:08,466
Mouse Button, Grab pressed, Grab pressed, or the Left Shift, Grab pressed. OK, so

168
00:11:08,466 --> 00:11:12,466
I'll leave you with this code on the screen. You can hopefully see what's going on there. As I said, there's a little bit more detail

169
00:11:12,466 --> 00:11:16,466
in the next lecture, but we are binding any key that maps to "Grab", when it's

170
00:11:16,466 --> 00:11:20,466
pressed. We look at this, which is the Grabber, and we look for

171
00:11:20,466 --> 00:11:24,466
a method called Grab, and this is an address of operator,

172
00:11:24,466 --> 00:11:28,466
so it effectively jumps to this method, when we push a key.

173
00:11:28,466 --> 00:11:30,666



WEBVTT

1
00:00:00.000 --> 00:00:04.000
Welcome to Reducing

2
00:00:04.000 --> 00:00:08.000
Code in "Hot Loops"! A little bit of a long video. this one! You might want to grab a cup of tea and be ready

3
00:00:08.000 --> 00:00:12.000
for the disciplined art of refactoring. So. in this video. we're going to

4
00:00:12.000 --> 00:00:16.000
explain that a "hot loop" is code that gets called often. So TickComponent is a great

5
00:00:16.000 --> 00:00:20.000
example of that. Any code in there gets called every single frame. So. I want you to be

6
00:00:20.000 --> 00:00:24.000
aware of code that you know is going to get called a lot.

7
00:00:24.000 --> 00:00:28.000
and you want to make it very clear what happens every

8
00:00:28.000 --> 00:00:32.000
tick. so when you look at your TickComponent method. it wants to be super

9
00:00:32.000 --> 00:00:36.000
clear what's going on. So. we're going to refactor our code for speed.

10
00:00:36.000 --> 00:00:40.000
but also make it ready for the PhysicsHandle code to be

11
00:00:40.000 --> 00:00:44.000
put in. By the end. the game will be doing exactly what it's doing now but with a much

12
00:00:44.000 --> 00:00:49.900
better foundation. So. no progress on the surface but tons of progress behind the scenes.

13
00:00:49.900 --> 00:00:53.900
So. let's roll up our sleeves and refactor this thing. making way for

14
00:00:53.900 --> 00:00:57.900
inserting the PhysicsHandle. The code just really isn't ready right now. so let's take a

15
00:00:57.900 --> 00:01:01.900
look through it. Firstly. let's zoom right out to the header file. Remember

16
00:01:01.900 --> 00:01:05.900
what I said a little while ago. in the previous section. that the public section of your header file

17
00:01:05.900 --> 00:01:09.900
really should sing what your class does. So. we have a constructor. which is

18
00:01:09.900 --> 00:01:13.900
normal. We have a BeginPlay() and a Tick. which are normal for any engine driven

19
00:01:13.900 --> 00:01:17.900
class because the engine needs to be able to begin play and Tick. The

20
00:01:17.900 --> 00:01:21.900
one thing that we could argue should be in the public would be

21
00:01:21.900 --> 00:01:25.900
Grab() and Release(). Now. for this example. we're going to keep the Grab() and Release() here as

22
00:01:25.900 --> 00:01:29.900
private. and we're going to handle the input as we have been.

23
00:01:29.900 --> 00:01:33.900
inside this grabber class. But it's a little bit mixing concepts.

24
00:01:33.900 --> 00:01:37.900
Really you could consider that we could have an input controller somewhere else.

25
00:01:37.900 --> 00:01:41.900
that this grabber registers with it. and that actually it's the job of the

26
00:01:41.900 --> 00:01:45.900
input controller. for example. or the player controller or something

27
00:01:45.900 --> 00:01:49.900
else to call the grabber and say: Hey. grabber attempt Grab() or hey grabber.

28
00:01:49.900 --> 00:01:53.900
Release(). And then. we wouldn't have any of the input component code inside

29
00:01:53.900 --> 00:01:57.900
here. So. just be aware of that. but we're going to leave it here for now. because it's manageable

30
00:01:57.900 --> 00:02:01.900
and it's simple and it keeps us just inside one class. while

31
00:02:01.900 --> 00:02:05.900
we're trying to take on a lot of different concepts. Alright. so the

32
00:02:05.900 --> 00:02:09.900
API is basically nothing. There's nothing you can do from the outside. which

33
00:02:09.900 --> 00:02:13.900
is fine apart from the caveat about the input I just told you. Fine. everything else looks good!

34
00:02:13.900 --> 00:02:17.900
Now. what we want to do is go over to the .cpp file and start thinking about

35
00:02:17.900 --> 00:02:21.900
well. how can we improve things here? Alright. so let's

36
00:02:21.900 --> 00:02:25.900
start at the top. the Grabber() the Constructor(). Fine. I'm just going to get rid of a couple of empty

37
00:02:25.900 --> 00:02:29.900
comment lines there. The constructor is otherwise very simple. It needs to tick.

38
00:02:29.900 --> 00:02:33.900
i.e. the Tick has to be called. so let's leave it!

39
00:02:33.900 --> 00:02:37.900
OK now. BeginPlay()! We want to run Super::BeginPlay(). We always leave that in place.

40
00:02:37.900 --> 00:02:41.900
It's because the thing up the class hierarchy. i.e. the U

41
00:02:41.900 --> 00:02:45.900
ActorComponent that we inherit from may do some stuff in the engine that we want

42
00:02:45.900 --> 00:02:49.900
to be done. so you generally leave this in place. Grabber reporting for duty! We

43
00:02:49.900 --> 00:02:53.900
can probably lose that. OK. what next? Well. I don't like BeginPlay(). it doesn't

44
00:02:53.900 --> 00:02:57.900
fit on one screen. So. I'm just going to simply factor out the "// Look

45
00:02:57.900 --> 00:03:01.900
for attached Physics Handle" bit. You can just literally cut the code.

46
00:03:01.900 --> 00:03:05.900
We're going to do this manually this time. rather than letting the system do it for us.

47
00:03:05.900 --> 00:03:09.900
We're going to come down below and make a new method. so I'm going to indent it.

48
00:03:09.900 --> 00:03:13.900
and we've got to decide what method we would be calling here in BeginPlay(). What are we

49
00:03:13.900 --> 00:03:17.900
actually doing here? Well. we are FindPhysics

50
00:03:17.900 --> 00:03:21.900
Component(); That's what we're doing. we're finding the Physics

51
00:03:21.900 --> 00:03:25.900
Component! Only finding it and not doing anything else. so let's now void Find

52
00:03:25.900 --> 00:03:29.900
PhysicsComponent() or PhysicsHandleComponent().

53
00:03:29.900 --> 00:03:33.900
Yeah. probably PhysicsHandleComponent. I'll do that in a second!

54
00:03:33.900 --> 00:03:37.900
So. let's just rename this to PhysicsHandleComponent(). See if the refactor

55
00:03:37.900 --> 00:03:41.900
tool will behave.

56
00:03:41.900 --> 00:03:45.900
OK. void

57
00:03:45.900 --> 00:03:49.900
FindPhysicsHandleComponent() and of course. we need to pop this in the headed file.

58
00:03:49.900 --> 00:03:53.900
So. it can just be down here. and

59
00:03:53.900 --> 00:03:57.900
this is "// Find attached

60
00:03:57.900 --> 00:04:01.900
physics handle". OK cool! So. we find

61
00:04:01.900 --> 00:04:05.900
the PhysicsHandleComponent. Better be good and just check that this still runs! There's no

62
00:04:05.900 --> 00:04:09.900
reason it shouldn't. but when you're refactoring you want to be constantly checking

63
00:04:09.900 --> 00:04:13.900
that your code still runs. So. trying to run this.

64
00:04:13.900 --> 00:04:17.900
we get another compilation error. Now. this is not a helpful error. Look here. other compilation

65
00:04:17.900 --> 00:04:21.900
error doesn't tell you which file. and another error here talking about the

66
00:04:21.900 --> 00:04:25.900
make file. Hmm interesting. nothing on the output. so here's a tip. Here's a way

67
00:04:25.900 --> 00:04:29.900
of getting a better error. By the way. if you accidentally detach like this. drag the bar

68
00:04:29.900 --> 00:04:33.900
and drop it in there. Go over to Unreal and do your compilation over there.

69
00:04:33.900 --> 00:04:37.900
The reason is that. the errors you're going to get in the output log are going to be more helpful

70
00:04:37.900 --> 00:04:41.900
in general. So. once it's compiled. let's see what error we get.

71
00:04:41.900 --> 00:04:45.900
see if we can track this down. show the log. OK. so it's saying that in Grabber

72
00:04:45.900 --> 00:04:49.900
.h on line 42 it's not expecting a closed curly

73
00:04:49.900 --> 00:04:53.900
brace. Did I miss a semicolon? Grabber.h line

74
00:04:53.900 --> 00:04:57.900
42. Grabber.h not .cpp interestingly. Ah. yes

75
00:04:57.900 --> 00:05:01.900
I missed a semicolon on the end there. Cool. let's try again. see if it'll build

76
00:05:01.900 --> 00:05:05.900
now. Not in here. back in Unreal! Let's just click Compile.

77
00:05:05.900 --> 00:05:09.900
That will. as I said before. actually save the file in Visual Studio which is pretty

78
00:05:09.900 --> 00:05:13.900
helpful right. So it's compiling away. I think it's going to fail again. because I spotted

79
00:05:13.900 --> 00:05:17.900
another error when we were in there. but I want to kind of run home

80
00:05:17.900 --> 00:05:21.900
how to handle these errors. because you'll create them when you're

81
00:05:21.900 --> 00:05:25.900
refactoring like this. So. let's take another look at the log. Ooh. lots of errors!

82
00:05:25.900 --> 00:05:29.900
The question now comes. where's the first one? OK. so we get to line

83
00:05:29.900 --> 00:05:33.900
42 of Grabber.cpp. That's the earliest line number and it says physics

84
00:05:33.900 --> 00:05:37.900
handle not declared. OK. so let's go to line

85
00:05:37.900 --> 00:05:41.900
42 of the .cpp. What's wrong with Physics

86
00:05:41.900 --> 00:05:45.900
Handle? So. look through the comment and say. if I was a compiler and I'm reading this. why am I not

87
00:05:45.900 --> 00:05:49.900
expecting to read PhysicsHandle. Well look. the problem is that in

88
00:05:49.900 --> 00:05:53.900
C++ you need to put the name of the class in front of

89
00:05:53.900 --> 00:05:57.900
the method name. So boom! One way to prevent that happening. by the way.

90
00:05:57.900 --> 00:06:01.900
is to go to the .h file. in the future. Define your

91
00:06:01.900 --> 00:06:05.900
functions in here. right-click and say Quick Actions. Create Definition.

92
00:06:05.900 --> 00:06:09.900
There you go! So that was the problem there. Let's go

93
00:06:09.900 --> 00:06:13.900
back and run. So. hopefully this is useful stuff about how to track down errors. Start with

94
00:06:13.900 --> 00:06:17.900
the earliest line number. use the Unreal output. Good so that's working! OK. so

95
00:06:17.900 --> 00:06:21.900
let's carry on now. at a little bit higher speed. We find the PhysicsHandleComponent.

96
00:06:21.900 --> 00:06:25.900
Now this next lump of code. what does this do? Well. I'm actually going to write the name of the method

97
00:06:25.900 --> 00:06:29.900
first. and I'm going to do it in the .h file. I think this lot sets up the input

98
00:06:29.900 --> 00:06:33.900
component. so let's make one here. let's make a method. "// Setup

99
00:06:33.900 --> 00:06:37.900
input component". Nice and simple void Setup

100
00:06:37.900 --> 00:06:41.900
InputComponent(). Now. why am I

101
00:06:41.900 --> 00:06:45.900
bothering with a comment there. you might ask?

102
00:06:45.900 --> 00:06:49.900
As it is. it's not worth it. "// Setup attached input

103
00:06:49.900 --> 00:06:53.900
component" or "assumed attached input component'. That's more

104
00:06:53.900 --> 00:06:57.900
useful because it reminds us that it needs to be attached. Now.

105
00:06:57.900 --> 00:07:01.900
if we were a little bit further into the course. I would be getting you to make these

106
00:07:01.900 --> 00:07:05.900
things attached. Well. this does attach itself. the input component. but I would be getting you to make the Physics

107
00:07:05.900 --> 00:07:09.900
HandleComponent attach itself. rather than attaching it to the blueprint but we're going to keep it simple.

108
00:07:09.900 --> 00:07:13.900
OK. setup input component. Let's us the ability to create a definition

109
00:07:13.900 --> 00:07:17.900
over here. Now. you have to wait a little bit and there you go.

110
00:07:17.900 --> 00:07:21.900
you can just to the .cpp. and this time it's actually made us a setup

111
00:07:21.900 --> 00:07:25.900
input component and it's put it immediately below FindPhysicsHandle

112
00:07:25.900 --> 00:07:29.900
Component. in the same order as the header file. I like that! That's nice! Now that all

113
00:07:29.900 --> 00:07:33.900
we need to do is go find the code that I've highlighted up in the BeginPlay().

114
00:07:33.900 --> 00:07:37.900
cut it. and pop it down into SetupInputComponent(). Now. if you're a beginner. you'll wonder

115
00:07:37.900 --> 00:07:41.900
why is all this worth it. what's he doing? Well. bear with me a second.

116
00:07:41.900 --> 00:07:45.900
I'm going to put the comment above. You'll see that this will suddenly read a lot more nicely.

117
00:07:45.900 --> 00:07:49.900
Let's look now at our begin play.

118
00:07:49.900 --> 00:07:53.900
All we have to do in here is make the method call.

119
00:07:53.900 --> 00:07:57.900
SetupInputComponent();

120
00:07:57.900 --> 00:08:01.900
OK. and look how clear it is what happens in

121
00:08:01.900 --> 00:08:05.900
BeginPlay(). You can also. if you put your comments above your methods.

122
00:08:05.900 --> 00:08:09.900
if you need extra commenting here you can collapse down these two methods.

123
00:08:09.900 --> 00:08:13.900
so we don't even need to see the lines with a little minus sign there.

124
00:08:13.900 --> 00:08:17.900
and then. that's all super clear. On one screen. now. we can see

125
00:08:17.900 --> 00:08:21.900
exactly what goes on. without worrying ourselves about the exact details unless we decide to

126
00:08:21.900 --> 00:08:25.900
go in and see what's happening. So I'll just sort out a little bit of indentation in here I've spotted

127
00:08:25.900 --> 00:08:29.900
and we're good to go. Alright. let's continue to move down. What should we

128
00:08:29.900 --> 00:08:33.900
be doing when we grab? Well.

129
00:08:33.900 --> 00:08:37.900
is it actually a Grab or is it an attempted Grab? Let's leave it as Grab for now. keep

130
00:08:37.900 --> 00:08:41.900
life a bit simple. What we are actually going to do is. we're going to "// Try

131
00:08:41.900 --> 00:08:45.900
and reach any actors with physics body

132
00:08:45.900 --> 00:08:49.900
collision channel

133
00:08:49.900 --> 00:08:53.900
set".

134
00:08:53.900 --> 00:08:57.900
We're going to reach out to that distance and try and do that. Then. we're

135
00:08:57.900 --> 00:09:01.900
going to say "// If we hit something

136
00:09:01.900 --> 00:09:05.900
then attach a physics

137
00:09:05.900 --> 00:09:09.900
handle". OK. we're going to do that later. so I'm going to put a

138
00:09:09.900 --> 00:09:13.900
TODO in. "// TODO attach

139
00:09:13.900 --> 00:09:17.900
physics handle". I'm going to put a triple forwardslash

140
00:09:17.900 --> 00:09:21.900
here. because we're probably going to have blocks of code. OK. so that's

141
00:09:21.900 --> 00:09:25.900
the fundamental of what happens on Grab(). Let's move down. What happens on Release()?

142
00:09:25.900 --> 00:09:29.900
Well. you say ("Grab released") and you "// TODO" in a bit

143
00:09:29.900 --> 00:09:33.900
"release physics

144
00:09:33.900 --> 00:09:37.900
handle". We don't know how to do that yet but we'll get there.

145
00:09:37.900 --> 00:09:41.900
OK. now we're into a hot loop here. We're into an important bit which is the TickComponent.

146
00:09:41.900 --> 00:09:45.900
The question is lots of stuff happens in Tick right now. what should happen in

147
00:09:45.900 --> 00:09:49.900
Tick? Well. Tick actually should be really simple. It should say something like

148
00:09:49.900 --> 00:09:53.900
"// if the physics handle is attached"

149
00:09:53.900 --> 00:09:57.900
then we should just "// move

150
00:09:57.900 --> 00:10:01.900
the object that we're holding" each frame.

151
00:10:01.900 --> 00:10:05.900
otherwise we just do nothing. Hmm.

152
00:10:05.900 --> 00:10:09.900
Well. that makes it simpler. so all the stuff below needs to go

153
00:10:09.900 --> 00:10:13.900
somewhere else. So. what does all

154
00:10:13.900 --> 00:10:17.900
this stuff below? We're getting the player view point. we're reaching out to a certain distance. we're

155
00:10:17.900 --> 00:10:21.900
drawing a debug line. which I'm going to get rid of. I'm going to get rid of the debug line. we don't need it.

156
00:10:21.900 --> 00:10:25.900
We're setting up some query parameters. we're doing a line trace. we've seeing

157
00:10:25.900 --> 00:10:29.900
loads of stuff. which we don't need to be doing any of it unless we're actually

158
00:10:29.900 --> 00:10:33.900
holding on to something. because it's when we push the

159
00:10:33.900 --> 00:10:37.900
Grab() that we're going to try and find something and do the line trace. So. try

160
00:10:37.900 --> 00:10:41.900
and reach. let's say "line trace

161
00:10:41.900 --> 00:10:45.900
and see if we reach any actors with physics body".

162
00:10:45.900 --> 00:10:49.900
OK. so you line trace here. I'm going to put it in capitals.

163
00:10:49.900 --> 00:10:53.900
only when you push the Grab Key. only one quick instantaneous

164
00:10:53.900 --> 00:10:57.900
line trace. and we don't need to be doing anything every single tick.

165
00:10:57.900 --> 00:11:01.900
So. what does all of this code below

166
00:11:01.900 --> 00:11:05.900
do? Let's abstract it away into another method and not call it unless we need to.

167
00:11:05.900 --> 00:11:09.900
and then split it up further if we need to. Well. what I think it does is. it gets the

168
00:11:09.900 --> 00:11:13.900
first physics body in reach. so I will put a little comment.

169
00:11:13.900 --> 00:11:17.900
"// Return hit for first

170
00:11:17.900 --> 00:11:21.900
physics body in

171
00:11:21.900 --> 00:11:25.900
reach". And it's going to be something like this. What we're going to have is a method that

172
00:11:25.900 --> 00:11:29.900
is actually constant. It's going to return an

173
00:11:29.900 --> 00:11:33.900
FHitResult and it's going to be called GetFirstPhysics

174
00:11:33.900 --> 00:11:37.900
BodyInReach(). It doesn't

175
00:11:37.900 --> 00:11:41.900
need any parameters. but that does mean we'll need another helper function or two.

176
00:11:41.900 --> 00:11:45.900
OK. and we're sorry we're not actually giving it

177
00:11:45.900 --> 00:11:49.900
any implementation here. So. that is the name of the method. Let's just go ahead

178
00:11:49.900 --> 00:11:53.900
and define it. Give it a second to pop the code in.

179
00:11:53.900 --> 00:11:57.900
There it is! Pop over to Grabber.cpp! So. let's try taking

180
00:11:57.900 --> 00:12:01.900
all of the code from the Tick.

181
00:12:01.900 --> 00:12:05.900
all this stuff apart from our comments about what it's going to do in the future and put it in

182
00:12:05.900 --> 00:12:09.900
this new method. so first physics body in reach. There you go! We are

183
00:12:09.900 --> 00:12:13.900
going to have to return an FHit result. so paste all that in. and then.

184
00:12:13.900 --> 00:12:17.900
I'm going to put this method at the bottom. because it's kind of the latest code we've written.

185
00:12:17.900 --> 00:12:21.900
Just do that now. down at the bottom here below TickComponent.

186
00:12:21.900 --> 00:12:25.900
There you go. so let's go back up to Grab and actually call the Get

187
00:12:25.900 --> 00:12:29.900
FirstPhysicsBodyInReach();

188
00:12:29.900 --> 00:12:33.900
And that's what

189
00:12:33.900 --> 00:12:37.900
we're going to do when we grab. I'm just going to highlight those and go Shift. Tab. and go back.

190
00:12:37.900 --> 00:12:41.900
Later on. this is where we'd do the physics handle. Let's see what happens now. when we

191
00:12:41.900 --> 00:12:45.900
actually try and Grab. Does the GetFirstPshysicsBodyInReach() work properly.

192
00:12:45.900 --> 00:12:49.900
and are we back roughly to where we were. with the code all neatened out apart from the

193
00:12:49.900 --> 00:12:53.900
problems all being kind of shuffled down do that huge GetFirstPhysicsBodyInReach() method.

194
00:12:53.900 --> 00:12:57.900
which we'll refactor in a second.

195
00:12:57.900 --> 00:13:01.900
So. let's play the game! Grab. press. and release. Let's get to the table. Ah hah.

196
00:13:01.900 --> 00:13:05.900
"Line trace hit" "Grab released". That's good. so the line trace is now hitting the things

197
00:13:05.900 --> 00:13:09.533
that we want. so that code is a lot more efficient now.

198
00:13:09.533 --> 00:13:13.533
The Grab is working! We've got some more work to do. TODO attached the physics

199
00:13:13.533 --> 00:13:17.533
handle. and then. there's a lot of stuff in GetFirstPhysicsBodyInReach().

200
00:13:17.533 --> 00:13:21.533
That might get further refactored when we start working with the physics handle. That's pretty

201
00:13:21.533 --> 00:13:25.533
good! Let's just have a look at our Task List. just to attach and release physics handle. All looking

202
00:13:25.533 --> 00:13:29.533
good! So. at the end of this. you have absolutely no progress in one

203
00:13:29.533 --> 00:13:33.533
way but in that your code does the same thing. but you've reduced

204
00:13:33.533 --> 00:13:37.533
a lot of work inside the tick component. which is taking a lot of stuff outside of the hot loop

205
00:13:37.533 --> 00:13:41.533
and you have prepared yourself for where you're going to be inserting

206
00:13:41.533 --> 00:13:45.533
the physics handle code. So congratulations! That's refactoring. it's one of those things

207
00:13:45.533 --> 00:13:49.533
you just have to grit your teeth and do. and I'll see you in the next video.

208
00:13:49.533 --> 00:13:50.399


